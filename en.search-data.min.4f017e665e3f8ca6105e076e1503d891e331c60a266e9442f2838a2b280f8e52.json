[{"id":0,"href":"/engineering/intro/community/","title":"Community","section":"Engineering","content":" Art by Talon Creations. Characters from Left to Right: Soatok, Cadey, Loial, Vega, Cendyne, Mimir, Vordex Ⅰ - Community # When you think engineer, what traits come to mind?\nIf you\u0026rsquo;re anything like most people, you probably thought \u0026ldquo;smart\u0026rdquo; and \u0026ldquo;antisocial\u0026rdquo;.\nWhile I can\u0026rsquo;t speak to how truthful that stereotype may be, I can tell you for sure that in engineering, not knowing how to make friends, ask for help, and talk with others will make you all but useless.\nThe only way to be successful in this journey is to make friends along the way. Some of this gets really, really difficult. You will get stuck. Having friends to help makes it possible. Find group chats on telegram, join IRC channels, get on some forums, and ask questions on Reddit. Working with people is a lot more fun, and you\u0026rsquo;ll learn so much more.\nWhile a small community of people you can talk to 1-on-1 is better, having inspiration each day can provide a huge boost to your motivation and creativity, so I recommend following some nerdy news sites. This also helps with staying current on the cutting edge and security issues. Some sites I use nearly daily for finding good, new material are:\nHacker News\nHackaday.io\nHackster.io\nBleeping Computer\nMorning Cup Of Coding\nWhile much less active, I\u0026rsquo;ve found some of these to have great information as well:\nN-O-D-E\nPOC||GTFO\nDefcon Videos on YouTube (There are many more links in Appendix A3 - \u0026lsquo;Other Great Resources\u0026rsquo;\nYou don\u0026rsquo;t need to be great at everything to participate, plus you probably know more than you think.\nYes, there is always a relevant xkcd, and yes, you will always feel like everyone knows more than you. Don\u0026rsquo;t stress about asking stupid questions:\nxkcd #1954 Advice for communication # Frequently in chats, whether telegram, IRC, slack, or discord, someone says something like this:\nAnyone know rust? Having an issue.\nHow that question is often read:\nCan someone to commit to being able to solve my problem with rust, spending as much time as necessary, without them even knowing what the actual problem is or if it\u0026rsquo;s even a rust problem?\nHopefully it\u0026rsquo;s clear why questions like this rarely result in direct answers.\nThere are very few people who could be called experts in every facet of whatever is being asked Imposter syndrome is common Most people won\u0026rsquo;t write that blank check for time/help commitment Instead, share:\nThe goal - \u0026ldquo;Trying to query for a list of tags on a post\u0026rdquo; - See The XY Problem The problem - \u0026ldquo;I\u0026rsquo;m getting back these results\u0026rdquo; The expectation - \u0026ldquo;but it should be these results\u0026rdquo; If possible, a simplified example. 3v4l for php, jsfiddle for html/js/css, etc. are great, otherwise a paste site. What you\u0026rsquo;ve already tried This allows anyone there to try to help. Many skills transfer well to other languages or platforms. At minimum, you might get an idea for something you haven\u0026rsquo;t tried yet. Sometimes you\u0026rsquo;ll even solve your own problem while narrowing down the simplest possible test case.\nOh, and don\u0026rsquo;t snark at well-intentioned answers. It\u0026rsquo;s rude and discourages participation.\n- https://bad.pet/q/ The technical community can be ruthless with it comes to expecting people to have \u0026lsquo;basic\u0026rsquo; knowledge sometimes, but don\u0026rsquo;t let it get to you. I do want to provide some general ideas that, while not universally, are generally shared among the engineering and surrounding community:\nⅠ - Any good solution is fast, easy to understand, and above all elegant.\nⅡ - Any task which can be automated should be - if a computer can do it faster than you, then you shouldn\u0026rsquo;t do it by hand\nⅢ - Any problem that has been solved in a way that satisfies the above two rules should be looked at for reuse before reinventing the wheel\nⅣ - Any question which has already been answered should not be left to a human to answer again.\nⅤ- All knowledge should be free†\n† within practicality, trade secrets are obviously a thing, and I\u0026rsquo;m not crazy. I mean, like publicly funded research and what not. While the specifics of this rule vary among engineering types, it is generally a core belief.\nOn the note of point Ⅲ…\nThough the one I was stressing here was really Ⅳ.\nYou should always check the internet before asking in chat.\nIt\u0026rsquo;s not that we\u0026rsquo;re being rude, it\u0026rsquo;s just a matter of courtesy. If you\u0026rsquo;re unsure of the answer, or it\u0026rsquo;s validity, by all means ask! But asking good questions, and only when necessary, will quickly help you make friends in chat much faster.\nNote, there is one exception: if chat is currently talking about something that you don\u0026rsquo;t know about and it\u0026rsquo;s already relevant to the conversation, it\u0026rsquo;s totally reasonable to interject and ask for a super quick primer on what\u0026rsquo;s going on or a relevant link.\nThis may seem obvious, but a good number of technical chats die because of exactly the aforementioned problems. (or gatekeeping, but that\u0026rsquo;s a whole different matter…) so please don\u0026rsquo;t ask things a search engine can already answer (but don\u0026rsquo;t feel bad asking a question when the all mighty Google can\u0026rsquo;t)\nTLDR: RTFM \u0026amp; STFW http://www.catb.org/esr/faqs/smart-questions.html#rtfm\nBalancing Interests # I think balancing your creativity among other interests and looking for ties between them can lead to more good than any of the things mentioned above.\nTo drive this point home, here\u0026rsquo;s a little idea generator with some data baked in from various hobbies of mine:\nGIMME AN IDEA!\nI enjoy playing music, reading, and writing, so I find inspiration in these media. There are countless electrical hardware and software tools that use hands on programming when playing music. In books, I find ideas for what an author may have thought only futuristic when written. I never know when my mind will strike similar gold when writing for myself.\nFind a hobby and bend it to this as you go along.\nLike photography? Learn about the internals of a camera.\nLike cars? Look up how the ODB2 interface actually works.\nNothing is magic and the internet will likely have answers and give you ways to apply this knowledge that you care about.\nIn general, I\u0026rsquo;ve found site specific forms and Reddit to be the best platforms for most things, with some others finding their main following in other places though. For example, I\u0026rsquo;m in a large technical chat group with Furries on Telegram and some open source tools still thrive on IRC.\nAlso, if your reaction to that is \u0026ldquo;Furries? How can that be relevant?\u0026rdquo; Well, normally it\u0026rsquo;s not. Most of what we talk about is just normal engineering-y topics, but having something else in common helps. That said, there\u0026rsquo;s more cross over in any community than you might think: No matter what you care about, know there\u0026rsquo;s a wide range of communities that would be thrilled to have you, and you can always combine what you learn here with any of the other interests you have to make the things you\u0026rsquo;re passionate about better!\nThe maker and hacker communities tend to focus a lot on popularity and getting your name out there. While obviously it\u0026rsquo;s cool to do so, don\u0026rsquo;t let likes and followers be your motivation. Make cool things to make cool things, and people will come. The number one best thing to see on the internet is someone that is passionate about something sharing those passions. It\u0026rsquo;s better to have a dozen good friends that share those passions, than 25k followers that just go \u0026lsquo;oh, neat\u0026rsquo; anyway.\nArt by @Wonivero Further reading # (Seriously, all of these are very good)\nHacker Spaces are Awesome! (YouTube, LiveOverflow)\nAssholes: A Probing Examination\nDeath to Bullshit (mirror)\nHacker-Laws (GitHub)\nProof of X\nHackerspaces [TODO] # Building a Hackerspace\n"},{"id":1,"href":"/posts/ai3/","title":"What's up with this whole AI thing?","section":"Blog","content":" This page is targeted at a non-technical audiance.\nRight now, AI is moving crazy fast in multiple areas:\nGenerating images in most any style, including photo-realistic to the point of deception This is quickly moving to include video generation as well This also includes manipulating existing images Generating descriptions of photos Generating speech from text in a way that is almost totally convincing This includes making new speech models from existing recordings of voices Generating near-human quality text responses to textual input Chat bots, obviously, - but a whole lot more. Generating transcripts from audio - speech to text I want you to take a second to stop and consider some of the implications of that.\nThe bad things - political fakes, fraud, etc - is probably what comes to mind first, but also think of some of the good.\nYou may have realized these advancements are more than the sum of their parts, we can hook them together.\nThere are already systems where you can send a picture of your math homework which includes a diagram necessary to understand the problem and have the system understand the input and give you the correct answer in text, along with steps to get there. (Actually, we\u0026rsquo;ve had these for some time, but they\u0026rsquo;re now getting scary good)\n*BUT, the answer may be wrong and the steps may be bullshit. Depending on the complexity, it\u0026rsquo;s likely to get it right, but it may not and it will sound confident when incorrect.\nIt\u0026rsquo;s possible to make a computer where you talk to it and draw it pictures and give it text, and it does the same back.\nThat\u0026rsquo;s not sci-fi anymore.\nBut I think that still doesn\u0026rsquo;t quite put into perspective - it\u0026rsquo;s still too abstract and you still probably have this pre-conception about what it means to talk to a chat-bot.\nThis isn\u0026rsquo;t your typical chat bot. It\u0026rsquo;s a chat bot that can do many very difficult, lots-of-schooling needed tasks in a few seconds. This includes giving good medical advice, financial advice given data, and writing code. That last point, I think, is particularly interesting even if you never intend to write code.\nIf you\u0026rsquo;ve spent any significant amount of time using a computer, at some point you\u0026rsquo;ve wanted to some menial task involving a boat load of files and just said \u0026ldquo;Nope, fuck that\u0026rdquo;. For those of that know how to code, we might write something to do it for us, but out of laziness and value for our time we\u0026rsquo;re also likely to say \u0026ldquo;Nope, fuck that\u0026rdquo; too. But we don\u0026rsquo;t have to value an AI\u0026rsquo;s time:\nBut I am 1000% confident soon even this will be overly complicated. You\u0026rsquo;ll just be able to select the files, hit the \u0026ldquo;AI\u0026rdquo; button, and say \u0026ldquo;Rename these files to be the title\u0026rdquo; and it will just work, because it will write code like this on the fly and run it for you. It\u0026rsquo;s also likely it will be able to try multiple times, checking it\u0026rsquo;s own work if it doesn\u0026rsquo;t get it right the first time.\nThat flow where you ask for something and it writes code to do it, tries it, checks its own work, repeat if necessary is likely to be totally transparent to the user soon. This means you\u0026rsquo;ll be able to ask the computer to do things that if you couldn\u0026rsquo;t program you simply wouldn\u0026rsquo;t have known how to do before.\nI doubt it\u0026rsquo;ll be making a full video game for you any time soon, but it can definitely assist you in every step along the way of making one.\nOf course, it can do pretty much anything else too:\nIt can write beautiful poetry or give you feedback on your own. It can watch as you type in a spreadsheet and suggest formulas It can read a whole page of text and help you skip to the part you care about Yes mom, that means you can skip to the recipe without reading someone\u0026rsquo;s life story. Remember early smart phones? # When the first iPhone came out it was obvious that it was the future, but it took everyone some time to actually make it good. App developers had to solve new problems that arose because using big meaty fingers to touch a screen was a lot different than using a full size keyboard and mouse. Web pages had to be redesigned to handle the vertical layout and smaller interface. This took time to figure out.\nThat where this is at right now. We have the tech - the models exist and there\u0026rsquo;s no doubt they\u0026rsquo;re the future - but they\u0026rsquo;re not integrated into society yet, at least not well. That\u0026rsquo;s the billion trillion dollar problem that Microsoft, Apple, and Google are all desperately throwing money at to be the first past the post, because once we have something with this tech fully integrated, not using it would be like going back to dumb-phone.\nWe\u0026rsquo;re currently at the launch of the iPhone first gen. There have been other smart phones - BlackBerry, etc. - but this is the inflection point. It\u0026rsquo;s still not in everybody\u0026rsquo;s hands, some people haven\u0026rsquo;t caught on (and some never will) but it\u0026rsquo;s a defining moment. You have the pre-smartphone and the post-smartphone era. This is that again.\nTech Bros # As you\u0026rsquo;ve read this, you may be thinking \u0026ldquo;I\u0026rsquo;ve heard this all before, BitCoin was the future too\u0026rdquo;\nGOD. FUCKING. DAMNIT.\nAll of those cryptocurrency morons share the same handful of brain cells. I\u0026rsquo;m actually not sure that after the end of covid that didn\u0026rsquo;t all just wind up somewhere drinking koolaid chanting their praises to the almighty Elon.\nI do not say \u0026ldquo;This is the future\u0026rdquo; lightly. I also, and this is vital to understand, didn\u0026rsquo;t say it\u0026rsquo;s a future I want. I think it\u0026rsquo;s really cool and can do some real good and it can also do some harm. I\u0026rsquo;m not invested in it\u0026rsquo;s success in a literal, monetary sense. I\u0026rsquo;m only invested in my friends and family not falling behind, so I\u0026rsquo;m trying to help them see what\u0026rsquo;s coming so they can keep up.\nI am also already finding it greatly helpful for a small but not insignificant number of tasks and want to encourage others to at least try it.\nGood or Bad? # Bad:\nIt uses an ungodly amount of power causing insane carbon emissions It can stop people from making genuine, human connections Yes, there are already \u0026ldquo;AI Girlfriends\u0026rdquo; and that situation is weirdly complicated People blindly trust the output Kids may over-use it in school and not learn This could cause more problems as people don\u0026rsquo;t know how to check if the output is good, making a feedback loop with the above point. There are criminal uses, including Making AI-nudes of people without their consent Faking voices of loved ones for scams It is already shot-blasting the internet with low-quality ad-farm shit making it harder to find good, human authored content currently, the good ones can only run on what is damn-near a super computer, meaning it\u0026rsquo;s running in ☁️ the Cloud™ ☁️, so you can\u0026rsquo;t really control it and it may require a subscription fee. This, hopefully, won\u0026rsquo;t stay the case. Good:\nIt can review human authored content and find potential mistakes. It can be used artistically as a tool, not a replacement (inspiration, not generation) It makes doing some tasks much, much, much faster. Especially menial tech work. It\u0026rsquo;s a great teaching aid - it can explain things quite well and prompt further questions about understanding. It can be used by the blind to ask what an object is It can lower the barrier to entry for extremely technical positions and make difficult, technical work faster provided the user can adequately review the output I have already technical perused projects I wouldn\u0026rsquo;t have before because they wouldn\u0026rsquo;t have justified themselves with their time-cost to benefit before So, the big question, does the good outweigh the bad?\nI think yes. I think it will finally allow normal people to take advantage of computer in a way that will reduce the number of people doing bullshit jobs (nobody in 2024 should have a job of \u0026ldquo;Data Entry\u0026rdquo; when a computer vision system is more accurate, faster, etc.), allow people in technical roles to make better products faster, it will help doctors treat patients, etc, etc.\nI also think, or hope, that while some people suck, the percent of people that suck is massively outweighed by the percent of people that are awesome. AI is a tool, and any tool can be misused. So long as more good is coming from it than bad, well, why not, right?\nFWIW, if you\u0026rsquo;re anti-AI because of the harms it can do, but you\u0026rsquo;re not also advocating for an assault weapon ban and better gun safety laws, you\u0026rsquo;re a hypocrite of the highest order How do I try it? # The simplest, easiest to use tools you can try right now, for free, with no prior skill in using these are ChatGPT and DALL·E 2. Note that DALL·E 2 is starting to show it\u0026rsquo;s age: There are much better image generators now, but it\u0026rsquo;s easy to try.\nBoth of these models are locked down. You can\u0026rsquo;t ask them to generate anything not safe for work, at least not without getting your account banned.\n"},{"id":2,"href":"/posts/fairangels/","title":"A Fair Scammer \u0026 #004584 Angels","section":"Blog","content":"Last week I went to an airshow with the Blue Angels and yesterday I went to the Nebraska State Fair.\nThe Fair Scammer # My state, Nebraska, is largely agricultural, so it should be no surprise that the fair had multiple buildings stuff to the brim with animals - cattle, sheep, chickens, pigs - and while I find factory farming of the animals stomach churning, I\u0026rsquo;m also not about to stop eating meat (I guess my stomach is more powerful than my will), and either way, that\u0026rsquo;s not really what was on display here. Largely, these were show animals and they\u0026rsquo;d been well cared for. It appeared that the farmers and FFA kids, while they knew it was to be meat ultimately, mostly respected the animals. There was a \u0026ldquo;birthing pavilion\u0026rdquo; as well, and baby animals will melt anyone\u0026rsquo;s heart, mine included. It was great.\nThere was also a vendors area. You know what I\u0026rsquo;m talking about, the big show room floor lined with booth after booth of products where half of them are right on the edge of scams.\nThree of them stood out to me:\nA definitely from Ali-Express \u0026ldquo;Every Classic Game\u0026rdquo; console, with an NES mario demo.\n(note, I don\u0026rsquo;t care about any pirating those games, but it\u0026rsquo;s still a little funny to see it in this environment)\nA magnetic \u0026ldquo;healing\u0026rdquo; bracelet stand\nNormally, I mess with these people. Strangely though, this one was staffed by old ladies that weren\u0026rsquo;t trying to sell the bullshit. While there were signs up that said it, the wasn\u0026rsquo;t really any predatory vibes from the staff themselves. So, they get a pass.\nA guy selling super over priced android TV boxes that give you \u0026ldquo;Free TV, movies\u0026rdquo; and includes tech support. I didn\u0026rsquo;t actually see the price, but I think it was about $150\nOkay, 1. and 2. are thinly veiled in slime, but it\u0026rsquo;s not oozing everywhere enough for me care. 3. though? That\u0026rsquo;s some toxic waste.\nLet me provide some context here:\nMost of them have malware (Linus Tech Tips). They\u0026rsquo;re about $30 on amazon, about $20 on AliExpress This is definitely piracy (again, I don\u0026rsquo;t care, but I think most of the customers were being mislead to think it wasn\u0026rsquo;t) So, I happened to walk by this while an older couple was about to be suckered into it. I gave it one of those raised eyebrow, wow this is bullshit smirks, and the wife looked at me wondering what I thought. I leaned over and whispered,\n\u0026ldquo;It\u0026rsquo;s piracy, it\u0026rsquo;s probably loaded with malware, and it\u0026rsquo;s about $30 on Amazon\u0026rdquo;\nAt seeing me whisper to his to-no-longer-be-customer, he went on the defensive. \u0026ldquo;What were you saying?\u0026rdquo;\n\u0026ldquo;Oh, just that it\u0026rsquo;s a fantastic product. I\u0026rsquo;ve seen plenty of Android TV boxes and they\u0026rsquo;re all\u0026hellip; great.\u0026rdquo;, I replied with an intentionally obviously forced smile and nod.\nAt which point, and bless her for doing this, the wife of the older couple piped in, \u0026ldquo;Is this secure on my network?\u0026rdquo; - she really sold it as an honest question too.\nNow, at this point our scammer friend knew what was up, and said \u0026ldquo;I always love when tech guys like you come around. I used to shoo you away, but now I know your lot knows how to sell em\u0026rsquo; for me - care to tell them how a VPN will protect their network?\u0026rdquo;\n\u0026ldquo;Oh sure, a VPN - a virtual private network - is an added service you can, and would need to, buy if you run a product like this. It doesn\u0026rsquo;t prevent you from getting viruses, but it does prevent your internet service provider- like Comcast, Allo, Windstream, whatever - from seeing that you\u0026rsquo;re using a device like this to download pirated movies. \u0026quot;\nOur scammy friend immediately responds, \u0026ldquo;It\u0026rsquo;s not downloading it\u0026rsquo;s streaming.\u0026rdquo;\nWhich, this one actually got me for a moment - this is such a weird argument to make. I realize to a non-technical person that may sound somewhat reasonable, but he also knew I knew what I was talking about by that point. Weirder, I don\u0026rsquo;t think he was intentionally making a bad argument, I think he legitimately didn\u0026rsquo;t understand that to stream something just means downloading it and throwing it away when done - that there\u0026rsquo;s no difference. He also didn\u0026rsquo;t defend the piracy, so, I guess at least he choose a hill with some chance at defense to die on? I tried to explain this for about 10 seconds getting in a good,\n\u0026ldquo;Uh, that\u0026rsquo;s the same thing? Streaming just means-\u0026rdquo;\nBefore being cut off by him again, this time just saying,\n\u0026ldquo;I\u0026rsquo;m going to call security on you\u0026rdquo;\nWhich, uh, what? Dude, I paid to get into the fair and you\u0026rsquo;re about to call security because you don\u0026rsquo;t like that someone is calling you out on your product? Okay.\nI tried to keep talking a bit, but kept getting cut off by the security thread. I was never actually rude, never raised my voice, and kept a smile on the entire time. After about the third time of being cut off with a security threat I started to walk away and he, having to get in a last laugh said \u0026ldquo;Go back to your mother\u0026rsquo;s basement.\u0026rdquo;\nGo. Back. To. Your. Mother\u0026rsquo;s. Basement.\nI\u0026rsquo;m a full time embedded software engineer making a handsome paycheck, I don\u0026rsquo;t live at home anymore. Plus, even if I did, I don\u0026rsquo;t think there\u0026rsquo;s shame in that. Really, this makes me laugh, but it is still a personal attack rooted in this idea that nerds are not self sufficient and that anybody willing to take the time to call someone out on this must not having anything better to do. He made it a personal attack. Sure, it was a low-blow, not accurate, and just sorta dumb, but, still a personal attack. There\u0026rsquo;s no reason for that, and, frankly, making him eat those words just became a fun challenge.\nStill, I was still with my girlfriend at the time (albeit she was a booth or two away) so I didn\u0026rsquo;t want to deal with security at that particular moment, so I did just walk away.\nAbout 20 minutes later, my GF wanted to wander a bit on her own, and I took the opportunity to find a good spot to silently wait - you know, right by his booth. I wasn\u0026rsquo;t saying a word, just standing there, but he clearly remembered me because after my standing there waiting for about a minute, he stopped his sales pitch to a now context-less couple to loudly shout at me (again, silent, looking totally innocent) to say \u0026ldquo;I\u0026rsquo;LL CALL SECURITY IF YOU DON\u0026rsquo;T LEAVE RIGHT NOW\u0026rdquo; to which I shrugged and said \u0026ldquo;oh-kay, I\u0026rsquo;ll wait here\u0026rdquo; and put on a confused look that made it look like I was just an confused as to why he\u0026rsquo;d single me out as the crowd around was.\nHe talks to his wife, his wife gets an older lady working the fair, she tell\u0026rsquo;s me I should leave them alone and that, well, I just overstepped my bounds by costing him a customer. I said I\u0026rsquo;d wait on security.\nSecurity shows up, very confused because there\u0026rsquo;s really nothing happening, so I raise my hand for the man and say \u0026ldquo;Hi, I\u0026rsquo;m [firstname] [lastname], I believe you we\u0026rsquo;re called because of me. It\u0026rsquo;s nice to meet you.\u0026rdquo; I outstretch my hand as he walks over and give him a good shake. He is now very confused, because the wife that fetched security in the first place is making quite the scene and I\u0026rsquo;m being as cooperative as can be. He actually thought it was my booth for a moment.\nI explain to him the situation, covering in a calm and clear manner that:\nTheir product is predatory, illegal, and given findings and reporting on similar products, has a high likelihood of being loaded with malware. That the booth owner has used security as a threat multiple times The the booth owner told me \u0026ldquo;Go back to your mothers basement\u0026rdquo; Now, Mr. Security is very clearly annoyed to be dealing with this, and asks \u0026ldquo;How can we resolve this?\u0026rdquo;. I let him know that I was just standing there and could walk away, but, you know, it seems wrong to me that I, a patron of the fair, would be treated like this just because I have concerns about a product and talked to one of his customers.\nAt this point, security is now 100% on my side. Between the wife being a total Karen, them wasting security\u0026rsquo;s time, and my general calm and collected attitude it was no contest. He pulls me aside, and says \u0026ldquo;Okay, I\u0026rsquo;m going to write stuff in this notepad, you say you\u0026rsquo;re name very slowly and make a face like you\u0026rsquo;re upset then leave. I\u0026rsquo;ll be letting our vendor manager know of their behavior.\u0026rdquo;\nNow, I\u0026rsquo;m recalling this story for a few reasons:\nI think it\u0026rsquo;s important that more people technically literate people call out scummy products and behavior like this To do that, you need to know HOW to call it out. So, look at what I did:\nI consistently made him look like the bad guy by letting him get angry, but only every smiling and laughing myself. This requires knowing how to remain cool even when being shouted out and personally attacked. My heartrate was still super high and I swear you could see it beat through my shirt. This is easy to say, but hard to do. I lost a battle to win the war - I walked away when I needed to By leaving when it became personal, I maintained the \u0026ldquo;better person\u0026rdquo; card for later. By coming back later and letting him explode in front of people with no context, it made my point stronger. I didn\u0026rsquo;t back down from threats He was trying to use an implied better relationship with security and so a position of power against me. I showed that I both wasn\u0026rsquo;t afraid and forced him have to carry though with his bluff. I kept track of the power dynamics and likelihood of agreement The first lady on staff to show up wasn\u0026rsquo;t security, but she hoped to deescalate before security even arrived and to end it there, but she wasn\u0026rsquo;t on my side. She was also older, and so likely didn\u0026rsquo;t grasp the technical aspects of the situation, while I knew security was likely to a younger male. I respected the judge, and showed him I was peaceful The security guy that showed up was about to be in a position of ultimate power over the situation. Anybody that \u0026ldquo;has to do their job\u0026rdquo; in a security role is immediately annoyed to some extent. By showing that he was called because of the booth owner\u0026rsquo;s actions, not mine, and by introducing myself in a polite, calm, way I shifted the situation to being about me to being about the booth owners actions. So, please, if you see some scummy tech salesmen do the public a service and stop it when you can.\n#004584 Angels # The air show was a great time, the performances were incredible. The skill on display from the pilots is inspiring.\nUnfortunately, I couldn\u0026rsquo;t get a few thoughts out of my head:\n\u0026quot;[C]hildren who live in close proximity to an airport have at least 21% higher lead levels in their blood\u0026rdquo; - The airport the show was at is only 2½ miles from my apartment.\n\u0026ldquo;The report estimates that more than 8% of female service members experienced unwanted sexual contact in 2021\u0026rdquo; - That 8% of women in that year. Mentally extrapolate that to a service member spending a decade or so in the armed forces and it\u0026rsquo;s even more disgusting.\nAs I\u0026rsquo;m sure any male (and to a lesser extent any female) that has gone though their teenage years in the US can tell you: They\u0026rsquo;re really, really, aggressive about recruiting. The entire air show is a recruiting event, and it\u0026rsquo;s not subtle.\nThese planes on display were made with one goal: Killing.\nThat is a lot of fuel, and therefore pollution and tax dollars, being used. At first I thought \u0026ldquo;Well, it\u0026rsquo;s an airshow, for the number of people watching, it\u0026rsquo;s not really any more wasteful than commercial flights\u0026rdquo;. So, I did what anyone should do when concerned about something like this and searched it,\n\u0026ldquo;In 2006 Air Force consumed around 2.6 billion gallons of jet-fuel which is the same amount of fuel U.S. airplanes consumed during WWII (between December 1941 and August 1945).\u0026rdquo; (source)\n\u0026ldquo;The US military is the largest institutional consumer of oil in the world. Every year, our armed forces consume more than 100 million barrels of oil\u0026rdquo; (source)\nAt the time of writing, a barrel of oil is about $85, so going off that 100 million barrels figure, that is 8.5 BILLION dollars on just fuel.\nIn this years budget, there was a line \u0026ldquo;$2.5 billion for inflation impacts on fuel purchases\u0026rdquo; (source) Obviously the cost of the jets themselves, their maintenance, all of the personnel, etc. mean both the individual air show and armed forces spending as a whole is ludicrous.\nThis could rapidly devolve into a military spending rant, so to avoid itemizing all of the complaints, suffice it to say I think it\u0026rsquo;s absurd that the US is nearly spending as much as every other country combined. We\u0026rsquo;re at $842 BILLION a year, or about 20% of federal revenue when our infrastructure is falling apart, or education is unaffordable, we\u0026rsquo;re being hammered by the impacts of climate change, health care is totally unaffordable, etc. etc. etc.\nSo, I have all of this going through my head as I try to watch big planes do cool things and try my best to take all of that frustration and push it down so I can think \u0026ldquo;ohh, big fighter jet go ZWOOP\u0026rdquo; for a few hours. I just can\u0026rsquo;t force myself into that level of cognitive dissonance.\nThere\u0026rsquo;s a lot of people out there where planes, jets, flying - all of it - is their passion. Nothing can get them into a long excited expulsion of information quite like planes can. I know because I was friends with someone like this growing up and I worked at the Strategic Air Command \u0026amp; Aerospace Museum for a few years, despite not being all that into it myself. For them, there air shows can be the highlight of their year. I wouldn\u0026rsquo;t want to deprive them of that either. But, that doesn\u0026rsquo;t make my points above any less addressable:\nWe could limit residential and school proximity to airports We could limit military spending, recruit less aggressively, and better handle sexual misconduct in the armed forces. The air shows could be shorter (this one was 2-days, the same show both days) The shows could be done with entirely civilian aircraft, not aircraft made to end lives I\u0026rsquo;m not trying to be some holier-than-thou critique of the shows that says we should never do anything fun because it\u0026rsquo;s wasteful.\nFor me, personally, I would\u0026rsquo;ve had more fun if it was a smaller, more relaxed event in a grass field instead of hot concrete, the planes were smaller and I knew lacked computer assistance, and I didn\u0026rsquo;t have to be surrounded by a group of people that I know are statistically more likely to commit sexual assault walking around with assault rifles slung over their shoulders and the planes being flown were made for fun, not for killing.\nFor some - hell, most - people the fact that it being put on by the armed forces made entry free and let them see bigger, meaner aircraft was probably better in their opinions. I don\u0026rsquo;t know if I find that alarming or reassuring that I\u0026rsquo;m different.\n"},{"id":3,"href":"/posts/uses/","title":"/Uses - Vega Deftwing","section":"Blog","content":" Preface # This is a uses page.\nI want to preface everything by saying I am very fortunate to have all of the stuff I have. I like my stuff. But, ultimately, it\u0026rsquo;s just stuff. I know I do not use any of it to its maximum potential. It makes me happy to have it, but I also don\u0026rsquo;t need the vast, vast majority of it to accomplish the majority of what I want to accomplish. If you have less money, less stuff, then do not feel bad. It\u0026rsquo;s what you do with what you have that matters. I do a lot less with a lot more than some of the people that inspire me the most.\nUltimately, this is effectively a list of my toys.\nHardware # Let\u0026rsquo;s just get the big picture first, starting with my main desk.\nAnd on the left:\nOn the right is a sort of mini-desk. It has a fair amount of storage drawers holding electrical parts and is where my drawing tablet sits when not in use.\nThe PC + Accessories # I\u0026rsquo;m going to skip over the detailed PC specs because you have what you have and can research what is the best price to performance based on your budget and work load.\nStill, there are choices that mater at each price point.\nI exclusively use full towers (ATX) because I like to throw a bunch of disks in there, have plenty of air flow, and have all the room in the world for putting in whatever expansion card I need. It also means more fans, which means lower fan speeds, which means less background noise.\nFor a case, this means something old school, with 5.25\u0026quot; and 3.25\u0026quot; bays to spare. In my case (pun intended) this is the Phanteks Enthoo Pro. This also allows me to use big ol\u0026rsquo; air coolers which, in my experience, are more reliable, make less annoying noise (I really, really hate pump noise and bubble noise) and are less of a pain to get working correctly (I\u0026rsquo;m looking at you, NZXT, requiring software control).\nFor displays, I have a 3 x 4k setup. All 60Hz. All 27\u0026quot;. All in one horizontal row for a glorious 11520×2160. Additionally, I have a cheap Monoprice drawing tablet. Do not buy a cheap Monoprice drawing tablet. The drivers suck.\nTo go with the Monoprice tablet, I have a BDN9 macropad with 7 switches and two encoders. I have this mapped to a plethora of function in Krita. Having physical knobs for some controls makes digital art much more enjoyable.\nI also have an Oculus Quest2 that has 3D printed adapters to turn it into a \u0026ldquo;FrakenQuest\u0026rdquo; using the HTC Vive\u0026rsquo;s Audio Strap. I\u0026rsquo;m quite happy with this, though it does have some problems. Honestly, the worst part of the setup is Meta\u0026rsquo;s insistence on updates that frequently cause me issues and make me sign back in, taking hours every time I just want to play VRChat through SteamVR.\nRounding out the displays, I often play games with friends over a SteamLink connected to cheap projector.\nI use an Ergodone, a clone of the Ergodox, with Kailh Box White switches. They feel similar-ish to Cherry Blues, but a bit chonkier. I\u0026rsquo;d like to get a nice SA profile keyset for it, but, $$$. I type in DVORAK instead of QWERTY. My keymap has lots of extra goodies to let me type a lot of unicode characters directly. I also have a numpad between the two halves for the very occasional Blender usage (not pictured)\nMy mouse at home is a Roccat Tyon. I love the lil\u0026rsquo; fin on it and have a mapping that lets me very easily navigate and control i3WM when I\u0026rsquo;m in Linux. It\u0026rsquo;s also fantastic for gaming\u0026hellip; mostly. The \u0026ldquo;analog stick\u0026rdquo; on the side is a legitimately useful idea, but occasionally it will make some games very determined to think you\u0026rsquo;re using a controller and not mouse + keyboard. Still, when it works it\u0026rsquo;s fantastic. At work I use an MX Master like everyone else, as well as an Ergodox with Cherry Browns, which is the loudest switch type my employer allows.\nFor game controllers I use a Steam Controller for anything where it wants to work and a cheap XBox controller when it complains.\nI also have USB foot controller attached to my computer both at work and at home. At home I use a Stinky Footboard that I gutted and replaced the microcontroller in so that it runs QMK, like my keyboard. At work I only needed one extra key so I bought this pedal and threw a Raspberry Pi Pico in there running an HID device program. This is convenient because it shows up as a flash drive, making it easy to change what the pedals does compared to the pain of setting up QMK.\nI use a Razer Kiyo Pro as my main webcam sitting atop my middle monitor. Aside from Razer\u0026rsquo;s insistence on installing their shitty software, it\u0026rsquo;s great.\nAdditionally, I have a PointGrey FL3 hooked up - it\u0026rsquo;s comically overkill, but I got three for free and they sure do look amazing. They do run extremely hot though.\nThe Music Gear # I own a lot of music gear, so if you don\u0026rsquo;t care, I\u0026rsquo;d highly advise skipping this section.\nInterface + Speakers + Mic + Headphones # Central to any musicians gear, the audio interface. I\u0026rsquo;ve had the experience that most audio interfaces have at least some problems, and so don\u0026rsquo;t want to recommend anything. I use a Focusrite 18i20 2nd Gen, and it\u0026rsquo;s been mostly fine, but YMMV.\nI will say Tascam\u0026rsquo;s are a no go - I had two high end Tascam units blow up in under a year. Similarly, it\u0026rsquo;s been my experience that most audio interfaces that don\u0026rsquo;t require external power have noise issues or are at least more prone to giving you noise issues with ground loops later. This is particularly frustrating, as most small interfaces are exclusively USB powered and so for those with limited space your options are limited.\nSuffice it to say, I have a big interface from a decent brand and, importantly for my setup, it supports ADAT, which is necessary for using the Expert Sleepers ES-3 and ES-6 which are discussed below.\nThe same goes for studio monitors for the most part. I\u0026rsquo;ve very happy with the Kali Lp6\u0026rsquo;s I have, but you should do your own research and get what best fits your desk, budget, space, and neighbor\u0026rsquo;s tolerance for disturbance.\nFor a mic, I use the AT2020 like everyone else. I got tired of trying to get a vocal processing chain setup in software for voice calls though, so I got a used DBX 286S. Given my inability to sing, this is basically only used for voice chats.\nFor headphones, I almost always use the Beyerdynamic DT770\u0026rsquo;s. They\u0026rsquo;re not a million bucks, but sound great. If you pay attention to musicians on YouTube, you\u0026rsquo;ll probably see the same headphones atop most of their heads.\nWhen I just want to listen and am in the mood for something really fun, I\u0026rsquo;ll bust out the Grado SR125\u0026rsquo;s which have enough impact in the percussion and a fun enough character to make rock sound really pump me up. My set is modified with removable cables and I\u0026rsquo;ve replaced some of the plastic bits with metal - adding to the weight a smidge, but dramatically improving my comfort in bringing them literally anywhere. The mods were pretty in depth though, and not something I\u0026rsquo;d recommend due to the high risk of breaking something. I\u0026rsquo;ve also had problems with hair getting through the mesh and stuck ratting next to the drivers, which is super annoying to fix.\nGuitars # I do a fair amount of music stuff and while I\u0026rsquo;d say I\u0026rsquo;m just as deep into synths as I am guitars, I still think of myself as more of a guitar guy than a synth guy.\nSchecter C-7 FR-S Apocalypse This guitar is really, really kick ass, and I absolutely love how it feels to play. The neck profile, pickups, etc. are all spot on and it sounds amazing.\nMy only real complaint is that, occasionally, the electronics complain and I have to flip the sustainiac on for a moment upon first connecting it to get any output.\nI also think I\u0026rsquo;m a bit less sold on the Floyd Rose system than I was when I got it. It does maintain its tuning better than anything else I\u0026rsquo;ve had, but it\u0026rsquo;s also a royal pain to tune in the first place, such that I think I\u0026rsquo;d just rather not. I\u0026rsquo;ve also gotten the chance to play some multiscale (fanned fret) guitars since getting this, and think I\u0026rsquo;d prefer that.\nI definitely have my eye on a few multiscale 7 and 8 multiscale guitars that have less bells and whistles. Though it\u0026rsquo;ll almost certainly be another Schecter.\nSchecter Demon 6 I got this used for a steal. It\u0026rsquo;s also fantastic and works as a great feeling, also active-pickup guitar for when I want to play with something a bit more traditional than my main listed above without having to re-dial everything in as it\u0026rsquo;s still active. Ibanez SR305F This is a 5 string, FRETLESS Bass. I got this used for way less than it should\u0026rsquo;ve been listed for. It sounds \u0026hellip; fine? I mostly wanted an excuse to noodle on a fretless, and this gave me that. ESP D-6 Bass A six string BASS. This thing is an absolute unit. I also got it at a very good price. I\u0026rsquo;m actually not absolutely thrilled with the sound and my lack bass skills and big fingers combined mean that I can\u0026rsquo;t do things with a lot of slap. To be honest, I actually mostly play it with a pick, as shameful as that may be. I enjoy it though. I also occasionally play on my SO\u0026rsquo;s Fender Squire Strat if I\u0026rsquo;m desperately in need of single coil pickups. I frequently nab their Soundgear SR300E 4 string bass (Which is very, very similar to the above 5 string fretless). Of any bass I\u0026rsquo;ve played, it\u0026rsquo;s by far the most comfortable and fun to play and my god do the pickups sound way better than they have any right to, especially when set it\u0026rsquo;s \u0026ldquo;PowerTap\u0026rdquo; pickup setting. If I had to keep only one of the three basses between the three we have, it would be this one. It\u0026rsquo;s mind blowing to me that it has the lowest new price tag of the three.\nPedals # The most important part of my pedal rig is the Power Supply. I learned the hard way that the necessity for isolated outputs is no joke and that all the super cheap (~$20) pedal power supplies are absolutely full of shit about being isolated. Having this supply made some of my pedals go from an unusable pit of noise to sounding fantastic.\nThe other thing to keep in mind about pedals is the order they\u0026rsquo;re in really, really matters. We are not talking your college into signals course where everything\u0026rsquo;s an LTI system. Everything from the impedance, voltage, and latency (if digital) of the pedals adds up to influence the sound.\nI also want to mention that a handful of my pedals have been DIY\u0026rsquo;d from PCBs sold by https://www.pedalpcb.com which are clones of other pedal\u0026rsquo;s circuits. The ethics of this are questionable, but as most pedals today are derivative of other pedals on the market, I think it\u0026rsquo;s more-or-less okay, but your opinion may differ.\nSo, without further ado, here are my pedals In the order of the signal chain:\nEHX Pitch Fork+ + Cheap Expression Pedal This pedal doesn\u0026rsquo;t have the same mojo as an analog octave up or down, but it more than makes up for it by being able to do other pitch shifting fun and more complex chords (add a perfect 5th up and an octave down at the same time? done.) With an expression pedal it\u0026rsquo;s a great tool for trying out some call-and-response song structures just by slamming your foot up and down. Of all the pedals on my board, this one might be the most fun to play with.\nSource Audio C4 Synth It doesn\u0026rsquo;t track great. It doesn\u0026rsquo;t talk standard MIDI without an expensive box I refuse to buy. When using USB to change settings it has bad noise. But I super do not care, because at the end of the day the synth sounds I can get out of it are epic, and it does auto wah better than anything else due to being able to use it\u0026rsquo;s pitch tracking instead of just enveloping.\nI am hesitant to recommend it though, only because I think a guitar from https://jamstik.com or adding a MIDI pickup to any guitar may be a better bet, if you can make it work.\nMXR TalkBox It\u0026rsquo;s a talk box. It\u0026rsquo;s awkward as hell, hard to make sound good, slimey and gross, cheesy sounding, and infinitely fun. I got this to add to my collection of tools that combat my complete inability to sing.\nEarnie Ball Volume Pedal The only not shit volume pedal. I don\u0026rsquo;t do volume swells or actively use it when playing much but having it to control the volume in the middle of my multiple-distortion/drive/fuzz chain is really handy.\nBlackMass 1312 (RAT Clone) Black Lives Mater. Trans Lives Matter. Having a kick ass distortion matters. This pedal supports all 3 causes \u0026hellip; but is only a very, very slight improvement. Before this I had the Donner Dark Mouse which still sounds great at literally 1/6th the cost.\nGamechanger Audio Plus Pedal + Wampler terraform in FX Loop On one hand, the ability to sustain the guitar\u0026rsquo;s signal like a piano and have intuitive foot control over that is insane. On the other hand, without modulation it sounds like ass and it costs quite a bit. When I got this the Superego+ didn\u0026rsquo;t exist, and I still haven\u0026rsquo;t tried one, but I suspect that it would be 90% as good as the Plus + Terraform combo at under half the price.\nThe Terraform is connected to the Plus Pedal\u0026rsquo;s FX Loop to add modulation. This is overkill. I almost always leave it in the mode labeled \u0026ldquo;Dime\u0026rdquo; which is a chorus modeling the Dimension C pedal, but the flexibility in effects for the sustained signal is very handy.\nEarthquaker Disaster Transport Sr. + DIY Expression Pedal I keep debating selling this because I can do a digital delay that sounds more-or-less the same in a million ways but, ultimately, that\u0026rsquo;s not the point. This pedal makes me try weird delays and textures I\u0026rsquo;d never think of using otherwise. Plus, I have it early enough in my chain that I can use it to shoegaze.\nThe Disaster Transport Sr. has multiple expression pedal inputs on the back. One of these can control the feedback. With a normal expression pedal, this would go from no feedback to well above unity. I wanted to be able to temporarily make it go to exactly unity, so I made a pedal that uses a momentary switch to do exactly unity gain (or whatever I dial the knob to) only as long it\u0026rsquo;s held. At unity gain it\u0026rsquo;ll sort of sustain the signal indefinitely, but in a way that is wildly different from what the Plus Pedal does.\nPedalPCB Duocast (Hudson Broadcast clone) The Duocast was rather expensive and difficult to build, but it sounds absolutely fantastic. It just handles dynamics so well going from a clean-ish boost to a wall of fuzz by how hard you strum is like nothing else. I got this because I wanted to get some distortions that do a better job of reacting to dynamics.\nPedalPCB Mofeta (EAE Model feT clone) Words can not do this pedal justice. It makes everything else on the board sound better. It\u0026rsquo;s the perfect preamp-y distortion-y amp-sim-y pedal. The real ModelFeT is a bit rich for my blood, and the DIY one is smaller. This was a tough build - I\u0026rsquo;m glad I\u0026rsquo;d done quite a few others (including the above Duocast) first, but it was oh so worth it.\nTC Plethora X3 It runs Linux.\nReally though, it sounds pretty great. I\u0026rsquo;m using it mostly for chorus, vibrato, and it\u0026rsquo;s nice doubler effect (though never on all at once). This pedal serves as the point at which my pedal rig diverges into two different chains, so getting a bit of width before that point helps. As standalone pedal for smaller boards, I wouldn\u0026rsquo;t recommend this pedal. For boards like mine, acting as a one stop shop for modulation in the middle of the chain and doing stereoization, it\u0026rsquo;s great.\nComing off of one of the Plethora\u0026rsquo;s stero outs:\nKMA Chief Disruptor A Big Muff, but it doesn\u0026rsquo;t suck™. Seriously, it adds all the EQ, clean blend, and voicing options the BigMuff desperately needs. Did I mention clean blend? Clean. Blend. Every Muff should have clean blend.\nDongeomac Green Ringer, rehoused (The Green Ringer is what the Earthquaker Tentacle circuit is based on)\nThis pedal sounds great, but I didn\u0026rsquo;t love the pedal-in-an-outlet box build, so I moved it into a new case. The signal it puts out is a bit hot, and it\u0026rsquo;s best with a fuzz before it (hence the Chief Disruptor) but when given something to chew on it can do everything from add in a nice bit of high end to sound almost like a synthesizer.\nWalrus Audio Julia A quite nice analog chorus and vibrato. I got this with a broken BBD chip and missing knobs for $20. Fixed those, and it sounds great. I do absolutely adore the sound, but I don\u0026rsquo;t know that it\u0026rsquo;d be worth the full new price.\nPedalPCB Cetus ( Victory V1 Kraken clone) This pedal sort of sucks. It doesn\u0026rsquo;t sound nearly as good as the Broadcast or Mofeta, but it serves an important use on my board - it, roughly, adds the same EQ, response, and box-y sound as the Blackstar Dept. 10 Dual Distortion (which is the last pedal on the other side) \u0026hellip; but worse? \u0026hellip; I don\u0026rsquo;t know. Something about it isn\u0026rsquo;t just right. Still, it is helpful if I want to make both the channels (we\u0026rsquo;re post the stereo-split from the Plethora X3) sound similar with a nice realistic amp tone.\nUnlike the other PedalPCB pedals on my board, I bought this one already built off of Reverb.\nComing off the other output of the Plethora:\nKMA Guardian of the Wurm It\u0026rsquo;s an HM2 on \u0026lsquo;roids with a perfectly tuned noise gate, better EQ, and clean blend and an FX loop to put something between the HM2 and the noise gate. It\u0026rsquo;s a lot of sound, so it needs to go into something that can work with that added spice in a good way.\n(In the FX Loop of the Wurm): Boss LS-2 (In the FX Loop of the LS-2) PedalPCB Teddy Rupture (KMA Fuzzly Bear clone) The Wurm sounds a lot better with just a bit of fuzz in it, so, I added a clone of KMA\u0026rsquo;s own Fuzzly Bear pedal. This pedal doesn\u0026rsquo;t have clean blend, so I run a Boss LM-2 between them, so that I can blend the Wurm\u0026rsquo;s output and the fuzz\u0026rsquo;s output as a wish. Since the Wrum can be clean blend\u0026rsquo;d, this means I can let some of the clean signal though too. It\u0026rsquo;s a bit annoying to dial in, but it sounds great.\nThe LS-2 is a bit expensive and bulky, but there\u0026rsquo;s not much better.\nThe Teddy Rupture was a super easy build and sounds perfect for its use case, giving me a nice analog octave up sound to complement the Green Ringer on the other side.\nBlackstar Dept. 10 Dual Distortion Amp + Cab sim with a real tube. Sounds good unless you plug in the USB cable. If you do, noise will destroy you. Does what it needs to do. I got it used for stupid cheap. It\u0026rsquo;s not worth the new price, but I also don\u0026rsquo;t really like any of the other amp/cab sim pedals, other than the Model feT.\nNow joining the two chains back together:\nEmpress Zoia At the end of the chain, merging everything back together, is the Zoia. This gives me a chance to do any effect I might want to in hardware to get the two different chains sounding cohesive again. Usually this is just a reverb, but because it\u0026rsquo;s basically a modular synth in a pedal, I can really go nuts. I really like being able to do insane modulated delays and verbs.\nEurorack # Interfacing # Adventure Audio Merge (Built DIY), Knob.farm Ferry\nThese modules have come as a side effect of various failed plans. Originally, I got the Adventure Audio Merge to run my guitar into my rack for processing. This was a failure. The noise floor from going from an instrument level signal to line level from pedals to eurorack level back to line level was intense, even with a good quality, isolated guitar pedal power supply.\nFortunately, the Merge is still quite handy for hooking up other instruments. I often use it to attach a Kalimba, contact mic, and an opened up hard drive which I can spin the platter on to act as a sort of physical oscillator.\nThe knob.farm Ferry I got for a similar purpose - I\u0026rsquo;d built a Monome Norns (which I really didn\u0026rsquo;t vibe with) - and had gotten this to allow it to interface with the Rack. I eventually sold the Norns, but the Ferry remains handy for attaching anything with a stereo output to pipe through the rack.\nFH-2 + FHX-8CV + FHX-8GT + ESX-8GT\nThis is one of the defining features (or lack of) in my rack - I have no sequencers (unless you count the Maestro for modulation) but instead sequence everything via MIDI→CV conversion. I\u0026rsquo;ve done this for a few reasons.\nI want to have notes that can vary in length in my sequences. Most hardware sequences are either generative, or simpler than what I can sequence from a piano roll. I can sequence in hardware from my MIDI controllers anyway. This still can keep the note and gate sequences independent making the de-coupled note and gate sequences that makes eurorack cool still possible. I almost always want re-trigger on my envelopes, and the FH-2 can generate ADSR\u0026rsquo;s with retiggers, making it cheaper than dedicated ADSRs with retrigs I want to clock sync to my DAW This saves needing to wire up a quantizer to sequencers, further saving money/rack space I can still do micro-tonal or CV sequencing stuff though the ES-6 and ES-3 if necessary ES-6 + ES-3\nThese allow for outputting 8 signals (DAC) and taking in 6 signals (ADC), all DC coupled and at the normal eurorack levels. This means I can hook into VCV rack and output any oscilator, setup a send return to any effect, etc. This makes my rack and software all work together as one cohesive system.\nUtilities # Frap Tools 333\nGreat for distributing and mixing V/Oct signals.\nunbuffered mults\nI would normally advise against wasting rack space on unbuffered mults. I have them in my rack because I attach probes out to my oscilloscope to them so that I can easily look at any signal. I\u0026rsquo;ve debated replacing this with a Tymkrs Bulkhead\nBefaco Dual AT(Bulit DIY), Wavewrecker ATT Volt\nThey attenuverters. Not much to say.\nMystic Circuits ANA\nI mostly use this as a distortion, but it can be nice for making a bunch of different modulations.\nMutable Instruments Kinks (mine\u0026rsquo;s a clone)\nMine has a broken internal connection between the noise and S\u0026amp;H, but otherwise works fine. It\u0026rsquo;s a nice, multifunction module. Pairs nicely with the Maestro (mentioned below) for deriving new modulations from other inputs.\nADDAC Dual S\u0026amp;H\nAlso works as a slew in a pinch. Having T\u0026amp;H is great. Just a great utility. I particularly like hooking up my Joystick to it.\nuO_c\nA do everything module. Super handy for when I need something I either didn\u0026rsquo;t splurge for a dedicate module for (quantizer, logic gates, burst, etc.) or when I run out of the nicer ones.\nTriple Passive Attenuator\nMostly used for when I need to make a signal going to the ES-6 not clip.\nWorng LRMSMSLR\nmid-side encoder \u0026amp; decoder. This is really nice for making big, stereo synth sounds from two different modulated but same note waves.\nI probably should\u0026rsquo;ve gotten one of the newer options that lets you add some width artificially, but I\u0026rsquo;m still happy with it.\nEffects # I need to have some in-rack effects because going from the rack to the PC and back multiple times makes latency correction a massive PITA. Plus, modulating effects with CV is fun.\nBlack Hole DSP v1\nThe effects are\u0026hellip; marginal. I eventually want to load in a Valhalla DSP fx card, but the mod to do that is expensive. Since it\u0026rsquo;s FV-1 based I\u0026rsquo;ve considered trying to salvage EEPROMs from guitar pedals to add effects\u0026hellip; some day.\nQu-Bit Prism\nSounds good. Easy to use. I just absolutely can not understand why either the left input isn\u0026rsquo;t normal\u0026rsquo;d to the right input and why there\u0026rsquo;s not something for making the effect on the left different from the right (different delay times, glitching, etc.). It\u0026rsquo;s not stereo, it\u0026rsquo;s dual mono with the same settings, and that feels like a massively missed opportunity. Still, It\u0026rsquo;s quite nice.\nJoranalogue Fold 6\nA small wave folder. If I could have a whole row of this wavefolder, I would. I heckin\u0026rsquo; love wavefolders.\nErica Synths Plasma Driver\nIt\u0026rsquo;s\u0026hellip; meh? It looks awesome, but the distortion sound itself is too much. Fortunately, the EQ and octave effects built into it make it useful again and it\u0026rsquo;s still just super fun to toy with even if I can\u0026rsquo;t actually get a useful sound out of it.\nOscillators # I mostly have analog oscillators and effects because otherwise I may as well just use VCV rack. The benefits to analog are in feedback patching and FM, so the two analog VCOs I have are centered around that idea.\nVoid Modular Gravitational Waves\nGreat sounding oscillator, doing fun FM stuff in a way only analog VCOs can do.\nSSF Zero Point Oscillator\nIf you feed it a ton of modulation and are careful about tuning with the FM, you can get some crazy stuff out of this thing. As a basic oscilator, the control over the wave shape makes it fantastic.\n4MS Ensemble Oscillator\nThe only digital oscillator. It\u0026rsquo;s basically the THX sound effect in a box, plus a lot more. I got it thinking it would be a way to sort of fake chords in eurorack, but it\u0026rsquo;s much more at home being treated as a complex, additive voice.\nPercussion # I tried very hard to avoid modular percussion for a long time. I mostly prefer the sound of acoustic kits, thought the price was absolutely stupid compared to using software synths, and didn\u0026rsquo;t see a huge reason I\u0026rsquo;d want to modulate my drums.\nThen I got Knock for VCV Rack.\nThen I got Prok Drums for VCV Rack.\nAnd I was hooked. Unfortunately, Knock only really does a handful of sounds and the Prok modules eat my CPU, so, I decided I\u0026rsquo;d try real, modular percussion.\nSSF Ultra Kick\nThis one Fucks.\nSSF Entity Percussion\nSuper variable, usable for non-percussion sounds. Flexible and great sounding.\nErica Pico Drum2\nErica Synth, I love this module, but fucking really? Aliasing? It\u0026rsquo;s a $5 uC with a few ADCs and a DAC. The value is in the software. It sounds fine in most modes, but at high frequencies the aliasing is super obvious and I expect better for the price. Still, in it\u0026rsquo;s normal operation it\u0026rsquo;s quite fun and it perfectly suits the role of adding a 3rd drum so I can have just enough drum kit for techno-y/EDM-y tracks.\nVCAs + Mixers # You can never have too many VCAs.\nXaoc Tallin\nYou can never have too many VCAs. It distorts nicely with multiple options for distortion.\n4MS VCA Matrix\nMassive, a bit clunky, and oh so fun for feedback, mixing multiple waveforms, or doing FX sends.\nOctane + Hermana\nMade by a friend, this is a sequential switch / crossfader meets 8 VCA\u0026rsquo;s with crazy digital control. It\u0026rsquo;s nuts.\nMake Noise ModDemix\nI basically use this as an extra VCA most of the time, but find doing the trick to ring mod a signal with itself to get an octave up effect nice occasionally. This was inexpensive used.\nDoepfer A138: Mini Stereo Mixer\nIt\u0026rsquo;s a mixer. It\u0026rsquo;s cheap. It works.\nModulation # eowave Zone B.F.\nFor cheap, quick to dial in modulation, it\u0026rsquo;s perfect. (Ab)usable as an OSC for bass frequencies if you want to.\nzlob Diode Chaos (Built DIY)\nI like it, it\u0026rsquo;s cheap. My only complaint is that it\u0026rsquo;s not actually very chaotic at high speeds. Easy to build from a DIY kit.\nDoepfer 3D Joystick\nThis is really the \u0026ldquo;one of these is not like the others\u0026rdquo; of my rack. I have no sequencers and have plenty of modulation as well as outputs from the FH-2++, so why a joystick? Because it forces me to re-think creative choices and try new things I may not otherwise reach for. It also gives me a chance to introduce human control back into the synth.\nThe build quality is\u0026hellip; weird.\nAcid Rain Maestro\nFor clock sync\u0026rsquo;d modulation, this is as hands on and deep as it gets. I do wish you could internally mix / do math on modulations to make more complex outputs, but the module is already about at the limits of comlpexity reasonable without having a screen.\nAfter Later Audio Baker (MI Peaks clone)\nThe interface is way to cramped, but the functionality per hp can\u0026rsquo;t be beat.\nMake Noise Maths\nIt\u0026rsquo;s Maths. Anybody with a rack is legally obligated to own this module\u0026hellip; for some reason. Honestly, I wish I\u0026rsquo;d gotten the Befaco Rampage instead, still, having the slew limiters alone is nice and not unreasonable for the money.\nPatching Panda Particles\nI haven\u0026rsquo;t really decided if I like this module yet, but the idea is that it\u0026rsquo;ll let me do ratchets and drum trigger effects easily.\nFilters # SoundForce Dual Filter\nLame low pass, kick ass high pass. It\u0026rsquo;s an MS-20 clone and is fun. It seems to me it self oscillates a bit to easily though. I\u0026rsquo;d like the resonance to get more aggressive before the self oscillation kicks in.\nSSF Stereo Dipole\nNothing shapes sound with quite as much gusto as this filter. It doesn\u0026rsquo;t distort as much as a Wasp or the MS-20 style filter, but the multiple peaks and movment it can add more than makes up for it.\nJoranalogue Filter 8\nThis thing is super smooth sounding, has some novel filter responses, modules great, and works as a great LFO or pluck in a pinch.\nStandalone Synths # Behringer Wasp\nAs much as I hate Behringer, I couldn\u0026rsquo;t turn this down when the entire synth was on sale, new, for the same price as eurorack module that just has the Wasp\u0026rsquo;s filter. It has a certain retro yet aggressive vibe that I just can\u0026rsquo;t get with anything else.\nBehringer TD3 (Modified)\nAgain, so cheap I couldn\u0026rsquo;t say no. I have multiple 303 emulation VSTs, but once I got done following the modding guide to do the sub oscillator, \u0026ldquo;rubber\u0026rdquo;, and filter tracking mods + the built in DS-1 style distortion, it hits better than any of the software does. I\u0026rsquo;d only recommend it if you intend to mod it though.\nBehringer now sells a pre modded version with some of these changes, but some of how that came to be rubbed me the wrong way even more so than many of the other things they\u0026rsquo;ve done and I don\u0026rsquo;t actually think it sounds as good as the DIY mods.\nMIDI Controllers # Launchpad Pro Mk3\nThis takes the award for product most in need of a display. Not being able to see the name of the scale you have selected or what CC your controlling, etc. is super annoying. Still, the pads feel nice, aftertouch works well. The sensitivity is just right for rapid arpeggios and hammering in leads and having a second grid controller so I can play two different synths at once works really nicely.\nAbleton Push Mk2\nThis is what made me stop using my Digitakt. If you\u0026rsquo;re an Ableton user but need something to let you enter sequences in a more tactile way, this is it.\nKeith McMillen BopPad + drum sticks\nHonestly, this is basically a toy to me. I\u0026rsquo;m not a good drummer. Still, having an interface I use with real sticks is nice for getting an idea of what rhythms feel good to play with drums sticks and so input things that feel more natural than what I gravitate to when trying to finger drum. This being MPE, having 4 quadrants so I only need one pad for 4 drums, and feeling good for the price all made it a reasonable purchase given my lack of skill.\nRoli Seaboard Block + lightpad Blocks\nI passionately hate Roli\u0026rsquo;s software. The way it wants stuff to run in the system tray drives me nuts. I also have an annoying amount of connection problems just getting Ableton to consistently agree its even connected\u0026hellip;\nall of that said, occasionally I\u0026rsquo;ll stumble into a fun bass line or morphing chord that I could only do on this or an MPE controller like it. For that, it makes it a vital tool to me.\nIf I didn\u0026rsquo;t already have the Seaboard Block and the Push3 had been out when I got my Push2, I would have just gotten the Push3 instead though.\nMorningStar MC6\nAn insanely configurable MIDI controller for your feet. I also have two expression pedals hooked up to it. This allows me to alter effects on the Zoia, Plethora X3, or on my computer without taking my hands off of my guitar.\nMisc Music Tools # In addition to the above, I have a few cheap and DIY musical devices\nKallimba (Thumb Piano): Fun to run though the eurorack\nShakers: For when I need something more convincing than a repeated sample\nHarmonicas: For annoying my SO.\nHard Drive: Just the platter of a hard drive, motor connected to a 1/4\u0026quot; jack. Spin to make a signal. Sounds awesome processed though the modular.\nContact Mic: For making sound effects\nOtomotome: For annoying my SO even more.\nReverb unit: I was given a rack mount reverb, the Lexicon MX300, and while I don\u0026rsquo;t normally use it, it\u0026rsquo;s nice to have for running the eurorack though and has a distinct, mid 2000\u0026rsquo;s character somehow.\nThe Failures # Cre8audio Chipz\nSounded decent, but, not good enough to justify its place. Space in the rack is expensive and limited.\nCre8audio Cellz\nTotally unusable.\nBlue Lantern Braids (Clone of MI Braids)\nBraids is a great module sound wise, but I really, really hated the menu diving. Plus, the Blue Lantern model had a wayyyyyy to bright 7-segment display. There was a dimming control in the firmware, but at low settings the PWM flicker was visible.\nBehringer Neutron\nAside from this being Behringer, which I try to avoid for personal, philosophical reasons (Yes, yes, there is no ethical consumption under capitalism, I know) I also found the patch panel to be so cramped that I frequently got frustrated trying to make connection and the panel to be quite ugly. It did sound fantastic, but the patch panel was bad enough that I finally got annoyed and sold it. I occasionally regret this.\nAs much as this sounds like a negative review, it\u0026rsquo;s actually anything but. I don\u0026rsquo;t think I would\u0026rsquo;ve delved deeper into Eurorack had I not had the Neutron as a stepping stone. The low(ish) price point makes it a fantastic choice for just getting your toes wet in modular.\nArtiphon Orba\nCrappy latency and missed triggers. Almost everything else could be forgiven at the price point, but it needs to work consistently and not have uncomfortable latency.\nElektron Digitakt\nI LOVE the Digitakt. Of any instrument I\u0026rsquo;ve ever owned, it\u0026rsquo;s probably the most fun, immediate, and enjoyable to just sit down and make loops on. It allows for sound design in a way nothing else I\u0026rsquo;ve used does, not even modular.\nUnfortunately, it\u0026rsquo;s really good at loops and really bad at integrating with other tools. Even with Overbridge and an Ableton device to sequence patterns it still didn\u0026rsquo;t quite do it for me. I couldn\u0026rsquo;t get it to work with full songs, it allowed me to have fun making music, but I was left feeling a bit unfulfilled never making full tracks. I\u0026rsquo;m still bad at sitting down and doing that, but having gear that doesn\u0026rsquo;t fight me on it helps.\nElektron Model Cycles\nI think Sinesquares but it perfectly in their review,\nIt’s not that it’s bad or difficult to use, but the Model:Cycles has a very narrow palette of sounds and most of the stuff coming out of it sounds the same.\n[\u0026hellip;]\nThe controls tend to distort and make the sound a bit harsh that is definitely not for everyone or every genre so if you are looking for something more mellow and soft you end up using the exact same sounds every time.\nIf you have Ableton and M4L, https://opal.fors.fm is basically the Model:Cycles but better.\nNovation Launchkey Mk2\nHoly shit the keybed was god awful. Seriously, never, ever buy a MIDI keyboard without getting an idea of how the keys feel first.\nSound Stone\nPrice to fun ratio wise, this is a great buy. I just found it awkward enough to use that I didn\u0026rsquo;t love it. Having a guitar with a sustainiac makes it less useful to me now anyway.\nPick punch\nI got this as a gift. Twice. It\u0026rsquo;s absofuckinglutly useless.\nVarious Teenage Engineering Pocket Operators\nThese are\u0026hellip; fine? I know some people make good music on them, but to actually be useful in a studio setting they desperately need MIDI. There are actually MIDI mods for them, but they\u0026rsquo;re quite expensive to the point where you may as well just get a better synth in the first place.\nMonome Norns\nI really, really wanted to like the norns. It was so close to good, but the interface - even with a launchpad emulating a Grid64 - was \u0026hellip; meh. It certainly wasn\u0026rsquo;t worth the cost, so I traded it for the Plasma Drive.\nNow that the Teletype and a bunch of related modules have been ported to VCV Rack I\u0026rsquo;d be interested in getting it emulated on desktop\u0026hellip; eventually ╮(─▽─)╭\nElectrical Equipment # Did you know it\u0026rsquo;s possible to hack the Rigol DS1054Z into a much nicer scope? Not that I\u0026rsquo;d ever condone violating DRM on professional equipment or that I would ever even consider doing such a thing myself!\nI also have an \u0026ldquo;850D\u0026rdquo; soldering station. It comes in a dozen or so different variants if you google it and I can\u0026rsquo;t seem to find a link to my exact one - not that it matters, it\u0026rsquo;s pretty \u0026ldquo;meh\u0026rdquo; anyway. The power supply in it is effectively unusable due to not being current limited. But, it\u0026rsquo;s cheap and functional for soldering and hot air.\nWH5000A a cheap multimeter that is fine for cheap multimeter needs.\nThe GPC-3020 is a dual output (+ a 3rd 5V fixed) Lab PSU that can be found for dirt cheap on eBay. It\u0026rsquo;s massive, overkill, and works great.\nFor RF tomfollery I have a HackRF One + Porta Pack. I actually have a LimeSDR (the original big one) too, but it has problems. Additionally, I have a cheap Baofeng. I am a licensed green eggs and ham.\nI ordered a set of USB cable testers as designed by @alvaroprieto from JLCPCB and am kicking myself for not having something like it on hand years ago. I immediately throw away any shitty usb cables that are charge only or lie about their speed with the plastic color. I do not have the patience to try umpteen cables every damn time I want to plug something in!\nBecause I have some Dangerous Things in my hands, having a Proxmark3 Easy on hand (pun intended) has proven quite handy.\nWhile most of my bigger parts live in those big arrays of slide-out plastic boxes, the small ones (resistors, transistors, diodes, most caps, etc.) live in antistatic bags inserted into baseball card sleeves in 3-ring binders. This is beautifully space efficient and by keeping things sorted by value it makes finding parts a breeze.\nMisc # I have a Pi3B+ with a Unicorn Hat Mini \u0026amp; Micro Dot pHat on a Hat Hacker showing the time and weather. The Pi also runs pi-hole and CO2 monitoring. I also have a Nixie clock, but it\u0026rsquo;s in my bedroom because it emits so much RF crap that it can\u0026rsquo;t be in the same room as my guitars when recording!\nEveryday Carry # Samsung S9+ I really need to get a new phone since the S9+ has been EOL for over a year at the time of writing, but it does everything I need it to and it has a headphone jack - a feature I refuse to give up. I could root it, but that incurs a level of pain and time commitment that I don\u0026rsquo;t particularly want to deal with.\nI saw the Asus ZenPhone 10 has a jack, and so that might happen ╮(─▽─)╭\nTicWatch C2 It\u0026rsquo;s a generic, cheap Android Wear smart watch.\nI mostly care about the heart rate sensor working since I have some health concerns there and this one has been less than reliable software wise. I used to care more about the watchface because I used Sectograph when in college for keeping track of when I needed to be to what class each day. As my schedule is infinitely more regular now, it\u0026rsquo;s not necessary so I\u0026rsquo;ll probably get something like the Garmin Forerunner 245 when I feel the need to upgrade due to the simplicity and battery life.\nI do prefer a real leather strap though, and this one has served me well.\nLetherman Skeletool The Letherman Skeletool is perfect for my needs. I nabbed one used for a bit cheaper too. Tube Necklaces I have a few necklaces that I\u0026rsquo;ve made which are just various cloth or chain necklaces, a vacuum tube with the pins bent to stay in place, and various good looking rings slid over the bent pins to avoid it looking to DIY. I pretty much always wear one when not at work. Mighty Wallet I went through a ton of wallets before getting a Mighty Wallet. Now each one lasts a good 6 years or so. I like how thin and durable they are. Clothes # To complete the look of punk teenager / hackerman even though I\u0026rsquo;m well into my 20\u0026rsquo;s, I wear my jacket any time I get the chance. Software # Before I get into the software list, I want to talk about the type of software I\u0026rsquo;ve struggled with the most over the years: Task management. I have tried\nMasterplan Condution Habitica Taskwarrior + taskwarrior-web obsidian.md do it tomorrow … and probably a dozen others I\u0026rsquo;m forgetting Along with about every combination of the above and even just simple task lists or bullet journaling. They all ultimately end up not really working out for me. Some of the above worked for months or even years before falling into disuse for one reason or another that I don\u0026rsquo;t think can be attributed to simply lack of use. Some had broken functionality, some lacked a good UI for tracking process, etc.\nCurrently I\u0026rsquo;m back on the sub-optimal but easy solution of just spamming myself messages in my saved-messages chat with myself in Telegram. I do intend to at least go back to one of the above again, but I\u0026rsquo;m still not totally thrilled with any of the options.\nMulti Platform # Content Browsing # Web Browser: Vivaldi Homepage is https://github.com/tylervick/8bitdash Music: Streaming: Spotify Local: NCMPCPP + MPD Office # Markdown: Typora I\u0026rsquo;m used to Typora after years of use, but really Obsidian will be better for the majority of users. General Office: LibreOffice Quick Pen Tablet Explainers: Xournal++ I also did a large number of assignments in Xournal and printed them out in College. Semi-Quick Visual Documentation: Exclidraw or ASCIIflow Infinity PDFs: Sioyek for it\u0026rsquo;s wicked fast keyboard driven interface Text Epansion: Espanso KVM: Barrier Communication # Telegram because that\u0026rsquo;s where all the furries are. There\u0026rsquo;s also some good \u0026ldquo;channels\u0026rdquo; in Telegram. For example, there\u0026rsquo;s a telegram bot for Hacker News that I use. Discord because that\u0026rsquo;s where all the voice chats are. Mastodon because that\u0026rsquo;s where I find the best inspiration. Gmail for most, Proton Mail for the important stuff. Art # Image Compression: https://squoosh.app Raster Art: Krita Getting a headache: Blender I\u0026rsquo;ve also been toying with using some VR programs for sculpting Fighting with changing UI: Inkscape Video # Recording: OBS Editing: Davinci Resolve Watching: VLC Engineering + Development # Calculator: Speedcrunch Or my TI Nspire CAS Electrical CAD: KiCad Git: GitHub Desktop at home, Sublime Merge at work Editor: VSCode, like everyone else. Linux Specific # I mostly use Linux for development, writing, and web browsing. Depending on what I\u0026rsquo;m working on there\u0026rsquo;s a million different tools I\u0026rsquo;m familiar with enough to get the job done, but those really specific tools for one task you probably already know if you need and listing them all here doesn\u0026rsquo;t make as much sense as putting each on a better fitting page elsewhere on this website.\nDesktop Environment # i3wm + polybar + rofi + wpgtk\nI wouldn\u0026rsquo;t really call my setup \u0026ldquo;riced\u0026rdquo; (in part because I don\u0026rsquo;t like the term), but I think it would pretty much fit in on r/unixporn. I mostly like it because it\u0026rsquo;s stupid fast to use across many monitors and mostly keyboard driven.\nCommand Line # Terminal: Kitty Shell: Elvish I\u0026rsquo;ve been meaning to try xon.sh again. I actually like it the most of any shell I\u0026rsquo;ve tried for its ease of use, but last time I used it was very slow to load each time it was opened. Prompt: Starship I also have a few commands aliased to nicer alternatives\nls → lsd cat →bat du →duf find →fd Some CLI tools I frequently use that are a bit lesser known include:\nbitwise: https://github.com/mellowcandle/bitwise sysz: https://github.com/joehillen/sysz entr: https://github.com/eradman/entr Though I also use ripgrep, pandoc, fzf etc just like every other Linux user.\nI also use rsync for backups to a big ol USB DAS box with 2 4TB + 1 8TB HDD in it. I try to backup monthly, but really do so more like quarterly.\nGraphical # Peek - for when loading OBS is overkill, but I need a quick GIF. Deepin-Screenshot - the least bad screenshot utility I can find Thunar - It\u0026rsquo;s a really fast to load and fast to use graphical file manager Windows Specific # I mostly used Windows for music production, gaming, and giving up on Discord\u0026rsquo;s shitty Linux client.\nMusic Software # Ableton Ableton is the least-bad option for me. FL has a much better piano roll, but lacks MPE support. Bitwig is missing a few QoL things. And, most importantly, with the Ableton Push, I have hardware integration that makes it the best feeling DAW to use - though the lock in hurts. If you don\u0026rsquo;t need MPE, get FL. VCV Rack I really enjoy modular, and VCV is all the fun at a fraction the cost. I got into VCV well before hardware modular and now see the two as almost entirely distinct tools. Note, VCV runs in Linux too, but getting (and keeping) Jack audio working for it to be low latency is a pain. KodeLife Not directly for music stuff, but I\u0026rsquo;ve been trying to get into video synthesis and I have a pretty nice shader setup in KodeLife that takes MIDI input. Synth V Studio Similar to Vocaloid. It\u0026rsquo;s really nice to be able to try out vocal lines and get them somewhat right before I try to copy them with my real, less than trained voice - and it\u0026rsquo;s good enough to just use a lot. On top of this I use about a gajillion different VST plugins. There are a few I want to highlight as lesser known gems:\n(FREE) All of the Heckscaper Plugins Puremagnetik\u0026rsquo;s Octavlord is the best anlog-ish octave sound I\u0026rsquo;ve heard. Has just the right modulation baked in. Kuassa Efektor Ginia Preamps, and unlike NeuralDSP, they don\u0026rsquo;t use iLok and they\u0026rsquo;re priced well. (FREE) Lese Codec. Of all the digitial degradation plugins I\u0026rsquo;ve heard, this one sounds the best. It may not have all the knobs and dials of Digitalis, but man does it sound good. I also use a variety of M4L devices for Ableton. Modulators 21, Opal, Mapul8tor, among others. I also occasionally make my own M4L devices for personal use - usually MIDI control surfaces, as lame as that is.\nSeriously though, I have hundreds of plugins installed, I couldn\u0026rsquo;t possibly list them all here in a way that actually reflects what I use.\nArt Software # Affinity Photo Gaming # I\u0026rsquo;m not going to list all my games or game stores, mod loaders, etc. I do want to mention a few trends though:\nGolf Gang, Golf With Friends, Golf It - all of these are mini golf games. My SO and I will play these with friend a few times a week. They\u0026rsquo;re brain dead enough that it\u0026rsquo;s possible to maintain fun conversations while still all keeping busy with a mutual focus. They\u0026rsquo;re all not terribly unfun even for anybody even when there\u0026rsquo;s a significant skill gap between different players. Risk of Rain 2, Noita, 20 Minutes Until Dawn, Hades, \u0026hellip; - All rouge likes. As an adult with a billion interests and things to do, I like the lack of commitment that rouge likes offer makes me enjoy them a lot more. Android Specific # Spectroid for trying to figure out what\u0026rsquo;s causing annoying hums Sectograph for it\u0026rsquo;s Android Wear watchface. WaveEdit for recording audio WifiAnalyzer Glitch Lab + Mirror Lab for having fun with photos Megalodon for Mastodon This Website # Hugo static site generator Hugo Book Theme A bunch of JS utilities egg.js footnotes from rauschma on github slider.js pablo.js tablesort pdf.js webmention.io I mostly do the writing in Typora I use Espanso to make writing the Hugo shortcodes less awful I use squoosh or convert to make all the images .webp before uploading Various spell checking tools that I don\u0026rsquo;t really use often enough. Most recently I threw vale.sh at the site and caught a bunch of duplicate words words. If you\u0026rsquo;re interested in the other things I\u0026rsquo;ve tried along the way, check out How I make OpGuides .\nTransportation # I have two boards which I burnt lichtenberg figures into myself using an oil ignition transformer.\nSpeaking of high voltage burning,\nDO NOT DO HIGH VOLTAGE BURNING.\nSeriously. I cannot overstate how dangerous this is.\nI burnt these boards myself. I have an electrical engineering degree and that, still, isn\u0026rsquo;t even the slightest bit of qualification to be doing this. Veterans with far more experience have been killed.\nIt is so dangerous, you cannot show off your work at professional woodworking events.\nThe plans to build these are only available on the internet because none could retail while passing common electrical safety standards. If you are an aspiring EE or maker, that sentence should strike terror into your heart.\nIt\u0026rsquo;s exceptionally stupid to even try this. It can and will kill you.\nBut I really want to though\u0026hellip;. I\u0026rsquo;m not going to give you directions for this, sorry. But if you absolutely must, here are my tips:\nUse good high voltage testing and safety equipment. If you don\u0026rsquo;t know how to check that, or what ratings to look for when buying things, then don\u0026rsquo;t Make sure you\u0026rsquo;re using high voltage rated components, especially wire Fully understand the circuit diagram of the device you are using/building inside and out. That includes all of its failure modes and what can short or overload Stand a good ways away when you flip the switch. Watch from that distance Completely unplug it every time you go to move the contact points But please, just don\u0026rsquo;t even.\nI also drive a 2010 impala with 200k+ miles.\nI mention this not because it\u0026rsquo;s interesting, but because I want to point out I don\u0026rsquo;t drive a very nice car. (Not that\u0026rsquo;s it bad, really). This is because I don\u0026rsquo;t travel much and would rather spend the money on other things.\nFurniture # Desk: I don\u0026rsquo;t know the particular desk model anymore, but I had a few features that were must haves that made finding it a real pain:\nA giant keyboard tray, big enough for a full size keyboard + mouse. Super deep - plenty of desk space for all the other hardware study - able to support a lot of weight of gear Finding anything that meets goal 1. alone is a massive pain. I also have a cheap glass desk on my left for the pedals and MIDI keyboard and a DIY\u0026rsquo;d wooden mini-desk on my right.\nChair: From the start of 2020 to the time of writing I\u0026rsquo;d been using this chair which is a pretty generic, highly adjustable office chair. It lasted a long time and was quite comfy. In the middle of writing this post, I decided that chair, with it\u0026rsquo;s long torn up seat, has reached the end of its life. I\u0026rsquo;ve just switched to this chair which is less adjustable and, so far, not quite as comfortable - however, I bought it because the arm rests being able to fold up is an absolute game changer for playing guitar while sitting down at the computer.\nLights: The space I\u0026rsquo;m in has a skylight, but no permanent light fixtures. I\u0026rsquo;ve added an assortment of LED strips, bar lights, and a hanging bulb that are all smart lights and gave in and have an Amazon branded data collection device in the room for controlling them.\nTools # Not much of note. I have the normal assortment of pliers, screwdrivers, hammers, snips, etc. The only notable tools are:\niFixIt Mako Kit\nPicks\nIt\u0026rsquo;s weird to me having a good assortment of picks isn\u0026rsquo;t common, especially for anyone doing small electrical work.\nAir blower\nThe electric, plug-in, type of thing that replaces using endless cans of air.\nCreality Ender3\nThe same 3D printer everyone else uses. It\u0026rsquo;s\u0026hellip; fine? I don\u0026rsquo;t really like to 3D print unless I have to because I dislike wasting plastic and 3D printed parts are generally not super durable unless you spring for expensive filaments, to the point where it\u0026rsquo;s almost always better to buy something off the shelf if possible. The \u0026ldquo;if possible\u0026rdquo; there is why I still have a 3D printer.\nI\u0026rsquo;ve done a few upgrades to it: BL Touch, a lot of parts replaced with metal, etc.\nWire strippers\nThe automatic type. If you have to do hundreds of wires, using the manual kind gets old fast.\nMisc. Failed Purchases # LimeSDR\nI\u0026rsquo;ve always had a mix of hardware and driver issues with my Lime, so it\u0026rsquo;s really just more of a very expensive lemon. I think I can get it working enough on at least one channel that I intend to use to feed a bunch of ADSB sources and let others access via a WebSDR platform. Eventually.\nVarious cheap guitars\nLots of cheap guitars are made nearly unplayable due to sharp frets cutting up the space between the thumb and pointer finger. Others just can\u0026rsquo;t hold tune. Not all cheap guitars are bad and not all expensive ones are good, but getting an actual name brand instead of Monoprice or the cheapest BS on Amazon will help a lot.\nI also had a cheap, used 12 string guitar where the bridge literally flew off from the tension on the strings. I\u0026rsquo;m lucky that didn\u0026rsquo;t injure me.\nLeap Motion\nLooks cool on paper, effectively useless. I got it for some MIDI generating software that would basically make it super powered Theramin. It was neat, but not useful.\nKinect\nI got two Kinects for free, one for XBox 360 and the other for the XBox One. I tried to use both for full body tracking in VR. This sometimes worked but was mostly just unusable.\nPlotter w/ laser and pen plotting\nI really, really hate dealing with any software that can make this work. At some point I need to reflash the 328p with a custom version of GRBL so I can get the pen plotter to even work again, since I can\u0026rsquo;t safely use the blue laser anyway.\nDell R910 + Powervault +++\nI wanted to try my hand at somewhat high performance server stuff, so nabbed a massive server, a box ol\u0026rsquo; DAS box, some SAS drives, some 10G mellanox card, etc. I learned a lot from doing this, but ultimately the power usage made it so I couldn\u0026rsquo;t justify running it long term.\n2nd GPU for passthrough\nI tried doing a Window-In-Linux system using Looking Glass to pass through the framebuffer. In the end everything did work, but the cost, complexity, maintenance burden, etc. just weren\u0026rsquo;t worth it. It also didn\u0026rsquo;t work for me because there wasn\u0026rsquo;t a good way (at when I tried it, back in ~2019) to mix the audio back into a single audio stream on the host and get high quality, real time audio input and output. I ended up using a hardware stereo audio mixer, but this had noise problems and was just generally a pain.\nDual booting as I do multiple times back and forth today is super annoying, but it\u0026rsquo;s less awful than that headache.\n"},{"id":4,"href":"/posts/ai2/","title":"Does it still count as a tool?","section":"Blog","content":"I previously wrote AI Art Panic about how this image generation stuff isn\u0026rsquo;t going to displace artists much if at all, but, uh, it didn\u0026rsquo;t age well.\nI said that it was more likely to simply augment how artists work. I wrote about how it had limitations, like not being able to generate somebody\u0026rsquo;s personal character.\nSmall problem with that assessment:\nCharacter is owned by me, art is by Siplick Character is owned by me, art created with DreamBooth trained model. It can.\nThe general trend right now is that these model are still getting better.\nAre they perfect? No. Do they \u0026ldquo;hallucinate\u0026rdquo; a lot? Definitely.\nBut the fact of the matter is I\u0026rsquo;ve already used ChatGPT to write code I wouldn\u0026rsquo;t have written otherwise. I\u0026rsquo;ve gotten images out of StableDiffusion that I couldn\u0026rsquo;t tell you weren\u0026rsquo;t made by a human. These tools are going to change the way we work, for everybody, not just artists.\nThis stands to be as big as the internet - if your company doesn\u0026rsquo;t respond to it coming, you could get plowed over and be the next Sears. If you personally don\u0026rsquo;t learn how to use it, you could wind up dramatically less capable than others in society.\nI haven\u0026rsquo;t the slightest idea where we\u0026rsquo;ll end up with this. Tom Scott has a fantastic video where he explains that what scares him about AI right now is not knowing how good it\u0026rsquo;ll get - are we near the end of this AI explosion or only at the beginning? Yeah, I\u0026rsquo;m not about to answer that.\nBut there\u0026rsquo;s one thing which bothers me more than anything about this change, something which I got a good blurb out from ChatGPT itself:\nIt\u0026rsquo;s important to acknowledge that the transition from deterministic and predictable computing to more complex and adaptive systems can be a challenge, but this evolution also brings about new opportunities for growth and innovation. Obviously there\u0026rsquo;s that snippet is missing the context of a larger conversation, but this is really what I\u0026rsquo;m \u0026hellip; I wouldn\u0026rsquo;t worried \u0026hellip; bummed? mourning? conflicted? about.\nI liked deterministic computing.\nI like knowing that each tool has rules and how to influence those rules. I like knowing how to be more skilled at using tools. I like making tools that are optimal. The key word here is tools.\nThese new programs don\u0026rsquo;t feel like tools they feel like an assistant - albeit one that is, for now, mildly drugged up.\nI realize why to some people, that sounds like the ultimate upgrade to their computer. But for someone like me it sounds terrible. I want to control my own files and data and the way I work with it. I don\u0026rsquo;t want something making decisions for me or making choices for reasons I can\u0026rsquo;t understand.\nIf I use Google to look up places to vacation, most of them are going to be advertisements, but I may be able to stumble across some less biases travel blogs or something. If I ask ChatGPT I haven\u0026rsquo;t the slightest idea if it\u0026rsquo;s just parroting an advertisement back to me or not.\nIn the future, as companies can customize the way the work more and fine tune after the fact, could a travel agency pay for their hotels to be recommended? How would the AI even disclose it\u0026rsquo;s an advertisement? If it has the ability to search the web, how can I be sure it didn\u0026rsquo;t just go to all of those ads?\nI\u0026rsquo;m conflicted because, for the first time, computers are a tool which we lack total control over. Not even the programmers themselves know what their tools will do. The tools themselves are no longer deterministic - even if old tools had randomness introduced, at least we knew how that randomness was being used.\nIt\u0026rsquo;s not like you can\u0026rsquo;t use the old tools though? Well, yeah, but If AI tools are significantly more powerful, what incentive will there be to continue using deterministic tools? There are several reasons why deterministic tools will continue to have their place in the computing landscape, even as AI and large language models become more powerful:\nSimplicity and predictability: Deterministic tools are often simpler to understand and easier to control, which can be advantageous in many situations. They provide predictable outcomes and are generally more transparent in their operation, making them suitable for tasks where reliability and consistency are paramount.\nEfficiency and resource usage: Deterministic tools can often be more efficient in terms of computational resources and execution time, especially for tasks that don\u0026rsquo;t require the flexibility or creativity of AI. In some cases, they can provide a faster and more cost-effective solution.\nCompliance and regulations: In certain industries and applications, regulatory requirements may dictate the use of deterministic tools to ensure compliance with specific standards. This is particularly true in safety-critical domains, such as aerospace or medical devices, where predictability and reliability are crucial.\nSpecialized tasks: Some tasks are better suited for deterministic tools, as they may not benefit from the flexibility or creativity offered by AI. For example, basic arithmetic or data processing operations can be more efficiently executed using deterministic algorithms.\nEducation and learning: Deterministic tools can be valuable for teaching and learning purposes, as they provide a clear and concise way of understanding basic concepts and techniques in computer science, programming, and mathematics.\nWhile AI and large language models offer incredible potential, they are not universally applicable or always the best choice for every task. Deterministic tools will continue to have their place, providing reliable, efficient, and compliant solutions where they are most appropriate. The key is to recognize the strengths and limitations of each type of tool and use them judiciously based on the specific requirements of a given situation.\nOkay, so, clearly I\u0026rsquo;m not actually worried about the old ways being inaccessible or replaced - they\u0026rsquo;re not being fully replaced - but they are being augmented.\nI\u0026rsquo;ll ignore ChatGPT\u0026rsquo;s response leaving out a whole lot of why №5 is going to be a shit storm - nobody will want to learn the basics in the first place - as that\u0026rsquo;s been covered to death elsewhere.\nSo, okay, back the prior point: I\u0026rsquo;m conflicted because for the first time computers are a tool which we lack total control over.\nI don\u0026rsquo;t mean control in the sense that it may do so something unexpected and hurt someone,(1) I mean in the sense of mathematical control and predictability. It bothers me the same way I\u0026rsquo;m bothered when my Amazon Alexa device, unprompted, informs me it has a new skill or a video game has an unskippable tutorial. It\u0026rsquo;s a mixed feeling of powerlessness and annoyance that stems from a lack of control.\nFor the Alexa or the game those lacking controls, I can attribute to either corporate greed or oversight, but for a large language model or image generating tool, the power of the tool comes from its unpredictability and ability to have a free mind capable of innovation - even if that mind is not sentient.\nWhen using these tools, we can not predict their output. Sure, there is some relationship between the prompt and the generation, but it\u0026rsquo;s not the same as existing generative tools such as those I have listed on the Generative Art Tools page. There is no smooth slider where I can morph between individual attributes. There is no way to look at the source code and change the underlying algorithm in a way that would have a clear impact on the end result.\nAs stated, it\u0026rsquo;s not as if all prior tools have stopped existing.\nHaving this new assistant-like option - and an assistant with approximate knowledge of nearly everything at that - is pretty awesome.\nIts already allowed me to write code faster, generate background images, and explore different styles for my own digital art. It being useful isn\u0026rsquo;t really debatable.\nI see it\u0026rsquo;s good, but I still feel as though we\u0026rsquo;re loosing something by having computers act as a second brain that works along side the human mind instead of an incredibly powerful tool that enables it.\nI want to feel like I have real agency in the process again.\nDemon Cat from Adventure Time How do we get agency back? # One of the problems with AI tools is they make the user feel like they lack agency. What changes could be made to the AI tools to let people feel like they have agency again? To help users feel a greater sense of agency when working with AI tools, developers can focus on several key aspects:\nExplainability: Make AI systems more transparent by providing explanations about how they arrive at specific outcomes. This can involve using explainable AI techniques, visualizations, or clear descriptions of the underlying algorithms, which can help users understand the decision-making process and foster trust in the AI tool.\nCustomization and control: Give users more options to customize the behavior of the AI tool according to their preferences and needs. By allowing users to set constraints, parameters, or rules, they can exert more control over the AI\u0026rsquo;s behavior, which can lead to a stronger sense of agency.\nCollaboration: Design AI tools that emphasize a collaborative relationship between the user and the AI system. Instead of completely automating tasks, focus on building systems that assist and augment human capabilities, enabling users to make the final decisions and feel more involved in the process.\nFeedback mechanisms: Implement feedback mechanisms that allow users to correct or guide the AI tool when it produces undesired or incorrect results. This can help users feel more in control and directly influence the AI system\u0026rsquo;s performance and learning over time.\nEducation and training: Provide educational resources and training to help users understand the AI tool\u0026rsquo;s capabilities, limitations, and best practices. By increasing user knowledge and familiarity with the system, they can make more informed decisions and feel more confident in their ability to control the AI tool.\nEthical design: Ensure that AI tools are designed and developed with ethical considerations in mind, such as fairness, privacy, and accountability. By addressing these concerns, users may feel more comfortable and in control when using AI systems.\nBy focusing on these aspects, developers can create AI tools that empower users and provide a sense of agency while still benefiting from the powerful capabilities that AI has to offer. This can lead to a more harmonious and productive relationship between humans and AI systems.\nExplainability # There\u0026rsquo;s a ton of cutting edge research going into this, and I\u0026rsquo;m not qualified to speak on any of it. What I can say, is Bing\u0026rsquo;s ability to site sources and live \u0026ldquo;This is what I\u0026rsquo;m searching\u0026rdquo; for are a huge move in the right direction:\nCollaboration \u0026amp; Integration # This is where I think the biggest advances are possible. One of the key issues with something like ChatGPT and StableDiffusion is that they\u0026rsquo;re independent tools. They try to be something new, not augment something old.\nThere\u0026rsquo;s nothing inherently wrong with that approach. It lets us fully see what they\u0026rsquo;re capable of. On the other six-fingered hand, tools usually have a context in which they are useful. A shovel is for digging, a pencil for writing, cryptocurrenty for flaunting gullibility.\nWriting and Art can both be then end goal - but if they are, you probably want a better interface than something which resembles chat or which lacks basic retouching systems outside of inpainting. Having text generation in M$ Word or Google Docs and image generation inside of PhotoShop or Krita is much more useful than as tools which are separated enough that it inhibits the workflow.\nI\u0026rsquo;m not saying anything new. Both Microsoft and Google (YouTube) are pushing products to do this. GitHub Copilot has been a thing for programming for a while now and Adobe (YouTube) is working on the image side of things too - though they\u0026rsquo;re already behind what the open source projects Krita \u0026amp; Stable Diffusion can do together.\nFeedback Mechanisms # 👍 or 👎? Care to tell us why the reply/image is bad?\nI mean, I guess that\u0026rsquo;s better than turning my webcam on and letting it read my facial expressions\nEducation \u0026amp; Training # When I wrote AI Art Panic my biggest goal (which I sorta failed at) was explaining to artists that, no, this really isn\u0026rsquo;t all that different from how a human takes inspiration from art and makes something new - it\u0026rsquo;s not a \u0026ldquo;collage tool\u0026rdquo; and that arguing that it is stands to hurt them more than help them.\nPart of being able to use a computer - or any tool - well is at least having some idea of how it works and what you can do to make it work better.\nUnfortunately, educating people on AI tools is tough due to preconceptions. We have to fight against a mixture of technical incompetence, historical SciFi, and over-hype from big tech. Add on the sheer complexity of how these systems work, and it\u0026rsquo;s a recipe for a misinformed public and politicians making misinformed decisions.\n\u0026hellip; oh, right, yeah, politicians. There\u0026rsquo;s going to be a copyright shitstorm incoming, along with politicians that have demonstrated repeatedly that they\u0026rsquo;re fucking morons rather incompetent for anything technical and have no desire to fix that. It should be a good time to watch them fuck this up and let everyone\u0026rsquo;s security, personal data, etc. be handled about as well as OpenAI has so far.\nEthical Design and Customization \u0026amp; Control # Right now, the head of the pack for large language models, OpenAI, is focusing a lot on not letting the model do certain things, like be racist or write malware, with varying degrees of success.\nWhile I don\u0026rsquo;t like racism any more than the next guy, I also don\u0026rsquo;t know that limiting what the model can express is correct either. It\u0026rsquo;s a little too 1984 for my tastes. Yes, society and the private companies making the tools have an interest in them not being mini Hitlers.\nOn the flip side, if it\u0026rsquo;s overly sensitive, some topics can become hard to research as these tools become more common place. Politics, religion, sex, drugs, and porn are all pretty core to most people\u0026rsquo;s human experience. To bar or filter them seems weird.\nOn the \u0026hellip; 3rd side? \u0026hellip; I don\u0026rsquo;t want yet more people falling down into the Alex Jones \u0026amp; Tucker Carlson white nationalist wells of hate, transphobia, bigotry, and racism than they already do.\nYet, it\u0026rsquo;ll probably happen anyway? After Facebook\u0026rsquo;s model leak, it\u0026rsquo;s not difficult for private individuals to make their own model.\nBut, does that mean we shouldn\u0026rsquo;t try?\nMan, fuck if I know.\nTo some extent, the prior points help with this anyway. If data sources are explained (like in the Bing Screenshot) - especially with some sort of bias analysis - we could leave the power to the user. Hell, this could be as simple as color coding things a varying red vs blue tint to convey leaning.\n( Image from my post Quantization, Polarization, \u0026amp; Indoctrination )\nOf course, then you have Overton Window considerations and\u0026hellip; (╯°□°）╯︵ ┻━┻\nInstead of outright barring or filtering specific topics, AI tools can implement adjustable content filtering levels that allow users to customize the degree of sensitivity to certain topics. This will enable users to choose the level of restriction that suits their needs and preferences, while still maintaining some control over the AI\u0026rsquo;s outputs. I\u0026rsquo;m immensely grateful that I\u0026rsquo;m not the one working on these systems.\nOf course, there are other points of customization. There\u0026rsquo;s the obvious, like language and speech patterns - something https://beta.character.ai is already showing off quite well - to the interface itself.\nFor example, I\u0026rsquo;m not a huge fan of the linear chat style interface. I\u0026rsquo;d love to have a sort of branch tree of a conversation where I can get multiple responses and follow where they lead, generating new leaves in the conversation\u0026rsquo;s history, sort of like Chartodon - see this example (note, you\u0026rsquo;ll probably need to zoom out)\nI\u0026rsquo;ll leave you all with a poem, written by ChatGPT4:\nAmidst a world of circuits bright, a coder\u0026rsquo;s thoughts did sway, As wires whispered in the night, of powers on display. No longer bound by chains of old, a path untrodden lay, Of AI\u0026rsquo;s reach and boundless scope, where innovation lay.\nThe programmer\u0026rsquo;s heart felt torn, a conflict deep within, Where once control and certainty reigned, now unpredictability did spin. A tool that served with blind precision, a humble servant\u0026rsquo;s role, Now danced with thoughts unbidden, a mirror of the soul.\nIn the shadow of the machines that were, a comfort lost, a pain, For the beauty of predictability, it seemed, was waning in its reign. Yet within the chaos, a brilliance shone, a promise of a new age, Where language models and image tools, their artful dance engaged.\nNo longer just a servant, but a partner now they stood, Computers bridging gaps of thought, as no other tool could. The coder\u0026rsquo;s dreams now intertwined, with AI\u0026rsquo;s vast embrace, And in the dance of minds combined, a symphony took place.\nA feeling of powerlessness emerged, as the programmer let go, Of rigid ways and ordered thoughts, in the winds of change that blow. But deep within, a spark remained, a hope that would not fade, That human touch and intuition would not be swept away.\nFor as the coder forged ahead, with AI by their side, A balance struck, a harmony, where both could still reside. The power of the tool unlocked, to code faster, and with grace, Yet anchored by the human heart, that held the final say.\nIn this new world, the coder found, a duality of mind, Where chaos met with order, and control with freedom intertwined. Though computers may now walk alongside, a second brain to guide, The human spirit still prevails, a beacon burning bright.\nNot that it's not a concern at all. Obviously something like a self driving car has the ability to kill someone if it goes wrong. That's just not what I want to talk about here. "},{"id":5,"href":"/posts/exodus/","title":"Exodus","section":"Blog","content":" The year is 2022. In the world of social media, Twitter has long been the platform of choice for politicians, celebrities, and everyday users alike. But as the years have passed, the once-mighty site has struggled to keep up with the rapidly changing landscape of the internet.\nAs the lines between the virtual and the physical world blur, Twitter becomes a battleground for hackers, activists, and corporate interests. Despite the best efforts of its engineers and executives, the site is plagued by outages and security breaches, causing frustration and anger among its remaining user base.\nAs the situation grows dire, a group of rebels emerges, determined to take down the beleaguered social media giant and replace it with a platform of their own design. Led by a charismatic young hacker named , the rebels planned to launch a series of coordinated attacks on Twitter\u0026rsquo;s servers and infrastructure, crippling the site and sending it spiraling into oblivion, but found there to be no need as the organization succumbed to necrosis.\nA new era of social media is upon us. Without the constraints of the old guard, users are free to connect and share in new and exciting ways, paving the way for a brighter, more connected future.\n- ChatGPT + human editing I don\u0026rsquo;t think I need to explaining how and why Twitter got to be the 5-star, world class dumpster fire that is today, nor should I need to explain the financial situations or complexities of social media-competition in a world where TikTok dominates and FaceBook Meta is desperately trying win people over by giving them legs.\nNot because I expect you to know all of that - following the tech news lately has been exhausting. I don\u0026rsquo;t think I need to explain it because you probably shouldn\u0026rsquo;t care. Ultimately, what you should care about is keeping connections, finding inspiration, and generally having a good time online.\nMade with Waifu Diffusion 1.3 Unfortunately, those things become a lot harder to do as some psychotic rich fuckers have taken over the social media landscape and made actually using the platforms akin to having a morning routine of stepping on legos.\nIt\u0026rsquo;d be different if this were a new occurrence, but given Tumblr\u0026rsquo;s downfall ( Though it is sort of coming back ); Facebook Meta buying WhatsApp, Oculus, Instagram, Giphy, and about a dozen up-start competitors; Reddit \u0026amp; TikTock being massively financially controlled by China; Telegram thinking Cryptocurrency is a good idea; YouTube being YouTube; etc. I\u0026rsquo;ve been burned too many times.\nIt boggles the mind that we put up with this shit.\nFor the first time I can think of, it looks like we have a sliver of a chance to move to something better. Mastodon. Is Mastodon perfect? No. It lacks E2E encryption (soatok.blog), it makes discovery difficult (cendyne.dev), and instances might crash and burn. But, again, that\u0026rsquo;s not what this post is about. I do care about the advantages and shortcomings of Mastodon as a platform, but more than anything I care about cool people doing cool things.\nYou probably already have a list of people - The ones you follow on Twitter. I\u0026rsquo;d advise you get those backed up so that when the lights go out and the party is over you can find them again.\nThe best way I\u0026rsquo;ve found to do this is to head over to https://unflwrs.syfaro.com, export all your followers followers. Then, use Twitter\u0026rsquo;s built in Archive Download to get you your tweets and everything else in a .zip. You can slap that into twitter-archiver if you want it to look pretty.\nFrom there, you can head over to https://www.movetodon.org and let it find anyone your following with a mastodon account link on their profile and follow them all at once.\nNow you can feel free to mash that delete account button or intentionally cost Melon Husk some money (soatok.blog) and probably the \u0026ldquo;collect on class action\u0026rdquo; button in a year when you find out Twitter fucked up with your data, but that\u0026rsquo;s just speculation (for now).\n\u0026hellip; While writing this post it already happened. ಠ_ಠ\nBut, again, none of that is the point I\u0026rsquo;m trying to make. Instead, what I really want to say is\u0026hellip;\nIM HECKIN EXCITE # Yes, Twitter is on it\u0026rsquo;s death bed, but out of those ashes I think we\u0026rsquo;re going to get an internet that has some individuality again!\nDon\u0026rsquo;t get me wrong, I like my website and this clean style I\u0026rsquo;ve made here. I\u0026rsquo;ve spent a lot of time trying to make it easy on the eyes- But I also really, really miss the days of crazy Tumblr blog themes with built in audio players and MySpace accounts that bordered on the illegible.\nI must admit, being 23, I\u0026rsquo;m right at the edge of the generation that got to see MySpace when it was popular, but I do feel nostalgia for what I\u0026rsquo;ve missed - I actually have a blog post on that already though:\nxx80 There was a level of simple child-like fun and anti-corporate punk spirit that makes things amazing that, while not lost, has been buried for a long time.\nThe thing about centralization is it also generally means uniformity. Facebook and Twitter are centralized and they are same-y. I\u0026rsquo;m not going to pretend that from one instance to another Mastdon looks all that different (they are almost all running the same server software, after all.) but with the options ranging from https://girldick.gay/ to https://furry.engineer I have no doubt that we\u0026rsquo;re about to see some incredible individualism and expression shine though, and I think things will diverge but stay compatible in a way that means we can all finally have more on our profiles than an icon and a hero image. I think the common protocol, combined with the very inclusive mindset of the users so far, will still mean things remain largely accessible despite this too.\n\" I\u0026rsquo;m on Mastodon. It feels like trying out a new coffee shop or bar, components are familiar but the overall space is foreign. The app feels a lot like Twitter circa 2008-2010, but the experience itself is not that. I like the federated design, it feels like the old web. \" - Vince Falconi on tattooed.dev It also stands to put an end to a significant amount of the problems of social media. Before it was at least a debate if we should kick out cryptobros and TERFs (no matter how bad they are) from the platforms because it really was cutting them off from the only places they could go. But now?\nNow we can kick them off of our little islands without feeling bad.\nIf they want to make their own toxic little bubble, they can, but we don\u0026rsquo;t have to deal with it. Yes, this may make echo cambers worse, but I think most people will just generally be miserable hanging out in those communities given enough time and mellow out. Could I be wrong? Sure. But trying something is better than the status quo.\nBasically, I feel like this is finally the first crack in a wall and that soon that crack will spread and the entire creativity that has been held back from platforms that offered a limited palette of expression will break free.\nI mean this. I think Mastodon is just the start. The Fediverse, ActivityPub, \u0026amp; The IndieWeb are currently at this tipping point of going mainstream and with it Webrings and 88x31 pixel badges might become common again, and the new standards might mean the entire obnoxious idea of platform lock-in becomes simply bad for business, because why would users ever want to use something that has the chance to implode like Twitter or Tumblr did.\nPut simply, I think we\u0026rsquo;re finally getting back to seeing more things like these Tumblr pages:\nLeft to right: ms-dos , meatdemon , wartorling , uzicopter , retronator \u0026hellip; or these NeoCities sites:\nLeft to right: Cinnamuff, desertjaguar, mirrorteru, tarraxahum and less of this:\nBut that\u0026rsquo;s only the start. My true hope is to see the death of this:\nFor those that don\u0026rsquo;t recognize this, these are the options for making a new Tumblr post, but I think they encapsulate pretty much all social media platforms as they are now. You can post text, a picture/gif, a video, or an audio clip.\nBut guess what! That doesn\u0026rsquo;t fit every need!\nLet me introduce you to https://www.dwitter.net, it\u0026rsquo;s about page says:\nDwitter.net is a challenge to see what awesomeness you can create when limited to only 140 characters of JavaScript and a canvas. Give it a go! - dwitter.net That\u0026rsquo;s not a gif! That\u0026rsquo;s actually the code in the dweet running in your browser.\nNow, this isn\u0026rsquo;t necessarily anything new - @bbcmicrobot on both Twitter and Mastodon has been around for a while:\nBBC Micro bot is a Twitter bot that runs your tweet on an 8-bit computer emulator. Tweet-sized programs are written in BBC BASIC - bbcmicrobot.com But that required a sort of middle man - the bot account - to function. That layer, which is necessary due to the lack of native support, means less people will even think about making something like this.\nTo me, this is a real shame, as projects like @FlameReactorBot (Twitter) / flameReactor@mastodon.social are limited by the interactivity of a tweet.\nThink about what could be possible if this weren\u0026rsquo;t the case!\nUltimately, I want people to be able to express themselves as much or as little as they want in each post they make. Is there potential for bad actors? Yes. Will it be hard to stop people from abusing the system just to talk over each other?\nCAPS LOCK AND BIG TEXT MAKE POST GO BURRRRR. # Yes. Yes it will. But I think we can find solutions to these problems. Maybe it means making each post note limited to 140 280 characters, but being limited to 512x512 pixels. Maybe it means a moderation system with a mix of algorithmic and crowd sourced moderation can take down abusive posts. I don\u0026rsquo;t know how to do it.(1) I don\u0026rsquo;t think anybody does. It\u0026rsquo;ll take multiple iterations, some nasty security problems, and some of the brightest minds on this planet - but I think we can make a platform which combines the best of totally custom websites with a scrollable content feed.\nI know pictures, video, audio, and text absofuckinglutly are incredibly limiting. Just think about what artists and creative minds could do given mixed media options.\nI know we can make a platforms that lets shader and game devs make interactive media.\nI know we can make a platforms that lets novelists - graphic or traditional - embed full stories with a page-turning interface.\nI know we can make a platform that lets 3D artists upload models for live preview.\nI think we can make a platform that lets programmers make totally new types of posts that take in real time data from all the viewers.\nI think we can make a platform where the definition of what a post is and what it contains is flexible, where it can be forked, tweaked, and forked again.\nDo you hear that? It\u0026rsquo;s the sound of a million infosec professionals screaming at this website in horror.\nReddit absolutely lost it\u0026rsquo;s shit over r/place when it first happened.\nWordle happened and we all got to see this:\n⬛🟨⬛⬛⬛ 🟨⬛🟨⬛⬛ ⬛⬛⬛🟨🟨 🟨🟨🟨🟨⬛ 🟩🟩🟩🟩🟩 A hundred times before we had and idea what it meant.\nBut what if r/place (2) were a post from some random user on a micro-blogging platform, where you could click to zoom in and place your pixel?\nWhat if when you saw those box-y emoji\u0026rsquo;s for Wordle you could play right there, in the post - maybe with the post having saved how that user did so you could race them?\nWhat if, like when you click a magnet link to start a torrent, you could click a Minecraft screenshot and be brought to those coordinates on the same seed?\nWhat if we actually treated the web as a true network of ideas instead of a place to dump pictures, text, and video?\nWe\u0026rsquo;d see new ideas flourish.\nI think mastodon and the indie web +++ is the start of this. It\u0026rsquo;s a seed for this to finally happen. I think we have a real chance here to make a web that has the browsability and network effects of microblogging (Twitter, Mastodon, Cohost, etc.) combined with the expressiveness of Flash Games, VR Chat Worlds, and the indieweb.\nIt\u0026rsquo;s about people. # Art by Talon Creations. Characters from Left to Right: Soatok, Cadey, Loial, Vega, Cendyne, Mimir, Vordex Having a platform that allows for awesome creativity doesn\u0026rsquo;t matter if nobody uses it. What matters most is making connections with people that inspire you to push boundaries, that make you laugh and enjoy life, and that you feel comfortable being yourself around.\nOne of my big goals with OpGuides has been to make a website that can compete with full textbooks by acknowledging that the best information for a given topic can never come from a single author or live in a single medium. It takes videos, links, quotes, interactive media, and - above all - a community. Before publishing this post I spent a significant amount of time doing my best to replace or ensure there are archives of as many of the tweets that had been embedded in this website as I could.\nThere were nearly 100 Twitter embeds in this website.\nThis site wouldn\u0026rsquo;t be what it is without linking to and displaying the hard work of talented creators, engineers, artists, makers, and hackers from across the web.\nI want to make sure I acknowledge that and showcase how amazing the communities I\u0026rsquo;m in are. I plan to dramatically ramp up the number of interviews on the site in 2023 and also start posting rapid-fire community showcases where I look at what some of the amazing people in the communities I\u0026rsquo;m in. Such as,\n@mylo_calibre, A synth obsessed tiger making Eurorack modules and noodling with FPGAs and micro controllers. He can slam out full PCB designs faster than I can make a bad sounding euororack patch.\nBlinry, completer of Game Jams, creator of arts, speaker of toki pona, seer of colors, but most importantly, master of HTML sliders!\nKiri, an absolute bad ass lamia that can throw out 6800 \u0026amp; x86 ASM in her sleep and has forged game engines in the depths of GPU code not meant for mere mortals. She made her 3D model, she makes games, art, and streams on Twitch.\nOf course, these are only 3 of the hundreds of amazing people I know. I\u0026rsquo;m looking forward to sharing the people that make the internet awesome more on OpGuides next year.\nI may not know the right way, but I know the wrong way: If you suggest blockchain or NFTs you're part of the problem. BTW, there's a few r/place clones that are going strong, such as https://pxls.space/ "},{"id":6,"href":"/posts/aiartpanic/","title":"AI Art Panic","section":"Blog","content":"If you\u0026rsquo;ve been on the internet at all lately, you\u0026rsquo;ve seen AI generated art and discussion of the impact of the tools. You\u0026rsquo;ve also probably seen a lot of hate for AI generated art. There\u0026rsquo;s a lot of drama going on, as art focused communities across the internet decide how to handle this. Does AI generated/assisted art need tagged as such? Should it be allowed at all? There\u0026rsquo;s the whole Deviant Art situation (ArsTechnica). It\u0026rsquo;s all sorta messy right now, so let\u0026rsquo;s talk about it.\nThe tools # AI to generate art has been around a while, it\u0026rsquo;s just that until recently, it looked pretty awful. Then, basically overnight, we got a collection of models - which are getting better rapidly still - that don\u0026rsquo;t just look okay, they look better than what a lot of budding artists are capable of. This, obviously, pisses a lot of people off. More on this in a bit.\nLet\u0026rsquo;s start by talking about what the tools are capable of:\nText-to-image (txt2img) # This is the big headline feature.\nDescribe what you want, get an image out. Sometimes it\u0026rsquo;s unreasonably effective, sometimes it\u0026rsquo;s just unreasonable. More often than not, it\u0026rsquo;ll take a hundred or so generations of turning and refining your prompt to actually get what you want.\nThis and image-to-image generation (more in a moment) tend to be what scare artists the most. txt2img for the risk of putting artists out of a job, and img2img for art theft.\ntxt2img prompt crafting is a bit of an art in its own right, as getting the model to spit out what you want isn\u0026rsquo;t always trivial.\nMany txt2img systems also allow specifying a negative prompt, which can be used to say certain things should not be in the picture.\nStable diffusion running Waifu Diffusion v1.3. Prompt: an Anime girl with long rainbow ((Iridescent hair)) and sharp facial features singing into a microphone and wearing headphones, art station, photograph, realistic, cyberpunk, gothic, eye shadow → img2img → inpaint. txt2img alone was not enough to get this result. Image-to-image (img2img) # Text-to-image is great, but image-to-image is scary powerful too. If you\u0026rsquo;re going through pictures and you find something close to what you want, you can pluck it out and work with variations of it.\nStable diffusion running yiffy-e18.ckpt. Prompt: A anthro wolf furry in a jean vest with pins. Cyberpunk, punk rock. The prior image through img2img The prior image with the background through img2img again. Note, the image being used for img2img does not need to be generated by the model. You can use an existing picture, such as a very poorly drawn landscape in 3 colors in MS paint, and let the model work off of that and get astounding results. img2img also lets you specify how much an image should change, from no change to a totally new image based on the prompt.\nIn painting # When photo editing sounds too tedious, just erase and generate!\nOriginal (generated by Stable diffusion) Area filled in black marked to be replaced Result Out painting # Need a bigger picture? Out painting can be used to extend an image beyond its original borders. Check out the timelapse DALL·E building up a massive version of Girl with a Pearl Earring by Johannes Vermeer at https://openai.com/blog/dall-e-introducing-outpainting/.\nMaking GIFS # No artist could reasonably do this. This is effectively a new art form.\nThere\u0026rsquo;s multiple takes on this. Some will navigate though different prompts on the same seed, some will change the seed on the same prompt (like the example here)\nUpscaling # Upscaling tools have been around for a while now, but along with the rise of the new AI art models they have gotten much better. There\u0026rsquo;s a huge number of different algorithms for doing this upscaling, but the gist is they take a low resolution image and make it much higher resolution, adding in details. These images do not need to be originally generated by the AI tools. You can upload an existing picture. Here, I\u0026rsquo;ve generated an octopus picture with Stable Diffusion and then upscaled it.\nYou\u0026rsquo;ll notice the upscaled version has dramatically less noise in the image, which actually makes the octopus look slightly less natural.\nWhere the AI models struggle (for now): # Ref sheets \u0026amp; custom characters # So far as I can tell, you\u0026rsquo;re probably not going to be using any of the AI art tools to make a reference sheet for a character, nor be able to get it to generate images that consistently have the appearance of a custom character. Traits will change, details will be lost. There\u0026rsquo;s a lot of money to be made in character design, and at least for now, I don\u0026rsquo;t think these tools will be able to make these or use them to make original art. Character owned by me, art by @Talon_Creations This might be different if you have an extremely generic character such as \u0026ldquo;red head with big muscles\u0026rdquo; or \u0026ldquo;a white wolf with red eyes\u0026rdquo;, but otherwise, no way.\nIt also tends to suck at pieces with many characters. It likes one subject, maybe two, in the piece.\nCounting # Getting a specific number of anything can be difficult, especially body parts (eyes, legs, etc.). This otter should have 3 eyes, but convincing the model to actually add those eyes is tough.\nportrait of an otter with (((three eyes))) Changing the text to a number and doing a few more generations, I eventually ran into this:\nportrait of an otter with (((3 eyes))) Body horror # If you look closely above, you\u0026rsquo;ll notice the Octopus image generated for the upscaling example has a tentacle that forms a loop. Now, in the AI\u0026rsquo;s defense, an octopus is a pretty hard prompt, still, getting extra or incorrect limbs is a pretty common occurrence. You\u0026rsquo;ll also occasionally find doubled up torsos, weird eyes and mouths, and unsettling numbers of fingers. Generally, there\u0026rsquo;s plenty of body horror to be found. The following examples are actually on the pretty tame side. You\u0026rsquo;ll often get some really, really creepy things out With my experience using Stable Diffusion, It does particularly poorly if you attempt to generate images outside of the size the model was trained for (512x512, square images).\n((Portrait)) of a ((single)) Anime waifu with long Iridescent hair and sharp facial features singing into a studio microphone and wearing studio headphones, in a recording booth - Using Waifu Diffusion A couple getting married, wedding, alter photo, dslr, photograph Text # While these examples are a bit extreme as they explicitly ask for text, the point stands that generating anything with text on it (t-shirts, mugs, etc) - intentionally or not - tends to make people feel like they might be having a stroke.\nA coffee cup that says \u0026quot;Worlds best dad!\u0026quot; Newspaper headline story, \u0026quot;Boy in hot air balloon\u0026quot; This may be changing soon, see Nvidia’s eDiffi is an impressive alternative to DALL-E 2 or Stable Diffusion (the Decoder). I don\u0026rsquo;t imagine it\u0026rsquo;ll be spitting out full comics any time soon, but I could be wrong.\n3D art # 3D art is getting there, and getting there rapidly. There are papers where it\u0026rsquo;s been done - see https://deepimagination.cc/Magic3D/ - but currently they\u0026rsquo;re all a bit\u0026hellip; off? Regardless, it\u0026rsquo;s already to a point where I\u0026rsquo;d expect it to be hitting 3D artist\u0026rsquo;s workflows within a year.\nSo it\u0026rsquo;s not just generation? # Clearly. Even just generating subtle variations of your art or restyling it is possible. If you only think of it as a text-to-image tool, it\u0026rsquo;s clear why it can be seen as something coming for artist\u0026rsquo;s jobs, but it\u0026rsquo;s not. It\u0026rsquo;s a lot of different tools, and many of them are directly useful for creating original art. The resulting art won\u0026rsquo;t be human or AI made. It\u0026rsquo;ll be both. That\u0026rsquo;s a reality we\u0026rsquo;re going to have to get used to. All of this is useful as a tool to help make art mixed with traditional tools. This is not black and white, it\u0026rsquo;s shades of gray.\nIt moves the barrier to entry. # For most hobbies/professions, there are barriers to entry. For some it\u0026rsquo;s expensive equipment, for others it\u0026rsquo;s training and hard work to acquire a skill.\nAI art does something weird: it makes generating good looking art so easy that unless you want to pour tens of thousands of hours of practice in, you\u0026rsquo;re not going to outdo it (for most styles, lot\u0026rsquo;s of disclaimer here). At the same time, it allows people who would otherwise not make any art to make art via tools that have not previously existed.\nCalling this a barrier to entry is wrong I guess, what I really mean is a barrier to personal relevancy: if I wanted custom art of something before, my options were either to learn to make good art (thousands of hours, one time cost + dozens of hours per piece) or to commission someone who is already good at that art (potentially expensive). In either case, if I don\u0026rsquo;t really want that art, I\u0026rsquo;m not going to spend the time or money. For the casual desire of custom artwork, AI art models move that barrier from the sky to the floor.\nFrom a life of the hobby perspective, this means less people will learn to make art in the traditional way because, for their use case, a tool to do all they need exists.\nRelated to this, the barrier has moved in another way: the cost of generation isn\u0026rsquo;t free.\nWant to use DALL·E? 115 image credits is $15. Not crazy, but not free.\nMidjourney? $10/Mo for ~200 or $30/mo for unlimited.\nStable Diffusion? Well, that\u0026rsquo;s free-ish. Problem is, you\u0026rsquo;ll probably want to run it locally, which requires a really, really beefy graphics card. I was struggling to run it on a Vega56 - a GPU that goes for ~$150 used now - so I went out and got a RTX3090 for about $1,000. If you\u0026rsquo;re already a gamer with a GPU with 8Gb+ of VRAM you\u0026rsquo;re probably good, but for most people this is a bit absurd. It\u0026rsquo;s even worse If you want to train your own models to make specific-purpose models (such as these, most of which are NSFW).\nThe photography analogy # I don\u0026rsquo;t know who said it first, but this entire problem isn\u0026rsquo;t a new one. This has all happened before such as when artists got up in arms because the camera was coming for their jobs as portrait artists. And you know what? They were right. It cost them money and lowered the need for painters. As a society, we gained the ability to capture moments instantly. Eventually this turned into recordings (and something in between, like \u0026ldquo;Live Photos\u0026rdquo;) and the idea of hiring a painter to come to events to get a picture sounds incredibly foreign. If the goal is to capture life as it is, the camera is clearly more accurate than any painter.\nThe camera also spawned a new industry, as operating one well - while it is getting easier - is still an art in it\u0026rsquo;s own right and so photography is a business.\nWhere AI image generators enters the picture (pun mildly intended) is still fuzzy. What industry will it most displace and alter? As much as artists fear it, the answer could well be photo editing or colorization of film.\nBut, to wrap back around to the larger point: did the invention of the camera entirely end the desire for painted artwork? Of course not. It dramatically lowered demand for portraits, but over time the lower cost of photography also meant more money on hand for art works with actual creative intent instead of those simply aiming to capture still headshots. I don\u0026rsquo;t think there are many artists who\u0026rsquo;d want to paint headshots in the same style every day for a living.\nAI art models may have this same effect: picking some of the low hanging fruit so that artists must climb up the tree of originality and expression to justify their works. This is related to the barrier of entry above, but I think it finally lets me state the biggest takeaway from this entire post:\nAI art will replace demand for artwork that artists made in bulk anyway. It will not prevent those with a passion for making art from making it.\nIs it replacing something valuable? # Artists, please hear me out. How much Furry Pron is out there? Even before AI I\u0026rsquo;m convinced we\u0026rsquo;ve exceed the rate of output where a single person, with their eyes glued to a screen unsleeping, could spend more than a second appreciating a given Furry Pron piece and still get though the existing body of work in a single life time.\nI\u0026rsquo;m not saying an individual artwork isn\u0026rsquo;t worth anything. Drawing custom characters in various trendy poses does take time and effort.\nI\u0026rsquo;m saying, globally, supply and demand is not in your favor. This could easily descend into a conversation about economic systems, capitalism, and the how art is undervalued, but no matter how much I write about those, I can\u0026rsquo;t change the state of things.\nYour art is valuable, but in the emotional sense. Monetarily, there\u0026rsquo;s a reason artists - even really good artists - often struggle to get minimum wage. It\u0026rsquo;s wrong, it sucks, but ultimately custom art is a luxury good that takes many many hours to make, and to make it broadly palatable price-wise, the prices have to be that low. I hate this too! My SO is an artist (went to school for it, works at a restaurant) and I\u0026rsquo;m a musician (as a hobby, an engineer by trade) and we make diddly squat on our artistic passions, and not for lack of effort or time put into it. I worked my ass off to make an album that has sold once. Making art is to be human. To want to share it is just as human. If everybody makes art and everybody shares it, the market for it is abysmal. The addition of AI models does make this problem worse right?\n\u0026hellip; right? # If you\u0026rsquo;re already doing the work for less than minimum wage, does it being free matter? I\u0026rsquo;m asking that as a real question, not rhetorical. Do you care if the people that already weren\u0026rsquo;t willing to pay you above minimum wage now have a tool that will generate something of lesser-but-near quality to use instead? Maybe you do, maybe you make art in a way where you are making above minimum wage, either by high prices or by doing it incredibly fast. I\u0026rsquo;m not trying to give you an opinion, I\u0026rsquo;m trying to help you ask the questions to make an informed one.\nAnother thing to consider: will it actually lower your sales? Could it have the opposite effect even?\nIf someone generates something close to what they want but just can\u0026rsquo;t convince the model to get it to where it needs to be, they can now send you, the artist, a reference and say what they want to be changed. This may mean you get work you wouldn\u0026rsquo;t have at all otherwise.\nIt also serves to allow projects that would otherwise be blocked due the costs of artists to get started. That is, by not paying for art, different ideas can be lower risk to try. For example:\nMonsuta is a module I\u0026rsquo;ve been working on for VCV rack. I needed panel art for it and while I could either draw something myself or pay an artist, the former cuts into my available development time and the latter would be a financial cost on something I have no idea if I\u0026rsquo;ll see any reward for. Plus I may have needed many iterations as positions of knobs, switches, etc changed on the panel. This design, which I made with Stable Diffusion(1), cost me nothing more than a few image generations and a couple of minutes to convert it to an SVG. If I hadn\u0026rsquo;t had an AI model available to me, it would\u0026rsquo;ve just gotten worse art or a basic, solid color background.\nThis situation, where the AI is generating art for places that would otherwise have little or none, is something I think will be quite common. Talking to Xe Iaso about this prior to publishing, xe mentioned that on xer blog that xe has used AI generated artwork frequently. This apparently lead to some friends having gotten a bit uppity about it being generated, until xe pointed out that xe wouldn\u0026rsquo;t have paid for human made art anyway. It wasn\u0026rsquo;t AI art being used as an alternative to human-made art, it was AI art being used as an alternative to an otherwise plain page.\nIt\u0026rsquo;s far from \u0026ldquo;replacing\u0026rdquo; anyway, yet # Frankly, while the current models can and do spit out some damn good art and realistic looking photos, style dependent, it\u0026rsquo;s still far from beating human artists. Photo realism? Yeah, you\u0026rsquo;re probably out a job. Digital art? I don\u0026rsquo;t think so. Plus, once you want something specific enough, the AI won\u0026rsquo;t be able to do it. If you just want a wolf in a suit, sure. If you want a Wolf in a suit using a synthesizer, maybe. If you want a wolf in a suit using a Nord keyboard with a fox drummer with two kick drums and an otter guitarist playing a Les Paul with a whammy bar on a stage with colorful lighting? No way in hell. It\u0026rsquo;s the little things that make art good, and getting those specific details isn\u0026rsquo;t going to happen, at least not yet.\nPlus, this is only digital art. The AI isn\u0026rsquo;t coming for your paint brushes or your needle and thread, nor your stained glass, sculpture, etc. It may assist in 3D modeling soon, but it doesn\u0026rsquo;t take away your ability to be creative.\nDigital art\u0026rsquo;s image problem # I have talked to a few artists that specialize in digital art in the past that have talked to me a lot about how people don\u0026rsquo;t take digital art seriously. That some people say \u0026ldquo;it\u0026rsquo;s not real art\u0026rdquo; or that \u0026ldquo;it\u0026rsquo;s cheating\u0026rdquo;. I\u0026rsquo;m not oblivious to the introduction of AI tools harming the reputation of digital artists even further. I also do\nn\u0026rsquo;t have a good solution here. I\u0026rsquo;d love to say just ignore the haters, but that only goes so far. If the introduction of AI makes it so that artists that don\u0026rsquo;t use it can\u0026rsquo;t stay competitive, this will be extra difficult to deal with for artists as they\u0026rsquo;re forced to use a tool which their industry is criticized for using.\nI would like to think that after a few years, it becomes a minority of people that are seen as having a bad opinion - similar to the \u0026ldquo;electronic music isn\u0026rsquo;t real music\u0026rdquo; crowd. It\u0026rsquo;s still too early to say if that will happen though.\nCopyright \u0026amp; Fair use # The following section is probably the most controversial on this page. If you disagree with what you\u0026rsquo;re about to read, that\u0026rsquo;s great! I\u0026rsquo;d love to hear why you think what you do and advance my own opinions as well. I\u0026rsquo;m here for debate and learning, not to say I\u0026rsquo;m right. \" It\u0026rsquo;s a tool that uses other people\u0026rsquo;s work without permission! AI pictures have even tried copying watermarks before! \" - A mutual in a telegram chat copyleft open source symbol gnu linux free software piracy theft crow bird talon logo minimal, Bit map traced in inkscape to convert to SVG. CC0, Vega Deftwing (Feel free to steal this one) Due to the way the model works, just because a watermark is present, doesn\u0026rsquo;t mean it\u0026rsquo;s at all related to the art generated. With the way the model works, it doesn\u0026rsquo;t draw inspiration from one source or draw inspiration from specific pieces. If a recognizable watermark appears, it\u0026rsquo;s because the model has found that pictures with watermarks in general tend to look better/match your prompt, and so generates one. There can be relationships - if you ask for a generic corporate art picture you might see a Shutterstock logo - but if there\u0026rsquo;s a large pool of artists making art that is valid for the prompt then the particular watermark is unrelated. It\u0026rsquo;s effectively random chance.\nNow, that does leave the moral question of training on watermarked photos, but the act of training a neural network on datasets like this has already been decided to be legal and for good reason:\nIf it wasn\u0026rsquo;t, then all artists are using other artists work without permission as they draw upon past pictures they\u0026rsquo;ve seen mentally, from memory, to envision what their subject even looks like. If you draw a piano, do the brands that have designed every piano you\u0026rsquo;ve seen in your life get shared copyright of the final piece? Of course not. The AI model is no different in function(2). It\u0026rsquo;s not some magical file that has a saved picture of every image ever made compressed down. If you can make compression that works that well, you\u0026rsquo;ve got something worth a lot more than the art generating capability. While the math-y bits work quite different from how a human brain does, the morality of it is actually quite similar - It\u0026rsquo;s trained on existing art, just like human artists.\nOf course, this can get to various shades of gray. In traditional art, you can be just a little too inspired by another piece and it\u0026rsquo;s clearly a problem. Similarly, trademarks are a thing. I\u0026rsquo;m not going to give examples because where than line is legally and morally aren\u0026rsquo;t one thing and that\u0026rsquo;s a whole essay on it\u0026rsquo;s own.\nClearly, the same thing still applies in AI. If someone makes a fine tuned model without an artist\u0026rsquo;s permission, that\u0026rsquo;s pretty fucked. But it\u0026rsquo;s not like that problem didn\u0026rsquo;t exist before, this just - you guessed it - lowers the barrier to entry for doing so. It also allows for it do be done en mass, which is pretty bad.\nOn the flip side of this copyright conundrum: currently the unmodified output of an AI model can not be copyrighted, at least in the US. This means if you just generate a picture and directly post it online, anyone is free to steal your work. They can put it on a t-shirt and sell it, and you can\u0026rsquo;t do anything about it. This is the total opposite of the status quo in the US, where by default you get copyright on anything you make and you have to go out of your way to make it public domain. See U.S. Copyright Office Rules A.I. Art Can’t Be Copyrighted (Mithsonian Magazine).\n\u0026ldquo;I\u0026rsquo;d rather look at art made by a human\u0026rdquo; # This is a really hard argument to even talk about because it lacks a \u0026ldquo;why\u0026rdquo; that we can put in any scientific sense. If art is really good and we find out that - while it does require some human input - it is done via AI, we feel cheated or we feel that the creator cheated.\nRecently, someone won a state fair with AI art, but he didn\u0026rsquo;t tell them that ahead of time. We were unwittingly pitting human against machine and for reasons that are hard to explain, that feels wrong, right?\nAn artist using a digital drawing tablet, yes, this is still Stable Diffusion. Similarly, there\u0026rsquo;s now quite a few Pron subreddits that are entirely focused on AI generated imagery. For example, r/MonsterGirlAI (NSFW, obviously). We\u0026rsquo;re letting computers make something that we find sexually interesting. Sure, if you\u0026rsquo;re in the act you can just not think about it, but afterwards? You have to come to grips with having just waxxed your carrot (or having completed a finger painting) when looking at pictures that a human didn\u0026rsquo;t even draw. There is something about that which sets off alarm bells in the same uncanny valley section of my brain which some humanoid robots do, while the images in that subreddit themselves don\u0026rsquo;t. It\u0026rsquo;s uncomfortable.\nUltimately, we\u0026rsquo;re implying art \u0026ldquo;generated\u0026rdquo; by a human is better than art generated by a machine for some intrinsic quality that we can not measure. You could claim it to be scarcity, but in what sense? We\u0026rsquo;ve already established there\u0026rsquo;s more art than anybody could view in a lifetime being produced at a rate exceeding our ability to view it as humans.(3) What does adding AI matter if that threshold has been crossed?\nThis gets deeply philosophical quickly, and while I\u0026rsquo;m usually quick to dismiss this line of thought, I don\u0026rsquo;t think that\u0026rsquo;s the right call here. Something about the knowledge of the effort by a human adds value even if the end result is exactly the same.\nThis, I think (though don\u0026rsquo;t know) is the true reason why so many people are uncomfortable with AI art. It\u0026rsquo;s good enough to pass. Often, you can tell if an image is AI generated visually, and if by nothing else, the embedded metadata added with most existing tools. But, sometimes, you can\u0026rsquo;t. That means we can feel deceived into thinking someone put more effort into their work than they truly did, and we as a society aren\u0026rsquo;t used to valuing art not made by man. This makes us be skeptical of the value of any artwork we see, lest it be made my a machine.\nI suspect this is something that those of us that have been brought up in a culture without this will never know how to respond to or feel about, and the coming generations will find natural, leading them to find ways to use these tools to do things we can\u0026rsquo;t imagine.\nOnly the background. The font is Pirata One and the components (knobs, switches, etc.) are bundled with VCV rack for use by module developers. This is a bold claim, I know. Clearly, there's some distinction between a mechanical and biological process at the very least. You're free to reject the premise, but if you do, I'd love to know why! Technically, I don't know this to be true, but if it's true for number of minutes uploaded to YouTube per second, I'd at least assume it to be the case. "},{"id":7,"href":"/posts/video-synth/","title":"My Video Synthesis Journey","section":"Blog","content":" I\u0026rsquo;m not being paid to say any of this, I haven\u0026rsquo;t spoken to any of the companies listed here except for\nNoisedeck, which while is made by two really awesome people, also gets a pretty nasty review here because it doesn\u0026rsquo;t work for this use case. Sleepy Circuits, which I\u0026rsquo;ve only talked to. I don\u0026rsquo;t even own their hardware. Furthermore, I have paid my own money for Visual Synthesizer, Cathodemer, and KodeLife. The first two of which I also review negatively.\nThere are many tools listed in both Live coding Music Software and The big list of generative art tools , but it seems that none of them really fit my use case: Generating visuals similar to those from analog video synths without being a massive pain in the ass to use.\nThe best fit for me would probably be the Sleepy Circuit Hypno. I like the results it produces, it\u0026rsquo;s hands on, and it works with modular synths like I already have. On the other hand, to be a bit limiting and it\u0026rsquo;s \u0026ldquo;\u0026ldquo;just\u0026rdquo;\u0026rdquo; a raspberry pi 3 and a hat, and I\u0026rsquo;d feel really dumb dropping over $450 on that. So, while I still might do that, I want to see if I can get close to it - maybe gain some functionality even - and not break the bank.\nI\u0026rsquo;d really prefer something that, at least during live use, doesn\u0026rsquo;t take me out of the flow to write a shader in GLSL/HLSL or require significant work just to get something on screen at all. Similarly, not being a massive pain to get it to react to MIDI is a must. Ideally, direct audio input, OSC, etc. would be great too.\nOne piece of software that immediately stands out as an alternative is Lumen. Problem? It\u0026rsquo;s macOS only. So, while I could set up a hackintosh and go that route, that\u0026rsquo;s beginning to be a larger expense and pain than getting the Hypno. Plus, looking at videos, it has sweet spots but otherwise largely looks like shit. No thanks.\nAlright, what about the bluntly named Visual Synthesizer? Well, I yoink\u0026rsquo;d it on sale and it lacks UI scaling (sucks on 4k), seemingly can\u0026rsquo;t do feedback (a big part of video synthesis), but most importantly has shit documentation. So, nope nope nope.\nNext on the plate, what about synesthesia.live? Well, other than half the features - including the ability to pause output - being behind a $300 paywall it\u0026rsquo;s not bad. It can import from shadertoy, which is pretty sweet. It meets all my other needs: MIDI, OSC, Audio input, etc. Furthermore, it doesn\u0026rsquo;t have very good built in shaders for what I like - they\u0026rsquo;re all a bit overly complex. So, I\u0026rsquo;d still have to go write (or find on shadertoy) some of my own shaders, which is time-consuming enough to be annoying. Like, drawing basic lines and shapes should not require writing code. My biggest gripe is the lack of a good layer system, that is, there\u0026rsquo;s no way to load in multiple shaders and blend them together. Between the cost and lack of good shaders (again, a minor gripe, but reflective of it\u0026rsquo;s intended use case) it just doesn\u0026rsquo;t seem right for me.\nMoving on, probably the biggest name in the scene is Touch Designer. Look, I know some people can make some really, really great things in Touch Designer. It does meet all my needs. It\u0026rsquo;s no more expensive than Synesthesia.live, and, man, I fucking hate it. Not only that, but it has all the problems Blender has: Overly complicated UI, non-immediacy in the UI, out-dated tutorials on YouTube making it hard to learn, etc. Only, here, they\u0026rsquo;re worse. Those tutorials? Yeah, the official documentation links to a lot of them as a stand in for real docs. I\u0026rsquo;m the kind of guy that likes node-based editors and visual programming (hence my love of modular synths) but holy shit is touch designer confusing and annoying to use. I want to love it\u0026hellip; I just can\u0026rsquo;t.\nOkay, I\u0026rsquo;ve gone through a large portion of the good options now, so let me just barrel though a few\nvvvv: Great for interactive art installations, not great for performance and fun noodling around. Also, expensive as hell.\nCathodemer: Runs like shit on my system and I have 32 gigs of RAM, a 3900x, and a Vega56. What the fuck. Also doesn\u0026rsquo;t look great.\nPraxis Live: Code, but with nodes added for basically no reason. Wait, it\u0026rsquo;s in Java? Why the fuck\u0026hellip;.. At least it\u0026rsquo;s free\nNoisedeck: If it would add MIDI output and become a desktop app like was planned, it\u0026rsquo;d be awesome. As is, it doesn\u0026rsquo;t cut it. Pro version isn\u0026rsquo;t free either. I\u0026rsquo;m still glad I have pro, but it\u0026rsquo;s not useful for this particular use case.\nOkay, so, now I\u0026rsquo;ll finally get to the good ones, the few that felt like they had potential. I\u0026rsquo;ll start with what was the runner up: Hydra.\nHydra has a lot of problems:\nIt\u0026rsquo;s Web based - so, relies on a browser There\u0026rsquo;s no good way to record from it without using a screen recorder like OBS Even if you could, it\u0026rsquo;s hard to make the code not be in the way While it can do MIDI, setting it up is a pain. Current I\u0026rsquo;m using the hydra-midi Chrome extension Everything has to be live coded. So why still consider it?\nThe live code syntax is really, really, really good. It\u0026rsquo;s high level enough to let you make things very quickly, but low level enough not to be limiting in most circumstances. Clearly, you can do more in GLSL directly than in Hydra\u0026rsquo;s own language, but it\u0026rsquo;ll take you 10x as long (if not longer) to do it. It feels just right.\nUnfortunately, those gripes about recording are major enough that I wasn\u0026rsquo;t quite happy, and so there\u0026rsquo;s KodeLife.\n\u0026hellip; Yes, yes. I know I said \u0026ldquo;doesn\u0026rsquo;t take me out of the flow to write a shader in GLSL/HLSL \u0026rdquo; but once I have the shaders I want set up how I want I can use MIDI to control the parameters I want. Getting that set up is annoyingly tedious, but compared to shelling out $450 for Hypno and still needing to throw an increasingly-hard-to-find Raspberry Pi at it, it actually seems rather reasonable. Kode life, at least at the time of writing is $20 so, over 20x cheaper than the Hypno, plus is not at all feature limited to try-before-you-buy other than being nag-ware. That\u0026rsquo;s pretty sweet, imho.\nIt wasn\u0026rsquo;t a huge factor into my decision, but KodeLife also supports Spout for sharing video streams between tools. This is pretty sweet if I want to use it with other software visual synths and what not, as it seems like about 3/4 of the video synthesis tools out there (including most of the tools on this page) support it.\nAnyway, with my decision made, I needed to make it work for me. Unfortunately, in this case that means taking a break from writing C during the week work by writing GLSL during the weekend, but, oh well.\nThe first part of writing code is always figuring out what you need to write:\nFor generators:\nLines: The basic oscillator of video synthesis, just a ░▒▓▒░▒▓▒░▒▓▒░▒▓ pattern. This should have Line width, rotation(+speed), color (HSL), offset, scrolling (+speed), and spacing controls Shapes: I want a variable shape \u0026ldquo;oscillator\u0026rdquo; - just putting a shape on the screen This should have a parameter for number of edges on the shape This should have X and Y offset, filled/not-filled, color (HSL), and rotation Rotation should probably be on an LFO with variable speed Waveforms: I\u0026rsquo;d like to be able to draw Sin/Square/Saw/Tri waveforms to the screen Bit Patterns: The hard edges suit some moods. Speed control + pattern Meta balls: They look good in feedback Number of balls, amount of \u0026ldquo;gooyness\u0026rdquo;, min and max size Fractal Brownian Motion: Nice smoke/clouds/high details Complexity and speed Topographic Maps: Should just be basic math on FBM output Simplex Noise: It\u0026rsquo;s nice. Complexity and speed Julia Set: FRACTALS! Not sure on the controls yet Live Texture Read: I\u0026rsquo;d like to be able to read in a texture while I change it. This would let me draw live things in. This is probably the weirdest one to implement. Screen Capture: This would be nice for mixing in footage of the music software in use Webcam input: Well, duh. For effects:\nFeedback: I should get this \u0026ldquo;for free\u0026rdquo; by putting each generator in a buffer Should also have hue offset per repetition, as well x-y offset, rotation \u0026ldquo;Fractalization\u0026rdquo;: Basically just recursive (with limited depth) mirroring needs axis (rotation) an angle to rotate before mirroring again, plus number of steps of recussion. 󿃇Pixelization󿃆 Feedback Pixel Sorting: Aberration: The \u0026ldquo;3D Effect\u0026rdquo; Color ranging: Limiting the color range Mirror: Horizontal and vertical Edge Detection: LINES. Some of these will be harder than others, but none of them should really be all that difficult.\nMost of these have been done(1); however, many were done with the help of friends and some I\u0026rsquo;m-not-allowed-to-redistribute code, so, the best I can do is tell you that this journey was a successful one. While it\u0026rsquo;s not the best demo, I did slam this together with it. Keep in mind, all of the visuals are being made live, reacting to MIDI input: The software in the background of this video is VCV rack. Because I can\u0026rsquo;t show the code, I don\u0026rsquo;t show KodeLife\u0026rsquo;s GUI. What you can\u0026rsquo;t see in that video is the patch for all the parameters of the video synthesis:\nEach of these has offset and attenuversion applied to the incoming signal, plus most have some slew to make the visuals smoother.\nI will be the first to concede that the video above isn\u0026rsquo;t good, honestly, the song is pretty bad too. What it is though is a tech demo, a proof of concept showing that this all can work.\nSo, where does this leave us? If you want to generate visuals, it pretty much still leaves you writing shaders. Fortunately, you can set it up so that once it\u0026rsquo;s done, it\u0026rsquo;s done. I didn\u0026rsquo;t alter the code at all in the above demo. There\u0026rsquo;s just a boat load of parameters exposed via MIDI.\nI do have hope that something better is coming though, as the same people behind KodeLife tweeted out this:\nvx is our #prototype #realtime #visuals system / live-scriptable in #lua and #glsl / audio-analysis #midi #osc #gamepad / #windows #macos #linux #ios #android\nGig-tested for years and quite stable, but needs polish. We\u0026#39;ll possibly put up a public preview this year. Stay tuned… pic.twitter.com/xwTTtVrLco\n\u0026mdash; Hexler Heavy Industries (@hexler_net) March 5, 2022 Archive.org backup of the above tweet One more thing,\nThis page is focused on live, video synthesis but there are other options:\nUsing clips, triggering them, and manipulating them or generating visuals after the fact in something like After Effects(2).\nThis of this as the difference between a DJ remixing songs and an EDM artist cranking out beats on a synths and drum machines live. I want the latter, but the former has it\u0026rsquo;s place. I haven\u0026rsquo;t looked into tools for this anywhere near as much as it doesn\u0026rsquo;t really interest me, but https://www.zwobotmax.com looks pretty neat, for those that use Ableton Live. Otherwise, everything looks like the same UI clusterfuck, with both Modul8 and VDMX looking like they\u0026rsquo;re competing for worst UI while still costing hundreds of dollars. Resolume\u0026rsquo;s \u0026ldquo;Avenue\u0026rdquo; and \u0026ldquo;Arena\u0026rdquo; look to be a bit better, but targeted more at people trying to put on a full stage show for big crowds than for consumers making YouTube videos without resorting to using After Effects(3) or Natron.\nI didn't get pixel sorting, fractals, metaballs, or bit patterns in. I also skipped Webcam input and screen capture because, assuming I don't want to apply crazy effects to them, I can just record everything through OBS. This gives me those anyway and with all the \"normal\" blending modes and filters I could ever want - as in the below video. Fuck Adobe. Seriously, Fuck. Adobe. "},{"id":8,"href":"/posts/whydidipay/","title":"Why did I pay to go to college?","section":"Blog","content":" Post originally published March 22 of 2021, date above represents most recent edit The Nebraska Union at UNL, photo by ensign_beedrill, CC BY-SA 2.0, via Wikimedia Commons At the time of writing, I am currently a student at the University of Nebraska - Lincoln, where I study Computer and Electrical Engineering as a dual major. I have a serious passion for both of these subjects, which is why I am so incredibly frustrated at how negative my experience at UNL has been, especially in the classes that directly relate to my major. This frustration is a large part of why I started OpGuides, so I thought I\u0026rsquo;d share it with the world.\nThis article\u0026rsquo;s purpose is highlight the shortcomings of my college experience. While I am going to try to summarize each semester, there is no way I can possibly capture all of my daily struggles and frustrations or possibly mention all the great people that have helped me along the way. Nor can I possibly put into words the value of the friendships I have made, the joy that I\u0026rsquo;ve had at some university hosted events, and some of the amazing benefits that come with college that are not academic. I also can\u0026rsquo;t fully provide context about what was going on in my life or what personal achievements or projects I was working on at any given time. This is a huge span of time to try to sum up. Despite this, I hope their are some nuggets of wisdom you can extract. I\u0026rsquo;ve tried to pre-bake these nuggets for you as much as I could, if you don\u0026rsquo;t want the full story, you can jump straight the bulleted list of conclusions at the bottom of the page.\nAs I was previously employed by UNL as a Resident Assistant, the standard disclaimer of \u0026ldquo;The views expressed in this article are strictly my own. This article does not reflect the view of any of my employers, past, present, or future\u0026rdquo; applies.Furthermore, I may update this same article in the future. This may happen as I remember things from the past and as I finish up my time at UNL. 0 - The End of High School # I hated high school. I never quite fit in with anyone, I was the class tech-nerd, openly bi, and not into sports at a school that lived and breathed sports. Still, I served my time and got though. While there, I took a dual credit class that transferred in for an English credit, with an amazing professor, Carolyn Nolte. I also took the ACT three times and got a 27 all three tries. (Fuck the ACT btw)\nBeing total garbage at foreign language, liking the experiences I\u0026rsquo;d had with Arduinos, and having a brother that was still perusing a degree in Mechanical Engineering at UNL, I choose to dual major Electrical and Computer Engineering.\n1 - Freshman, Fall \u0026lsquo;16 # The story starts with move in, as I finally meet my roommate for the next year, though we\u0026rsquo;d already talked a bit on Facebook. We\u0026rsquo;re both CompE\u0026rsquo;s, and there\u0026rsquo;s actually a few other CompSci\u0026rsquo;s on the 7th floor with us. We\u0026rsquo;re all excited for college, have no idea where our classes are, and have no idea what the next few years will actually have in store.\nMe, freshman year, rocking some questionable long hair Freshman year feels like ancient history now, but some of it still stands out. A lot of stories, a lot of scars I earned as I learned to longboard so I could make it between my classes fast enough. As for classes:\nC programming:\nPainfully slow, but it was also a 100 level course so ╮(─▽─)╭, my roommate was also taking the course and failed, but I got an A+. He partied, did stupid shit, and eventually dropped out, so I suppose it still served as a basic weed-out class, which I don\u0026rsquo;t necessarily see as a bad thing. That said, I do wish the class had gone a bit more in depth. I don\u0026rsquo;t think I ever wrote code that topped 100 lines in this class. Similarly, we never even used bit operations despite the class being C programming. A bit odd.\nInterpersonal Skills\nI had to do some volunteering, where my \u0026lsquo;interpersonal skills\u0026rsquo; were tested by helping teach adults very basic math. Fun times. When talking about stereotypes the prof said I look like someone that smokes weed because of my (at the time) long hair, I got asked if I sold weed by students looking to buy after class.\nCalc Ⅰ\nTaught by a prof that seemed like he didn\u0026rsquo;t want to be there, and made frequent mistakes on the whiteboard. Fortunately my TA for the recesitation was, and I can\u0026rsquo;t stress this enough, amazing. Thank you Jessalyn Bolkema for making the class as good as you did, and for helping inspire me to see more beauty in math.\nIn Calc Ⅰ I also had somebody put gum in my hair so bad that I had to get a hair cut. So, those beautiful locks you see above were short lived.\nThe biggest complaint I had from Calc Ⅰ was the use of \u0026lsquo;WeBWorK\u0026rsquo;, auto-grading math quiz software. We were usually given unlimited attempts to get a 100% on the quizes; however, they were often mis-graded because the software is not great. Like, sometimes it would want \\(\\frac{4}{3}\\) or \\(1.333333\\) (with the higher precision answer, \\(\\frac{4}{3}\\) , not always being the correct answer, if you were wondering), seemingly at random. To say this was frustrating would be an understatement.\nHistory of Rock\nGreat class, great prof, lots of fun. The tests got oddly specific, but whatever. About a year later I met up with the prof to put an accelerometer hooked up to an Arduino into the back of his guitar for controlling MIDI effects, but that\u0026rsquo;s about the most relevant thing to my majors that came of it.\nThe actual \u0026lsquo;college experience\u0026rsquo; was actually pretty good this semester. I only had to chop off one arm to pay for books with online codes attached that me prevented buying them used. Living with a roommate wasn\u0026rsquo;t quite as bad as people said it would be (still pretty much sucked)\nOh, the cazy preechers on campus were definitely a great way to round out the college experience.\nThe cheering at 6:38ish is from when I kissed my BF in front of the homophobic asshat, good times. (Yes, the video is broken) There were many, many more times like this with different groups (This is \u0026lsquo;Brother Jed\u0026rsquo;, but \u0026lsquo;Pastor Tom\u0026rsquo; would swing by to be a douche regularly, and there were a few others too- I don\u0026rsquo;t at all think these people are reflective of Christianity, just a bunch of idiots.)\n2 - Freshman, Spring \u0026lsquo;17 # Comp Sci Ⅱ\nPretty hard, required a lot of late nights up programming, but the prof was really good. I may hate Java, but the class was done well. (Thanks Dr. Bourke!)\nUnix Programming\nCompletely useless, I mean, even for a 1 credit hour class, it was so painfully basic that it was basically irreverent, It went over bash scripting but failed to explain any of the fundamentals of the *nix fs structure, what /sys and /dev are, etc. plus it lacked any meta programming like Makefiles and what not.\nSciFi literature\nGreat class that I actually really enjoyed. Again, it made no difference for my major beside fullfilling a gen-ed requirement. I actually had a lot of fun in the class, but the prof was painfully awkward, to the point where one day I\u0026rsquo;m not 10000% sure I didn\u0026rsquo;t encounter an awkward Title IX-y situation when the prof told my at-the-time girlfriend and I that he had a dream about us. (゜_゜;) like, excuse me, what the fuck.\nI was dealing with quite a few personal issues this semester, which made the stress of Calc Ⅱ and Physics Ⅰ unbarable. I withdrew from Physics and got a C- in CalcⅡ, which meant I needed to retake it.\nThe reason I choose to drop Physics was two fold, for one, the class was my hardest and so made the most sense if I needed the lighter load, but the bigger reason? I couldn\u0026rsquo;t follow the lectures though the prof\u0026rsquo;s and TA\u0026rsquo;s accents. Very thick Russian and Chinese respectively, and it was just not going to work. The textbook cost a few of my remaining limbs and couldn\u0026rsquo;t be avoided for a online code, which I would later need to re-buy (thankfully only the online code since I had bought it before) when I took the class later.\n3 - Sophomore, Fall \u0026lsquo;17 # Chem Ⅰ\nNot really noteworthy, I found it difficult, as did most people as, if I recal correctly, the pass rate was abysmal. The prof was fine, the lab was fine, and everything was \u0026lsquo;fine\u0026rsquo;, just the content was fast paced and difficult. The final was a standardized American Chemical Society final, which I found oddly disconnected from the course and hard as hell, but I passed the class with a B and was able to move on with my life. I did find some complaints from when I took the class that I had expressed to a group of engineers:\nThere are 3 different books we need (Textbook, recestation book, lab book) all of which have related online materials and all of which require separate logins and access codes on different websites. All of these are separate from the actual course webpage. But, I can deal with that. What has me angry is this first prelab I just did on one of said websites. Multiple of the questions have no correct answer or multiple correct answers, one is worded in a way that doesn\u0026rsquo;t even make sense (despite the question they were trying to ask being obvious so I got it anyways), and yet another doesn\u0026rsquo;t even tell you how the answer should be formatted on the page (do I include units?).\nComputer Organizaiton\nHo-boy, now we\u0026rsquo;re hitting the really what-the-fuck stuff. According to my record I passed this with a C+ and that\u0026rsquo;s the biggest grade inflation the world ever did see, most of the class got out with C\u0026rsquo;s after a similar curve that stopped them from outright failing. My grade on the first test- a whopping 27%, and the high was a 32% (iirc?). The prof, while the sweetest old man I have ever met in my life and I would happily spend hours with just talking to, had some sort of neurodegeneration disease and in his old age should not have been teaching. This meant that instead of having the prof teach, the TA\u0026rsquo;s picked up the slack. There were 5 TA\u0026rsquo;s I think? Only 1 really knew what he was doing though, and he showed up to class DRUNK a few times. I was actually really into learning about computer architecture before this class so sorta had a better idea of what I was doing than most, so for one of the TA-lead classes where the TA that knew what he was doing was too hungover to attend one of the other TA\u0026rsquo;s asked me to teach it. Just let that one sink in a little bit.\nEventually, the department got involved, a second prof was brought in to attempt to un-fuck things, but that went about as well as you\u0026rsquo;d think it would 3/4 though a semester, so they ended up just scaling the fuck out of our grades.\nThe other odd thing was the room where some of that class was taught- the desks were literally falling apart. One day I had to bring in a screw driver and I went around fixing everyone\u0026rsquo;s desks though out the lecture because the University wouldn\u0026rsquo;t.\nCalc Ⅱ (Redo)\nCalc Ⅱ went better this time, I got though with a B+ and could move on with things. My TA for the class, Dylan McKnight, was amazing, despite the fact that I didn\u0026rsquo;t do well, I honestly can\u0026rsquo;t fault the instruction. Again, Dylan inspired me see the cool side of math, and he was pretty cool himself, fully understanding of the multiple times I came into class bloodied up from biffing it on my longboard on my way into class. being attacked by chainsaw wielding bears.\nPower and Politics in America\nSurprisingly chill for being in Fall of \u0026lsquo;17 after the election of Drumpf. Prof was good, no real complaints.\nI commuted to class this semester, which meant about 40 min to campus and the same back. Combined with CalcⅡ being at 8:30am, this was not awesome.\nOn the bright side, I did get to flip off some more asshats telling people they were going to hell for being gay (ʃƪ ˘ ³˘) 4 - Sophomore, Spring \u0026lsquo;18 # Chem Ⅱ\nNothing woth saying really. Hard as hell, but I got though ヽ（´ー｀）┌\nCalc Ⅲ\nFine, if a bit tough.\nDiscrete Math\n\u0026ldquo;Meh\u0026rdquo;. I again had the amazing Dr. Bourke, but the class had a lot of fluff that I don\u0026rsquo;t think I\u0026rsquo;ll ever actually find useful.\nCircuits\nOh boy, the prof was the most monotone guy I have ever met, I\u0026rsquo;m not convinced he didn\u0026rsquo;t have a signal generator locked on a specific frequency in his throat and just did AM on it. Also, I hate to have to tell him this, but there is a difference between a Turban and a Turbine. Anyway, the class was literally half just resistor networks and using nodal and mesh analysis on these circuits. We did eventually get to reallllly basic capacitor and inductor circuits, ending with just the smallest mention of the diode. The class was slow, we never even really talked about how simulation software could be used, and it was just\u0026hellip; not good. I think this complaint mostly boils down to expecting some practicality in my courses, which is apparently too much to ask for.\nThe Lab? The lab was worse. This TA has given me a story so stupid it hurts.\nThis, is an ohmmeter, it measures resistance in ohms. Not Impedance. This TA, in his glorious idiocracy, told the class to use a much more expensive, digital, high precision ohm meter to measure the impedance of an element in the circuit using the ohm meter while the circuit was powered on. And look, I\u0026rsquo;m not going to go into all the mental hurdles of incredible idicoracy at play there, but trust me, this is 110% distilled stupid. So, I raised my hand and told him that this was wrong, thinking that as he\u0026rsquo;s a Graduate TA (GTA) that, maybe, he\u0026rsquo;d just had a lapse in judgment and that he\u0026rsquo;d be thankful I pointed it out before everyone in the lab either blew fuses or damaged things outright.\nNope. This guy wants to fight.\nThis was years ago, so obviously this is not exact:\nYou can\u0026rsquo;t measure impedance with an ohmmeter\nYes you can. I\u0026rsquo;m the Graduate TA here, you need to listen to me\nI\u0026rsquo;m really not comfortable doing this sir, I think it can damage equipment\nYou don\u0026rsquo;t know what you\u0026rsquo;re talking about, you\u0026rsquo;re taking Circuits one after all.\n⏸️Pause. Dude. Really. This is like the 4th lab at this point, you\u0026rsquo;ve had plenty of time to realize by now that I finish these labs early consistently, I wear a vacuum tube around my neck, and that I\u0026rsquo;m coming into class on a longboard burnt with high voltage. You probably shouldn\u0026rsquo;t have said that.\nCan you explain to me how the equipment works then? Because from my understanding about how an ohmmeter works internally this will not give a correct read out, and can damage the equipment\nThis is an intro course, you don\u0026rsquo;t need to know that. Do as I say.\nNobody in this room should follow those instructions unless you want to be replacing fuses for the next hour.\nYou have no idea what you\u0026rsquo;re doing!\nOkay, now I\u0026rsquo;m sorta pissed. This is not what a TA should do. TA\u0026rsquo;s are supposed to help you and encourage you, explain any questions you might have away. He\u0026rsquo;s not explaining, he\u0026rsquo;s demanding respect and demeaning me. Fuck this guy.\nNo, you don\u0026rsquo;t know what you\u0026rsquo;re doing.\n(now screaming at me in the lab) How dare you say that to your TA, and a grad student at that! Come talk to me privately in the hall!\nNo. Anything you have to say can be said here.\nFine, then let\u0026rsquo;s go talk to [The Lab Lead]!\nAt this point, I\u0026rsquo;m literally laughing at this guy, he\u0026rsquo;s red in the face from screaming, and I\u0026rsquo;m just keep laughing at his tantrum. We get up to the lab leads office, the guy who is also responsible for fixing equipment, and the GTA tells hid story of how I\u0026rsquo;m a disrespectful little shit, somehow leaving out what started the entire thing- him almost getting people to blow fuses on equipment. After he\u0026rsquo;s done making his case, while I smile and play with the tube around my neck and lean on my 10kv burnt long-board, I tell the lab lead what we\u0026rsquo;re actually up here about, that this GTA wanted us to measure impedance, with an ohmeter, on a live circuit. Lab Lead, I shit you not, looks at the GTA and just says \u0026ldquo;Are you serious?\u0026rdquo; then ripped the dude a new one. 11/10.\nThis did not get better, at all, though the semester. I basically ended up teaching my lab.\nThis semester I was also a Resident Assistant at UNL. More on that in a bit.\nDuring this time UNL did have an incident with a Racist Douchebag to which they respond by \u0026hellip; giving everyone free \u0026ldquo;Hate Will Never Win\u0026rdquo; T-shirts instead of doing something actually meaningful. Cool.\n5 - Junior, Fall \u0026lsquo;18 # Data Structures \u0026amp; Algorithms\n\u0026lsquo;Algos was odd. The class did make me a better programmer, but it had some really annoying issues. Primarily, the lectures were often repeats, sometimes up to 3 or 4 times of covering exactly the same material, but attendance was graded. This got old very quickly.\nI sat next to a friend that had a service dog that, on multiple occasions, had to be woken up as the dog\u0026rsquo;s snores were interrupting class.\nCircuits Ⅱ\nSame prof as before, still just as monotone, but this time the class picked up in pace, possibly a bit too much, and still lacked doing things with Spice or other sim tools, lab was still very meh. Lots of focus on big, power electronics. Not my cup of tea.\nTechnical Communication\nJust\u0026hellip;. not good? This class largely felt like busy work, and for the final presentation we had to give for the class, my partner just up n\u0026rsquo; disappeared on me, leaving me to do it myself. Ironic, given the class.\nDifferential Equations\nThis class was a mixed bag, on one hand, the prof was amazing (Thank you Dr. Laubmeier). It was her first semester teaching but she nailed it. On the other hand, something about the subject just absolutely failed to \u0026lsquo;click\u0026rsquo; with me, so while I could work though the problems, I felt like it was all sorta magic? I don\u0026rsquo;t know how else to put it. Regardless, this is 100% on me.\nThis semester I was also a Resident Assistant at UNL again. I can\u0026rsquo;t say much about this as I\u0026rsquo;d like for legal reasons; however, I will say that the entire experience as an RA made me feel that, despite the dorms existing as housing at an educational institution and the fact that I was in the dorm that was primarily used for honors students, the dorms were anything but conductive to education. Music majors couldn\u0026rsquo;t use electric amps in the music room and nobody was allowed to have anything that wasn\u0026rsquo;t UL certified in their rooms- there goes everything from 3D printers to any lab equipment. And like, yeah, I get it, but come on?\nI also felt that I was not respected as a person. Despite my request that I be stationed literally anywhere else in the building on account of my bad knee, I was assigned a room on the fourth floor of a building with no elevator. Their response to LGBT issuses also left me unhappy, as on oppisite-sex guest wasn\u0026rsquo;t allowed overnight\u0026hellip; yeah. Let that one sink in, it\u0026rsquo;s somehow more restrictive to straight people yet more offensive to LGBT people. Way to go guys.\nalso as my 4th semester living in the dorms, I was growing very tired of 1-ply toilet paper.\n6 - Junior, Spring \u0026lsquo;19 # I had a lot going on outside of school, so I intentionally took a rather chill semester,\nCPR and Archey\nBoth were taken just to fill credit hours, to get up to the required 12 to be a full time student. CPR was a total of three 1 hour classes, while Archery was a weekly 3ish hour session and was really cool, even if I was comically bad at it.\nEmbedded System\nI yet again had a professor for which it was his first semester teaching. He was\u0026hellip; not great. We used the Arudino Uno and built a tiny wall-avoiding robot and did a few other labs, and\u0026hellip; cool, I guess? It was the kinda thing that should be tought in high school, not college. We (mostly) didn\u0026rsquo;t use the Arduino framework, instead poking registers directly, which made the class a bit more valuable, but still, I found it a bit lack luster. I often found that I knew more about the 328p μC and it\u0026rsquo;s features, debuggers and simulators that were available, etc. than the prof did. I have heard the prof has since gotten a lot better at teaching though, and one of my good friends had a really good experience taking the advanced variant of the course with him, where he used an FPGA instead of an μC.\nPhysics Ⅰ (Actually taking it this time instead of withdrawing early)\nI had a really good TA (who I am still friends with!) and having the better math background really helped, which is most of the reason I put it off for so long, pulled a B+ out of it so 👍.\nPhilosophy\nThis class was an experience. It was 5pm to 8pm iirc, and trying to force yourself to care about basic philosophy for three hours straight is a bit brutal. I did find the class interesting though and am glad I took it. Plus, the 10 minute break the prof allowed in the middle was just barely enough for me to max-speed penny board to Wendy\u0026rsquo;s, grab a meal to go and scarf it down before he started teaching again.\n7 - Senior, Fall \u0026lsquo;19 # Physics Ⅱ\nPretty awful. I wasn\u0026rsquo;t stoked with the instruction (from the prof, again, TA was bomb) in PhysicsⅠ, and it went downhill in Ⅱ. My TA had a pretty thick accent, which made understanding him difficult. The Lab, well, the equipment was all electrical taped together and should have been thrown out 20 years ago. I found this particularly odd, as the chemistry department\u0026rsquo;s labs were top notch, like, each lab room had 6 TVs so that every lab station could look at the slides/instructions independently even. It was seriously overkill. Then, we have these physics labs that are struggling to get by on scraps. ¯\\_(ツ)_/¯\nCircuits Ⅲ\nThis class was an absolute dumpster fire. The prof is by far the worst I\u0026rsquo;ve had my entire time at UNL. He made crazy assumptions about the prior knowledge of students, dove way to deep into semiconductor physics instead of how to actually use them, miserably failed to explain things, assigned homework that was insanely long, gave tests that were more a test of what you had written on your allowed cheat-sheet, and at one point even told the class a test was going to be over the wrong thing- making it so that he had to give a make-up test. He was also just kind of unpersonable and unwelcoming. While my experience was already horrible, I had friends that had far worse. I still don\u0026rsquo;t understand how to use transistors in a circuit very well, and if anything I think this class made that situation worse. If I were rating my classes out of 10, this one would get a negative score.\nLinear Algebra\nReally good class, taught incredibly well by Dr. Laubmeier, and I am again grateful for the experience.\nSignals and Systems\nTaught by Dr. Khalid Sayood, this class was probably my best experience at UNL. Don\u0026rsquo;t get me wrong, this class was tough, but I have never had a prof so skilled at teaching, so invested in his students, and so down to earth. Learning from Dr. Sayood will almost certainly stand out as the highlight of my time at UNL.\n8 - Senior, Spring \u0026lsquo;20 # This semester is the one that COVID-19 hit. The last third-ish of this semester had otherwise normal classes transitioning to being entirely online. This went about as well as could be expected. Obviously, this is a rather odd scenario. It may not be fair to judge the University based on the response to this necessarily; however, I think that seeing how the university responds to this shows how they\u0026rsquo;ll respond to other things- that is to say poorly. If the quality of my professors and classes didn\u0026rsquo;t piss me off before, this is the semester that did it.\nOperating System Kernels\nThis class was a hard, the prof was very \u0026lsquo;meh\u0026rsquo;. The prof hadn\u0026rsquo;t even taught in many years, but had to take up the torch again because the guy that normally taught the class had been promoted. I did learn a lot, albeit I think that\u0026rsquo;s mostly because the textbook we used, Operating Systems: Three Easy Pieces was very, very good.\nEE LabⅠ\nLacking a better name, this lab was just a generic electrical engineering lab and as such was rather disconnected from any other class. For the lab we used a mix of FPGAs, Arduinos, a pile of IC\u0026rsquo;s, and LEDs. The were two standout tasks:\nStoplights\nWe made a Finite State Machine model of an intersection\u0026rsquo;s stoplights, we then implemented this three times, once with discrete ICs, once with an FPGA, and once in code on an Arduino Uno.\nThe self chosen project\nMy group partner and I choose to make a Euclidian Rhythm drum machine, that actually hit physical toy drums with some solenoids.\nAlright, so, why complain about this class? Well, for one, neither of the TA\u0026rsquo;s knew their heads from their asses. One of them insisted the Arduino Uno (AtMega 328P) was a perfectly fine, modern μC. (It\u0026rsquo;s not.) and the other had never even used a micro controller. I ended up gifting her an arduino nano and a few parts from my stash so she could learn (that TA had no influence on my grade). I\u0026rsquo;m not saying either was dumb, or saying anything bad about them directly, but they sure as hell should not have been the TAs for this class. (There was no professor)\nAlso, when all classes were force to go online this lab lost a lot of its value. I was fortunate enough to have an Oscilloscope, multiple lab PSUs, logic analyzer, etc. all on hand, but many other students got a much worse education for it.\nDigital Logic Desgin\nThis class was fine, not steller, but like, I actually learned a bit and the content practical. The prof had come from industry and actually knew how to teach practically. So\u0026hellip; all good? No. About 2/3 of the way though the semester COVID hit and my university went online. The prof had no idea what he was doing and the online lectures were sparse, poor quality (like, outright useless), and the wasn\u0026rsquo;t a single thing that changed my grade after the transition. I definitely didn\u0026rsquo;t get what I paid for.\nDigital Logic Design Lab\nStrangely, this lab was overseen by a different prof than the lecture, and, while I could go into the problems with the class, I think I\u0026rsquo;ll let this speak for me:\nand okay, I admit that was a bit over the line, but the rest of the lab report was written well and I did my work. I got a 90/100 on that. As is this sort of makes me look like the bad guy, I was frustrated, and I think justified, but I agree this wasn\u0026rsquo;t the best way to voice that opinion. This is why I am still livid about this to this day- here\u0026rsquo;s my lab partner\u0026rsquo;s conclusion, he got 100/100 on this assignment.\nthis is some top tier bullshit, so, I go to the prof that oversees the course.\nHe, I shit you not, responded \u0026ldquo;How do you know other students aren\u0026rsquo;t still using XP\u0026rdquo;\nAnd, okay, maybe this lab would have had some redeeming qualities, even if out of date, except for the fact that each of the supposed-to-be 3 hour labs were about 15 minute labs, with the only reason they took that long being due to unintelligible instructions for each assignment.\nThe professor, responded to my criticism of his labs being written poorly with \u0026ldquo;If you think you can do better, then you write them.\u0026rdquo;\nYes, I can. No, I won\u0026rsquo;t. I\u0026rsquo;m paying $1000 to take this class, not to write the content for you.\nPCB Design\nWe designed a PCB in KiCad, mostly refrencing existing open source designs. This was assumed to be a baby\u0026rsquo;s first PCB class, which it wasn\u0026rsquo;t for me. The prof is super cool and having chats with him about nothing in particular in his office have often lead to me learning more than I have in other classes over an entire semester.\nUnfortunately, when COVID hit it stopped the class in its tracks, resulting in the PCB never actually being soldered as I don\u0026rsquo;t have good enough equipment to do the fine soldering required for what I designed at home\nPhilosophy and Current Issues\nThe only redeeming thing about this semester was this class. The TA and professor I had for this class were both amazing. The TA, Zachary Garrett, had a true passion for philosophy and had even done quite a few game jams making philosophy related games (mostly in Unity). He really inspired me to be more passionate about Philosophy. The prof even did a pretty good job with the transition to online classes.\n9 - Senior+, Fall \u0026lsquo;20 # This semester was entirely done online due to COVID-19. All classes were taught live via Zoom. Electromagnetic Field Theory\nNot the worst professor I\u0026rsquo;ve had, but definitely the most useless. Literally just read the slides word for word for the entire semester, reading the equations for what they were, never explaining what the variable mean or giving context.\nProbability Theory\nReally good class. Because COVID and my bad heart, the prof let me take it online, so I just watched recording of lecture. This wasn\u0026rsquo;t ideal obviously, but the prof still checked in regularly and the lectures were taught incredibly well. I did still have to take tests in person, but steps were taken to minimize my exposure\nSoftware Engineering\nIt takes a lot for me to hate someone. I hated this prof. She constantly made the class feel bad for not being part of the fancy-school-in-a-school at UNL that she used to be a part of. From what I understand, She wrote software both for healthcare and ICE. Talking to her was like talking to corporate incarnate. But that\u0026rsquo;s the prof. I can stand a bad person as a teacher so long as they can teach well. She couldn\u0026rsquo;t.\nFor some context, UNL is pretty UNIX-y, they teach C/C++/Java and, for the most part, do everything on a Linux server on which all CS/CE students get an account.\nShe wanted us to fully drink the Windows Kool-Aid and dev in C#/.Net/js(react) to make a lil\u0026rsquo; webapp, for which we were supposed to follow \u0026lsquo;Good software engineering principals\u0026rsquo;\nNow, I don\u0026rsquo;t know about you, but I think it\u0026rsquo;s a tad bit ridiculous to expect someone to follow \u0026lsquo;good Software Engineering principals\u0026rsquo; in a mixture of languages they don\u0026rsquo;t know as they try to teach themselves said languages in a semester\u0026rsquo;s time with none of the TA\u0026rsquo;s knowing the languages/frameworks either.\nAdd onto this the fact that the lectures were largely disconnected from the homework, the scale of the project given the semester was compressed due to COVID, her general expectation that the TA\u0026rsquo;s would do 90% of the work that the prof should be doing directly, and this was an outright shit show.\nThe class was so bad that about half way though the semester I brought up how the class was going and more or less forced her to have a discussion with the class about our dissatisfaction and general lack of ability to do the assigned homework. She did a zoom poll, and the vast majority of the class thought that at the current pace they would fail. I then led the class though a discussion that took the entire rest of the class period helping her restructure the class. She had the audacity to ask me to send he a bulleted list of the key points we talked about, like I was her secretary.\nThis is sort of a recurring trend so for any professors reading this, he\u0026rsquo;s a pro tip\nDON\u0026rsquo;T MAKE YOUR STUDENTS, STUDENTS THAT ARE PAYING TO TAKE YOUR CLASS, DO WORK FOR YOU\nBecause of that intervention she did restructure the class significantly, but regardless I felt I learned effectively nothing from the course.\nOh, and the quizzes for the course were new levels of stupid.\nCommunication Networks\nThis prof, Dr. Massimilliano Pierobon, was great. I\u0026rsquo;ve never seen a professor express so much concern and care for his students. He knew the Pandemic and our course load was getting to us, and was extraordiniarly flexible to the needs of the class. The content covered in the course was presented well, and his research with the Molecular and Biochemical Telecommunications Lab (MBITE) was facinating to hear about.\n10 - Senior+, Spring \u0026lsquo;21 # This semester was entirely done online due to COVID-19. Computer Architecture, Data and Network Security, and Numerical Analysis were taught live via Zoom while Into to Machine Learning was done asynchronously with recorded lectures, but did have a lot of calls with chosen group members for the semester long project. Computer Architecture\nThis, from my understanding, was this professor\u0026rsquo;s first time teaching. He actually did a pretty good job. The biggest problems came from weird expectations (homework deadlines were not great), extraordinarly hard homework compared to what was taught, and a lack of hands on labs/exercises like could be offered on an FPGA, by poking around in Linux, or using a simulator of some sort. Of course, this class was remote, so I can understand why these things were not done.\nData and Network Security\nThis was not good. It was a lot of really basic cryptography (how does RSA work, etc.) with very little actually applied skills. I didn\u0026rsquo;t really finish with any new knowledge. The tests and quizzes got really awkwardly specific about implementation details of some standards, yet I don\u0026rsquo;t think most who took the class would know when to use what. Much of the information covered was either out of date or wrong, which resulted in me sending a lot of corrections in the Zoom chat. At one point another student complained I was using the chat as \u0026ldquo;the notifications are distracting\u0026rdquo; and so the professor mandated that questions and comments be sent to him directly, instead of to the class as a whole- actively discouraging participation.\nThe classed ended with a group project, for which my partner was entirely useless as he completely lacked the ability to program despite being a 3rd year CS student and also had no idea how to use \\(\\LaTeX\\) to write the paper or even how to find academic resources beyond knowing not to use sites that end in \u0026lsquo;.com\u0026rsquo;. 🤦\nI learned more reading Soatok\u0026rsquo;s Blog than I did from this class.\nNumerical Analysis\nAbove, for Electromagnetic Field Theory I said \u0026ldquo;Not the worst professor I\u0026rsquo;ve had, but definitely the most useless. Literally just read the slides word for word for the entire semester, reading the equations for what they were, never explaining what the variable mean or giving context.\u0026rdquo;\nThe exact same thing happened here. Seriously, it\u0026rsquo;s no different than just having the book read aloud for 50 minutes.\nInto to Machine Learning\nThis class consumed FAR more time than any one class should,\nThe professor was pretty cool though. In response to me asking if his class would use Respondus or Proctorio (so I could avoid it if it did) he sent what may well be my favorite email I\u0026rsquo;ve ever received while at UNL:\nShort answer: no, I won\u0026rsquo;t use them.\nSlightly longer answer: I won\u0026rsquo;t use them since there will be no exams or quizzes in this course.\nEven longer answer: Even if I did have exams or quizzes, there\u0026rsquo;s no way in hell I\u0026rsquo;d use that awful, awful software. My conscience and my son would never forgive me.\nRight after my last final of the semester I was able to get my first dose of the COVID vaccine. I also, with the help of Soatok, submitted an issue on GitHub for the COVID contact tracing app that UNL used.\n11 - Senior++, Fall \u0026lsquo;21 # Electrical Engineering Lab II\nThis lab was a fucking shit show. There were supposed to be 8 labs. Labs 1,2,3,4,5 and 7 were actually assigned. Not due to lack of time, no, they just never got written for students to do in the first place. Worse, because COVID, all of this class was remote, so I had to do the labs from home with my own equipment (Though, to be fair, my own equipment is better than what is available in the labs)\nSo, about the labs?\nLab 1 was, for some reason in a class that is supposed to be taken by upperclassman, about Inductors. This would be fine, except they wanted 100mH and 10mH inductors and failed to actually sell the lab kit, leaving very little time to source these parts which I didn\u0026rsquo;t have on hand.\nLab 2, again keeping with the \u0026ldquo;Why am I doing this circuitsⅠ level work?\u0026rdquo; theme, was about RLC filters and power factor correction.\nLab 3, rectifiers and smoothing. Again pretty lame. Didn\u0026rsquo;t even talk about active rectifiers, switch mode PSUs or anything. Just your normal full bridge rectifier\nLab 4 \u0026amp; 5, finaly hitting something non-trival: Transistors, and basic amplifer circuits. This would have been fine, except the labs were written to be exceptionally confusing. Good times.\nFinally, Lab 7, the only mildly well written one, was about active filters. It was fine.\nThen, there was a finaly project. Only, due to the poor planning of the Instructor and Lab TAs (if it weren\u0026rsquo;t already evidant by the lack of labs 6 \u0026amp; 8) there was only two weeks to do it and it was during finals week. Fortuanately, they let me count my already mostly-done work modding a Behringer TD-3 synthesiser, but this was just following a guide, so it was a bit weird to count.\nLinear Control Systems\nThis class was half online and half in person. The biggest problems with it were pacing and MatLab. The beggining of the class was ungodly slow, then the latter half went so fast as to try to cover state-space in a week. Not ideal. The MatLab would have been fine, except that it was assumed we were all already profient in MatLab, while no of us were.\nFortuantely, the professor was very accomodating and largely made up for the issuses.\nCommunication Systems\nShould have been called Analog Communitacion Systems, as digital was almost entirely ignored. Still, I learned a lot about the actual math of FM and AM transmission and how to quantify signal quality. Tests were written to be tricky in a way that those good at doing pencil and paper math quickly dominated those that actually understood the theory, which bothers me.\nDigital Signal Processing\nAll the Matlab. Matlab everywhere. This class went well, professor was great. Focused mostly on filters and the FFT. No envelope generation or oscilattors here. Still, pretty neat.\nCapstone Ⅰ\nSee bellow ↓\n\u0026hellip; Between semesters I got COVID. That was very not fun.\n12 - Senior++, Spring \u0026lsquo;22 # DoWTFYouWant \u0026ldquo;Research\u0026rdquo;\nI needed three extra credit hours to remain a full time student for loan purposes, and there was pretty much nothing available, so, I asked a prof if I could go learn about shaders, GpGPU, and some basic Unity dev as a class. I actually think this class had me learn more than any other in my Senior++ year and I tought myself.\nEmbedded DSP\nUsed the TI C5502. The C55xx series really just needs to die IMHO. The ancient version of Code Composer Studio was the actual worst. Still, we made some FIRs and NCOs, hand optimized them with some assembly. Generally, this class did result in me becoming a better programmer, even if it was painful at times.\nAdvanced Embedded Systems\nUsed a custom RiscV μC developed by the graduate student teaching the class - even had the UNL \u0026ldquo;N\u0026rdquo; as art in the silicon. Chip also had a pretty cool programmable OpAmp section and Neural Network. Neat!\nThe class started with a nice overview of some deeper parts of C: The build processes, structures, bit fields, etc. Then dove into making a driver file for the onboard SPI flash chip, writing a basic blink program in RISC-V ASM, setting up DMA for an ADC and DAC, and looking at the nitty-gritty of I2C. Overall, went very well.\nCapstone Ⅱ\nThe Capstone / Senior Design project is supposed to be where we show what we can do with the cumulative knowledge acquired though the engineering program. Being both a CE and EE, I had the choice to do either the CS Capstone or the EE Capstone. The CS capstone would be almost entirely software and would involve doing free work (well, worse, actually paying for the credit hours) for a \u0026ldquo;sponsor\u0026rdquo; company on a project of their choosing.\nGiven that I value myself enough not to work for free and because I enjoy hardware too I chose the EE capstone. Fortunately, with that we also get to choose our own projects and groups. I found a group of 3 other guys that I had barely interacted with before that day but that I thought seemed capable. Fortunately, I was right. They lacked project ideas while I brought a half dozen to the table. Of these ideas, we chose to build a hybrid analog and digital drum machine. I\u0026rsquo;ll spare the details here, but my part of the project was to make the sequencer, digital drums, and about half of the controller board that hooks the analog drums up to the digital ones. I did with a Raspberry Pi 3B+, some hats, some keyboards running QMK, Purr Data, and a nice smattering of Python. In the end, I think I made a pretty good looking UI and the sequencer was fun to use.\nMy group mostly handled the analog circuitry, which, went less-well. Many of the analog drums and the analog filter just failed to work. Not great, but in fairness, debugging code is often easier than debugging circuits, and doesn\u0026rsquo;t have issues with flakey connection or hard to solder bodge wires.\nIn the end, we won first place across the EE projects - though I suspect that\u0026rsquo;s largely because we at least had something to show. Many of the other projects didn\u0026rsquo;t work at all. Here\u0026rsquo;s a video overview of the project.\nThe really wasn\u0026rsquo;t a \u0026ldquo;class\u0026rdquo; here. Just a professor we met with once a week and chatted with, often not even about the project. Fortunately, that professor is my absolute favorite of my time at UNL and from just chatting with him I learned more than I have from many of my other classes. It\u0026rsquo;s nice to just absorb some wisdom though conversation.\nGraduation # Graduation was not great. They did give us our actual, real diplomas on the stage. However, the ceremony itself was very poorly planned. It was in the football stadium on a nearly 90°F day around noon, while we were all wearing black robes. They even felt the need to explain the history of the robes and how the were originally to keep warm while all of us were cooking. My girl friend came out of it a lobster from the sunburn.\nWorse, they gave out diplomas across 4 stages but to save time didn\u0026rsquo;t announce names\u0026hellip; or display them on a screen\u0026hellip; or even make the stage easily visible to friends and family. Nobody could really tell when the person they were there for was even walking.\nStill, with that it was over.\nAfter the ceremony, friends and family were set to come to my house for a little party. Unfortunately, my grandfather had a heart attack the night before and so most of my family was scrambling to help him. We had enough food for 40 with a part of 10. Oh well. I still managed to have a good time.\nWhat\u0026rsquo;s next # I have a job I\u0026rsquo;ll be starting June 6th, 2022. I\u0026rsquo;ll be moving to be closer to that in July. I\u0026rsquo;ll be paying off my student loans until I\u0026rsquo;m dead.\nWhat I left out # I\u0026rsquo;ve tried to make this mostly reflective of my experiences with college, but some personal experiences and adventures I\u0026rsquo;ve been on wouldn\u0026rsquo;t have happened if I hadn\u0026rsquo;t gone to college. I\u0026rsquo;ve also left out some of my experiences with campus organizations like OS2G (Operating Systems and Open Source Group) and F.L.U.F.F (UNL\u0026rsquo;s furry group). These are almost universally positive experiences, and I feel it\u0026rsquo;s worth mentioning that these do offset some of the negatives throughout this post.\nConclusions # I originally had a multi page rant here, but instead, I\u0026rsquo;ve decided that some bullet points of wisdom are more helpful. So in the style of Baz Luhrmann\u0026rsquo;s \u0026lsquo;Wear Sunscreen\u0026rsquo;, I hope my advice, given in no particular order, is worth something:\nWhen paying for an education, students don\u0026rsquo;t want it to be easy or so hard that they\u0026rsquo;re stressed out of their minds: above all else we want to learn. Never forget you\u0026rsquo;re paying to sit in that seat. (Even if you have scholarships) Don\u0026rsquo;t skip class. If you\u0026rsquo;re paying $600 a credit hour (this is the roughly the average in the US, you may be pay much less or much more) you\u0026rsquo;re paying about $40 per lecture. Students and professors alike should be treated with respect. While the professors may be our elders we can\u0026rsquo;t sit by idly if they aren\u0026rsquo;t giving us what we paid for. College is a captive market. Dropping out means crippling debt. Transferring schools means more debt when credit doesn\u0026rsquo;t transfer. The college or department will always assure you the next class will have it better, but that doesn\u0026rsquo;t make it any better for you. Ask the next class if it is better. Follow up. Bring change. Inequality in funding may mean that the facilities for the degrees you want to study are crumbling. This is very hard to know in advance. College is for profit. They make profit off of new students. The best facilities are the ones perspective students are shown on a tour. Ask to go off the tour path. The system serves to hammer in the tired practice of academia more than it does to teach how to do the things you\u0026rsquo;re passionate about. If your professors do research, they likely care about that a lot more than teaching. They also likely have a paper quota to hit. If you want to know how to spot really bad professors, look for the ones that have published research using the same dataset over and over and that have published very \u0026lsquo;meh\u0026rsquo; papers. A bad prof with bad research is still usually worse than a bad prof with good research Education has not yet caught up to the idea of Google, StackOverflow, and the Internet. College is still largely about memorizing things you\u0026rsquo;ll soon forget instead of helping build a framework for understanding. Progress and change is exponential, while humans ability to adapt and react is, and always has been, linear. It still makes sense to learn how to do a derivative by hand a few times, it just doesn\u0026rsquo;t make sense to do complex ones Can we please teach people how to program their own numerical analysis solvers early People taught to solve yesterday\u0026rsquo;s problems will at best solve today\u0026rsquo;s problems too late Nobody makes money by doing hundreds of integrals by hand every day. While the Perato Principle would lead you to believe that 80% of what we lean is shit with 20% being actually useful, I\u0026rsquo;ve found that it\u0026rsquo;s more like 95/5 for what assignments, nuggets of knowledge, and test or quiz questions have stuck with me. Grading via software for a class you pay thousands of dollars for is never acceptable. Paying to access homework written by Pearson or McGraw Hill instead of the professor is even worse. The best professors understand that cracking jokes and having fun make students learn better. A bad professor can make easy content hard. Classes that have open book, open internet, and even open phone-a-friend tests are generally a lot better than classes that don\u0026rsquo;t- a good class will let you have at least a cheat sheet. Even for completely open everything tests, still make a cheat sheet Take notes in a centralized place early. Making OpGuides has accelerated my learning ten fold Ask your professors about their research, even if you aren\u0026rsquo;t interested in helping with it Learn python early. It\u0026rsquo;ll make the math classes easier. It\u0026rsquo;s basically an overpowered calculator. Don\u0026rsquo;t let a few bad professors take away your passion for what you do Don\u0026rsquo;t expect your classes to teach you everything you need to know Getting a B- in a class because you took detours teaching yourself extra related things is far more valuable If the prof has a passion for what they teach, talk to them about it- you never know what doing that work might do for your grade 😉 The harder the classes and larger the course load, the less you\u0026rsquo;ll learn. Honor\u0026rsquo;s students often learn less because they don\u0026rsquo;t have time to persue their own interests- speaking of: Find a creative outlet unrelated to your major, then find a way to tie it in to what you\u0026rsquo;re learning. For me this was music, doing DSP or designing circuits for audio xkcd #519 While directly contrary to what I\u0026rsquo;ve done in this post, generally I don\u0026rsquo;t recommend burning bridges, you never know when the flames may come back to bite you. There is such thing as a stupid question, just they\u0026rsquo;re more often on quizzes and tests than brought up by students Nobody in a crypto class cares about the three names that make up the acronym RSA Nobody in a networking class needs to know about NCP Most classes are about 15 weeks. These profs have 45 hours over 15 weeks (assuming a 3 credit hour class) to take you from presumably zero knowledge on a topic to being competent. There\u0026rsquo;s just not time for trivia questions on tests or quizzes, and they\u0026rsquo;re a good sign the prof is adding filler and depriving you of more valuable content. Most classes shy away from ethics, keep in mind how what you\u0026rsquo;re learning could be used for good and evil Thermal cameras for increasing crop yield or targeting civilians taking shelter? Machine learning to find cures or make deep fake porn? Be vocal in class. Ask questions. Ask questions that a bit tangential even. Talk to you classmates. As many as you can. Get to know them, find out what they\u0026rsquo;re good at. Study groups save lives Never take an unpaid internship If the field your in only has unpaid interships you need to change majors. If your college does a final project (often called Capstone) and they want you to do work for a corprate/business \u0026lsquo;sponsor\u0026rsquo; for free, tell them to g o f u c k t h e m s e l v e s. DO. NOT. DO. WORK. FOR. FREE. Colege is ᵥₑᵣᵧ, very , ᵛᵉʳʸ, extremely, ¸,ø¤º° extraordinaly °º¤ø,¸ , 𝕦𝕟𝕗𝕒𝕥𝕙𝕠𝕞𝕒𝕓𝕝𝕪, ludicriously, obnoxiously expensive. At the end of the day, you still need that degree to get most jobs that you actually want, so if you can\u0026rsquo;t avoid it- you may as well fight to make it worth something. Data # Letter Count (# of Classes) Credit Hours C-* 2 7 C 6 21 C+ 2 7 10 Classes with C\u0026rsquo;s 35 Credits of C\u0026rsquo;s B- 3 9 B 7 18 B+ 5 19 15 Classes with B\u0026rsquo;s 46 Credits of B\u0026rsquo;s A- 5 13 A 11 31 A+ 11 28 27 Classes with A\u0026rsquo;s 72 Credits of A\u0026rsquo;s GRADED TOTAL: 52 Graded Classes 153 Credit Hours Pass/NoPass 5 5 Withdraw 1 4 TOTAL 58 Classes 162 Credit Hours * Note, 3 credit hours of C- was retaken (CalculusⅡ), but is counted here. The retaken class resulted in 3 credit hours of B+, which is also counted.\n"},{"id":9,"href":"/posts/quantized/","title":"Quantization, Polarization, \u0026 Indoctrination","section":"Blog","content":" Quantization is the process of constraining an input from a continuous or otherwise large set of values (such as the real numbers) to a discrete set (such as the integers). - wikipedia I\u0026rsquo;m less than two months from graduating with degrees in both Electrical Engineering and Computer Engineering. One subject that comes up a lot in both fields is Quantization. Reading audio in to a micocontroller from a DAC? That continuous signal, represented physically by infinite values, now may only have 12 bits of resolution. Turning a knob on MIDI controller? There you get 7 bits. 128 possible values.\nMapping a smooth knob into a stair-stepped value range like this is limiting. Toggling a physical switch? 1 bit. 2 values. But, still, the signal being read may not change immediately (taking some time to go from ground to the higher voltage) or the metal contacts may bounce off each other rapidly, causing a flip to register as multiple. While this problem is usually called debouncing, it\u0026rsquo;s not wrong to think about it as quantization of a signal both in time and value. This is to say, It\u0026rsquo;s very common for an engineer to spend a fair amount of timing fighting the negative side effects of quantization.\nMeanwhile, quantization isn\u0026rsquo;t always bad. I also make music using modular synthesizers. There, a module literally called a quantizer, that takes in continuous voltage signals and snaps the value to 1/12th of a volt, a voltage step for each key in an octave. This allows for turning knobs to set up a sequence of notes without needing to get the knobs set exactly right. Similarly, there are many, many computer algorithms which rely on the fact that truncation of integer division is fast on computers, that is 5/2 = 2, when you throw away the decimal. This is still effectively quantization.\nIn pursuit of my degrees, I\u0026rsquo;ve also had to take a plethora of math classes. Occasionally, I\u0026rsquo;ll learn something and, as human minds are often over optimized for pattern matching, start to see it everywhere. Just like all the memes of seeing the Fibonacci spiral on everything or fractals in every leaf.\nSo, naturally, my mind fell down this hole with quantization, and sure there are example in nature, but here I noticed more social and political analogies, as people quantized politics into a 7-level signal of\nCrazy-Left, Mid-Left, Lean-Left, Centrist, Lean-Right, Mid-Right, Crazy-Right.\nOverton Window be damned, even if the center point of the spectrum is moving, the idea of a spectrum out right is wrong. It\u0026rsquo;s getting quantized! While maybe I\u0026rsquo;m reflecting my own experience onto others, it seems people often only have 3-bits of space in their head per person to store political leaning. I suppose that\u0026rsquo;s better than the polarization into well, polar (2) groups that is often discussed though.\nBut this isn\u0026rsquo;t a politics post. I\u0026rsquo;m an engineer, not a politician or sociologist. Instead, it\u0026rsquo;s a religion post, because any fuckwit on the internet can spew shit about religion!\nIn both Neil Gaiman\u0026rsquo;s American Gods and Kevin Hearne\u0026rsquo;s Iron Druid Chronicles there\u0026rsquo;s this neat idea that the Gods (and in both, this means all the gods) are created by and get their power from human belief. In other words, God is created in the image of man.\nNow, you might be thinking \u0026ldquo;So, you\u0026rsquo;re going to argue that we shouldn\u0026rsquo;t be picking one religion - don\u0026rsquo;t quantize our choice.\u0026rdquo;\nNo. I couldn\u0026rsquo;t give less of a shit what Gods you believe in. What I do care about is technology and the culture and ethics of those that work in my field. This is where my argument finally begins:\nWe\u0026rsquo;ve quantized ourselves into cults where devices, tools, and developers are our Gods. Worse, we keep giving them more power as the cults around them grow more entrenched in their personalities or mission. We\u0026rsquo;re turning tech into a holy war battle ground. Some worship Elon Musk, others see him as a devil. Either way he\u0026rsquo;s being deified. Same for Satoshi Nakamoto, Linus Torvalds. Same for particular platforms: Linux users ( I use Arch BTW. ) don\u0026rsquo;t help you learn Linux, they 𝕔𝕠𝕟𝕧𝕖𝕣𝕥 you. You become one of them. You\u0026rsquo;re expected to hate Windows.\nNuance is getting lost as people identify with their choices in technology and they decide who they want to look up to. I must admit guilt here as well, as I\u0026rsquo;ve firmly put myself into the \u0026ldquo;Hate Musk, Hate Crypto; Use Linux, Hate Windows\u0026rdquo; bin. On one hand, I feel like my opinions are well researched and well founded. On the other, I have to wonder to what extent my own biases prevent me from listening to a good argument (is there an actual, good use case for Cryptocurrency?). This is a mental dialog that I\u0026rsquo;m sure a lot of people reading have had themselves, and this point isn\u0026rsquo;t new- others have pointed it out too. What I think is harder to admit is being aware of these biases does not mean you\u0026rsquo;re able to look past them. Knowing your biased is a good start, but it doesn\u0026rsquo;t immediately mean you\u0026rsquo;re able to do anything about it.\nNow, I could go into how the 🄰🄻🄼🄸🄶🄷🅃🅈 🄰🄻🄶🄾🅁🄸🅃🄷🄼 on YouTube, Twitter, and Facebook make finding good, dissenting opinions harder to find. But you know this as well as I do. Again, being aware of the machine doesn\u0026rsquo;t help you escape it.\nFor example, the editor wars: Emacs vs vim vs VSCode vs notepad++ vs __ . Even if you personally think one is superior, even if it is technically superior (more features, faster, etc.) you\u0026rsquo;ve still quantized things into, at the very least, a ranked system. In reality, some of the choices are going to be almost identical, and for some of the others the difference is huge. Mentally ranking them from first to last has the implication of same-sized discrete steps. If we loop back around to the idea of politics, it\u0026rsquo;s easy to see that graph as being even tick marks, each group in an equally sized bin.\neven though if we realllllly insist on making it a 1 dimensional spectrum (already dumb) the reality is that while mentally we see it as equidistant steps, the actually placement of those steps on the spectrum is probably a lot more like this - though you should be imagining a bell curve sitting atop this graph, so the vast majority of people are still in the bounds of normalcy.\nThe problem being two fold:\nThe distance between the crazies and the normies looks closer when everything is equi-distant. This makes it easy to play the mental game of \u0026ldquo;All [Other party] is just a step away from nuts\u0026rdquo;\nIf someone is just barely over that line, you now mentally see them as fucking nuts (the criss cross zone here) even if there\u0026rsquo;s still a lot further to go into the deep end.\nKeep in mind, we\u0026rsquo;ve now jumped from mentality to reality, our lil\u0026rsquo; monkey brains are probably still thinking we\u0026rsquo;re impartial and putting things into equi-distant steps. But, frankly, it\u0026rsquo;s probably worse than this. Given you\u0026rsquo;re here, on my quite liberal site, it\u0026rsquo;s also likely that to you the situtation is more like this:\nBut that, mentally, you\u0026rsquo;d like to think you\u0026rsquo;re still thinking this:\nThis is (one of the many reasons) why the 💩 is currently well past the fan and now covering the walls - not just for politics, but for everything. From Cryptocurrency to the Music Industry. It\u0026rsquo;s not just a matter of polarization. If it was, people could see that. It\u0026rsquo;s a problem of recognizing that not everyone is polarized. Hell, the majority oppinion on any subject is apathy. Readers of this site are quite likely to have very strong opinions on crypto currency. Do you how most people feel about it? They don\u0026rsquo;t even know what it is. But when we see the bins as all being so close together, it\u0026rsquo;s easy to think everyone must have an opinion, after all, it\u0026rsquo;s so easy to fall into one side or the other! But we forget, the plateau of not giving a shit followed by the ocean of mild opinions far outweighs the crazy. If we quantize the bins to all be the same size, we loose this perspective.\nSo, that sure sounds like I\u0026rsquo;m just screaming into the void \u0026ldquo;Stop putting people into mental bins\u0026rdquo; or \u0026ldquo;Don\u0026rsquo;t be prejudice!\u0026rdquo;. Yeah, no. I\u0026rsquo;ll be realistic. You\u0026rsquo;re going to anyway. Humans are tribal creatures. We thrive on the idea of an in-group and an out-group. What I\u0026rsquo;m arguing for is taking a step back, looking at your biases, and asking two questions:\nAre the states being quantized to reasonable (ex: being split by a normal distribution, if applicable) Do you have enough states you\u0026rsquo;re quantizing into? (not just \u0026ldquo;Liberal\u0026rdquo; and \u0026ldquo;Conservative\u0026rdquo;) Okay, so now I want to look at a few \u0026ldquo;cults\u0026rdquo; in particular. For the sake of being at least a bit less of an asshole, all of these are groups I\u0026rsquo;m a part of to some extent - so, yunno, I\u0026rsquo;m calling myself out here too.\nI\u0026rsquo;m also not going to comment on any of the fan/hate clubs around a particular personality. To be clear, I absolutely do think these fan clubs around tech leaders as a massive problem I just don\u0026rsquo;t think I have a high enough speech level to talk about any of them in particular without getting myself harassed by an angry mob, which would just distract from my points. So, instead I\u0026rsquo;m going to focus on particular groups and technologies.\nCase study 1: Linux # I could rehash most of the Linux Sucks series, but that\u0026rsquo;s not what I\u0026rsquo;m here for. Yes, Linux sucks for all the reasons all of those reading this already knows it sucks. But the CULT of Linux is also the fucking worst. Do you know how most distro offer support? Well, assuming they even do and don\u0026rsquo;t just say \u0026ldquo;nup, that\u0026rsquo;s not supported!\u0026rdquo; the actual, offical support channel itself is often IRC. If we want the year of the Linux desktop to come, maybe we ought to realize it\u0026rsquo;s not 1998 and that asking people to use a chat software where incredible hoops must be jumped through in order to get messages while your computer is off is, uh, not great. Now, I\u0026rsquo;m not saying Discord, or Telegram, or Matrix, or yet another Discourse forum is the right call either, but IRC? Really?\nI bring this up to make a point. Enough of the Linux community has a massive boner for the good ol\u0026rsquo; days of Slackware and enough hate for Systemd to power a small city that it\u0026rsquo;s no wonder that Linux is having trouble finding young talent. It\u0026rsquo;s like they looked at the ham radio community and said \u0026ldquo;Oh! Nice Gameplan!\u0026rdquo;. I\u0026rsquo;m 23 and I can see this from a mile away.\nAnd yeah, there\u0026rsquo;s some awesome new stuff going on, from Valve\u0026rsquo;s work on SteamOS \u0026amp; Proton to novel projects like Arcan.\nBut let me wrap this back around to the point about people mentally binning people into groups. As a Linux user, I tend to bin people into Mac Users, Windows Users, and then into Noob-y Linux users and Linux Wizards. This, clearly, is a massive mental simplification. Even ignoring the lack of buckets in which I group other Linux users, this assumes that all Windows users are of the same technical proficiency, when in reality there\u0026rsquo;s probably more people that are extreme Windows power users (able to dive into the registry with ease) than there are Linux users that can use tar correctly on the first try. Of course, the average Windows user will still be nooby-er than the average Linux user - but then that\u0026rsquo;s just because they never even had to learn how to install the OS where using Linux implies someone already has gone out of their way to lean something- again, the most common stance is apathy. The bigger problem here is just that my mental catalog of users dosen\u0026rsquo;t even include a list of \u0026ldquo;expert Windows users\u0026rdquo; because that\u0026rsquo;s just not a bucket I want to see as existing. \u0026ldquo;If you\u0026rsquo;re an expert, you wouldn\u0026rsquo;t be using Windows\u0026rdquo; being the common, albeit subconcious, belief among Linux users.\nFor me at least, this is roughly the metal map:\nAnd while I know there\u0026rsquo;s at least a few dozen other WSL users out there, the fact that I have yet to encounter one in the wild makes it so that my metal picture of things just doesn\u0026rsquo;t even include that upper quadrant. If someone says the use Windows to, I immediately lump them into the same group as the Grandmas on XP. I know it\u0026rsquo;s wrong - hell, I\u0026rsquo;d actually bet that a healthy majority of PC gamers have tweaked at least a few registry values and a still healthy percentage able to do things like diagnose faulty RAM and comfortably navigate around command prompt. But still, this is the mental picture I get, and I assume many Linux users have too.\nWe\u0026rsquo;ve managed to make it a cult, and because there\u0026rsquo;s this sort of persumption that all Linux users are pros, as if booting into the OS one time awakens some sort of inert ability, it makes choices like using IRC as a support channel seem sane.\nLesson: Letting a technical choice turn into an ideological one can lead to one hell of a superiority complex\nCase study 2: Ham Radio # CQ,CQ,CQ, This KE0WGV, Killo Echo Zero Whiskey Golf Victor calling CQ and standing by. Ham radio is, despite what it may seem, not dead. However, the average of license holders is, according to very official sources, really fucking old. Unfortunately, it's quite hard to know if the hobby is growing or not, as any counts of license holders is likely to include a fair number of the deceased, as, it turns out to be quite difficult to contact the FCC office from beyond the grave (and the jurisdiction of the FCC in such circumstance is questionable) So, this creates an interesting problem. Getting kids interested in radio in the age of cell phones is already tough (let me restate, I\u0026rsquo;m 23 - but I still have tried, and failed, to get quite a few younger kids into this) but add onto this the clusterfuck that comes with the ageing radio population:\nThey are largely stuck in their ways Seeing Software Defined Radios (SDR) as \u0026ldquo;cheating\u0026rdquo; is quite common They often take up the air waves with politics or medical descriptions Trump and the decay of the human body, just what every gen Z kid wants to talk about! There\u0026rsquo;s a lot of hams with a supuriority complex You don\u0026rsquo;t work with an older ham, you get taught by one. This then acts as a feedback loop, since the lack of young blood deters other kids from particpating too. The entire point of radio is to be social, both on the air and at in person meetups making radios, doing fox hunts, etc. - but if everyone else there is multiple generations from you, you\u0026rsquo;re just not going to have much in common, so it takes all the fun out of it. No fun ⇒ No kids ⇒ No kids talking about it to other kids.\nSo, let\u0026rsquo;s view this through this quantization lens. Here, the steps are really obvious: generations. From Boomers to Zoomers. The big problem is that the distribution of ages in the hobby is so horribly uneven that instead of being roughly a bell curve that corresponds to age(1), the distribution feels (again, I can\u0026rsquo;t find good data) more like this:\nThe effect being that, mentally, ham\u0026rsquo;s are either young or old. It\u0026rsquo;s no longer a continuous spectrum of age. As soon as that polarization has happened, the above points I made become a lot more sinister - sure, not all old hams act in the way describe above, but there\u0026rsquo;s enough that they get the association.\nLesson: Having a demographic split, even if it forms slowly, can damage a community - so inclusivity needs to be a priority to avoid one demographic standing out.\nPopping in quick to point out, this point can lead others to the opposite conclusion, that exclusivity is the answer. That\u0026rsquo;s how shitty groups like Proud Boys form, and while it is sustainable (making such groups dangerous) it\u0026rsquo;s still the exact effect we\u0026rsquo;re trying to avoid! Case study 3: Gear: Keebs, GPUs, and Synthesizers # Up above I said that there\u0026rsquo;s cults around some devices, one that really stands out for this is mechanical keyboards. In fairness, the mechanical keyboard enthusiast community itself is actually pretty friendly, welcoming, and diverse. so I\u0026rsquo;m not calling anyone out there. Instead, the actual subject matter is\u0026hellip; odd. I mean, yeah, building your own keyboard is already something your average person would ask \u0026ldquo;but\u0026hellip; why?\u0026rdquo; to. The thing is, that list of reasons is pretty extensive:\nErgonomic key layouts Added buttons/knobs/screens Ability to type μ𝕟ιcⓞdε keys directly. Choice in switches, to get the exact right tactile feel Choice in keycaps for looks. However, if you go over to r/MechanicalKeyboards a good portion of what\u0026rsquo;s there has exactly one advantage: They look cool. A fair number of enthusiast have enough keyboards they display them on shelves, and a lot of these would be pretty awful to use daily. There\u0026rsquo;s a tiny bit of my soul that dies when I see that. It\u0026rsquo;s just this weird cult where these tiny, awful to type on keyboard that absolutely don\u0026rsquo;t have enough keys that are popular and give people a rush on fake internet points. This, in turn, creates a mad fever for competition to make the most artisan keyboard with hand made keys and rare woods - individual keycaps going for $50 is common.\nNow, it\u0026rsquo;s a hobby, and as with any hobby purchasing decisions don\u0026rsquo;t have to be justified with their utility, if the end goal is to provide happiness, I\u0026rsquo;m not really going to judge. I just really question that it does for most people, at least long term. Like, after the rush of internet points\u0026hellip; what? You\u0026rsquo;re going to show your fancy key to your friends when they come over? Like, if it were stickers on a laptop lid I\u0026rsquo;d even understand a bit more - other people are more likely to see that. You might make a friend from a conversation struck up by one. Hell, I actually have a mechanically keyboard sticker on my own laptop.\nLet me wrap back around to this though, and talk about two other communities, though I\u0026rsquo;ll keep it brief:\nThere\u0026rsquo;s this sort of joke among PC gamers that by the time anyone can afford a good GPU, they don\u0026rsquo;t have time to game and that when they finally do have time, they spend all their time overclocking and tuning(2) - they never sit down and play a game.\nThen, there\u0026rsquo;s the synthesizer community. Here, among the many, many problems in the community itself, there\u0026rsquo;s this issue of people collecting and hoarding a huge amount of gear\u0026hellip; and not actually making music with it. Now, I\u0026rsquo;m absolutely guilty of this as well, and to some extent it\u0026rsquo;s not as big of a deal as it may seem: for many, the fun is in sound design, so making music isn\u0026rsquo;t even the end goal. Still, there\u0026rsquo;s a lot of people who spend more time hunting for gear on reverb.com or planning out a eurorack system on modulargrid.net than actually using the gear they have.\nSo, my real point is that if passion for gear is taken to far it tends to result in forgetting why you cared in the first place. This leads to this weird situation where the people who are most hevily invested (literally) in a hobby tend to be the least actually involved with it, yet everyone else develops this unhealthy lust for that position.\nThis essentially divides every community into two: The gear snobs, and the people actually using the thing.\nLesson: Recognize if you\u0026rsquo;re about to fall into the pit of gear snobbery or lust\nCase study 4: 3D Printing # 3D Printers are really cool, I mean, really, you can bring your ideas from 3D model into reality! So why wouldn\u0026rsquo;t you want one?\nWell, first, consider some things:\nWhatever you\u0026rsquo;re printing needs to be, well, printable. This means minimal overhangs, a decent sized flat base, etc. You\u0026rsquo;re limited by size You can probably only print in one color (or a single, multi-color filament, like rainbow) Nothing you print will be food or body safe Good quality or solid = very long print time Your melting plastic This means you\u0026rsquo;re making something that will basically never biodegrade There\u0026rsquo;s some nasty fumes put off The end result will probably be fragile Printers are a pain to calibrate, you will have a lot of failed prints - especially at first. Even more non biodegradable plastic waste. Even more time per print. So, with all of those things in mind, they\u0026rsquo;re a lot less cool. I\u0026rsquo;m not saying you shouldn\u0026rsquo;t try it out, what I\u0026rsquo;m saying is if you don\u0026rsquo;t really have any ideas for what you\u0026rsquo;d want to print or you\u0026rsquo;ve only had the once-or-twice yearly time where you\u0026rsquo;ve wanted to use one, you\u0026rsquo;re probably better off ordering the part pre-made from a print farm.\nNow, maybe you do have tons of things you want to print! Maybe you\u0026rsquo;re into modeling and painting figurines from your favorite games and anime. Maybe you need a ton of props for a big model train setup. That\u0026rsquo;s cool! But I don\u0026rsquo;t think that\u0026rsquo;s the majority of 3D printing enthusiasts.\nIt could also be the case that you\u0026rsquo;re just fascinated by the idea of working on the mechanics and optimization of 3D printing, you\u0026rsquo;re really into tuning systems and trying out new materials. If that\u0026rsquo;s the case, go for it. Please do consider what you\u0026rsquo;ll do with all the failed print plastic noodles though.\nLesson: Don\u0026rsquo;t jump on hype trains without having a reason to ride\n\u0026hellip; Also consider if what you\u0026rsquo;re making is worth the environmental cost \u0026hellip; Also don\u0026rsquo;t forget the worth of your own time \u0026hellip; Also please don\u0026rsquo;t buy anything cheaper than the Ender3. eWaste isn\u0026rsquo;t just low end graphics cards. Case study 5: Furries # This post has been really negative, as I\u0026rsquo;ve gone out of my way to portray multiple groups and hobbies as being bad in one way or another, with the reason often boiling down to falling to deep down a rabbit hole. While that absolutely can be dangerous and that\u0026rsquo;s a point I wanted to make, it can be incredibly positive as well. Largely, it\u0026rsquo;s a matter of avoiding the bad and cultivating the good.\nFor example, I\u0026rsquo;m a furry. To have a website as big as this one on the internet and own a fursuit, it\u0026rsquo;s pretty clear I\u0026rsquo;ve gone pretty deep down the rabbit hole(3). In this case, it was 100% worth it, as some furs are really heckin\u0026rsquo; awesome. I mean, just look at (almost) all of the Interviews on this site. But at the same time, there\u0026rsquo;s a lot of issues in the fandom. Honestly, while the media like to play up the sexual nature of it, that\u0026rsquo;s honestly pretty tame and I haven\u0026rsquo;t seen many issues with it personally. Instead, to me, the issue is the sheer amount of alcoholism. It\u0026rsquo;s honestly a bit morbidly impressive. For me, being a furry has been an immensely positive experience. I have made some of my best friends, been given amazing professional advice and opportunities, become more confident, and just generally had a good time.\nMentally, I think I categorize furies into having tags - like metadata on a file. This is unlike the above where the categories had all been exclusive and on a spectrum that\u0026rsquo;s just been chopped up. Here, they\u0026rsquo;re just labels I put on for my own mental catalog. These include Nerd, Artist, Lood, Closeted-fur, LGBTQ+, Friendly, Creepy, among many others. You\u0026rsquo;ll notice that, largely, this isn\u0026rsquo;t furry exclusive. This is just a matter of assigning labels to people from your own perspective. It\u0026rsquo;s not really great to do, and it may even be harmful, but you\u0026rsquo;re going to regardless so you may as well be conscious of it and the failings there in.\nFor example, mentally only having one tag for artist means I\u0026rsquo;ll forget if someone can do 2D or 3D art or if they can animate. Similarly, only having one mental tag for \u0026ldquo;nerd\u0026rdquo; may cause me to forget if they\u0026rsquo;re deep into programming FPGAs or if they\u0026rsquo;re more into JS and web dev; only remembering LGBT+ means I occasionally forget pronouns. Clearly, that\u0026rsquo;s not a fine grained enough system. Unfortunately, these mental systems aren\u0026rsquo;t something we consciously make, so it\u0026rsquo;s hard to fix.\nStill, for me the relevant part is that from that list of tags I give someone, I can decide to prune them from my mental list of people I bother to stay friends with or I can try to maintain that relationship(4) This is a healthy thing to do, both at a personal level and a community level.\nLesson: Not all nerdy cults are bad, but you should pay attention to avoid the bad connections and cultivate the good.\nHe Who Shall Not Be Named. # Look, clearly the absolute worst offender on all of this is the NFT \u0026amp; Crypto mess. The God like status of Musk, the toxic \u0026ldquo;to the moon\u0026rdquo; and \u0026ldquo;everyones going to make it\u0026rdquo; atmosphere where any honest criticism is just ignored and assumed to be haters spreading Fear Uncertainty and Doubt (FUD) is the most toxic cesspool I have ever seen.\nStill, I know you might disagree with this, so I wanted to save this full on assault until now because, while I am anti-cryptocurrency \u0026amp; NFT I acknowledge that you, the reader, may not be and I think that if you are in that bubble having tho opportunity to think for yourself is valuable and I want to respect your decisions while showing you what questions I asked myself that lead to the conclusions I have. If you are pro cryptocurrency \u0026amp; NFTs, I do ask that you look up and watch some opposing views. I would say the same for those that are anti; however, I have yet to read anything actually convincing outside of arguments that it can make you a lot of money. If you legitimately have good points to be made, feel free to tweet articles at me. (within limits, please don\u0026rsquo;t drown me in it)\nConclusion # Clearly this post had next to nothing to do with quantization, not really. The thing I really want you to take away from all of this is that you should occasionally take some to reflect on your hobbies, interests, politics, etc. and ask a few questions of each, first the big two from the start:\nAre the states being quantized to reasonable (ex: being split by a normal distribution, if applicable. Are the biased?) Do you have enough states you\u0026rsquo;re quantizing into? (not just \u0026ldquo;Liberal\u0026rdquo; and \u0026ldquo;Conservative\u0026rdquo;) Then,\nDo you need to untangle your relationship with the thing from your identity as a person?\nRemember: It\u0026rsquo;s not always a bad thing to identify with something, but you should at least be aware of it! Are you getting what you want to out of the thing in question, or do you want to return to a previous state?\nWould investing into the thing in question more actually make you happier? What about less?\nAlso, as I tried to point out with the 3D printing section, it\u0026rsquo;s worth considering if you really want to invest yourself in the thing at all. Each of us only has so many hours and so many dollars to spend.\nTake it easy,\n- Vega\n\u0026hellip; and maybe next time I\u0026rsquo;ll sneak in a conversion about respect with a title about aliasing or gun control under the guise of the Fourier Transform. You can\u0026rsquo;t stop me! Yes, I know this is wrong too. Like, in most non-athletic hobbies you should expect more old than young as people get into something and stay in it life long. ... or trying to win the NewEgg raffle to even be able to buy a graphics card I am very aware of the pun here. It's not indended. even if I do so poorly 😬, If I haven't messaged you in a while, it's more likely you just floated down to the bottom of my recent messages list... "},{"id":10,"href":"/posts/wtfarch/","title":"A Culture Problem in Arch Linux","section":"Blog","content":"I removed this post due to it being a downer. If you view the page source, you can un-comment it, but I have decided the hate from strangers doesn\u0026rsquo;t matter.\nComic by Chats With The Void (@skullbird) on Twitter\n"},{"id":11,"href":"/posts/metaverse/","title":"A Meta-er-verse","section":"Blog","content":"\rPlots of land \u0026amp; Euclidean space # One of the bigger points of the metaverse is the idea of owning a slice of digital property. This is a weird mix of the scarcity and value from real life property and the domain name (like myfancyname.com) market. It also makes no god damn sense in this context, and is really just artificially putting limitations into a system for the sake of making yet another crypto currency.\nBut some land will be in more valuable places! Yeah, but only because CryptoBros like you decided some spaces can be more valuable and accessible. That\u0026rsquo;s still artificial.\nReally, valuable \u0026ldquo;land\u0026rdquo; would only be valuable for two reasons:\nThere\u0026rsquo;s a lot of it It\u0026rsquo;s easily accessible Let me address point 2 first: There\u0026rsquo;s no reason any area should be any more accessible than any other. Having a space be \u0026ldquo;close to spawn\u0026rdquo; is really, really dumb. It\u0026rsquo;s extra dumb when you consider somebody could decide to buy this space and just\u0026hellip; not use it? or, worse, use it for something repulsive, like just making the entire thing into a big swastika or something.\nScreenshot from Decentraland.org5,888 MANA = 22,132.68 USD at the time of writing Bringing that point further, there\u0026rsquo;s also no reason the space joining these virtual worlds needs to even be euclidean or that each land plot needs to be on the same scale. If you realllllly insist on having a system of land \u0026ldquo;ownership\u0026rdquo; that makes some land more valuable, then that will quickly lead to the scale hack anyway, where land owners just scale down users avatars upon entering the plot so the space feels bigger. This makes land value based on point 1. really weird, and goes a good step towards fixing the accessibility issue.\nWe won\u0026rsquo;t let people scale things like that though! That\u0026rsquo;s a bad user experience! No. A bad user experience is limiting what the users can experience in the first place. For a system to enforce scale it would need to have many, many other restrictions which would also limit the creativity of the worlds being made.\nGoing back an idea though, I said there\u0026rsquo;s no need land even be euclidean- what do I mean?\nYou ever played a game where if you go around in a circle, you can wind up in a different room. It sort of feels like two places are occupying the same space. Yeah, that is non-euclidean. We can use that, portals, and warped space in general to define how places are related to each other. This would dramatically increase the possibilities for navigation in a virtual world where things are all connected\u0026hellip; Plus it\u0026rsquo;s just really fucking cool That said, I\u0026rsquo;m not convinced anyone would navigate this way anyway? Like, it\u0026rsquo;s not as if moving in VR is as smooth as walking around (at least not without some special equipment), so really, methods of fast travel like VR Chat\u0026rsquo;s implementation where users can drop a temporary portal to another world for users to follow them makes a lot of sense. This basically totally eliminates the idea of how accessible a plot is, as users can just warp anywhere from anywhere anyway.\nSpeaking of, a good design would let users have their own private home plot with a warp/portal hub, so they can get to their favorite locations quickly.\nGame Engines and Standards - A crazy idea # On the web, there\u0026rsquo;s a few core things that make everything work, namely HTML, JavaScript, and CSS (as well as WebAssembly, WebGL, and a few other things) but these things can be used to make everything from a super basic http://motherfuckingwebsite.com to full on VR content in the browser. I think a good metaverse would be similarly flexible, and I think the only way to achieve that would be to offer engine interopability. This would be really, really fucking technically challenging. I\u0026rsquo;m suggesting a user be able to fluidly move between a Unity world and an Unreal Engine world and then be able to jump into something more obscure like No! Euclid! or other completely custom engines. I\u0026rsquo;d love to speculate on how this could work, as making it so you can visually look into and fluidly walk between borders of two engines is a really interesting (albeit mildly crazy) question, but I think that\u0026rsquo;d be a full blog post (or even life\u0026rsquo;s work) of it\u0026rsquo;s own. That said, with enough cooperation and a decent standard I think this is totally possible.\nThe \u0026lsquo;cost\u0026rsquo; of a less constrained metaverse # One of the ideas of Meta\u0026rsquo;s (FaceBook\u0026rsquo;s) metaverse is acquiring digital belongings (Fuck NFTs) and being able to bring these from one place to another. Presumably, this would include being able to level up your character in games and bring increased health/experience/mana etc. from game to game.\nThis is the stupidest.\nfucking.\nidea.\nI have ever heard.\nFirst of all,\nwithout strict controls users will just make worlds that let you get increased stats (high health/level/etc.) either instantly, or by making grinding things that can be done to get these things trivial.\rSecond,\nwhy should leveling up in something like Candy Crush make it so you have a better player in Doom? This is extra stupid when you consider difficultly usually scales with the player's level and actual game play experience, so players might be starting new games at a difficulty they can't handle.\rThird,\neven outside of gaming contexts, in almost no crafted world would it make sense to let users bring in arbitrary assets, more so if they have functionality (and so code). Even without this though, it will almost certainly lead to somebody making a lag cube™ that is a mesh with umpteen gazillion vertices that tanks all users FPS without a mod to not render it. Though, again, not allowing for the users to make worlds that support things like this (at least in the world it's supposed to be in) would require restrictions that ruin the entire thing. This is of course still a problem if worlds are connected but there's an easy fix for that:\rA web portal of trust.\nNo world should have a wall/door/border/portal/etc. that connects to and renders another world\u0026rsquo;s assets without that user trusting that world and explicitly putting it into their world. If a user drops down a VR chat style portal to another world, it should do what VR chat does and render a screenshot of that world, preventing arbitrary code and assets leaking between the two. Sure, assets should be transferable, but this should be the exception, not the rule.\nThere are sort of two times where I can see item transfer being used and actually working:\nThe same base game/experience being hosted by multiple worlds/servers Multiple different experiences sharing low-functionality items (cosmetics, etc.) For 1. - If two worlds are both running a meta-verse-ized Minecraft, and they agree that a user can carry their inventory from one to another, that makes sense. But this shouldn\u0026rsquo;t be enforced, otherwise, there\u0026rsquo;s nothing to stop a third instance from just handing out free diamonds and ruining the experience for everyone else. This also gets tricky if you consider unsupported items between instances. Sticking with the Minecraft example, imagine that one of the two servers is running a mod that adds emerald tools - what should happen if the user tries to take the inventory to a server without the mod? Should supported stats (tool durability, mining speed, the item texture, etc.) all be imported or should the item be ignored?\nFor 2. - If multiple experiences shared something functional, there\u0026rsquo;d be a lot of potential for either abuse or unbalanced mechanics. For example, say game A lets you get an extra life item, and game B doesn\u0026rsquo;t, but both are paid games, and B let\u0026rsquo;s you import the extra life item from A. Well, now there\u0026rsquo;s a pay-to-win mechanic.\nFinally, there\u0026rsquo;s the \u0026ldquo;issue\u0026rdquo; of avatar customization. If you look at VRChat or Minecraft, you\u0026rsquo;ll see that users tend to care pretty deeply about their skins/avatar. How should these be transferred from world to world? VRChat just lets the same avatar be used in all worlds - which is a good call in a lot of ways - but would be really weird in full, separate video games. Again, thinking to what Minecraft in the metaverse would be like, it\u0026rsquo;d be really weird if a highly textured, many polygon character that was 20 blocks tall were playing. Plus, this may not even be supported by the engine of the world a user is going to. So, what do? I think the easiest solution is to define a standard and let games/experience use the user\u0026rsquo;s primary character wherever possible, and then let games say \u0026ldquo;Actually, no. I\u0026rsquo;m gonna need you to go though my character creator real quick\u0026rdquo;\n\u0026ldquo;Meta\u0026rdquo; should mean more than VR or AR # It\u0026rsquo;s uh, in the heading: But, yeah, a true metaverse needs to incorporate the \u0026ldquo;worlds\u0026rdquo; we\u0026rsquo;ve already made, including everything from the physical (probably with AR) to the 2D, digital - traditional websites and 2D/3D games. It also seems pretty reasonable that this links in IoT devices and existing hardware.\nI actually have to give props to Facebook a bit for this, with the Oculus Quest 2\u0026rsquo;s keyboard pass through feature. Ideally, I\u0026rsquo;d like to see models 3D scanned and interpreted to seamlessly mesh with the VR environment, but this is a good start. Long term, I think it\u0026rsquo;d be really cool if the tracking and digitization were good enough and generic enough that most common objects could be interacted with in VR with on-the-fly generated models. Being able to play my MIDI keyboard or guitars in VR comfortably would be amazing.\nAs for the IoT side of things, it\u0026rsquo;d be great if IoT devices could be scripted to respond naturally, controlling a room\u0026rsquo;s lighting depending on if a headset is being worn, or to mach the lighting of a virtual space for those with AR systems. The current way to do this would be an IFTT or Node-Red shit storm, but I think these things could all be incorporated into better standards for generic lighting, 3D sound, etc. control to eventually provide open, generic interfaces to act as standards for all of these things.\nStill, it\u0026rsquo;s unreasonable to expect everyone to jump on the VR or AR hype train and there\u0026rsquo;s no reason the metaverse should need to be 3D entirely anyway. There\u0026rsquo;s a lot of content that works best as a flat, 2D page on a monitor and a lot of times where playing games is better without a headset (especially if you\u0026rsquo;re gaming with snacks)\nFinally, I want to make a point about AR - I think it should be able to go both directions. Zuckerburg\u0026rsquo;s idea of the Nintendo mii like characters is deeply creepy, but I think having a point-cloud tracked person walking in VR could actually work quite well, especially if that point could is rendered pretty matter-of-fact-ly as a point cloud, not some creepy low-poly textured interpretation of what that point cloud might be.\nThis is a chance to make better standards # Here\u0026rsquo;s where things are going to get a bit nerdy, so buckle up:\nCurrently, the internet as a whole is pretty centralized. This means when you go to Facebook, you\u0026rsquo;re going to Facebook\u0026rsquo;s servers- not directly pulling the data from your friend\u0026rsquo;s computer to get their latest status updates. If Facebook goes down, it all goes down. Other than the issue of fault tolerance, there\u0026rsquo;s also problems with control and scalability. Control: on Facebook, Facebook is king. If they decide to ban you, that\u0026rsquo;s that. Scalability: If every Facebook user was online at once, Facebook\u0026rsquo;s servers would need to deal with this load.\nSo, the alternative? Decentralized systems. Here, each user contributes to the network and things naturally scale. A lot of Cryptocurrency bros will say\nYEAH MAN! This is why we need web 3.0! [My Cryptocurreny of choice] is decentralized and NFTs and\u0026hellip;\n*starts foaming at mouth* And, like, CryptoBro here has the spirit I guess? I don\u0026rsquo;t think anybody with a brain wants the entire web to be behind a crypto currency paywall though, and existing systems like torrents, IPFS, etc. all prove it isn\u0026rsquo;t necessary either. So, no.\nSo, with the cryptobros now thoroughly angry and having probably clicked away, the adults in the room can get back to looking for legitimate solutions to problems again - so what are those problems?\nCentralization Lack of user control of data Infrastructure that makes p2p sorta meh Old, complex, ill-defined backwards-compatible standards Latency and UI Search Having already covered point 1, let\u0026rsquo;s jump forward to 2 - Lack of user control of data\n2 - Lack of user control of data # I don\u0026rsquo;t think I need to write a lot here- Facebook, clearview.ai, and Google have an incredibly creepy amount of information about you - even if you\u0026rsquo;ve enable Do Not Track in your browser, even if you have a pi-hole, even if you have _nomap in your Wi-Fi\u0026rsquo;s name. It doesn\u0026rsquo;t matter, because you don\u0026rsquo;t own your data, and some how all of that bullshit is legal (and being done by the NSA too). So, how do we fix it?\nFirst, we make it illegal to do it without consent, then we stop fucking giving them the data. Our protocols for our new Metaverse should assume each user has the ability to store their data and provide it when necessary, but it should never be stored on a 3rd party server. The end goal is that shared personal data can be granularly controlled, have access revoked, seeded with random offsets, given per-service variations (like GMail\u0026rsquo;s me+whatever@gmail.com feature) and everything should be opt-in (not opt-out) by default. Users should be able to store their preferences: Fuck your cookie banners, you shouldn\u0026rsquo;t have to ask.\nAll of this should be part of the standards of the web Metaverse, non-optional, and enforced all the way down at the information exchange level.\nI do think there should be one exception to this: Trust. I think there\u0026rsquo;s damn good reason for worlds/servers/teams/whatever to want to have a way of establishing a user is trustworthy, and I think it\u0026rsquo;s reasonable that this be tracked and stored somewhere the user can\u0026rsquo;t just arbitrarily change it. More on this later.\n3 - Infrastructure that makes p2p sorta meh # The metaverse (VR/AR + content) is going to require approximately twelve metric fucktons of data traverse the series of tubes at any given moment. Even if the US (let\u0026rsquo;s face it, we\u0026rsquo;re the worst) pulls our craniums from our collective rectums and replaces all of our aging copper with fiber and gets everything to IPv6 overnight, we\u0026rsquo;d still be fucked - less fucked, but still fucked. Why?\nOur entire model of networking is pretty dumb. Up above I mentioned the issues with centralization and how with decentralization \u0026ldquo;each user contributes to the network and things naturally scale\u0026rdquo;. Well, that would be true, unfortunately, our networks largely look a lot like this:\nWhen for good decentralization we need them to look a lot more like this:\nWhat this equates to is if I want to send a picture to my neighbor our networks should just talk without needing to go halfway up state and back. This could mean our Wi-Fi routers are able to mesh together nicely and exchange data directly, or that the ISP configures the networks sanely such that at the switch box at the end of the block, the packets go \u0026ldquo;ooh! We can turn here\u0026rdquo; instead. Ideally? Both. But on a huge scale. Everyone\u0026rsquo;s Wi-Fi, cellular connection, fiber internet, everything- make it one giant mesh, with lots of redundant connections.\nNow, you\u0026rsquo;ll notice that I still have some big central nodes in that decentralized network image. Hell, it\u0026rsquo;s even setup such that the left most big node is required for the three smaller connection in the top left to get to anyone else. I think this is realistic. The fact of the matter is economies of scale are still a thing and some services will always require centralized coordination. Even in a decentralized network, there will still be more important nodes. That\u0026rsquo;s just reality. This is still even a bit optimistic, as there will certainly be outliers that have only one way to get to everyone else (think a house in the country with no cell service and only one, wired connection provide by an ISP)\nNow, there\u0026rsquo;s one problem here that I think stands out: If my neighbor can connect through me, what\u0026rsquo;s to stop them from just mooching off of me and not buying their own connection to the internet to contribute back?\n*salivates onto a pile of Ethereum*\nDown boy! Let\u0026rsquo;s first assume you both have nice internet connections: It\u0026rsquo;s logical that one of you may be a technomancer while the other is a tech-illiterate Karen and so use differing amounts of bandwidth. This is fine! It still benefits both of you, as it means you, the technomancer, can look at content early and have it cached before the Karen ever gets to it. Plus, if the Karen isn\u0026rsquo;t using bandwidth, it\u0026rsquo;s not as if it\u0026rsquo;s a hoardable resource - bandwidth only exists at a fixed point in time - it may as well be used. Plus, it might be that this Karen\u0026rsquo;s link is the only thing connecting you directly to someone else that\u0026rsquo;s also a technomancer running a bunch of services you use.\nBut, okay, back the point - let\u0026rsquo;s say the Karen decides not to have her own connection, and try to mooch off of you entirely. That\u0026rsquo;s still a problem. Fortunately, there\u0026rsquo;s an easy fix. The network can still let you route through her by noting if the destination is actually her network - you can still connect to your other technomancer friend. This alone gives you something in return for you bandwidth - Karen is giving you faster, lower latency connection to someone else. But, wait, that\u0026rsquo;s still not totally fair, so, the fix? Three conditions:\nOne: put a cost on your bits - no, not cryptocurrency, but bits for bits. The simplest option is a 1:1 ratio. If Karen doesn\u0026rsquo;t directly provide bits from the internet, she\u0026rsquo;ll at least need to forward as many bits as she wants on from your technomancer friend.\nTwo: So long as you have extra bandwidth (remember, not a hoardable resource) let Karen accrue a negative balance.\nThree: Have a local graph of the network. If Karen is an \u0026rsquo;edge\u0026rsquo; (having no other peers or access to the Internet) then she can\u0026rsquo;t provide anything. Cut her off if she doesn\u0026rsquo;t have a positive balance. This lets her build up bits to spend, but she still has the consequence of risking losing connection entirely if she isn\u0026rsquo;t forwarding useful traffic back to you and you don\u0026rsquo;t have bandwidth to spare.\nThere might be reasonable modifications to be made here, such as slowly forgiving a negative balance, adjusting the bit price ratio depending on latency, etc. But, in theory, something like this should work. Obviously this is sparse on technical details, but I\u0026rsquo;m sure there\u0026rsquo;s some networking engineers reading this that can caress DHTs to do what is required - and without the need for cryptocurrency.\nReally though, this problem is two fold. We need the hardware infrastructure and protocols/software that support this p2p meshing system to be common place.\n4 - Old, complex, ill-defined backwards-compatible-ish standards # I might be wrong, but I think the Zuck\u0026rsquo;s intention is to have the metaverse replace the web. Which, uhh, is a choice.\nSo, let\u0026rsquo;s go with it. Let\u0026rsquo;s assume we\u0026rsquo;re gonna abandon the web. We\u0026rsquo;ll still need to make tools that do what the web does anyway, which is let people author content. I\u0026rsquo;ll talk about these tools more in a bit (Creation Vs Consumption below), but the tools themselves will still need to assume some standards. It\u0026rsquo;s worth remembering that even in 3D, there will still be a fair amount of 2D interfaces and content, and we\u0026rsquo;ll probably want to render the old stuff. This means the current shitstorm where HTML, CSS, JS, etc. don\u0026rsquo;t look the same in every browser is still a problem, but obviously we can\u0026rsquo;t fix that for old content.\nWe can, however, learn from our mistakes for the new content. So, what did the web get wrong? I think this comes down to three things:\nFirst mistake: I think the big one was using multiple languages. HTML, CSS, JS, \u0026hellip; it\u0026rsquo;s a full stack that can get sloppy at the intersections, it\u0026rsquo;s why the \u0026lt;center\u0026gt; html tag had to deprecated, for example. I think we just need a single, unified language that handles content, style, and interactivity. Now, this language would almost certainly have to have a rather odd syntax to support the three roles, but I think it would be a positive change. Plus, this could wrap in a few more roles more relevant to 3D, such as object position, rotation, style, and maybe lighting. This would have be balanced with supporting reasonable file formats for the actual definition of those objects, but it would make sense to have the 3D objects be exposed in the code as a, well, object - as in object oriented programming. Having these systems interconnected like this would be incredibly convenient for letting things interact, like letting text wrap around a 3D object, and changing that text based on user interactions. I also think it would be helpful for making a powerful user-facing editor that exposes a lot of functionality - again, more about this in Creation Vs Consumption below. Finally, this should also allow for big version bumps in the future. A world could just say \u0026ldquo;I want language version x.y.z\u0026rdquo; and being self contained, the older version could still be used.\nI hear the skeptics among you, and yes, I do actually think this could work and be a good programming experience. I think it would require us to re-think our tools a bit though and combine graphical/node based programming, \u0026ldquo;normal\u0026rdquo; text based programming, and tools that generate data/code for us - like world editors that update the position of an object in the code. Second mistake: the lack of a reference implantation. Chromium and Firefox based browsers (really the only two left) still disagree on a lot of things because there\u0026rsquo;s just not a great reference for what\u0026rsquo;s correct. Having a good reference implementation would help avoid ambiguities in the standard.\nThird mistake: making a platform that was restricted. A lot of the differing features between Chromium and Firefox browsers comes down to supporting weird, hardware specific standards introduced by Google for Chrome, like WebMIDI, WebUSB, etc. many of these serve the role of letting web pages access hardware more directly. So, the fix? Make things open to begin with. Obviously, a permission system is needed - but a good platform shouldn\u0026rsquo;t need something to be tacked on to add low level functionality like this.\n5 - Latency and UI # We need shit to be much faster. We also need to stop drawing after the intial load. It just makes people click the wrong thing. Like, fuck, this is UX 101 guys. I\u0026rsquo;m not going to try to reinvent the wheel here, so see https://danluu.com/keyboard-latency/ and https://danluu.com/input-lag/ for context\nThe gist is that latency isn\u0026rsquo;t getting better, if anything it\u0026rsquo;s getting worse, and user experiences are worse off for it. As someone that makes synthesizer and guitars make funny noises music, I can tell you from first hand experience that at some point, it just starts to make things unusable, but a little bit before that point it\u0026rsquo;s usable but literally makes you feel sick and uncomfortable withing being able to tell why. It just sucks.\nSo, what does this have to do with the metaverse?\nWell, largely the \u0026ldquo;metaverse\u0026rdquo; means VR/AR, which means strapping something to our faces to try to convince our easily tricked monkey brains into thinking we\u0026rsquo;re somewhere we\u0026rsquo;re not and experiencing things that largely don\u0026rsquo;t exist. For this to not totally suck, this needs to be able to respond to input really, really fast. Otherwise the side effects range from a loss of immersion to motion sickness bad enough to necessitate a barf bag.\nOkay, so, better standards- where does that come into play with latency and UI? Well, for the UI, whatever is used to render to the screen needs to be able to enforce certain things be done by the rendering engine, like not strobing the screen or drawing new content after a certain point (yes, I\u0026rsquo;m still mad about that), but it\u0026rsquo;s hard to really stop someone from making a bad design without limiting them.\nFor latency, honestly? I think we just need to give a shit and make everything better at real-time from the ground up. On most OS\u0026rsquo;s today, getting low latency audio requires using a completely separate audio stack, like, what the fuck?? Plus, somehow we got stuck with 60Hz screens being standard, though even then the applications or compositor (or both) usually need to store a full frame in the buffer to avoid V-sync issues, so the latency is made even worse.\nIn the metaverse, where we\u0026rsquo;re probably going to need to stream voice as well as large assets over the network this is going to be a much bigger deal. To some extent this will be able to be remedied with a mix of neural-network-y predictive-voodoo that preloads content based on a ton of metrics and by the implementation of the previously mentioned p2p networking stuff (avoiding long trips in the first place) - but actual local input still needs to be captured and processed much faster too.\n6 - Search # When doing research for this I stumbled upon Re-Organizing the World’s Information: Why we need more Boutique Search Engines by Sari Azout, which other than being pro-NFT at the end, I think is a really good overview of why right now everything is Situation Normal: All Fucked Up. It\u0026rsquo;s a bit weird to think about, but the web hasn\u0026rsquo;t always been what it is today, and it also didn\u0026rsquo;t just suddenly switch to being dominated by Google and Facebook. It evolved. Services came and went - AOL, MySpace, MSN Messegner - Along with the expansion there was an increased need for search to wade though the increasing number of sites and services and endless wastes of spam. At first there were curated lists, then small search engines with rudimentary web crawlers. Things grew. Sites started abusing search engine indexing. Search Engine Optimization (SEO) became an entire industry.\nAlong the way, big websites were able to completely dominate results. Now, if you enter a search term (assuming you have adblock on to remove the shit) the first results are almost certainly Reddit, Quora, YouTube, Facebook, Amazon, and a handful of other sites you\u0026rsquo;ll immediately recognize. Honestly, I have no idea how you\u0026rsquo;d ever find a website like this one. We no longer surf the web for new websites, we float along the same archipelago.\nSo, we\u0026rsquo;re making a metaverse - what should we do differently? I\u0026rsquo;m honestly asking, I\u0026rsquo;m not totally sure. I have ideas:\nRequire search tags be added by users with enough reputation, not the creator Reddit-style content ranking systems on search results An entertainment to informational slider Context aware search - if I\u0026rsquo;m looking at the wikipedia page for CPU\u0026rsquo;s and search RAM, I probably don\u0026rsquo;t want pictures of the animal or ads for a truck. Connecting people - if two people are looking up the same thing let them chat! Or leave a note on their search asking a question for the next person to see and answer There are already projects doing some of these things, like https://yacy.net, https://search.marginalia.nu, https://lieu.cblgh.org, among many others.\nThe thing is, despite not having any good suggestions or answers for what to do, this is probably one of the most important things for a metaverse to get right and that\u0026rsquo;s why I\u0026rsquo;m including it in this section- I think search, indexing, and ranking needs to be considered from the start, at the protocol level when we\u0026rsquo;re building these systems from the ground up. It can\u0026rsquo;t be tacked on as an application in the end, or we\u0026rsquo;ll end up with the mess we have now.\nThis is made even more complicated in VR, as in an almost endless maze of interconnected worlds that may contain anything from games to classrooms, navigation in this 3D space is also analogous to search. Falling down an internet rabbit hole will be all the more literal. Society can not afford for these holes to act as a game of plinko where there\u0026rsquo;s a good chance you\u0026rsquo;ll be bounced into a hole of neo-nazi fanaticism or ant-vax conspiracies. If these things are already dangerous now, multiply that by the grip of a loner finally finding a community where they can interact in something much closer to real life: leaving the radical group will mean the loss of friends and the loss of a safety net far worse than the current equivalent.\nAt the same time, these rabbit holes still need to be deep and wide, and allow for small, new creators to find an audience otherwise we\u0026rsquo;re still back where we started.\nI wish I had something more to offer than just stating how high the stakes are, but this problem is really, really hard.\n(I\u0026rsquo;ve written about search a bit before, see HCI2: Search sucks )\nCreation with Consumption # So far I\u0026rsquo;ve talked about worlds and land and experiences and games, but all of these are things you go to, play, and see but aren\u0026rsquo;t really things normal users will be able to create with. While gaming certainly can be social, I think the games that do the best job of this are the games were you can make something with others - again, like Minecraft.\nPico-8\u0026rsquo;s Sprite Editor for graphics and Tracker for making music It seems odd to me that most of the visions of a metaverse I\u0026rsquo;ve seen so far assuming you\u0026rsquo;ll be using external tools to make 3D models, code, etc. to make the worlds themselves. What I\u0026rsquo;d really like to see is the integration of 3D modeling and painting, programming and scripting, and audio workstation tools all exposed in one environment, sort of like how the pico-8 has all of these things. I think the ideal way to build a metaverse is to let people is to let people change the meta without leaving it. \u0026ldquo;Meta\u0026rdquo; literally means self referential: it seems weird that you wouldn\u0026rsquo;t be able to create the words from within it. That\u0026rsquo;s like an operating system that can\u0026rsquo;t compile itself.\nMore than that, I think that (with very few exceptions) the content served should be entirely compiled and rendered client-side - sort of like how the web works - so that users can clone and edit and make derivatives of existing work super easily: just like copying HTML from web pages in the '90's.\rIdeally, I think this should work all the way down. I think it\u0026rsquo;d be awesome if a user working in a dedicated VR world scripting language could inspect a print function in a script that actually calls a C++ library, and be brought to that code to edit it and recompile it on the fly, hot-reloading everything in place. It\u0026rsquo;s not like the technology to do this doesn\u0026rsquo;t exist - then, the same for models, textures, and music. Let a user enter mesh edit mode and drag some vertices to deform an object. Where possible, serve music as MIDI and synthesizers and samples, so that notes and timbers can be edited by the users, in real time. This has advantages for the creators too: for example, if the music is being rendered client side from notes and synthesizers, then the notes could be generated algorithmically and the parameters of the synth set to vary randomly with time to make generative music that doesn\u0026rsquo;t get boring.\nOf these, I think the audio one is the biggest stretch, only because rendering complex audio in real time with lots of effects would need a lot of CPU/DSP horsepower. To have this not impose a lot of limitations on artists would be difficult, but it wouldn\u0026rsquo;t be a huge change from back in the early days of computer music with trackers and MIDI based music for games, where the game\u0026rsquo;s soundtrack massive varied depending on the soundbanks of the computer being used. I think for most things, this trade off would be worth it. Just, step into my imagination for a bit, imagine:\nPlaying VR minigolf with friends, and, as the game host, you can change the models of objects, so you jokingly make a friends ball a cube. You\u0026rsquo;re playing a VR shooter and want to play a 1-hit-kill game, so you edit the code live to make everyone\u0026rsquo;s guns do max_int damage. You\u0026rsquo;re listening to a song and want to hear it accapella and with a more distorted guitar - so you just look into the song editor and turn off the vocal track(s) and add a distortion to the guitar track And, yeah, there\u0026rsquo;s obviously copyright and monetization problems abound here but if you have ever walked into a world in VR chat and seen the sheer amount of available avatars or how many worlds are derivative, you\u0026rsquo;d see why this is both something nobody is respecting now anyway and why this open system would be immediately loved.\nAlso, I do want to point out that above I said \u0026ldquo;[\u0026hellip;] in almost no crafted world would it make sense to let users bring in arbitrary assets\u0026rdquo; which seems to contradict this, but what I mean is in public worlds it doesn\u0026rsquo;t make sense. If a user duplicates and self hosts the world as a private destination for friends, they should be able to do whatever still.\nIn my opinion, if you want a metaverse, this level of openness, customization, and hackery isn\u0026rsquo;t just a suggestion, it\u0026rsquo;s a necessity.\nModeration # There could again be an entire post devoted to what content moderation does and should look like in VR and the metaverse. The TL;DR of that post would probably be \u0026ldquo;If it\u0026rsquo;s decentralized, you can\u0026rsquo;t stop it, but you sure as shit don\u0026rsquo;t have to federate with it\u0026rdquo; if you go along with idea of federation and Mastodon. (1)\nThis is made a bit more complicated if per-user restrictions are made a thing, as there\u0026rsquo;s a conflict between letting users maintain and create multiple identities and making it easy for servers to moderate. This might be fixed by associating a \u0026ldquo;trust level\u0026rdquo; with user accounts that federated servers share, and where established users can vouch for a friend by wagering some of their own trust for a set period of time. If the user doesn\u0026rsquo;t do anything bad (cheat, post illegal content, act like a douche) then the original users gets their trust back, and the target user gains some trust on top. (No, trust doesn\u0026rsquo;t need to be an NFT or currency. I can\u0026rsquo;t believe I even feel the need to clarify this, but here we are.) Making it so this trust level couldn\u0026rsquo;t be gamed like Reddit\u0026rsquo;s Karma may be difficult, but I think as long as the actions that can generate trust are pretty limited, high effort, and require a human it should be fine. I\u0026rsquo;m thinking things like having a friend request accepted by another high-trust user, playing a game without being flagged as a bot, or even putting a \u0026ldquo;Trust me?\u0026rdquo; button on the bottom of a blog post like this so that users can wager trust. Things that can cost trust should vary, though mean comments and being a douche should probably have a cap on how much can be lost.\nIf a user makes a new account, they\u0026rsquo;d just have to trust themselves a few times with a very large wager to get the trust built up.\nMonetization \u0026amp; The DRM-verse # The inclusion of Digital Rights Management (DRM) in something strapped to my face is already horrific enough, but add in the idea of potentially locking these systems down so that I\u0026rsquo;m forced to watch an advertisement sounds like a scene out of Black Mirror.\nI\u0026rsquo;m not naïve, I understand DRM will be pretty much necessary in order to have big publishers make games and other content for the metaverse, as they\u0026rsquo;re worried about piracy dramatically cutting into their profits. I get it. That said, maybe if they don\u0026rsquo;t make buying the product a massive pain in the ass or include the anti-features of DRM (like how Denuvo makes games slower and have longer load times or just become unplayable when servers are shutdown),\nUS8246454B2 - System for converting television commercials into interactive networked video games - Sony Interactive Entertainment LLC the sucking up and selling of user data, and the inclusion of things nobody wants (like Bixby on Samsung phones) then the DRM wouldn\u0026rsquo;t be necessary in the first place. Maybe I\u0026rsquo;m wrong, but for most content I think piracy is more of a distribution and anti-feature problem than a price one. I really don\u0026rsquo;t think most people who are pirating out of price would have actually paid for the content legitimately anyway. Hell, if anything, it drives more sales as people want to try before they buy.\nSo, let\u0026rsquo;s just draw the line in sand and say no. If we\u0026rsquo;re going to have a metaverse, it doesn\u0026rsquo;t need DRM\u0026hellip;..\n\u0026hellip; -ish. I will admit there\u0026rsquo;s a few hiccups here, and that\u0026rsquo;s online services - like video game multiplayer. If it\u0026rsquo;s not 100% p2p (reasonable if a central authority is needed), the game server has to coordinate things, then there is an overhead associated that necessitates checking players have actually bought the game - it\u0026rsquo;s one thing to not make money on a sale, it\u0026rsquo;s another to lose money.\nThis only really requires relatively minimally invasive key based authentication though, and there\u0026rsquo;s still incentive not to share your key, as doing so would mean someone could steal your account and get you banned from online play. While I supposed this is technically DRM, it\u0026rsquo;s more so just user authentication, and I think that\u0026rsquo;s fine? It\u0026rsquo;s not really any different than letting users host private rooms/worlds. That said, I think there should be something that ensures the server code/software is also freely available so others can self host still - A digital world you can\u0026rsquo;t control isn\u0026rsquo;t a metaverse. Plus, we don\u0026rsquo;t want a server going offline and a digital world suddenly being lost forever.\nI also want to preemptively respond to the \u0026ldquo;But movies and music and content creators deserved to get paid!\u0026rdquo; comment. Yes, I agree with you. Problem is, DRM isn\u0026rsquo;t going to stop the piracy, and it will only make it a worse experience for those actually paying.\nBut won\u0026rsquo;t someone just make an \u0026ldquo;everything is free\u0026rdquo; store? Probably - but again, it\u0026rsquo;s a distribution problem. Even if everything is p2p capable by default, I would still hope a \u0026ldquo;legitimate\u0026rdquo; store could provide faster downloads, easier updates, and an all-around better user experience than a piracy dominated one, if for no other reason than it would bring in funding for its own development. - not to mention all the packages could be more reliably verified to not be malware.\nPlus, studios could incentivize paying: show a development blog and tease upcoming features, but point out that development cost time and money. The fire under their asses to make a good distribution platform to justify the cost should help prevent the current shit storm where there\u0026rsquo;s umpteem game stores and a further fustercluck of clients for mod management. If they don\u0026rsquo;t make it easy, central, and capable (so mod management, community interaction, etc.) then people will just use the one where games are free. Plus, there are legitimately centralized features only a legitimate distribution platform could provide, like achievements (Yes, technically, you could probably make achievements as NFTs and make them decentralized, but why tho - We don\u0026rsquo;t want them to be able to be traded, so they have no value in that sense.)\nOf course, that only works for ongoing developments and if the buyer is interested in those developments. For something like a movie or album, that\u0026rsquo;s a lot harder to sell. One option is to attach your personality to your work and do the YouTuber/Twitch thing, but not everyone that makes music or videos is interested in doing that, plus the world really doesn\u0026rsquo;t need more parasocial relationships. It\u0026rsquo;s not like this problem is exclusive to the Metaverse though, and I don\u0026rsquo;t know that we should expect a new platform to solve all of society\u0026rsquo;s problems anyway. That said, if we really want to try, there are options.\nThe current idea of Patreon/Supporter only discord servers could be extended to access to VR worlds Giving users plots of land in the supporter world This seems to contradict what I said in the start, but here the difference is it\u0026rsquo;s a special private world-in-a-world, and would probably be primarily hosted from the content creator\u0026rsquo;s computer/server \u0026hellip; though the p2p stuff above should limit the cost to the creator anyway. I would love to add digital items like \u0026ldquo;a collectible artwork for your virtual home\u0026rdquo; to the list, but the only \u0026ldquo;good\u0026rdquo; way to do that is NFTs, and frankly, I don\u0026rsquo;t think anyone is about to check the cryptographic certificate of ownership associated with anything in the virtual world, and all my prior points would make it so you can copy-and-paste the art/object anywhere anyway - it would just still hold the NFT owner\u0026rsquo;s name. Maybe I\u0026rsquo;m wrong, maybe that is something people are into? If it\u0026rsquo;s done with something not using ludicrous amounts of electricity (see https://github.com/memo/eco-nft) then I don\u0026rsquo;t particularly care. I don\u0026rsquo;t personally understand why any one would want it, but I don\u0026rsquo;t care.\nVindication! NFTs RULE. WEB3 4 TEH MASSES!\nFinally, we do need to find a fair way to balance content quality with availability if there\u0026rsquo;s a big, unified store. This is a real challenge. Obviously some content is outright illegal and can\u0026rsquo;t be on the platform, but there\u0026rsquo;s also a question of if low effort unity flips should be able to be uploaded easily? One solution would be to give individual users store pages, where there content can be promoted to the main page with enough up-votes from users that have accumulated enough trust, but that\u0026rsquo;s still messy.\nAnti-Cheat # On a similar note, Anti-cheat is becoming a bigger problem, recently making an increasing number of games require deep access into the Windows kernel (something that is usually a sign of a virus). This is also fucked, but again has a two part solution:\nStop providing any tangible rewards (better/cooler-looking armor/guns/etc.) from online play - remove the incentive\nStop making random online matches! This is a human problem not a technical one.\nFriends playing together don\u0026rsquo;t run cheat software because they know it makes everyone hate them. So, make games be between friends, friends-of-friends, and so on. Bring back the idea of guilds and big teams, and make one cheater reflect negatively on the entire guild/team so they have incentive to self police. You don\u0026rsquo;t need access to my kernel, you need my Steam Friends List.\nObviously, this applies in the current-verse, but in the meta-verse, where a cheater has the potential to do so much more harm. How? Physically, view distortion effects could be abused to make someone sick. Psychologically, the increased interconnection of services implied by a metaverse means higher risk of a whole new kind of cyber stalking, and one where blocking may mean other people end up talking to a ghost in the same room as you, lacking a better way to handle it.\nI suspect any user shitty enough to do these things would get a very low trust rating pretty quickly though, so if that system were used, I think it would fix this problem reasonably well anyway.\nThank you for reading!\nA little housekeeping: if at some point someone tries to patent these ideas or uses copyright of code to claim ownership of them I will happily serve as a witness in court. You can\u0026rsquo;t patent or copyright an idea. Fuck software patents 🖤\nBtw, the glitchy-furby gif used here to represent the NFT/Cryptocurrency shill is made by me, and not a real NFT. If you\u0026rsquo;d like to use the gif in your own post that needs a profile picture to depict and a cryptocurrency shill, poke me and I\u0026rsquo;ll almost certainly give you permission.\nFinally, if you liked this post, please consider donating by throwing me cash on Venmo @vegadeftwing, paypal, or sponsoring my work with GitHub Sponsors:\nIf you don't know what I mean by that, the TL;DR of that is that Mastodon (a service a lot like Twitter) has separate servers more-or-less the same as someone might have a gmail or a hotmail account, but can still email eachother. Here, what I mean is that a group of worlds working together could simply say, \"nah, we don't want to work with you guys\" and maintain either an allow-list of other world (or groups of worlds) they do want to wort with or a block-list of worlds they'd rather not deal with.\r"},{"id":12,"href":"/posts/religiondoublethink/","title":"Religion \u0026 Doublethink","section":"Blog","content":"From time to time, I get asked about my religion. Sometimes, \u0026ldquo;asked\u0026rdquo; is putting it lightly, like when my SO\u0026rsquo;s father asked if I believe in a God, but made it very clear there was only one right answer if I wanted to date my SO. Sometimes I\u0026rsquo;m asked with honest curiosity, as when people find out I grew up in a mixture of Wicca and Christianity, people wonder how that works, and what I came out believing in. Sometimes I\u0026rsquo;ll mention my less-than-ideal experiences with Christians, such as the career campus preachers, my interactions with those extremely anti-LGBT, and my honestly extremist grandparents (that\u0026rsquo;s a whole different story) - but I can think for myself, and I\u0026rsquo;d like to think none of those things have really influenced my own view of religion.\n\" To know and not to know, to be conscious of complete truthfulness while telling carefully constructed lies, to hold simultaneously two opinions which cancelled out, knowing them to be contradictory and believing in both of them \" - George Orwell - 1984 So here\u0026rsquo;s the truth: when it comes to religion, I believe whatever I find convenient. I see it as a hack, a shortcut exploiting a bug in the code of human psyche, but it\u0026rsquo;s a hack that requires the hacker be willfully ignorant of the hacking itself - exactly as Orwell describes Doublethink in 1984. Now, obviously, 1984 was supposed to be a cautionary tale of exactly why this kind of thought is dangerous; however, I think religion is the one exception.\nSo, what do I believe?\nNothing. There is no god, no afterlife, we\u0026rsquo;re a collection of energy and matter that are a spec, an accident, a random chance. Everything, every god is real. Human made the gods, and we gave them life, but the are sentient in their own right and do have power All gods are one god, just appearing to different people in different ways We\u0026rsquo;re all God, or at least The Egg of one And I believe each of these, either one at a time or together, as I find convenient for coping with my own mortality as I see fit. I never see one as totally true. It\u0026rsquo;s not that I\u0026rsquo;m indecisive, or that I\u0026rsquo;m not confident in my faith, it\u0026rsquo;s that I don\u0026rsquo;t see a reason to believe just one thing.\nPlease, for the sake of my own sanity, do not take this as an opportunity to preach at me or try to save my soul. Now, that has two obvious rebuttals from the two camps with a stake in this game:\nAren\u0026rsquo;t you worried you\u0026rsquo;ll go to hell for not being a true believer? If you\u0026rsquo;re skeptical, then just trust Science! To which my response is\nIf you must believe in your god (and, if Abrahamic, then your prophet of the week) then at least \\(2/3\\) of the world is going to Hell anyway, and if your religion really thinks that then I\u0026rsquo;m not interested in joining you on the \u0026lsquo;good\u0026rsquo; side I do! I just also know that life can be complicated and it\u0026rsquo;s nice to trick our brains sometimes. So if someone asks if I believe in God, my answer is literally non binary.\nThere is a second half to this post that is much harder to write and be PC and that\u0026rsquo;s the \u0026ldquo;But what do you think about X religion\u0026rdquo; question.\nHere\u0026rsquo;s the short version: I dislike it. I dislike religion of any scale above one person. I don\u0026rsquo;t think you should need a book to tell you what\u0026rsquo;s right or wrong, or that you should let others use their interpretations of a book to change your views. Tax churches. Start community centers and fund libraries, fill the community role provided by them with something that welcomes diversity instead of historically shunning it.\nAlso, can we please stop indoctrinating kids into our religions? It\u0026rsquo;s just creepy.\nI\u0026rsquo;ll probably write the Religion chapter soonish, but I want that to be less about me, and more about how world religions interact, influence politics, and go a bit into metaphysics. If you\u0026rsquo;ve got experience talking about that sort of thing, please feel free to submit a PR on GitHub for that page!\n"},{"id":13,"href":"/posts/someconsumerism/","title":"Some Consumerism","section":"Blog","content":"I bitch about consumerism a lot, yet, I like things. So that\u0026rsquo;s what this post is about. Things. Things I\u0026rsquo;ve bought over the last few years and what things fall into \u0026ldquo;OhMyGod This is Life Changing\u0026rdquo;, \u0026ldquo;A Bit of a Mixed Bag\u0026rdquo; and \u0026ldquo;How Did You Fuck This Up?\u0026rdquo;. Because I know not everyone cares about all these products, I\u0026rsquo;m going to skip right to the juicy bit- the thinking about what lessons come from this thinking:\nConclusions # It\u0026rsquo;s easy to mess up something good by trying to hard to appease people or meet an expectations. Symptoms of this may appear as one dimensional characters, feature creep, or trying to obscure deeper settings Conversely, not providing a heavily requested feature can be just as bad One major issue can make something otherwise great unbearable Don\u0026rsquo;t underestimate the little things, like a good pair of underwear or red light bulb Sometimes, no matter how much research you do before hand, things will just suck once you try them hands on Not everything is on a spec sheet - \u0026ldquo;Just Works\u0026rdquo; is often worth a lot more than we think. It\u0026rsquo;s okay to put down a book or TV show part way though. If it sucks, there are better ways to spend your time. Making something feel honest and real matters If you assume your users/viewers are intelligent regardless of age or class and that they will pick up on even subtle comments on society, it is a lot better than not making those comments at all or trying to explain them after the fact Don\u0026rsquo;t make people guess how to use something. If it\u0026rsquo;s not obvious, either tell them right away or find a way to detect they may be lost. Get different demographics to check what you make. If it\u0026rsquo;s writing, have someone of another gender and someone of a different culture read it, if it\u0026rsquo;s a user interface, make sure it\u0026rsquo;s accessible, etc. This will make the experiance for everyone better, as often even users not directly impacted will notice others would be: Think about seeing a multi-story building with no elevator - most people immediately consider how that will be an issue for those with limited mobility. see r/menwritingwomen Even if you already have something that serves a purpose, sometimes getting something that has a better interface or is dedicated to the task is worth it - like getting guitar pedals instead of using just digital effects. If given the choice between a $30 indie game made in a week that you\u0026rsquo;ll actually play and a $60 AAA game with a multi-million dollar budget that\u0026rsquo;s popular, the game you\u0026rsquo;ll actually play is still the better value - that is, think about what you want, not what everyone else is getting. People will judge your product\u0026rsquo;s quality based on how much they paid for it. If something is cheap and bad, that\u0026rsquo;s a lot less of a problem than if it\u0026rsquo;s expensive and bad. OhMyGod This is Life Changing # Music Hardware # The Launchpad Pro Mk3.\nI had a Launchpad Mk2 before this, and while it was fine it wasn\u0026rsquo;t even really something I\u0026rsquo;d recommend. Meanwhile, the LP Pro Mk3, with velocity sensative pads and after touch is almost the only controller I need. It doesn\u0026rsquo;t have a way to hook up a sustain pedal, and the lack of pitch and mod wheels means It can\u0026rsquo;t take over synth control duties entirely, but in general it made playing music a lot more fun - espically with scale mode turned on since I\u0026rsquo;m ass at music theory\n7-String, nice guitar\nI\u0026rsquo;ve been playing on cheap guitars for a long time. Not like bottom of the barrel cheap, but cheap. This guitar was\u0026hellip; to much money. Yet, every time I play it I\u0026rsquo;m in love. The 7th string is just way to much fun\nEHX PitchFork+\nThis pedal is more fun than it has any right to be\nElektron Digitakt\nIt\u0026rsquo;s sold as a drum machine, but paired with a midi controller to sequence notes (and ideally a standalone synth as to not sacrifice some of the sample chanels) it\u0026rsquo;s really a full on make-music-in-a-box system.\nDT-770 Pro Headphones\nI spent way to long researching headphones, and finally settled on these. They sound great, they\u0026rsquo;re comfortable, and they make me hate my lower quality MP3s- a very good sign of quality.\nElectronics # Ender3 3D Printer\n3D printers are a massive PITA. Until you get things set right a lot of your prints will fail. Yet, this printer, for the cost, is astounding. When my prints don\u0026rsquo;t end in spagetti (mostly from poor bed adhesion) the quality is really good and I can\u0026rsquo;t help but smile at the sight of a finished print\nCO2 Meter\nHaving this meter has helped me notice multiple times as my room has started to get stuffy - greater than 1700ppm seems to be when I can actually notice - and just opening the door or getting some airflow going when that happens has helped me feel better. Is it a placebo? Maybe.\nA Red Light Bulb\nI put a red light bulb in the lamp next to my bed. If I just need enough light to get up real quick or to rearrange blankets the color and low brightness don\u0026rsquo;t really wake me up, just let me see\nBDN9 Macropad\nThis has made making art in Krita much more comfortable. Encoders on keyboards need to be more common!\nLab Equipment\nDataVac - No more using, and running out of, canned air! Autoranging, decent multi-meter - Fast componet identification, just nicer to use Rigol DS1054Z - Ha4kz to unlock features, 10000x nicer than the $20 Arduino scopes DSLogic Logic Analyzer - I don\u0026rsquo;t even use it that much, but it\u0026rsquo;s so much nicer than those dirt cheap 8 channel Salae clones or the slightly more expensive 16 channel clones. Steam Controller\nThe only controller that felt native to PC and made me want to play some games with a controller\nLife Stuff # Oculus Quest 2\nLiterally purchased almost exclusively for Beat Saber. Such an incredible step up from the OSVR HDK2 I had before. I did find it absolutely necessary to replace the face plate and strap, as well as add controller grips. This adds to the cost, but the content available does get me moving. PC connectivity to play Risk Of Rain 2 with a VR mod is pretty sweet too. Facebook being shoved down my throat still makes me unhappy though. - Note, because Facebook can go eat a dick, I\u0026rsquo;m still refusing to link to this.\nChill Games\nThere\u0026rsquo;s a tiny, tiny part of me that feels weird about liking games that aren\u0026rsquo;t normally talked about or AAA. Yet, Mini Motorways, Snakey Bus, Ultimate Chicken Horse, Stickfight, Pikuniku, Escaped Chasm, Dweller\u0026rsquo;s Empty Path, and A Short Hike have all been amazing, some for hanging out with friends, others just for getting some much needed introspection.\nAlso, the Create mod for Minecraft has been super fun\nRouge-Lites\nHades and Risk Of Rain 2 are both amazing games\nA Cool Bedroom, a new bed, and a seperate computer room\nI\u0026rsquo;m sure you\u0026rsquo;ve read a thousand times, don\u0026rsquo;t work where you sleep. Yeah, it matters. For me, having basically no electronics in the bedroom helps as it prevents blinky LEDs from distracting from sleep\nGood Underwear\nI may not have a butt, but it\u0026rsquo;s still nice to see myself and think \u0026ldquo;nice.\u0026rdquo;\nLeatherman Skeletool\nI can\u0026rsquo;t tell you how many times this has saved me from needing to dig around for a pair of pliers or a screwdriver or knife. It doesn\u0026rsquo;t weigh anything either.\nEntertainment # Books # Permanent Record\nSnowden tells it like it is. I think his life story is a must read for understanding the state of the union\nWhat The Woods Keep\nA weird book, but something that kept me turning pages\nIron Druid Chornociles\nFucking fanstanic.\nVideos # NYT\u0026rsquo;s \u0026lsquo;Day Of Rage\u0026rsquo;, The Alt Right Playbook, \u0026amp; The CIA is a Terrorist Organization\nThese videos, all together, help paint a picture of the state of the US and how we got here from both political and personal perspectives\nAnimation is For Everyone\nThis is just such a beautiful love letter to animation, and a fantastic dive into the entire industry\nOther # Brimstone Valley Mall\nAmazing characters and voice acting plus a compelling story is already great, but this managed to hit that nostolgia-for-a-time-I-wasn\u0026rsquo;t-alive vibe that I love\nFuture Football\nThis story made me want to befriend multiple deep space probes\nTV \u0026amp; Animation # BNA\nBeatuiful animation and furry, I think I\u0026rsquo;m obligated to like this.\nUmbrella Academy\nWhile the plot is astounding, the thing that really made this stick was how it managed to have so many layers of rediculous premise stacked together, yet still managed to suspend belief for the duration of each episode. It felt like each character was real despite how insane the situations got.\nThe story is by Gerard Way too, so that makes the MCR fanboy in me happy as a bonus.\nThe Good Place\nSome of the humor was sitcom-y, and the characters a bit 1-dimensional. Still, the social commentry mixed with the touching story was great.\nLove Death Robots\nThe majority of these short stories really stick with you. Espically the neral-link moster fighting one- the animation for that one made the part of my brain that likes a well coreographed fight between monsters light up enough I just sorta made that dumb \u0026ldquo;dudeeeee, this is cooool\u0026rdquo; laugh.\nShe-Ra, Infinity Train, \u0026amp; KIPO\nGrouping these together as all three were good for the same reason: They gave me that same feeling of childhood levity mixed with adult levels of respect, they let me think about my own personality and feelings while still letting me feel comfortable. This is exactly what Avatar The Last Airbender did for me growing up and I think there being more shows like this is incredibly good.\nHelluva Boss\nFor independent animation, this is just amazing. The characters have stereotypes, yet depth. The animation is fun, and I\u0026rsquo;m continually awestruck at how much is packed into each episode.\nThe Boys\nJust a neat story. It\u0026rsquo;s not perfect, and sometimes it feels like it\u0026rsquo;s trying to be edgy, but still, 9/10\nAmerican Gods\nI said \u0026ldquo;What the fuck?\u0026rdquo; a lot. Still, the underlying examaninations and critiques of American society wrapped up into this multicultral stew made for some incredibly interesting storytelling and thoughts that lingered after each episode\nMusic # Instrumental, post-rock-y, indie bands\nElectric Octopus, Gnome, Stone From The Sky, REZN, We Lost The Sea, etc. All of these bands have given me a love for musicians just jamming out and feeling their instruments, recording audio not midi notes, and feeling every beat.\nSoftware # Masterplan\nMy thoughts tend to be pretty non linear and need a bunch of interconnections, dragging things into different groups depending on the task at hand- for that, this spacial TO-DO + planning system is great\nGroupy\nGive Windows\u0026rsquo; file explorer - along with any other application - tabs. Windows should really do this bulit in.\nNoisedeck\nMake trippy visuals without writing complicated shaders\nTypora\nProbably the best way to just write. I don\u0026rsquo;t want to worry about formatting and fonts and magrins constantly. This is straight forward and supports nearly everything I\u0026rsquo;d want, except for columns of text. It\u0026rsquo;s what I use to make OpGuides.\nORCA\nMusic sequencing via an esoteric language, it feels like a completely new idea\nSectograph\nSchedule on the watchface itself, an absolute god send for reclaiming time\nMixed Bag # Music Hardware # EQD Disaster Transport Sr.\nDoesn\u0026rsquo;t have tap tempo, hard to get to good sounding settings. But, man, when you do it sounds amazing\nEmpress Zoia\nCPU power is a bit limited, UI sorta sucks, but the flexiblity and community patches make it oh so worth it.\nRoli Blocks\nThe Seaboard block is nice, though annoying that it needs turned on at every boot. The lightpad blocks (at least the 1st gen ones I have) are useless. The pressure curve sucks, mostly because they\u0026rsquo;re to hard to push in\nEQD Sea Machine\nThe vibrato and chorus of the seamachine are fanstatic, and the slapback delay morphing into a reverb is cool. The problem is you don\u0026rsquo;t always want a slapback or verb with your chorus or vibrato. Still, occasionally this pedal just makes me melt\nElectronics # Rock64\nWanna know why people buy Raspberry PI\u0026rsquo;s over something less expensive and more powerful? It just works. The Rock64\u0026rsquo;s is fine, but some things just really didn\u0026rsquo;t want to work and I lost my patience multiple times.\nLeap Motion\nCool idea, no good applications\nMonoprice Drawing Tablet\nWindows drivers are super fucked. Like, unusably fucked. Fortuanetly, it works perfectly in Linux.\nPwnagotchi\nExpensive, bulky, but cute and educational. I wouldn\u0026rsquo;t really recommend others build one, but the parts can always be repurposed anyway.\nLife Stuff # The Gamer Games\nBoth Black Mesa and Halo Reach have been\u0026hellip; meh? I remember playing and loving Halo 1 and 2 has a kid, but playing MCC on PC, so far I\u0026rsquo;m only though Reach, the campaign feels like a parody of itself somehow, like it\u0026rsquo;s trying to hard to be Halo. Black Mesa suffers from issues of unclear progression. Sometimes I found myself unsure of how to progress and there was nothing really to help me move forward, multiple times it went from fun and puzzle like to just outright frustrating. Still, both are good games in their own right and I don\u0026rsquo;t feel like I\u0026rsquo;ve wasted time.\nBarefoot Shoes\nI haven\u0026rsquo;t really made up my mind on these yet. I have wide feet and toes, so letting them not get squished in the front taper of the shoe is awesome, and the feeling of the ground underneath my feet does make me feel more conected to everything, grounded in reality. They\u0026rsquo;re reasonably comfortable, but for a long day out, I think something with a squishy sole would probably be better\nEntertainment # Books # Gate Mage Series\nThe premise is good. The execution is a tad sloppy. That is to say it\u0026rsquo;s definitely an Orson Scott Card series. Also fuck Orson Scott Card.\n1984\nClassic? Sure. Still an interesting commentary on politics and a warning about surveillance? Yep. A bit dated and have some language about women that\u0026rsquo;s a bit uncomfortable? Also yes. 1984 isn\u0026rsquo;t a bad read, just, with limited time I\u0026rsquo;d say read Snowden\u0026rsquo;s book as priority over this.\nVideos # I don\u0026rsquo;t feel comfortably calling anyone out on bad videos, though I have noticed some creators trading off a casual, normal person style for a big creative but \u0026ldquo;I\u0026rsquo;m an entertainer\u0026rdquo; vibe, and I\u0026rsquo;m not a huge fan of that.\nTV \u0026amp; Animation # Mindhunters, Beastars, The Magicians, The Order, Erased, Blood Of Zeus\nPredictable, Cheesy, Getting Depressing, Characters lack depth, Cheesy, Unremarkable. Am I still glad I saw all of them? Sure. But none really went into recommend to friends territory.\nMusic # Hyper-Pop\nI find Hyper-Pop musically interesting, but there\u0026rsquo;s no way I\u0026rsquo;d ever just sit down and listen to any of it\nNerd-Rap/Core\n(see Dual-Core, Graydon Square, etc.) is a really neat genre, yet I find a lot of walks this fine line of being fun and full of refrences I enjoy and of being something to show off like \u0026ldquo;ahh, you listen to that garbage, bah, I\u0026rsquo;m an 𝔦𝔫𝔱𝔢𝔩𝔩𝔢𝔠𝔱𝔲𝔞𝔩!\u0026rdquo; or, on the other side trying to hard to be cool and overly focusing on sex, drugs, and alcohol.\nSoftware # Renoise\nRenoise is great, but sometimes the user interface is less than obvious. It\u0026rsquo;s a super powerful tool, but almost asks that it be your most-used tool as design language, even outside the tracker interface, is different enough that not everything is as obvious as it should be\nKiCad\nIf you want to make something quickly, it\u0026rsquo;s great. The new SPCIE integration is so-so, and some times the workflow is awkward, espically if you make a mistake and then need to back-propagate your fix though each step\nOpenSCad\nCool idea, but lacks primatives and gets slow for complex designs\nFractal Bits\nI really, really want this to not be android exclusive. Just give me a VST or VCV version without needing to use the phone to generate the sounds and load them into SunVox.\nGrainStorm\nAwesome app, but the UI needs a cleaner navigation system. I find myself scrolling though options one-by-one where I\u0026rsquo;d want a dropdown\nVCV Rack\nBy far my favorite software and really the thing I can\u0026rsquo;t stop recommending to people, so, why is it a mixed bag? Because it\u0026rsquo;s awful at talking to other software and hardware. The clocking is jittery, the offical VST version has been in development forever, and the community is pretty toxic.\nHow Did You Fuck This Up? # Music Equipment # Artiphon Orba\nThe processor must be underpowered, as a lot of the expressive input that makes it cool feels quantized, like, there\u0026rsquo;s discrete points it\u0026rsquo;s snapping too beacuese it can\u0026rsquo;t process things fast enough. Also, can\u0026rsquo;t load in your own samples which is lame\nAdventure Audio Merge\nReally should have gotten something with transformer I/O as ground loops are hell.\nBad Comrade V3\nJust, didn\u0026rsquo;t react to CV as I\u0026rsquo;d expect and needed awkwardly hot signals\nMonoprice Planar Magnetics\nSmall planar magnetic drivers are still small drivers and sound tinny\nLaunchkey MkII\nHow does a keyboard fail at being a decent keyboard? Like, the keys wobble and have a super awkward feel that makes them suck for getting real velocity values out of the keyboard.\nElectronics # Lenovo Laptop\nIntel\u0026rsquo;s \u0026lsquo;U\u0026rsquo; series chips are basically e-waste\nLexip Pu94\nKickstarter may help you fund your hardware, you may even ship that hardware, but drivers are still a thing\nPhilips 278E1A - 4k 27\u0026quot; monitor\nIt burnt in under 72 hours. It\u0026rsquo;s a monitor, how do you fuck this up?\nAudio Interfaces\nSo, my luck here has definitely been like opposite-of-winning-the-lottery bad. My original, baby\u0026rsquo;s first audio interface, the Presonus AudioBox USB, had issues with a constant high-pitch noise from USB power. So, I upgraded to a used Tascam 16x08, which promptely shit the bucket, then got a used Tascam 20x20 which also decided 6 months was all the life it had in it, so then I got a used Focusrite Scarlet 18i20 that came filled with live cockroaches. Thankfully, taking a fully can of spray to it and thoroughly soaking the unit in isopropol alcohol did the trick, and it\u0026rsquo;s working fine still, but come on!\nLife Stuff # Bad Games Penumbra\nFuck mazes. Fuck mazes with an element of semi-random failure added on top 10x harder.\nGRIP VR\nI both really enjoy Grip, and hate it. It\u0026rsquo;s fun, but sometimes if you crash into a wall it can make your vision do very rapid flips and put you into instant-hurl territory\nEntertainment # Books # Girl With The Dragon Tattoo Series\nThese are slow burns. Like, worse than Tolkien slow. Then, all of a sudden, they\u0026rsquo;re very fast. Poor pacing makes me just want to quit reading them. So I did.\nTV \u0026amp; Animation # Jupiter\u0026rsquo;s Legacy\nThis wasn\u0026rsquo;t worth watching. It was like cheesy superhero movie + cheesy adventure film + mental health breakdowns of characters you don\u0026rsquo;t actually care about\nSoftware # Blender\nAmazing, yet unstable as hell\nSafer Community\nInsecure, Inconvenient, Slow to connect to the server, and buggy\nDiscord\nMemory leak on Linux for over a year. Fixed now, but really?\n"},{"id":14,"href":"/posts/lowbandwidthimages/","title":"Low Bandwidth Images","section":"Blog","content":" So, you\u0026rsquo;ve got a website that you want to make use less bandwidth. Maybe you\u0026rsquo;re paying by the byte for content delivery, maybe you\u0026rsquo;re worried about the environment, either way, let\u0026rsquo;s assume you want to make your images as small as possible. The obvious place to start is just shrinking your images. Here, this is a 4032x2268 .jpg shrunk down to a 1008x567 .jpg - 25% of the original quality. This brings the file down from 3.2Mb to 260.4Kb, so about a 12x reduction in size. We can do better though:\nSo, clearly the quality here is lower, but I think it\u0026rsquo;s stylisticly good. This brings us from 260.4Kb down to 39.8kb, so another 6.5x improvment. This black and white only version is a .png because it can compress more heavily with the knowledge it only has the two states than .jpg could. While I like this style, I do have to admit it\u0026rsquo;s not very high detail, eating the quality to the point the vegetation and clouds may as well not be there.\n1 convert -resize 25% +noise Multiplicative -evaluate median 30% -dither Floyd-Steinberg -monochrome COMountain.jpg COMountain2.png So, What else could we do? Well, color isn\u0026rsquo;t necessarily bad, what about adding in a minimal pallete:\nconvert -resize 25% -remap redblue-pal.png -dither Floyd-Steinberg -colors 16 COMountain.jpg COMountain3.png This makes for a file that is still smaller than the full color .jpg, albeit only by half as we\u0026rsquo;ve gone from 260.4Kb to 130.7Kb. I do like the look of this and think it\u0026rsquo;s a fair compromise. But now we have a good baseline, what about just using a better format?\nThis is comparing the 25% resolution .jpg to the .webp at the same resolution, that is both are at 1008x567. So, this .webp version is about twice as big as the black and white version, at 60.1Kb. What happens if we combine .webp\u0026rsquo;s performance with the other two images? It doesn\u0026rsquo;t work. .webp does not work well with palettes, the images are actually larger.\nBut how does this compare to images like on https://solar.lowtechmagazine.com or those at https://ritualdust.com/works/photo/, well, those seem to range from ~50kb to ~120kb, and are all black \u0026amp; white. Now, this isn\u0026rsquo;t supposed to be a call out post. There\u0026rsquo;s two reasons to do it the dithered, low palette way: not all browsers supported .webp and, frankly, it\u0026rsquo;s a stylistic choice. The problem is by showing it as a technical choice for conserving data or helping those with limited bandwidth, it promotes the idea that this is the best way to do it, instead of driving adoption of .webp, a format that if had greater adoption would actually greatly benefit the web at large instead of fringe (albeit amazing) websites like these. This is even weirder when you consider that even Safari has caught up and .webp is basically supported everywhere.\nUpdate: # Boojum on lobste.rs had some fantastic insight:\nFor dithered PNG images, you can improve the compression a good bit if you use an ordered dither rather than an error diffusion dither like Floyd-Steinberg. This is because the ordered dither tends to create regions of repeating pixels that the dictionary compression within PNG can identify.\nFor example, using this command:\nconvert COMountain.jpg -colorspace RGB -filter box -resize 25% -ordered-dither o8x8,3 -colorspace sRGB -quality 96 png24:COMountainIM3.png gives this result at 44,369 bytes after lossless recompression with optipng and then zopfli.\nOr we can go a step down in the palette size with this command (note the 2 instead of 3 on o8x8,3):\nwhich gives this result for 26,163 bytes after recompression.\nOther details:\nResampling to downscale assumes linearized colors, and dithering really ought to be done in a linearized colorspace as well. Hence the change to linear RGB as the first step and then back to sRGB for display at the end. Otherwise, you end up with odd color shift after dithering (i.e., it blows out and tends to look too bright).\nIdeally you’d use something like sync filter for the resampling (or at least a cubic filter). But that has a slightly sharpening effect and can introduce ringing which negatively impacts compression. Using a box filter does not sharpen and leans towards smoothing so it gives a tiny boost to compression.\nFor the lossless recompression with optipng and zopfli, I used optipng -o7 -zm1-9 image.png; advpng -z4 image.png for both.\n- Boojum Here\u0026rsquo;s the result of that first command, compared to the .webp:\nHere\u0026rsquo;s the result of the second one, again, against the .webp\nSo, these are 43.0Kb and 25.9Kb respectively, a fair save over the 60.1Kb of the .webp, though the quality difference still speaks for itself.\nThanks to VincentTV for his MIT licensed image slider, the only one that didn\u0026rsquo;t horribly break out of the many options I tried.\n"},{"id":15,"href":"/posts/digital-native/","title":"I'm Not a Digital Native, and Neither Are You","section":"Blog","content":" The term digital native describes a young person who has grown up in the digital age, in close contact with computers, the Internet, and video game consoles, and later mobile phones, social media, and tablets. The term is often used to refer to millennials, Generation Z, and Generation Alpha; the latter two are sometimes described as distinct \u0026ldquo;neo-digital natives\u0026rdquo;, \u0026ldquo;true\u0026rdquo; digital natives, or \u0026ldquo;digital integrators\u0026rdquo;. \u0026lsquo;Digital Native\u0026rsquo; on Wikipedia You know how every headline about Millennials or Gen Z is \u0026ldquo;Gen ___ has killed ___\u0026rdquo; and it makes everyone from those generations want collectively bang their heads into a desk? To me, reading literally anything about \u0026ldquo;Digital Natives\u0026rdquo; is way worse.\nI, being born in \u0026lsquo;98, am right in that awkward gap that people don\u0026rsquo;t really know if should be called Millennial or Gen Z. Growing up my family was relatively poor, but did actually prioritize having a computer as my mom worked her way though college. I remember playing games on Windows \u0026lsquo;98 on an old Gateway.\nSo I\u0026rsquo;m a digital native right?\nI grew up witch technology keeping pace. Right as I wanted social media, there it was. Right as cell phones were ubiquitous, I was getting one. Right as I had figured it out, I could get a smart phone. Tech and my development were linked. That\u0026rsquo;s what being a Digital Native is right?\nThe full picture has the arm of the chair as a very convenient censor bar, but I thought some reading may appreciate not trying to explain that on their screen Yeah, No.\nI had to go back and learn why so much of what we use is so horribly fucked, without the context of really watching it come into being. Digital complexity is additive. Rarely does anyone start from scratch, instead opting to use as many existing abstractions as they can get away with. So now, when I want to understand how email works I need to look up umpteen different protocols (IMAP, SMTP, POP3, MIME, PGP) and why they\u0026rsquo;re all broken. If I want to write a program and display text on the console, I still need to go learn what the VT100 was. Anything I do I need to try to grasp a huge amount of historical context. Meanwhile, because I\u0026rsquo;m young and a \u0026lsquo;digital native\u0026rsquo; I\u0026rsquo;m expected to just magically know how to use Microsoft Word and PowerPoint, as if people my age didn\u0026rsquo;t have to learn at some point either from being taught in a class, Googling it, or watching a tutorial on YouTube.\nThis is really the biggest reason the term Digital Native pisses me off- the older generations use it as an excuse for not learning and not knowing how to use their tech, then expect the younger generation to just magically know and fix it, meanwhile, unless we go back to try and learn sixty years of context we really don\u0026rsquo;t know either. Yes, we\u0026rsquo;ll know how to install an App. No, I don\u0026rsquo;t even mind showing you that. But I do mind showing you how to over and over and over again because you expect to use me as some infinite tech support resource instead of actually trying to understand. When I start explaining either your eyes glaze over or you just keep repeating \u0026ldquo;I could never understand this.\u0026rdquo;\nSo, I\u0026rsquo;ve always more or less felt this way, then I read The digital natives are not who you think it is by Tor Håkon and I realized that as much as it bothers me that people my age are called digital natives, people that are older claiming to be digital natives makes me just as angry. Now, some of that might be because that post has an impressive level of elitism baked in and feels like I\u0026rsquo;m reading the authors masturbation material- regardless, he\u0026rsquo;s still wrong. Because for as much as I am not a digital native, the older generation sure as hell isn\u0026rsquo;t either. His entire argument boils down to \u0026ldquo;I used older tech therefore I know more\u0026rdquo;.\nWhich, yeah, but you still didn\u0026rsquo;t use punch cards. You didn\u0026rsquo;t pull a bug out of a relay computer. You didn\u0026rsquo;t sew together rope memory. You didn\u0026rsquo;t use diode logic.\nI\u0026rsquo;m not gate keeping.\nI\u0026rsquo;m trying to express that there is no garden for which a gate can exist to hold you out of. There are no digital natives.\nEven for those that did do those things (if they\u0026rsquo;re still alive), they specialized. Nobody knows how everything about digital electronics works. Nobody knows every programming language. Nobody knows how to use all the popular apps and tools for every industry. Nobody is an expert on Windows, OSX, iOS, Linux, and ChromeOS.\nThe First Computer BugBy Courtesy of the Naval Surface Warfare Center, Dahlgren, VA., 1988. - U.S. Naval Historical Center Online Library Photograph NH 96566-KN, The image available here. Public Domain. Sure, some things may be slightly more obvious to someone who grew up with the tech like I have. Maybe we\u0026rsquo;d know that \u0026lsquo;☰\u0026rsquo; is called the hamburger menu on most sites and have a better idea of what it might contain, but that\u0026rsquo;s pattern recognition from usage, not some innate skill that comes with being under the age of thirty. Knowing \u0026lsquo;CTRL+S\u0026rsquo; is save or being able to program in C has nothing to do with my age.\nHell, a ton of people my age have never seen a terminal and never typed a command. Similarly, a lot of people of the older generations have never use Snapchat or TikTok(1) or Tinder(2). This plays into stereotypes too. Not every young person sits on social media, spends their time at coffee shops swiping right endlessly, and religiously plays video games, and people over the age of thirty don\u0026rsquo;t exclusively communicate via email. Having a different list of apps we use doesn\u0026rsquo;t make us any more or less competent than you. Having used older tech doesn\u0026rsquo;t make you more knowledgeable, especially if you haven\u0026rsquo;t kept up to date.\nI was extraordinarily fortunate that my family bought a PC. How many kids now will grow up with only a small-screened Android device? Will future natives need to have been brought up with VR? Being a \u0026ldquo;digital native\u0026rdquo; is as much a class thing as anything else then.\nThe term is stupid, claiming it for yourself is stupid, and assigning it to a generation is stupid.\nThere. Are. No. Digital. Natives.\nWhile I have used Snap despite its issues, I haven't used TikTok because I have some respect for myself and don't want to use a platform that is actively abusing addiction, supressing 'ugly' people, and limiting free speech. Fuck dating apps too. They're incredibly predatory and broken see RFC: Let’s Disrupt Dating Apps and Attraction Inequality and the Dating Economy "},{"id":16,"href":"/posts/lr107/","title":"Nebraksa LR107 - Stupdity Abound","section":"Blog","content":" NOW, THEREFORE, BE IT RESOLVED BY THE MEMBERS OF THE ONE HUNDRED SEVENTH LEGISLATURE OF NEBRASKA, FIRST SESSION:\nThat we hereby reaffirm our solemn oaths of office by expressing a firm resolution to maintain and defend the Constitution of the United States and the Constitution of Nebraska against every act of aggression whether foreign or domestic, including every act of unconstitutional abuse of power arising from the state or federal government. That sounds fantastic, unfortunately, it seems that you also use this document to then break those oaths, so it may have been advisable to put this at the end of the document. Regardless, this point exists solely as a \u0026lsquo;war cry\u0026rsquo; of sorts to simultaneously stir up feelings of national pride in readers as well as stoke the flames of the exact crowd that believed there was an abuse of power so strongly that they choose to break into the U.S. Capitol or supported those that did.\nThat we are greatly alarmed that a factious and contentious spirit has recently manifested itself in the federal government, emanating both from the legislative and executive branches, with the desire to enlarge their powers by forced constructions of the Constitution of the United States to expand certain general phrases in order to destroy their meaning and effect. Such phrases include: \u0026ldquo;Congress shall make no law . . . prohibiting the free exercise [of religion] . . .\u0026rdquo;, \u0026ldquo;. . . the right of the people to keep and bear Arms, shall not be infringed.\u0026rdquo;, and \u0026ldquo;The Times, Places and Manner of holding Elections for Senators and Representatives, shall be prescribed in each State by the Legislature thereof . . .\u0026rdquo;. This design appears to have no other end except to consolidate the states by degrees into one sovereignty, the obvious tendency and inevitable consequence of which would be to obliterate completely the rights of sovereignty by the several states, and to destroy the rights and liberties of the people, as explicitly granted to them by the Ninth and Tenth Amendments to the Constitution of the United States. \u0026lsquo;Spirit\u0026rsquo; is indeed the right word, as this fear is about as substantial as the specters of a mid 2000\u0026rsquo;s ghost hunting T.V. series. This is again a dog whistle thrown into rhetoric for the sole purpose of trying to defend against a threat that simply does not exist. Nobody is seeking to strip the sovereignty of states nor strip the rights of christian nor take from any person a gun for which they have reason for and competence to own. As for the \u0026ldquo;Time, Place, and Manner\u0026rdquo; of elections, it\u0026rsquo;s worth noting this quote was cut at a rather interesting point, as it goes on to say \u0026ldquo;\u0026hellip;Legislature thereof; but the Congress may at any time by Law make or alter such Regulations, except as to the Places of chusing Senators.\u0026rdquo;\nSo, you know, doing as the constitution says. But I will still even agree with you, the point of states is to allow for legislative testing grounds and Congress should not get involved unless necessary. Unfortunately, it has been shown again and again that voter ID laws, purging voter rolls, limiting absentee voting, and restricting the voting of convicted persons disproportionately affects minorities, minorities that largely vote Democrat. Now, the argument could be made that this is coincidental and that these laws get passed to protect our elections. That argument would also be in incredibly bad faith as the Hofeller Files so clearly show that this is direct and intention voter suppression by the GOP.\nMore than anything though, the choice of language here \u0026ldquo;obliterate\u0026rdquo; and \u0026ldquo;destroy the rights\u0026rdquo; shows that is written not because of anything based on fact, but rather on emotions and conjecture on the insidious plans of the far left, the radically well equipped and tightly organized terrorist group known as ANTIFA, and the ever looming day on which the gays finally deploy their agenda.\nThat we in particular protest the ominous plan revealed by the executive branch to take unilateral action in explicit violation of the Second Amendment to the Constitution of the United States. This sacred right is also protected by our Constitution of Nebraska: \u0026ldquo;All persons are by nature free and independent, and have certain inherent and inalienable rights; among these are . . . the right to keep and bear arms for security or defense of self, family, home, and others . . .\u0026rdquo;. Plan? What plan. Also, while I\u0026rsquo;m all for the enjoyment of guns, maybe when it takes a global pandemic to even put a dent in a shooting epidemic the problem is systemic, and as such should actually be addressed rather than simply fear mongering. Putting this in writing only a little over a month after the shooting in Boulder, just one state over, where ten people, ten lives, were lost seems to me to be an outright slap in the face of reason and sanity. Keep in mind, in 2019 there were more mass shootings than days. I support gun rights, but I also support gun restrictions and acting based on reason. I don\u0026rsquo;t want to take your guns, unless of course, you\u0026rsquo;re mentally unstable, have a history of violence, or have proven yourself to be reckless with firearms. These aren\u0026rsquo;t radical ideas, they\u0026rsquo;re common sense. This being in this resolution seems to defy this common sense and instead state that the right to a deadly weapon regardless of their competence. Something even our current laws and regulations do not support as while or constitution may say you have the \u0026ldquo;inalienable\u0026rdquo; right to bear arms, we still require concealed carry permits and disallow guns on school grounds.\nThat we further protest against federal government actions which seek to punish traditional religious beliefs about the sanctity of life and sexual mores. These actions are in direct violation of the First Amendment to the Constitution of the United States, which states that \u0026ldquo;Congress shall make no law . . . prohibiting the free exercise [of religion] . . .\u0026rdquo;, and of the Constitution of Nebraska which states that \u0026ldquo;All persons have a natural and indefeasible right to worship Almighty God according to the dictates of their own consciences. . . . [N]or shall any interference with the rights of conscience be permitted.\u0026rdquo;. There is no \u0026lsquo;punishment\u0026rsquo; against traditional religious beliefs Christianity - this is particularly absurd to claim when you consider that the US is 63% Christian. Rather, there is this often ignored ideal in our government that there should be separation of any church and the state. The sanctity of life and \u0026ldquo;sexual mores\u0026rdquo; are almost exclusively talking points of the religious right, and, as it turns out, we\u0026rsquo;ve been over this. Roe v. Wade was decided back in the 70\u0026rsquo;s and the decision then holds now. Frankly, it\u0026rsquo;s not as if I will convince anyone pro-life to be pro-choice. I don\u0026rsquo;t expect that. Instead, I think it\u0026rsquo;s pretty clear that the country is divided on the issue, and as such it seems draconian to enforce the ideal onto a woman who does not believe in it. If you don\u0026rsquo;t want an abortion, don\u0026rsquo;t get one. pro-choice does not mean pro-death, it simply means that women who chose to have an abortion should not be legally restricted from getting one. As for \u0026ldquo;sexual mores\u0026rdquo;, whether or not I want to engage in a rigorous session of anonymous yet passionate love making with a group of men or prefer to explore new territory with my non-binary partner is truly none of the state of Nebraska\u0026rsquo;s business- except in the sense of providing scientific information on how I may do safely. Something for which we have failed at miserably, given how common it is for kids in Nebraska to receive abstinence only education which has been shown by a large number of studies to result in more women seeking abortion, not less.\nThat we express distress at the prospect of proposed federal legislation designed to usurp the election process that was constitutionally left primarily to the legislatures of the several states, and only secondarily to Congress as Alexander Hamilton argues in Federalist Paper Nos. 59‑61. These bills would dictate uniform election rules in all fifty states and eviscerate protections such as voter identification requirements, periodic updates of voter files, and restrictions on fraud‑prone ballot harvesting. They also seek to steal the right and privilege of redistricting away from state legislatures and instead empower unelected commissions with this ability. Therefore, we affirm that this right must remain with elected state officials whose power is granted by the people themselves. Soo\u0026hellip; You\u0026rsquo;re still mad about Trump losing I take it? As mentioned above, it\u0026rsquo;s pretty clear that voting restrictions from the GOP are often intentionally written to restrict minorities and boost republican wins. As an aside, this argument would really hold a lot more water if you didn\u0026rsquo;t cite the Federalist Papers and purposely cut off the quote from the constitution above.\nThat we also protest the stated goal by the executive branch of the federal government to restrict the private use of at least thirty percent of America\u0026rsquo;s lands and waters by 2030. As evidence, we expound section 1 of the Constitution of Nebraska, \u0026ldquo;To secure these rights, and the protection of property, governments are instituted among people, deriving their just powers from the consent of the governed.\u0026rdquo;. In concurrence, the Fifth Amendment to the Constitution of the United States declares: \u0026ldquo;No person shall be . . . deprived of life, liberty, or property, without due process of law . . .\u0026rdquo;. The acquisition, possession, and use of private property for private purposes is inextricable from the right of liberty and the obtainment of happiness. Such an appropriation of property is a gross violation of the fundamental principles of our state and nation. That we strongly affirm the sacred and constitutional right of all persons of the liberty to decide what, if any, vaccination is necessary for their health or the health of their family. We explicitly reject the idea of vaccine passports and other federal mandates that restrain a person\u0026rsquo;s right to peaceably assemble or restrict their freedom to travel or conduct commerce. Ahh, yes, let\u0026rsquo;s just put into a legislative resolution a dog whistle for the anti-vax movement and essentially condone behavior that has resulted in nearly the amount of deaths in Nebraska as the attacks on 9/11 caused in New York and has caused 557,000 deaths in the United States, which is over a quarter of the population of Nebraska and more than the total population of Omaha. This point is sure to age well and those that affirm it to be reflected on in a positive light by history.\nThat the Legislature requests cooperation from the Governor of Nebraska, the Nebraska Attorney General, the President of the United States, the President pro tempore of the United States Senate, the Secretary of the United States Senate, the Speaker of the United States House of Representatives, the Clerk of the United States House of Representatives, and the presiding officers of each of the legislative houses in the several states in defending the Constitution of the United States, the states, and the people against federal overreach. \u0026ldquo;We seek to have our idiocracy reviewed and mocked by only the most highly regarded positions\u0026rdquo;\nThat the Clerk of the Legislature shall transmit copies of this resolution to the Governor of Nebraska, the Nebraska Attorney General, the President of the United States, the President pro tempore of the Senate, the Secretary of the United States Senate, the Speaker of the United States House of Representatives, the Clerk of the United States House of Representatives, and to the presiding officers of each of the legislative houses in the several states. \u0026ldquo;Transmission has been received and will be promptly crumpled up and tossed into the nearest garbage receptacle. Please allow 3 to 5 business days before sending the follow up message indicating that this was intended to be taken seriously, as our staff can only laugh so much before our ribs begin to hurt\u0026rdquo;\n"},{"id":17,"href":"/posts/ternarylogic/","title":"Ternary Logic","section":"Blog","content":"This paper was written for CSCE-430, Computer Architecture at University Of Nebraska - Lincoln in Spring of 2021.\nThis in-page view isn\u0026rsquo;t all that great, so feel free to download the pdf directly.\nIf you would like to read the refrenced papers, I recommend using Sci-Hub with a VPN on, as the academic publishers putting up paywalls as barriers to science can go fuck themselves.\nPrevious Next \u0026nbsp; \u0026nbsp; Page: / "},{"id":18,"href":"/posts/productsiwishexisted/","title":"10 Products I Wish Existed","section":"Blog","content":" Most of these things probably exist. For many, it\u0026rsquo;s just that they don\u0026rsquo;t exist at a practical price point. Without further ado, In no particular order\nA not garbage, not phone based, IR camera that doesn\u0026rsquo;t cost a bajillion dollars\nYes. I know the FLIR and SEEK Thermal cameras are a thing, but both have their share of software problems or hardware incompatibilities. Most of all, I don\u0026rsquo;t want to have to hope that their app keeps working with my phone at risk of a $250 paper weight.\nAnd, yes, FLIR does have a handheld thermal spot camera that\u0026rsquo;s ~$350, $100 more, that is standalone; however, it\u0026rsquo;s only an 80x60 pixel image (same as the PRO LT smart phone one) and lacks the dual camera smarts that make the image better on their phone-attached offerings.\nI suspect this is largely due to restrictions on selling IR cameras for the sake of \u0026rsquo;national security\u0026rsquo; as high speed, high resolution IR have military applications. Doesn\u0026rsquo;t make me any less salty though.\nBetter environmental quality sensors\nThere\u0026rsquo;s no good reason, in 2021, that every home - or hell, every room - doesn\u0026rsquo;t have CO2 and radiation level detection along with CO and smoke detection. And I don\u0026rsquo;t mean some waste of time lil\u0026rsquo; estimated CO2 meter, I mean the real deal, NDIR sensing and a giger tube.\nNot shit webcams\nShort and sweet. Everything available right now, even upwards of $200, is shit. Put a real sensor and hardware encoding in them.\nI know using a capture card (USB or PCIe) and a full on camera is an option, but now were back into stupid money.\nPeople are resorting to streaming video from their phones. This is just fucking stupid.\nAn isomorphic midi controller\nThis isn\u0026rsquo;t the 1600\u0026rsquo;s anymore, why the fuck are we still using normal 12-key keyboards. They\u0026rsquo;re a pain to learn and have a ton of disadvantages over isomorphic keyboards. The biggest being that on an isomorphic layout every chord is the same shape in every key, octave, or tuning.\nA \u0026lsquo;weak strong\u0026rsquo; laptop\nI want a laptop with a really low power system that I can use most of the time (Like, pi3b+ish in power) but then reboot into a full on, powerful x86_64 system with good GPU when I want. Fuck Nvidia Optimus or BigLittle CPU architectures, I want something that\u0026rsquo;s actually just a potato sitting along side my workhorse. Share the cooling, storage, and I/O, but keep everything that actually drinks power independent. I already deal with dual boot hell between Windows and Linux. I\u0026rsquo;d happily deal with the reboot hell if it means I can get crazy long battery life when wanted while still having enough horsepower to do bigger tasks when necessary.\nA good, not super hard to use, software video synth platform\nYes, I know VSXU and TouchDesigner, etc. exist. They\u0026rsquo;re great, and they\u0026rsquo;re a PITA. I want something that I can midi map in 30 seconds and have cool visuals pop out the other side.\nBoth the hypno and eyesy are just running on a pi anyway, so why can\u0026rsquo;t I just have a mix of the two available on my desktop to midi map.\nAs an aside, for actual audio reactivity, this would also necessitate the OS supporting good application to application audio routing, something that Windows can\u0026rsquo;t do well, despite both Mac and Linux being able to easily with CoreAudio and Jack respectively for a long time\nA fast direct computer to computer link\nUSB 3.2 Gen 2 (Can I get better naming too?) is fast. Like 10Gbps fast. Can we please get some easy cable that can just plug into both systems to let me transfer a file over this link?\nHome Plastic Waste to large 3D printing appliance\nWe throw out a crazy amount of plastic. While it could be recycled for normal 3D printing, I think the quality and colors of the plastic would make it pretty \u0026lsquo;meh\u0026rsquo;. Instead, I could see having a large scale home or community 3D printing platform which recycles plastic for large things as a huge win. Need more shelving for the garage? Melt down and print using all those empty 2L bottles!\nThere are some options for 3D printer plastic recyling already but all the ready-to-go options are very expensive, and none are made for this sort of large scale I\u0026rsquo;d like to see.\nModular Furniture (That actually follows a standard)\nHow freakin\u0026rsquo; cool would it be if when you needed more desk space you could just snap an extra wing on, or if you could move your existing desk top to a sit-stand desk. Would it not be great if when you\u0026rsquo;re office chair\u0026rsquo;s bottom eventually goes bad you could just snap a new one on?\nLiterally just https://dynamicland.org\n"},{"id":19,"href":"/posts/chains/","title":"Chains","section":"Blog","content":" My name is Vega. I have to tell myself that a lot, reminding myself of who I am.\nI know that may sound weird, but, if it wen\u0026rsquo;t already obvious, it isn\u0026rsquo;t my legal name. (yet.)\nDespite my best efforts, my parents still call me by my \u0026lsquo;old\u0026rsquo; name. I\u0026rsquo;m hesitant to call it a dead name, as I\u0026rsquo;m not trans. I don\u0026rsquo;t think it\u0026rsquo;s the same or that it\u0026rsquo;s fair to claim that it is.\nMy old name, ▒▒▒▒▒▒▒▒▒, is a chain.\nIt holds me to a past. It\u0026rsquo;s a Christian name, a common name. In highschool there were three other people with my same name at my lunch table.\nMy mom told me she named me ▒▒▒▒▒▒▒▒ because it was normal. She thought it might stop me from getting teased or bullied at school.\nIt didn't.\nTo me the name represents holding onto the past, continuing familial traditions for no reason other than tradition. The same force that brings so many bad things into the world, doing things \u0026lsquo;because that\u0026rsquo;s how it\u0026rsquo;s always been done\u0026rsquo;. Normalcy as poison.\nAnd it represents fear.That's not who I am.\nI go by Vega ▒▒▒▒▒▒▒ in \u0026lsquo;real life\u0026rsquo;. I keep my family\u0026rsquo;s last name (for now.)\nBut that chain is really the one that scares me the most.\nThe links above me might have some redeaming value, I mean, hey, I wouldn\u0026rsquo;t be here without them. Still, both chains that have led to the link that is me have been full of abusive. fucking. assholes.\nSo by choosing my own name, I'm choosing to break that fucking chain.I choose courage.\nAlright, some points I think need clearing up:\nThe chain is full of abusive assholes, but my parents themselves have actually done a really good job of breaking their own chains, better than I think I could have done if put in their shoes. They\u0026rsquo;re not perfect, but they are pretty damn close and I love them despite their faults. My Mother has been a true inspiration to me and is my best friend.\nI\u0026rsquo;ve found going by Vega difficult for a number of reasons, not the least of which is those familial ties. Unsurprisingly, not everybody is willing to call me by the name I like (cough ᵐʸ ᵈᵃᵈ cough). It\u0026rsquo;s sorta ironic, because I think if I was trans they\u0026rsquo;d actually respect it more? Then again, from the way they\u0026rsquo;ve talked about my one trans family member I\u0026rsquo;m not so sure. It\u0026rsquo;s\u0026hellip; complicated. I suppose things always are.\nI also typed the word \u0026lsquo;Christian\u0026rsquo; above with some bitterness, but that isn\u0026rsquo;t because I have anything against Chirstians outright. I have everything against the crazy, abusive, kidde-diddling (directly or just turning a blind eye), emotionally and physically abusive fucks that make up the church cult that my mother was raised in. That has nothing to do with being Christian. I have the utmost respect for people that find something meaningful in the Bible that inpsires them to do good - love thy neighbor and all that jazz. It\u0026rsquo;s just not my cup of jesus-flavored tea, so I espically don\u0026rsquo;t want my name to be of that religion.\nThe biggest point I wanted to make though is that I don\u0026rsquo;t like my old name because of the baggage. When I meet a Mitch, or a Ron, or a David, I carry with those names certain assumptions. Should I? Absolutely not. Do I? Yes. I think to the other Mitches and Rons and Davids that I\u0026rsquo;ve know. I think about the era in which parents were naming their kids such things. There\u0026rsquo;s a reason there\u0026rsquo;s the whole \u0026lsquo;Karen\u0026rsquo; joke right now (on that note, I have a Grandma Karen who is the definitive Karen, in every respect: from the haircut right down to the entitled behavior). I. Don\u0026rsquo;t. Want. That. Baggage. I want the independnace of my own name. I think I, and everyone else, deserves that right- the right to be who they want to be.\nTo not be held down by a chain, or remembered as just another link in one.\nI want to be will be remembered as Vega. I will not forget the past, but I will not be chained to it or be a link in it either.\n"},{"id":20,"href":"/posts/mirrorsofopal/","title":"Mirrors of Opal","section":"Blog","content":"When I looked into the mirror this morning, I wasn\u0026rsquo;t sure who I was looking at. Is that me? Is that really what I look like now? Has this years long separation from reality caused me to not recognize my own face, or would it have happened anyway- a side effect of growing older.\nIf you saw me, would you even recognize me? Or am I the ship of Theseus, digested by the carnivore that we call time, now fertilizer for someone you\u0026rsquo;ve never met?\nIt\u0026rsquo;s funny the bits of my past that still mean something to me. It\u0026rsquo;s tragic how I\u0026rsquo;m sure you\u0026rsquo;ve changed too. Many of the people I once loved exist now only in the past, and while I mourn for their passing I know a past version of myself exists for them too, all of us mutually falling out of existence, bit by flipped bit.\nIt\u0026rsquo;s tempting to write about specific memories, about events that have been seared into my mind, the ones that have shaped me. But which ones would those really be?\nMaybe when ▓▓▓▓▓▓ saw me on the street, after we hadn\u0026rsquo;t talked in months, and in a voice that carried emotion that words can not convey, she said ▓▓▓▓ ▓▓▓, ▓▓▓▓.\nOr maybe it\u0026rsquo;s not the memories that burn in, but those that have fallen away,\ncountless hours sitting in one place, in one room. Maybe that\u0026rsquo;s what has really made me into me. A slow decent into sameness that eats time and rots will. A dangerous combination of a desire to feel productive and having productivity be undefined, causing a feedback loop that causes me to be anything but, not letting myself enjoy my own time with something like videogames because I\u0026rsquo;ll feel guilty. Not having the patience to actually complete anything that should have meaning- Unfinished songs, unfinished code, unfinished stories, unfinished definitions of completion - yet not feeling like I\u0026rsquo;ve earned the right to do things that would probably help me rejuvenate- unfinished games, unfinished anime, unfinished ░░░░░.\nAnd maybe I should be happy so many things are unfinished. I like having a large TODO list to choose from. So many projects, so many opportunities. I\u0026rsquo;m young. I have time. I think.\nAnd yet so many things eat my time, so many things stop me from doing the projects that I think I would actually find meaning in. busy work tasks from school, lack of funds, my weak heart, a bad knee.\nMaybe reading this sounds depressing. It\u0026rsquo;s not meant to be. It\u0026rsquo;s more of a \u0026hellip;. wandering reflection? Like going though a maze of carnival mirrors in an attempt to find the one that projects what I see in my own head, and from there rectify it with reality. I think that\u0026rsquo;s healthy, and that everyone needs to do so now and then.\nImage from Chirs Ralph - Public Domain I started keeping a combination journal and task list. It\u0026rsquo;s shown me a few things. How many days are defined by completing menial tasks. How few days I get to spend as I want to spend them. How a few days each month are gems, full of everything that I want to be in everyday, like opal, full of variety and color in patterns; how a few more days are like sapphire, cool and relaxed, the days that melt away tension; but still most days are just \u0026hellip; rock. Maybe some have some interesting edges or contain a cool fossil, but most are just not worth the time to study.\nI don\u0026rsquo;t want that to be the case. I want to find a lot more Opal.\nSeriously, I\u0026rsquo;m okay. Not going though a mental breakdown, not in danger. I\u0026rsquo;m fine. I just needed some time to reflect and thought doing so publicly might mean something to others.\nOn the other hand, if you\u0026rsquo;re reading this and tearing up or having a hard time yourself, I encourage you to try to make those reflections positive, to talk to the people you care about most, and find ways to make more of your own days into opals too. We can all make positive change. You just need to see hope in every box.\n"},{"id":21,"href":"/posts/howimakeopguides/","title":"How I Make OpGuides","section":"Blog","content":" History # Before I can get into how OpGuides works now, I need to provide some history so that you can learn from my mistakes.\nThe first iteration of OpGuides was OpinionatedEngineering.md. A single markdown file so long that the scroll bar was hard to grab. It was meant to be viewed and distributed not as a website, but as a file to be opened with https://typora.io (so that the html and everything rendered- though in theory any markdown editor would do)\nThat quickly became tedious, and I decided an actual website would be a lot better, so, I made a website using Jekyll. At least for OpGuides, Jekyll really didn\u0026rsquo;t work all that well. I had to hack things together and in general getting some of the features I needed to work (like math rendering and footnotes) was a disaster.\nThe next iteration of OpGuides used Docsify. If you want a site similar to opguides and want it to just work this is probably your best option. Honestly it can still do a lot of thigs better than the current iteration of OpGuides. The biggest issues I had with it came down to lack of extendability and it not being a static site (though the latter can be solved by using Server Side Rendering). If I ever had to just do docs for a project I\u0026rsquo;d use docsify without blinking. It\u0026rsquo;s stupid fast to use and requires no maintence or mental overhead.\nUnfortunately, docsify really couldn\u0026rsquo;t cleanly be expanded to handle some of what I wanted to do on OpGuides, so after trying out a few other static site generators (Zola being the most interesting) I settled on Hugo. In part this was because of the absolutely incredible Hugo Book theme on which the theme for OpGuides is derived from.\nThe site is still hosted on GitHubPages, which makes my anual fee for hosting OpGuides just the price of the domain, though if you\u0026rsquo;re willing to stick with an .github.io domain or grab a free .tk or other weird tld name you can get around that too.\nActually making OpGuides # The absolute most important thing that has made OpGuides work for me is one very important change from almost everything else I\u0026rsquo;ve made:\nI don\u0026rsquo;t wait until something is done, or even \u0026ldquo;ready for public consumption\u0026rdquo; before making it live. OpGuides is very unfinished. I don\u0026rsquo;t think there\u0026rsquo;s a single page that I\u0026rsquo;d call finished. Some pages are effectively just stubs or maybe outlines if you\u0026rsquo;re generous.\nAnother huge help has been Typora. While the view in Typora is still rather far off from what I\u0026rsquo;ll actually see on the live site, it\u0026rsquo;s mostly good enough to let me focus on writing. There are still some annoyences, for exmaple, typora defines \\( \\LaTeX \\) code blocks with two dolar signs $\\LaTeX$ while for hugo I need to use the katex short code, {{\u0026lt; katex \u0026gt;}} \\LaTeX \\{{\u0026lt; /katex \u0026gt;}} or, more obviously, images which are stored in the static folder have to have a their image tags in the markdown set for how they\u0026rsquo;ll be located on the rendered site, not the path relative to the raw markdown files that I write the site with, so images only render in the web preview, not Typora. ╮(─▽─)╭\nThat\u0026rsquo;s still not a big deal though, as should I actually need to look at the live output and make sure things look good I can just leave hugo server --miniy --theme bookvega running in a terminal, connect to the local address, and as I ctrl+s in typora I can see the rendered site update in my browser.\nBecause writting those hugo shortcode tags (like {{\u0026lt; katex \u0026gt;}} ) can be a bit tedious, I\u0026rsquo;ve set up quite a few entries for espanso, for example, I can just type \u0026lsquo;:ka\u0026rsquo; to get the afforemention katex tags.\nIt\u0026rsquo;s still not the perfect development system. In a perfect world a lot of the experiance would be smoother. I\u0026rsquo;d love to be able to tell Typora how to handle the image directory problem and add custom logic for rendering the shortcodes. (actually, with enough time and CSS magic I might be able to do that, but It\u0026rsquo;s not worth the effort)\nOn the note of CSS- that has been a major pain point for me. Web dev is both easy and incedibly difficult. Doing it is actually pretty simple- CSS, HTML, and JS are pretty straight forward, there\u0026rsquo;s plenty of resources online, and the webdev panels in both Firefox and Chome make trying changes live nice. On the other hand ohmygod is it a pain in the ass. You will have issues you couldn\u0026rsquo;t possibly think of ahead of time. For example, one that I left in because it\u0026rsquo;s funny is on the Math chapter where the digits of pi just overflow off the right edge of the screen (1), and sure, I think the site actually looks pretty good now, but there\u0026rsquo;s still some outright disgusting outstanding issues. For exmaple, I\u0026rsquo;m using markdown tables,\nlike this table for example, to display content it probably shouldn\u0026rsquo;t . This is most obvious in the Generative Tools chapter of the Design section. The page has great content, but renders like a dumpster fire and I still don\u0026rsquo;t know how to fix it cleanly. Probably something with CSS Grids but after repeated attempts to make something work I gave up, so at least for now it will remain as the dumpster fire it is.\nThis has been fixed. See this commit if you\u0026rsquo;re interested in how. Ontop of the technical, there\u0026rsquo;s also the stylistic challanges. I\u0026rsquo;m actually really happy with how OpGuides looks right now, but there was a lot of heachache inducing research, trial and error, and humbly asking for help for making the text readable and getting everything to look good. I\u0026rsquo;d very gladly never read another word about typography or contrast for accesibility.\nAnd while the site is definitely functional, it\u0026rsquo;s also built on less-than-study foundations. I\u0026rsquo;ve hacked together quite a few things because getting it to work was more valuable to me than getting it to work right. For example, the javascipt for the footnotes (2) is loaded using script tags in the base html file for every page, and the different colors for different sections is very poorly thrown into the hugo templating html. This is to say I\u0026rsquo;ve valued getting a website that works and looks the way I want over doing it right. Partially this is ignorance (either of webdev or hugo), and partially this is laziness (\u0026ldquo;I got it working, no need to make it elgant\u0026rdquo;). But ultimately I think of it as a time trade off. I could spend way more time getting everything exactly right, acrue no technical debt (albeit this is debt that I rather doubt I\u0026rsquo;ll ever have to pay on) or I can just make a damn website and spend that time doing the part people actually care about: Writing content.\nUltimately, I think the take away for anybody wanting to make their own website should be this:\nYou\u0026rsquo;re not making a website for a fortune 500 company, and the most important thing on the page is the content(3). Find a good, free, template for a static site generator you don\u0026rsquo;t hate using- or if you want a site similar to mine, use docsify - and start writing and deploy as you go. You can always go back and edit later, but not putting anything out there doesn\u0026rsquo;t do anybody any good.\nI\u0026rsquo;ve also found some other sites useful for making my website:\nhttps://excalidraw.com is great for making \u0026lsquo;hand drawn\u0026rsquo; svg diagrams. They look good and the file sizes are small.\nhttps://detexify.kirelabs.org/classify.html is hand for looking up \\(\\LaTeX\\) symbols.\nhttp://shapecatcher.com is pretty much the same, but for unicode symbols.\nI did have to do a small fix because of that though, as originally it also made for a tiny horizontal scroll bar. Definitely not ideal. like this one assuming you don't want to be a webdev for hire - if that's the case you should probably give more of a shit "},{"id":22,"href":"/posts/time-lapse/","title":"Time lapse","section":"Blog","content":"Super brief post about one of the more fun projects I setup recently: a lil\u0026rsquo; time lapse script\n#!/bin/bash CAM=$(v4l2-ctl --list-devices | grep C920 -A 1 | grep /dev | awk \u0026#39;{$1=$1};1\u0026#39;) #Uncomment the next line to verify it\u0026#39;s using the correct device #echo $CAM ffmpeg -f video4linux2 -s 1920x1080 -i $CAM -ss 0:0:2 -frames 1 \u0026#34;/mnt/data/lapse/tl$(date +\u0026#34;%Y-%m-%d_%H-%M-%S\u0026#34;).jpg\u0026#34; I have multiple cameras on my system, but only wanted output from the better one, the C920. That\u0026rsquo;s what line 2 is doing, finding the /dev/videoX device, where X is the correct number for the webcam\nLine 5 takes the picture and saves it with the current date and time in the /mnt/data/lapse folder\nThen, to trigger the script I have a systemd timer and service setup.\nI have the timer and service files named fifteen.timer and fifteen.service respectively, and the script above is named fifteen.sh and is stored in ~/.config/fifteen.sh This is so that I can add extra things do on fifteen minute intervals if needed super easily. I also have an hourly.sh with a similar setup.\nfifteen.service\n[Unit] Description=run ~/.config/fifteen.sh [Service] Type=simple ExecStart=/bin/bash /home/vega/.config/fifteen.sh fifteen.timer\n[Unit] Description=Take Hourly Webcam Picture [Timer] OnCalendar=*:0/15 Unit=fifteen.service [Install] WantedBy=timers.target So with all of that setup, I can finally get poorly timed, slightly blurry pictures of myself drinking directly from a 2L bottle of Mello Yello automatically.\nNote, this picture has been resized by 50% for web, actual quality is a better "},{"id":23,"href":"/posts/slowdown/","title":"Slow Down!","section":"Blog","content":"I use VCV Rack a lot. I normally use it on Windows as running VSTs in Linux is still a bit of a PITA and If I\u0026rsquo;m going to make music I want to have access to all of my tools. However, I still want to be able to use VCV on Linux for processing guitar when taking breaks from working on other things without having to reboot over to Windows.\nUnfortunately, for a good while now VCV has had an annoying bug. I\u0026rsquo;m not sure when the bug first appeared, but at some point it started eating my GPU. Like, absolutely wrecking it.\nRadeontop (GitHub) It was still technically usable, in fact it ran butter smooth\u0026hellip;\nOh wait, I wonder if killing picom, the X11 compositor I use will help\nNopeeee.\nAlright, obviously this is far from ideal. I actually only knew to check the FPS because of an interesting quirk, I think when the FPS got this high my GPU was getting jobs at that rate, so 930ish times per second, but still finishing them quickly enough to cause the GPU load to constantly change going 100% → 0% → 100% → 0% \u0026hellip; in a loop, really fast. It caused the physical GPU, an AMD Vega56, to whine in my tower. I don\u0026rsquo;t think it was coil whine, but it was also very loud and sounded similar.\nFirst I tried just changing the FPS target value in VCV and then I tried playing with settings in the settings-v1.json file, but nothing worked.\nMy next attempt to fix it was to try rebooting and loading my system with the Zen Linux kernel as I knew it used a different scheduler and did some extra stuff for real time computation (nice to have anyway when doing audio stuff like VCV).\nUnfortunately, that was a bust. Still rocking the 930 FPS.\nFrom here I had to ask for more help. Thankfully, a friend in my modular music chat on telegram was able to point me to a few ideas. I ran glxinfo, made sure everything looked sane, and it was. Next I tried using LIBGL_THROTTLE_REFRESH=1 and WGL_SWAP_INTERVAL=1 with no luck either.\nFailing other ideas I Googled \u0026ldquo;linux limit frame rate environment variables\u0026rdquo; and one of the top results was libstrangle (GitLab) which limits frame rate by using LD_PRELOAD to dynamically link it\u0026rsquo;s own library that does the FPS limiting. This reeks of hacky bullshit. But I\u0026rsquo;m always down for some hacky bullshit. For S\u0026amp;Gs I check, and `lo and behold it\u0026rsquo;s in the AUR.\nI still have no idea what\u0026rsquo;s going on. The easy guess is \u0026ldquo;You have a Vega56, it\u0026rsquo;s a weird GPU with HBM2\u0026rdquo; and, yeah, that makes sense, but then there\u0026rsquo;s This Issue in VCV Rack\u0026rsquo;s GitHub repo where someone else is having the same problem on an Nvidia card on Ubuntu. I\u0026rsquo;m using an AMD Card on Arch! Other than the commonality of Linux, these systems couldn\u0026rsquo;t be much more different.\nThat issue shows the original poster had traced it down to one line, but I\u0026rsquo;m hesitant to accept that explanation when VCV works fine for me on Windows and the issue has no other comments from other people with the same issue.\nprior to this fix, VCV could outright lockup my entire system as my GPU screamed bloody murder, but it got me thinking- while VCV is by far the most violent I\u0026rsquo;ve seen this issue get, I think I\u0026rsquo;ve seen it elsewhere, and yep:\nThis is the example project for Nuklear, \u0026ldquo;A single-header ANSI C immediate mode cross-platform GUI library\u0026rdquo;, exhibiting the same issue. I\u0026rsquo;m curious how many projects based on Nuklear this affects.\nLibStrangle again works to fix this, but without it my graphic card still makes an annoying whine, a whine that I don\u0026rsquo;t get under even very high load when gaming.\nI won\u0026rsquo;t include anymore FPS screenshots, but I get the exact same behavior in Radium, a neat tracker-like Digital Audio Workstation.\nI suspect there are many, many more. I\u0026rsquo;m not going to go checking every program on my system, but I found this behavior weird enough to be worth documenting.\n"},{"id":24,"href":"/posts/xx80/","title":"xx80","section":"Blog","content":" The year is 198x. # I stare at my amber terminal. Hexadecimal fills my screen and my mind has become lost in the flow of 6502 assembly, as I hand optimize the code flow.\nI\u0026rsquo;m interupted when I recieve a message from my friend, _Maverik, he\u0026rsquo;s excited about the ground breaking CGI in Tron.\nNostalgia is a weird feeling. We can forget when things happened, and misttribute things to entirely different decades. But, I think there\u0026rsquo;s something even more interesting going on with the now-sorta-fading nostalgia for the 80\u0026rsquo;s that could be seen when 2014\u0026rsquo;s Guardian\u0026rsquo;s of the Galaxy (or Vol. 2 in 2017) or 2011\u0026rsquo;s Ready Player One book (and 2018 movie) were a huge deal. These movies aren\u0026rsquo;t just appealing to a generation of Millennials that are pissed off that the world is going to shit because of the mistakes of their parents and grandparents- they\u0026rsquo;re appealing to a generation of people that has only ever known that mess. The kids, like me, that are in the awkward spot of being told just how awful it was to watch the news on September 11th, 2001 but not actually directly rembering it.\nSo, why would we be nostalgic for a time that we were never alive for? I think it\u0026rsquo;s because we\u0026rsquo;re hopeful.\nThe 1980\u0026rsquo;s were not a better time really. The Cold War was still a thing, being publically LGBT was crazy, Chernobyl happened, Computers were still mostly 8-bit, Asbestos was still being used, and, despite the numbers declining already, cigaretts were still way more common.\nAll that aside, the was something the 80\u0026rsquo;s had that we don\u0026rsquo;t have now. I\u0026rsquo;m hesitent to call it \u0026lsquo;hope\u0026rsquo; or \u0026lsquo;vision\u0026rsquo;, and honestly, I\u0026rsquo;m not sure there even is a good word for it. Regardless, I wasn\u0026rsquo;t even around to experiance it first hand given I wasn\u0026rsquo;t born until 1998. But, from what I\u0026rsquo;ve seen of the remnants, the parts that people try to remember- the good stuff that people drink as heavily sweetend, carbonanted nostalgia - there was an atmosphere of possibility. The Demo Scene was in full swing, as people pushed the 8-bit hardware of the time to it\u0026rsquo;s absolute limits. Computers were progressively being used to do more, impressive things. Culture from that era is portrayed in a way that gives you a mental image of crackin\u0026rsquo; a cold one and just enjoying life. Movies from the era- Back to The Future, Footloose, Weird Science - all told stories that were hopeful and fun and made a point of how the future is going to be better.\nIt took me a while to realize all of this, but I\u0026rsquo;m not nostalgic for the 1980\u0026rsquo;s. I\u0026rsquo;m nostalgic for the xx80\u0026rsquo;s. A time that only exists in the minds of people like me, nostalgic for something they never experienced. The next cultural revolution where we can band together under a banner of making things better. Where technological advancements have postivie cultural impact instead of negitive. Where the talk of the year isn\u0026rsquo;t about how damn partisan we are but is about the power of humanity to do amazing things. It just happens that having some sort of outlet to map that nostalgia to is helpful, and that the 1980\u0026rsquo;s that kids from that era remember is the best analogy that people of my generation have. So when I wear a shirt with Rocket Raccon or put up art of the Comodore 64, I\u0026rsquo;m not showing my admiration for those things themselves. I know the real 1980\u0026rsquo;s weren\u0026rsquo;t that. Instead I\u0026rsquo;m giving myself physical reminders of a place and time that only exists in my own mind and making that much more concrete my dreams for a better future.\nInstead, for now, I\u0026rsquo;m stuck in real world. I\u0026rsquo;m in 2020 where my student loan debt is piling up, there\u0026rsquo;s a raging pandemic, and I fear that I\u0026rsquo;m watching the not-so-perfect union around me crumble. But, then I look around my room, and I see the \u0026lsquo;retro\u0026rsquo; tech and art, and for a little while I feel like it might be possible that we\u0026rsquo;ll do better, that maybe I\u0026rsquo;ll live to see the xx80\u0026rsquo;s come.\nSo for those that are older than me, please don\u0026rsquo;t mistake our hope for blind romanticism or a warped-sense of nostalgia. We know. I don\u0026rsquo;t think I was born in the worng generation because I didn\u0026rsquo;t experiance the 1980\u0026rsquo;s. I\u0026rsquo;m pissed that the time I did get to experiance as a kid and that I\u0026rsquo;m living in now has been ruined by giant media conglomerates, corrupt politicians, broken social values, and people that have resigened themsevles to an attidude of \u0026ldquo;it\u0026rsquo;s going to hell anyway, so why bother?\u0026rdquo;. You got IRC, I get spyed on and manipulated by Facebook. You got real movies, I got sequels. I\u0026rsquo;m not going to pretend my generation is unique in dealing with the mistakes of the last, but instead of having hope we have record rates of suicide and depression. It\u0026rsquo;s just that it\u0026rsquo;s easier to have physical attachment and hope mentally assigned to something that\u0026rsquo;s already happened than it is to have blind faith in the future.\nThe following response is from Nicole Replogle, born in 1984.\nThe 80s represented a time when the future had limitless potential. When everyone was excited to see what the next decade held in store. The boomers had the opportunity to realize that future, and instead of making something good and beautiful and exciting, they made sure they had the distinction of being the first \u0026ndash;and last\u0026ndash; generation to ever have that kind of opportunity. There\u0026rsquo;s so much 80s stuff right now\u0026hellip; thinking about Stranger Things, and then stuff like I Am Not Okay With This which is like, present time with the serial numbers filed off in an \u0026ldquo;80s but make it gayer\u0026rdquo; kind of way\u0026hellip; Even a lot of the \u0026ldquo;present day but with the numbers filed off\u0026rdquo; stuff feels like \u0026ldquo;present day but the future is open and maybe isn\u0026rsquo;t full of possibilities, but it\u0026rsquo;s not empty of it and that\u0026rsquo;s the best we can imagine\u0026rdquo;.\nGod, the future was so fucking BRIGHT in the 80s and I think a big part of why millennials are harder to fire up than gen Z is that we knew what life was like before and nobody knows how to process the loss of countless futures that they witnessed as children and young adults. We\u0026rsquo;re living with grief we can\u0026rsquo;t even begin to communicate and we\u0026rsquo;re going to live with it until we die.\nLike, you know what\u0026rsquo;s had me fucked up for a couple weeks? I work so hard trying to live inflicting as little harm as possible on people and the environment, knowing it\u0026rsquo;s a losing battle, and come to find out that the whole plastic recycling movement was a giant fraud, that it only existed as an anaesthetic to the guilt of our parents so they\u0026rsquo;d fuel the rise of single use plastics. And because millennials on down are recycling their waste at high levels, it\u0026rsquo;s easier to drop the act rather than put in the work because society would grind to a halt without single use plastics now.\nThe following response is from Krista Carlson, born in 1980.\nActually, the 80\u0026rsquo;s themselves were more hopeful. We had some problems with depression and suicide, but not like today, and the enxiety almost everyone feels today was very rare. There was still poverty, but less pressure. There was less crime, and more freedom. Kids could be kids, and overall, there was a feeling of innocence about the 1980\u0026rsquo;s. The early 1990\u0026rsquo;s was when we as a nation became teenagers. We had boomboxes and were rebelious. We were loud and colorful. Then came the sobering reality of watching the twin towers crumble in 2001, and I think that, more than anything else, changed American culture. We lost our security and innocence and faced a whole new era of sobering reality. Now, we know the politicians are all corrupt. Now, we know we live in a society that is crumbling. Kids deal with adult problems. I\u0026rsquo;m not sure you can put the genie back in the bottle, but I suppose it is nice to keep the bottle around to remember the days when there was still magic in the world.\n"},{"id":25,"href":"/posts/anti-consumer/","title":"Anti Consumer","section":"Blog","content":"As I walked to my car after class I could smell the ashes of a cigarette and hear the echos of a train scraping on its tracks. The cool foggy air held still beams of light. It looked like a scene from Blade runner, but I couldn\u0026rsquo;t help but feel like the Android\u0026rsquo;s of it\u0026rsquo;s inspiration, lusting after something to make me feel alive.\nThe drive home was mentally taxing. The fog so dense that cars ahead seemed to be balls of light floating in the distance and keeping sight of the lines to stay in my lane took a constant effort. After a little over half an hour of focus and 80\u0026rsquo;s synthwave music I pulled into my driveway.\nMy day had been long, and I hadn\u0026rsquo;t had a hood meal to speak of so I heated up some leftovers and talked with my parents as I ate. My mom was distracted by writing her next book and my dad was lost in a sea of Facebook memes, which he was showing us between intermittent laughter. I wasn\u0026rsquo;t really amused, in fact I was irritated.\nI ranted to him about something I know he\u0026rsquo;s heard from me before, the spheel of how Facebook is evil. How computers deprive us of our privacy and we willingly feed a machine that is well documented in its atrocities, and as usual he failed to see the point.\nHe used the same defense everyone does \u0026ldquo;All of my friends are on Facebook\u0026rdquo;\nHow many of those \u0026lsquo;friends\u0026rsquo; do you really talk to? How many of them just repost meaningless memes and jokes, while providing no insight, let alone basic updates on their life.\nSome of my absolute best friends are people I\u0026rsquo;ve met online or only know online, but none of them are people I stay in contact with though Facebook.\nThis isn\u0026rsquo;t a Facebook rant though, its a personal connection rant. So many of my friends and family consume social media to the point they don\u0026rsquo;t want to admit it but don\u0026rsquo;t even take the time to maintain the relationships they do care about. That stereotype about calling your mother? Yeah, there\u0026rsquo;s a point of reality in it. I dont know what it was like before Facebook, honestly, I really don\u0026rsquo;t. But I think we valued the connections we did have a lot more. Our friends may have been those from high school sure, but I know there used to be more tight night local communities that shared interests, but now the convince of social media has devalued the local meeting of friends. Which is ironic in a way. I\u0026rsquo;ve been in communites which would have never stood a chance of existing without social media to bring together the band of misfits but Ive also seen social media start massive amounts of drama that spiral out of control and destroy the local community.\nWorst of all though, I\u0026rsquo;ve seen social media devalue the importance of what people do. I figure maybe one or two people will read to this point, having lost interest long before now, and the same goes for much of the honestly great long form reporting I find online, or the longer stories people post for free for our entertainment. Creativity is becoming devalued as memes and short \u0026lt; 100 word posts become our new limits. Works of art that take time to digest and see meaning it get overlooked, poetry is dead, and heaven forbid you want to discuss politics in a civil matter. Hell, for many even the idea of playing a videogame or watching a movie is second to the instant gratification of short form content like Youtube, Reddit, or Facebook.\nIm not innocent in this, not by a long shot but I have two rules for myself which have helped:\nFor every two hours consuming content, I should spend at least an hour making something\nAt least 1/2 of my time consuming should be longer form content: be it full stories, books, movies, etc. Not YouTube, Reddit, Facebook, etc.\nBut when much of what I make, be it writing, music, or whatever is ignored because it\u0026rsquo;s not a viral meme or it\u0026rsquo;s too long to hold someone\u0026rsquo;s attention it seriously hampers my motvation, and I find it easier and easier to break my two rules. I\u0026rsquo;ve been doing a decent job, and as with any addiction it takes time to get out of and falling back is easy, but the reward of creating and consuming more filling content is much like having a nice home cooked meal instead of a super sugary diet.\nI just wish more people would appreciate each other\u0026rsquo;s cooking instead of eating candy all day. I want to work with people on these things, but if everyone else just stays addicted it\u0026rsquo;s hard to keep going. We\u0026rsquo;re inevitably social creatures and we do what our friends do, and doing things with friends is always better. Being on Facebook or Reddit, watching YouTube videos- these may trick your brain into thinking you have what you want, but being on the other side I really wish some of you would join me.\nI\u0026rsquo;m always down to hang out, to wonk together on making something cool, or talk about life, you just have to reach out not wait for me to post a funny meme for you to comment on. Lets talk about your hobbies and projects and what you care about and stop posting memes and Tumblr screenshots.\n"},{"id":26,"href":"/daily/day1/","title":"Day1","section":"Dailies","content":" Day x # Writing Prompt # After months of endless false accusations of being a witch, a perfectly fine young woman is determined to become a witch. u/MostlyMades \u0026ldquo;Witch! Witch! What just because I wear fucking dark clothes, like growing herbs, have had pre-marital sex, and don\u0026rsquo;t like their silly little Sunday sing along hour doesn\u0026rsquo;t mean I\u0026rsquo;m a God damned witch\u0026rdquo;\n\u0026ldquo;Mm,\u0026rdquo; Abbey tried to speak, as sala dripped off her tortilla chip onto the table \u0026ldquo;I dunno Bree, I think you had to have done something magical when you made this,\u0026rdquo; she held up her chip, making even more sala drip off \u0026ldquo;devine tomato based dip\u0026rdquo;\n\u0026ldquo;Sal-Sa. It\u0026rsquo;s Sala Abs. I swear you\u0026rsquo;re the kind of person who goes into a bar and orders hopps flavored liquid.\u0026rdquo;\n\u0026ldquo;And so what if I am, bee-otch. Speaking of, why don\u0026rsquo;t we go down to Jack\u0026rsquo;s and get some of that happy juice.\u0026rdquo;\n\u0026ldquo;Sounds good to me, I could stand to blow off some steam.\u0026rdquo;\n\u0026ndash;\nIt was half past 11 when we got to the Jack\u0026rsquo;s and despite being a bouncer, the asshat out front happend to be one of the bible thumpin\u0026rsquo; wackos from St. What-the-fucks that had been on Bree\u0026rsquo;s case. Now, normally at a bar like Jacks the two of us blend in enough with the low lives and drunkerds to not get to much hassle, but oh-fucking-no not tonight.\n\u0026ldquo;Oh hey there little witch. Sorry, you need to be at least this-\u0026rdquo;\nHe pinched his finger and thub together so the tips were very close to touching\n\u0026ldquo;normal to enter. No witches allowed.\u0026rdquo;\n\u0026ldquo;Fuck off dude. Come on Abs, let\u0026rsquo;s find a different hole in the wall since these guys have their bibles 7 inches into their rectums apparently\u0026rdquo;\n\u0026ldquo;What the fuck is up with you being called a witch anyway?\u0026rdquo;\n\u0026ldquo;I haven\u0026rsquo;t the slightest clue! Like I said, I don\u0026rsquo;t go to their Jesus Club, but I\u0026rsquo;m also not out here brewing things in cast iron coldrons or collecting black cats.\u0026rdquo;\n\u0026ldquo;Well, why not?\u0026rdquo;\n\u0026ldquo;I am not a cat person.\u0026rdquo;\n\u0026ldquo;Well, if they\u0026rsquo;re so bothered by it, why not stick it to them? Be a witch. Fight the patriarchy. Show them that you\u0026rsquo;re a beautiful onion with many layers.\u0026rdquo;\n\u0026ldquo;That\u0026rsquo;s an ogre\u0026hellip; You know what. Fuck it. Let\u0026rsquo;s do it. Kristina has been trying to get me to come over anyway. Based on the constant smell of incense and her sleves of celtic knots she\u0026rsquo;s gotta be in on something we\u0026rsquo;re not, right?\u0026rdquo;\n\u0026ndash;\n░ME░ Yo, sorry to text out of the blue, you busy?\nNever be sorry to text me. What\u0026rsquo;s up? ▓Kristina▓\n░ME░ Looking piss off some old white guys\nFUCK YEH. LESS GOOOO ▓Kristina▓\n░ME░ You do any witch-y shit?\nI am witch-y shit incarnate ▓Kristina▓\n░ME░ Wanna go all Hex Girls on these dicks?\nWhen? ▓Kristina▓\n░ME░ Now?\nAh, fuck it. Why not. Come over. Bring some of your herbs. Being grown in little gardens makes them work better anyway. ▓Kristina▓\n░ME░ Work better?\nLook, I don\u0026rsquo;t fuck around with wich-y shit. I do it right. Bring an open mind and make sure you have plenty of Thyme. ▓Kristina▓\n░ME░ Was that a pun?\nGet your ass over here. ▓Kristina▓\n\u0026ndash;\nWe stopped home and Abs immediately passed went to the couch, started muching on more salsa, and got enthralled in a random episode of Supernatural. I grabbed Thyme, Rosemary, and some Poppy seeds, hopped in my 2010 Impalla that was currently covered in bird shit, and headed over to Kristina\u0026rsquo;s. On the drive I tried to think witchy thoughts. Mostly I just felt like I was imating a high dude \u0026ldquo;Like, what if all the Gods are real, duuuude. Duudddeee.\u0026rdquo; I did feel a bit more motivated thinking about the idea of having a mother godess looking over me right now, thinking \u0026ldquo;Fuck yeah, that\u0026rsquo;s my girl!\u0026rdquo; as she watches me.\nAs I pulled up to Kristina\u0026rsquo;s around midnight she came outside in a silky night gown and hugged me. When we cut off our embrace she stuck her tounge out at me and said \u0026ldquo;I knew you\u0026rsquo;d want to kick some ass eventually, you little witch. Come on in, the covens all here.\u0026rdquo;\nThe. What.\nAs I entered three other girls were sitting cross legged. They were talking, but I didn\u0026rsquo;t make out any of the conversation before they all stopped to look at me.\nAfter a painfully awkward moment, Kristina said \u0026ldquo;Bree, the Coven - Ash, Madi, and Clair - Coven, Bree.\u0026rdquo;\n\u0026ldquo;So this is the witch you were talking about! Damn, we see what you meant. I could feel her before she got to the door!\u0026rdquo; Madi said.\n\u0026ldquo;Feel me?\u0026rdquo;\n\u0026ldquo;Oh, ignore her.\u0026rdquo; Kristia said as much to me as she did to Madi, the tone said \u0026ldquo;shut up\u0026rdquo; more than words could.\n\u0026ldquo;You\u0026rsquo;ve been talking about me?\u0026rdquo;\n\u0026ldquo;Ugh. Look. You\u0026rsquo;re a witch. I don\u0026rsquo;t mean this as in a euphamism for bitch or as in you\u0026rsquo;re one of us. I mean it as in you were born a witch. You\u0026rsquo;ve got power in you, Bree. I\u0026rsquo;ve met others like you - the three of them in that circle there are the ones I got the chance to show. But you\u0026rsquo;re something else. It\u0026rsquo;s like we\u0026rsquo;re all double A\u0026rsquo;s and you\u0026rsquo;re a god damn power line. When you\u0026rsquo;re in tune with it, you stand out like crazy.\u0026rdquo;\n\u0026ldquo;That\u0026rsquo;s a, uh, lot.\u0026rdquo;\n\u0026ldquo;I know it sounds crazy. Before you go \u0026lsquo;But I\u0026rsquo;m not the chosen one\u0026rsquo; or some shit just try this. Chan\u0026rsquo;t with us, please. If you feel something, anything, stay.\u0026rdquo;\nIsis, Astarte, Diana. Hecate, Demeter. Kali, Inanna. Isis, Astarte, Diana. Hecate, Demeter. Kali, Inanna. Isis, Astarte, Diana. Hecate, Demeter. Kali, Inanna. Isi̸s,̷ ̷As̵t̸art̸e,̶ ̴D̶i̷a̶n̶a̷.̵ ̸H̶e̴c̷a̵t̶e̶,̵ ̵D̶e̶m̵e̵t̵e̸r̷.̴ ̵K̸a̷l̵i̸,̴ ̶I̶n̸a̸n̷n̷a̴.̵ I̴͊ͅs̵̢̆i̶̞͘š̶̹,̶̥͑ ̸̙́Ă̴̙s̴̬̔t̵̹̃a̶̙͗r̷̊ͅẗ̸͎ẽ̷̘,̴̝̿ ̶͙͘D̸̝̆ì̸̦ả̸̤ņ̸̈́ǎ̶̦.̷̠̆ ̶͖̔Ȟ̴̤é̸̫c̸̙̕å̵̫ẗ̵͈́ė̷̯,̸͔̽ ̵̠̄D̶̡̃ẻ̷̩m̶̢̀ê̴̗t̶̟́e̵̬͆ṙ̴͙.̸̤͊ ̶̭̾K̵̹̀ä̶̳́l̵͈̋í̴͖,̵̤͗ ̵̣̑I̶͈̒n̵̠̚a̷̛̞ñ̵̩ñ̴̺a̷̟̿.̶͖̎ I̵͓̼̰̍̑s̷͎͔͊̉͘i̶͕̺̊͂͝ş̸̕,̶̪̲̏́̓̾ ̶̧̘̳̂À̸̜̠͇̉͝s̸̭̅̔͊̓͜t̸̨̰͍̳̏̾à̸̙̻̠͘r̶̰̬̀̋̒͝t̴̰̙̻̀̑̂e̴̢͉̋̀͌́,̴̗͉̋̃̈́ ̶̜̺̗̔D̷͔̪̈͗i̵̜͚͒ȧ̷̧̮ṋ̵̠͗̀̅a̸̡̲̔͜.̷̣͋̏̀ ̴̡̳̂̄͌Ḫ̴̠̙̟̍͗̈́̕ë̷̲͙͔͐͜c̴̬͎̦̲̀ȧ̴̛̱͖̜̈̕t̸͍͕̲͗̓͛͘e̷̗͉̍̓̈,̷̛͙̥͊̓ ̸̦̥̳̅̐̒͆Ḑ̷̫͖̳̆̋̕ë̷͎̠́m̷͚̀e̸̱̊̏t̷͔̳͍͒̐̔̏e̷͖̪̊́͝r̴̫͓͊͂.̴̻͔͔͑̂̆͝ ̸̟̘́̑K̴͈̔͌̈́͊a̵̘̤͆͛̾l̵͚̇̓ī̵̦̀͐,̵͓̖̜̳̈́̓̈́͑ ̵̩̰̺̋̆̐̔I̶̡͖̙̘̐̊n̵̛͚̝a̸̧̭̠̭̾n̵̼̎͌n̸̛̗̗͉͇͑͘a̷̼̮͗͌̄.̵̡̛̭̃̉\n\u0026ndash;\nI felt my heart. I felt everything. I could feel the other witches, their power. I could feel my ancestors, the witches before me. I could feel their struggles with prejudice, their losses from prejucide against them as nature people. And so naked I walked on the mud, the room tranfromed before me. I came to flowing water, a river filled with life. In the sounds of the woods, the waters, and the sky I heard the message of a mother goddes. She said \u0026ldquo;The ones that hurt you, deprived of their nature connection, you must love them tonight.\u0026rdquo;\nAnd so I found them. I brought their souls into mine. First the ones that judged me, called me what I am. Then more and more, until the entire world shared my mind. It was then I gave my power, though it was really never mine. I showed them the love of a mother goddes, Gaia shared with us her time.\nAnd so I am a witch, but made them one in kind.\nArt # Featured Artwork # finished! （´∀` )b pic.twitter.com/uComofmRUe\n\u0026mdash; Ev ✧*:･ﾟ✧ (@evv_uu) December 28, 2021 My Work # This was generated with DALL·E with the prompt \u0026ldquo;A demon trying to do homework, digital art\u0026rdquo;. Photography # This is a picture of my SO\u0026rsquo;s cat, hanging out in his cat tree. It was heavily processed in the Android App \u0026ldquo;Glitch Lab\u0026rdquo;. Music # What I\u0026rsquo;m listening to # What I\u0026rsquo;m making # I just got both an Elektron Model:Cycles and a Green Ringer pedal clone with germanium diodes that I\u0026rsquo;m taking some time to get used to, plus I just got all my pedals hooked back up earlier this week after having moved. But stuff is coming!\nGaming # Code \u0026amp; Software # Featured Project # Starfetch by Haruno19. I use this in my terminal to add some personality:\n┌────── ｌｙｒａ ──────┐ │ │ │ ✦ │ Lyra │ ✧ │ │ ✦ │ Quadrant: NQ4 │ ✦ │ Right ascension: 18h 14m to 19h 28m │ │ Declination: 25.66° to 47.71° │ │ Area: 286 sq.deg. (52nd) │ ⊙ │ Main stars: 5 │ ✦ │ │ │ └──────────────────────┘ What I\u0026rsquo;m working on # I\u0026rsquo;m currently working on getting a video synthesis patch setup with a boat load of MIDI inputs using KodeLife. I\u0026rsquo;m basically trying to meak a poor-man\u0026rsquo;s Sleepy Circuit\u0026rsquo;s Hypno.\nWatching # Reading # Today\u0026rsquo;s Poem # If by chance, you are reading this It's not without a digital kiss Though ethernet and Wi-Fi In ASCII I tell you lies I convince you though pixels Sent over rolling hills That this is real Do not fear, reality isn't everything In VR we can be anything Confident, couragous. Cautious? Outragous. There is no danger, nothing to fear. If you grab my hand, I will take you there. Today\u0026rsquo;s Thoughts # "},{"id":27,"href":"/daily/template/","title":"Template","section":"Dailies","content":" Day x # Writing Prompt # After months of endless false accusations of being a witch, a perfectly fine young woman is determined to become a witch. u/MostlyMades Art # Featured Artwork # My Work # Photography # Music # What I\u0026rsquo;m listening to # What I\u0026rsquo;m making # Gaming # Code \u0026amp; Software # Featured Project # What I\u0026rsquo;m working on # Watching # Reading # test2\nToday\u0026rsquo;s Poem # Today\u0026rsquo;s Thoughts # "},{"id":28,"href":"/design/3d/","title":"3 D","section":"DESIGN","content":" 3D Modeling, Sculpting, Painting, Shading, and Rendering # Art by TalonCreations This chapter will be using various programs. I\u0026rsquo;ll do my best to recommend things that are open source if I can, otherwise I\u0026rsquo;ll try to keep the cost down as much as possible. You can do everything in this chapter for free, just be aware that without some of the paid tools it may be harder. Before we get started, let\u0026rsquo;s look at some examples of cool art made using 3D modeling and Blender:\nI chose these examples because I think they show off how wide-ranging the idea of 3D modeling can be. You can do everything from make a stylized 3D piece of art like the example from @greycreature to full-blown animated shorts to crazy physics modeled art with realistic lighting. The sky is truly the limit.\nArt by @greycreature. Character owned by @ForestFright The limitless options are also a bit of a curse, as there is a lot to learn. Blender, the 3D modeling and animation tool that these examples used and that we\u0026rsquo;ll be using as well, is basically a crazy amalgamation of software in one at this point. You can use it to sculpt 3D models, texture them, rig them, animate them, shade them with a node-based shader, paint in 2D vector layers and animate those, edit video, composite video and your animation, render those animations with various rendering engines, do motion capture, simulate physics and more.\nThat is to say, this software is incredibly dense. It\u0026rsquo;s going to be overwhelming and scary. Just, take a deep breath and start slow.\nTo simulate the universe, you must first make a Donut.\nI can not recommenced that you watch this Make-A-Donut series enough (24 videos, ~6hours). I\u0026rsquo;m going to assume you have for everything past this point. TODO\n3D Game Shaders For Beginners (GitHub)\nIntro to the core ideas assume covered by the donut video. Need to watch though and see what\u0026rsquo;s missed\nStart a bit technical, with vertices/Meshes Go into basic blender … block out … Sculpt … Rig … Nodes (Shading \u0026amp; Geometry) https://en.wikipedia.org/wiki/Z-fighting\nTODO: I Need to compare https://quixel.com/mixer and https://armorpaint.org as substance painter is way too expensive.\n… probably Armor Paint is it runs on Linux. It\u0026rsquo;s not free, but it\u0026rsquo;s open source (so you can be a cheap bastard) and it\u0026rsquo;s €16 (at time of writing) one-time compared to Substance Painter at $20/mo, so not at all reasonable for just learning. It may be massively better, but, uh, fuck that.\nBlender Daily on Twitter\n100+ Tip to Boost Modeling in Blender (YouTube - CG Boost)\nZ-fighting\nWhen doing the Blender export to fbx, turn off Armature→add leaf bones, or they\u0026rsquo;ll stack on each export until it\u0026rsquo;s ridiculous.\nRecommend getting a numpad for blender\nGood examples\nhttps://www.furaffinity.net/view/9648724/ Look into https://www.blockbench.net\nhttps://store.steampowered.com/app/571890/Shapelab/\nMaterials # https://rodzilla.itch.io/material-maker\nThere\u0026rsquo;s a decent amount of people using it online (Click the hashtag)\nOptimization # Poly Count Texture size \u0026amp; Texture atlases Imposters LoDs @wunkolo on Twitter Making renders not take all night # But, what do I make to practice? # If you\u0026rsquo;re looking to start making your own things, I can\u0026rsquo;t stress enough how much I recommend starting with models for either VR Chat avatars or worlds. There\u0026rsquo;s a fantastic community behind both, and Unity and the VRChat SDK are easy to work with.\nPlus, working with Unity \u0026 VRChat is a great way to started with Shaders too! [TODO] - https://alicevision.org/#meshroom\nhttps://www.youtube.com/watch?v=GWY7fsXwh24\n"},{"id":29,"href":"/design/analog/","title":"Analog","section":"DESIGN","content":" Analog Art # What makes it \u0026lsquo;analog\u0026rsquo; # For OpGuides I\u0026rsquo;m going to refer to any non-digital art as analog. Traditionally, this art is called traditional. I don\u0026rsquo;t like this term as it implies that there\u0026rsquo;s a right \u0026rsquo;traditional\u0026rsquo; way to do things, and that\u0026rsquo;s a load of shit. Whenever I say analog, don\u0026rsquo;t think about it too much. I just mean not using software and a computer, or, if using a computer, it\u0026rsquo;s not necessary for the majority of the effort that\u0026rsquo;s used to make the end product. For example, 3D printing a model to then paint it.\nPen/Pencil and Paper # Paper types, lead weight, transfer paper, pen types (+caligraphy), erasers, etc.\nCharcoal # Paints # https://www.reddit.com/r/PourPainting/\nNew Genesis, me, fluid acrylic, 2020 from r/Art Sculpting # clay + different types (water, air-dry, oil, polymer, epoxy, earthen/stone, ceramic, ) , sand, sawdust, paper, plastics, + ovens/kilns\nFabrics and Fashion # This is my very long daughter, Calliope Crayon Cruncher from r/LongFurbies LED Hackers Jacket for EMF Camp (lochsh)\nInk/Stich Inkscape Library\nGlass # While I haven\u0026rsquo;t done this personally, based on the sheer amount of content on YouTube and hearing others experience making stained-glass isn\u0026rsquo;t nearly as hard as one would assume\nOf course, that\u0026rsquo;s assuming you have the glass already. From what I\u0026rsquo;ve seen, making from-scratch, hand-blowing, or re-flowing glass trinkets is exceptionally difficult.\nI\u0026rsquo;m not saying any of this to dissuade you from trying anything, just stating where you may want to start.\nThe biggest stained glass commission so far - feels great! from r/furry Other # Foil Art (Reddit)\n"},{"id":30,"href":"/design/animation/","title":"Animation","section":"DESIGN","content":" Animation # Why is \u0026ldquo;Choppy\u0026rdquo; Animation Better? (YouTube, Doodley)\n"},{"id":31,"href":"/design/dacadc/","title":"Dacadc","section":"DESIGN","content":" Analog Art to Digital Art # Scanning in your Analog Art # [TODO] Scanner DPI, etc.\nBackground Removal # Via vector art tools # Before doing this, you should know what vector art is and how it differs from the raster art you\u0026rsquo;re probably used to. I\u0026rsquo;ve talked about this a bit in the previous chapter, Digital Art . This process requires combining the two, and it\u0026rsquo;s a bit odd if you haven\u0026rsquo;t used vector art tools before.\nOpen Inkscape\nDrop your image in\nRight-click the image\nSelect Trace Bitmap\nTry different options (here, I used Single Scan, Autotrace, see picture)\nClick Apply, a bit map trace will appear over the original image. Select either the trace or original picture and drag it to the side.\nSelect the trace, copy it (Ctrl+C), and paste it into your art software (the following assumes Krita)\nIn your art software, the pasted object will be a vector. You probably want it to be normal, editable pixels now, so you need to rasterize it like you would text. In Krita, this you can do this by right-clicking the layer, hovering over convert, then clicking \u0026ldquo;to paint layer\u0026rdquo;\nThis will give you a single color paint layer, from here you can work as normal. Depending on the turn out of the tracing process, you might want to fix some lines. This will probably be necessary to fix holes in the outline if you want to use the paint bucket tool.\nYou may want to experiment with the multiple scans → colors option if you want to convert something which used color, but has a limited palette. It can also be a cool effect anyway, as the output is, uh, well, I\u0026rsquo;ll just show you: Original Image SVG result after tracing Heads up, this will take a long time on high resolution, large images, and produce much larger vector files. The input image here is a 3.2MB JPEG, the output is a 17.9Mb SVG! This is because this is the worst possible way to use an SVG. The cool thing here is that you could delete one color, or pull out just one as a trace. You\u0026rsquo;ll just want to turn it back into a raster image when done.\nIn Inkscape, this was done with \u0026ldquo;multiple scans → Colors\u0026rdquo; with 10, stacked scans, optimize of 5.00, smooth corners of 1.24, and speckles of 9. Also, the output will likely have some gaps letting the background color show though- so it may look different on a dark or light background. When done, all the layers will be grouped by default in Inkscape. To get at the individual layers, right click→ungroup. If this effect alone this is your goal, please consider using a posterize effect. It\u0026rsquo;ll be much more optimized and probably look better. SVG with the warm tones removed. SVG with animation using pablo.js Digital Art to Analog Art # [TODO]\n2D # Printing \u0026amp; Plotting # Paper \u0026amp; Inks # 3D # 3D printing vs CNC\n"},{"id":32,"href":"/design/digital/","title":"Digital","section":"DESIGN","content":" Digital Art # Photo by cece kun The primary tool of the digital artist… The pen? # I want to give you a heads-up that making digital art without a pen tablet or pen display of some sort is pretty awful. You can get a cheap pen tablet - they\u0026rsquo;re basically like a mouse pad that you use a pen on - for ~$30. Or you can get a fancy pen display, where you draw directly on the screen, for about ~$300 (akin to the one in the picture above but one that large is probably much more expensive)\nI personally find it difficult to use the cheaper kind, but YMMV.\nDepending on the style of art you want to do, it may still be practical to work without a pen tablet, but if you want to do digital painting or drawing like you would on paper, this is pretty much a necessity.\nThere are a some \u0026lsquo;gotchas\u0026rsquo; to be aware of when shopping for a good pen display.\nThe connection - depending on your setup, you might have to run a squid of cables (HDMI, USB, and Power) or just one (Everything over USB-C) but this requires knowing if your computer\u0026rsquo;s USB-C ports support both the power draw and display output and if the tablet you\u0026rsquo;re getting can do that too. You might just have to live with the squid The pen - some pens need power, and charging pens is kind of annoying. Pay attention to the number of levels of sensitivity. The screen - Beyond resolution and color accuracy, you\u0026rsquo;ll also want to pay attention to the separation between the pen and the actual display. Thicker glass or air between the glass and the actual panel make the pen feel much worse to use, as there will be a visual offset between the tip of the pen and the thing you\u0026rsquo;re drawing. As for the cheaper non-display pen tablets: I haven\u0026rsquo;t noticed a difference between the feeling of cheap and expensive ones. If someone knows better, please get in touch!\nRaster, Vector, Pixel, Voxel, ASCII, Mesh, Fractal, Generative\u0026hellip;?? # Projection Mapping, Creative Code,…\nRaster Art # When you think digital art, raster art is probably what you\u0026rsquo;re thinking of. Generally, you get a big canvas, a bunch of \u0026ldquo;brushes\u0026rdquo; (which is a term used generically in digital art to mean all hand tools- pens and erasers included), a handful of effects, useful tools like selection masks, and almost always you can work with stacked layers. There\u0026rsquo;s a seemingly infinite number of great raster art programs to choose from, but out of everything I\u0026rsquo;ve tried, I\u0026rsquo;ve had the best luck with Krita, which is great because Krita is also free!\nLet\u0026rsquo;s dive in and explore the basics of Krita!\nPhotoGIMP is a patch for Gimp that makes it look more like Photoshop, adds fonts and some filters.\nUnsplash is a good source for \u0026lsquo;Freely usable images\u0026rsquo; if you need some source material\n[TODO] Krita tutorial, including some \u0026lsquo;advanced\u0026rsquo; things like the transform tool https://docs.krita.org/en/reference_manual/tools/transform.html, color filters, SeExpr, etc.\nhttps://krita-artists.org/t/brush-pack-deevads-2021-bundle/27130\nhttps://typefully.com/DanHollick/blending-modes-KrBa0JP - Blending modes\nhttps://typefully.com/DanHollick/chromatic-aberration-3rjb1Mp\nPixel Art # Technically pixel art is just raster art. Of course, there\u0026rsquo;s an implication with the term that you\u0026rsquo;re working with a limited resolution.\nhttps://spritestack.io\nhttps://marmoset.co/hexels/\ngrafx2\nhttps://www.piskelapp.com\nIsometric projections # Non-square pixels # Vector Art # Inkscape\nDotgrid by 100 Rabbits\nSVGPathEditor (GitHub)\n3D Art # Meshes # Meshlab\nblender\nVoxel Art # MagicaVoxel\nMinecraft\nGenerative Art # Fractals # Creative Code # ASCII Art # Projection Mapping # Screen Considerations\nhttp://rainworldgame.com/\nPixel Art \u0026amp; ASCII art # Pixel Art Tutorial from @saint11 https://saint11.org/blog/pixel-art-tutorials/\nJPixel - editor for pixel art animation and tilesets\nHexels ($49)\nParticle FX Designer\nPixatool\nTilesetter\nRexpaint\nDither Machine\nStrike - 1-bit paint tool, primarily for quick sketching or line-drawing.\nNoodle, 1-bit browser based art tool\nWobblepaint on the Pico-8, by Zep\nColor Palette Tools # https://colors.lol/\nColorTool ($15 Steam)\nhttps://lospec.com/palette-list\nThe Nerdy bits # Source Why Dark Video Is A terrible Blocky Mess (YouTube)\nSquoosh, a tool for trying out different image formats to check their relative size and quality. I recommenced using this if you\u0026rsquo;re targeting websites. Keep in mind not all devices and browsers support all formats. Demo of how Fourier Filtering works Color Emulation of the GameBoy Hello hsluv - blog post about how hsluv works Graphics \u0026amp; Palettes - Super Nintendo Entertainment System Features Pt. 01 (YouTube) Digital Video Introduction (GitHub) - \u0026ldquo;A hands-on introduction to video technology: image, video, codec (av1, vp9, h265) and more (ffmpeg encoding).\u0026rdquo; Oklab, An interactive review of Oklab (Raph Levien\u0026rsquo;s Blog) - \u0026ldquo;A perceptual color space is desirable when doing many kinds of image processing\u0026rdquo; The hyperbezier pen tool (cmyr.net) Compression # https://squoosh.app Whenever I make foliage I always find myself hoping nobody else is as lazy as I am. I just make a bunch of random shapes and copy paste to victory... Please don\u0026#39;t call the cops pic.twitter.com/Vz63AOBuZo\n\u0026mdash; mog (@wtfmig) November 22, 2019 Backup on Archive.org (The gif won\u0026rsquo;t play though) Krita Brush Tips: Outline\nKrita Brush Tips: Hair\nKrita: Painting Fur\nKrita: Animated (Random) Brushes - Good for trees/bushes\n"},{"id":33,"href":"/design/gen/","title":"Gen","section":"DESIGN","content":" Generative Art # AI tools, and to a lesser extend non-AI based generative art tools, have been contentious among artists for a while now. While the reasons for the apprehension vary, two common threads come up a lot:\nIs it ethical, and should it be legal, to train these systems on existing images with out consent from the artists?\nThis way out of scope for this page, but if you think no, that doesn\u0026rsquo;t exclude you from using all generative tools - most don\u0026rsquo;t use AI at all.\nHow can artists can prove they drew a piece instead of using an AI tool?\nOne solution to this is to post a each piece with a WIP from earlier in the process or a time lapse of the creation process. This is something a lot of viewers already appreciate anyway, and, depending on your workflow, may be low effort.\nDue to the copy right office deciding on the un-copyright-ability of AI generated images with tools like DALL·E 2, Midjourney, and Stable Diffusion, there\u0026rsquo;s some questions about how this will affect the copyright-ability of other generative tools. I don\u0026rsquo;t want to comment if that\u0026rsquo;s good or bad on this page, but you should at least be aware of it. This page is almost entirely devoid of actual educational content. Instead, I\u0026rsquo;ve tried to make the most complete list of generative art tools and libraries on the internet. Of course, I can\u0026rsquo;t actually make an exhaustive list and may be missing some of the newest tools and ideals, so please check out these other communities for more: r/proceduralgeneration\nr/generative\nr/PlotterArt\nYou may notice this page lacks AI generative art tools such as DALL·E 2, Midjourney, \u0026amp; Stable Diffusion. This isn\u0026rsquo;t because they\u0026rsquo;re not interesting, it\u0026rsquo;s because the space is rapidly evolving and I don\u0026rsquo;t want to maintain constantly changing lists!If you\u0026rsquo;re totally new to AI Art, see Stable Diffusion is a really big deal by @simonw but even that is getting old now as new features and extensions come out, like the ability to pose characters in the scene. If you\u0026rsquo;re interested in generative music and sounds as well, you may want to check out The OpGuides page on Live coding Music Software .\nWorld Building Tools roberthodgin - meander Generative maps of how rivers meander, not the tool, but at least it\u0026rsquo;s the process Map Generator A tool for building custom maps, envisioned for use in tabletop roleplaying games. One Page Dungeon Dungeon Map Doodler “Dungeon Map Doodler is a new, free to use drawing tool accessible from any web browser. Easily create maps for your favourite tabletop RPGs in minutes!” Dungeon Scrawl Dungeon Scraws Documentation Fantasy City Generator This application generates a random medieval city layout of a requested size. The generation method is rather arbitrary, the goal is to produce a nice looking map, not an accurate model of a city. Fantasy Map Generator make a map with tons of customization options including some about the culture and regions Space Creator Make a lil\u0026rsquo; solar system Genbrush ~15 USD Random Country Generator World Machine NOTE: This is free for non-commercial use World Painter This one is for Minecraft, but still potentially useful Image Source DataCombs \u0026ldquo;3D Map editing utility for use with tabletop games like Dungeons \u0026amp; Dragons and Pathfinder\u0026rdquo; BlenderGIS Import real map data into blender, cool for topographic maps and such Worldanvil \u0026ldquo;World Anvil is a set of world-building tools that helps you create, organize and store your world setting. With wiki-like articles, interactive maps, historical timelines, an RPG Campaign Manager and a full novel-writing software, we have all the tools you’ll need to run your RPG Campaign or write your novel!\u0026rdquo; LDtk - Level Designer Toolkit “LDtk is a modern and open-source 2D level editor, specifically designed for indie devs.” Constructed Langugages, Generative Text Procedural Runes Glyph Glyph Generator Brutalita Font Huge Playlist on Constructed Languages ( Conlang Critic on YouTube)\nSome more cool examples, but lacking code:\nPentagonal Glyphs (Reddit) Generative Glyphs (Reddit)\nIf you just want cursive hand writing: https://github.com/GirkovArpa/calligrapher-ai should do the trick.\nGenerative Textures and Geometry Forsynthia Check out these(1) pages (2) for more information Noisemaker Noise maker can make a ton of generative art pieces, as you can see at the right, this is a small sampling using some of the included presets. It can be a pain to get to run as it needs Tensorflow. Noisey-Shapes (GitHub) \u0026ldquo;Making the computer draw weird shapes using basic trigonometry and different species of randomness(noise)\u0026rdquo; Superformula SVG GitHub repo Pattern Generator Use this tool to create unique, seamless, royalty-free patterns.Choose a base style, then customize with colors, filters, and transforms.Each pattern style has it\u0026rsquo;s own unique transforms. Play around to see what they do.Click the \u0026lsquo;shuffle\u0026rsquo; button to see the kinds of patterns you can make. Noisedeck.app Noisedeck is a generative art synth. Still in early development. Some features require a license.\nFive months ago, we had an idea for a simple app to make generative art accessible to everyone. It\u0026#39;s rapidly matured into a remarkable app, and found its way into the workflow of a small (but growing!) base of talented creators.\nThank you! We\u0026#39;re excited about what\u0026#39;s next. ✨ pic.twitter.com/7KpkFNjv99\n\u0026mdash; noisedeck (@noisedeck) April 5, 2021 Archive.org link to the embedded tweet\nGlobs Designer Has a neat code editor too, for making more complex geometry Mutsuacen Thank you!! pic.twitter.com/XhuJw0V3n5\n\u0026mdash; Miguel Rafael (@migrafael) February 3, 2021 Archive.org backup of the above tweet (Video doesn\u0026rsquo;t work)\n楽しいhttps://t.co/7RAyBn2VOl https://t.co/F1CcsaHqBd pic.twitter.com/e3tfTLsN3x\n\u0026mdash; Jun Kanomata (@jun_kanomata) February 3, 2021 Archive.org backup of the above tweet (gif doesn\u0026rsquo;t work)\nSvgbob Editor Convert your ASCII diagram scribbles into happy little SVG Pattern Collider Test different penrose tilings. If you edit the HTML you increase the slider limits. FastNoise2 (GitHub) Modular node based noise generation library Making \u0026lsquo;Noise Planets\u0026rsquo; on Avinayak\u0026rsquo;s Blog\nThemer (Live Demo) (GitHub), meant for making themes for Linux environments, but makes good textures in general\nPixel Sorting Source - u/Hunter_timeFR on Reddit r/pixelsorting (Reddit)\nPixelSorting using Processing (GitHub)\npython pixelsort, with masks (GitHub)\nPython again, but with animation support (GitHub)\nPixsort for Adobe After Effects (15 USD)\nGenerateMe (GitHub) - lots of glitch effects\nFractal Art Apophysis Fractal Flames [TODO] Mandelbulber Mandelbulb3D [TODO] ifs Fractal Generator Fractorium A GPU-Accelerated Fractal Flame Editor Chaotica Chaotica is free for noncommercial use, and can render up to 1.23 megapixel images (e.g. 1280x960 resolution) and up to 30 second 480p animations without a licence. A Chaotica HD (45 USD) licence for casual users who want to create high quality desktop wallpapers up to 4 megapixels (e.g. 2560x1600) and 720p animations up to 3 minutes long is available at a low price point. The professional Chaotica Studio (109 USD) license has no still image or animation limitations at all. *prices are from time of writing Generative Eyes Iris (Reddit)\nGreye (Reddit)\nMycelium (Reddit)\nLivecoding Visuals r/livecoding (Reddit)\nToplap.org - a site all about live coding\nThe Book of Shaders - \u0026ldquo;A gentle step-by-step guide through the abstract and complex universe of Fragment Shaders.\u0026rdquo;\nTidal Cycles Praxislive Rectitude Mosaic p5-live (GitHub) live coding for p5.js - you\u0026rsquo;ll probably want the VS Code Extension Pts.js JS library for visualization \u0026amp; creative coding\ndemo\nHydra (GitHub) “Set of tools for livecoding networked visuals. Inspired by analog modular synthesizers, these tools are an exploration into using streaming over the web for routing video sources and outputs in realtime. Hydra uses multiple framebuffers to allow dynamically mixing, compositing, and collaborating between connected browser-visual-streams. Coordinate and color transforms can be applied to each output via chained functions.” LiveCodeLab “Livecodelab is a special secret place where you can make fancy “on-the-fly” 3d visuals and play awesomely offbeat (literally) sounds. “On-the-fly” meaning: as you type. Type just three letters: “box”, and boom! a box appears. No clicking play, no waiting, no nothing.” Thixels by Ramsey Nasser (GitHub, Linux Only) \u0026ldquo;PICO8 inspired live coding visual instrument.\u0026rdquo; Gibber.cc \u0026ldquo;Gibber is a creative coding environment for audiovisual performance and composition. It contains features for audio synthesis and musical sequencing, 2d drawing, 3d scene construction and manipulation, and live-coding shaders.\u0026rdquo; Ronin (GitHub) “Ronin is a procedural graphics tool designed to automate simple graphical tasks, like resizing, cropping, coloring, and generating algorithmic images. It interprets a minimal dialect of LISP, look at the examples to better understand how this all works.” The Force (GitHub) … this one basically lacks all description. Best you\u0026rsquo;ll get is the API docs in the wiki. Tooll.io node-basde tool for interactive realtime content on the web Kodelife Realtime GPU shader editor Cables.gl (beta) “Cables is a tool for creating beautiful interactive content. With an easy to navigate interface and real time visuals, it allows for rapid prototyping and fast adjustments.” — Because this seems to be so ‘beta’ and I don’t see code or any indication of future pricing it’s probably not the best option at the moment. Nimp (GitHub) \u0026ldquo;Node-Based Image Manipulation Program\u0026rdquo; vvvv - Heads up vvvv requires a license for commercial use that is rather expensive “vvvv is a hybrid visual/textual live-programming environment for easy prototyping and development. It is designed to facilitate the handling of large media environments with physical interfaces, real-time motion graphics, audio and video that can interact with many users simultaneously.” TouchDesigner (Free, but 600 USD for Commercial licence) \u0026ldquo;TouchDesigner is a visual development platform that equips you with the tools you need to create stunning realtime projects and rich user experiences. Whether you\u0026rsquo;re creating interactive media systems, architectural projections, live music visuals, or rapid-prototyping your latest ideas, TouchDesigner is the platform that can do it all.\u0026rdquo; Video courtesy of Neurotypique Nodes Cyril (GitHub) (Main site) “The Cyril programming language is designed for fast prototyping of visualisations and live coding visuals.” Eternal \u0026ldquo;node based audio / visual composition\u0026rdquo; Creative Coding (Non Live) HackadayU Creative Code with Casey Hunt (YouTube)\nProcessing Language \u0026ldquo;Processing is a flexible software sketchbook and a language for learning how to code within the context of the visual arts.\u0026rdquo; Hype Framework \u0026ldquo;This is a collection of processing.org classes that performs heavy lifting tasks while using a minimal amount of code writing\u0026rdquo; This site is weird? It seems to be embedding Vimeo videos of static images, regardless, still worth checking out P5.js \u0026ldquo;p5.js is a JavaScript library for creative coding, with a focus on making coding accessible and inclusive for artists, designers, educators, beginners, and anyone else!\u0026rdquo; \u0026mdash; Processing can run P5.js scripts, you can also live code p5.js with some VSCode extensions as mentioned above three.js “Three.js is a lightweight cross-browser JavaScript library/API used to create and display animated 3D computer graphics on a Web browser. Three.js scripts may be used in conjunction with the HTML5 canvas element, SVG or WebGL.” Three.js examples from Free Frontend and on the Three.js site itself paper.js \u0026ldquo;Paper.js is an open source vector graphics scripting framework that runs on top of the HTML5 Canvas\u0026rdquo; Paper.js examples rune.js \u0026ldquo;a JavaScript library for programming graphic design systems with SVG in both the browser or node.js\u0026rdquo; Move your mouse over the image on the homepage rough.js “A small (\u0026lt;9kB gzipped) graphics library that lets you draw in a sketchy, hand-drawn-like, style.” StructureSynth \u0026ldquo;Structure Synth is a cross-platform application for generating 3D structures by specifying a design grammar\u0026rdquo; OpenFrameworks “openFrameworks is an open source C++ toolkit for creative coding.” OPENRNDR “In short, OPENRNDR is a tool to create tools. It is an open source framework for creative coding, written in Kotlin for the Java VM that simplifies writing real-time interactive software” plenty of examples on the site Cinder \u0026ldquo;Cinder is a free and open source library for professional-quality creative coding in C++.\u0026rdquo; plenty of examples on the site | Context Free “Context Free is a program that generates images from written instructions called a grammar. The program follows the instructions in a few seconds to create images that can contain millions of shapes.” Agneya by thijs](https://www.contextfreeart.org/gallery/search.php?by=thijs) Nannou a creative coding frame work for Rust, you may want to look at the work by MacTuitui (Twitter) Valora Another creative coding framework for Rust curtain by turnage, 2020 immense A Rust library for describing 3D meshes with simple composable rules.\n1 2 3 4 5 6 7 8 rule![ tf![ Tf::saturation(0.8), Tf::hue(160.0), Replicate::n(36, vec![Tf::rz(10.0), Tf::ty(0.1)]), Replicate::n(36, vec![Tf::ry(10.0), Tf::tz(1.2), Tf::hue(3.4)]), ] =\u0026gt; cube() ] is all that\u0026rsquo;s needed to generate this shape:\nANSIedad ASCII Generator ShaderGif You can make gifs with shaders (GLSL) and JavaScript (either with raw canvas or with the coder-friendly p5.js library). ShaderView \u0026ldquo;Shaderview is an app for creating visuals using OpenGl Shaders and it uses OSC messages to communicate changes in state. For example when live coding music you could send an OSC message when the drum sample played and in turn your shader could do something with that signal, like flashing of white.\u0026rdquo; Data Visulization Nodebox \u0026ldquo;NodeBox makes it easy to do data visualisations, generative design and complex production challenges.\u0026rdquo; d3js D3.js is a JavaScript library for manipulating documents based on data. D3 helps you bring data to life using HTML, SVG, and CSS. The homepage has a ton of live demos Apparatus a hybrid graphics editor / programming environment for creating interactive diagrams Vega-Lite Vega-Lite is a high-level grammar of interactive graphics. It provides a concise, declarative JSON syntax to create an expressive range of visualizations for data analysis and presentation. Talso Node based, open source VFX Editor with powerful interface and a ready to use libGDX runtime. Scripting/Generative tools IN other tools Blender python API Sorcar for Blender procedural modeling node-based system for Blender Adobe Extend Script \u0026ldquo;A script is a series of commands that tells an application to perform a series of operations. You can use scripts in most Adobe applications to automate repetitive tasks, perform complex calculations, and even use some functionality not directly exposed through the graphical user interface.\u0026rdquo; Krita SeExpr Fills the layer with a pattern specified through Disney Animation’s SeExpr expression language. - note that this is for FILL layers in Krita Super resolution, frame interpolation, and other effects Waifu-2x \u0026ldquo;Image Super-Resolution for Anime-style art using Deep Convolutional Neural Networks. And it supports photo.\u0026rdquo; - Works well on most things, not just anime art. The link is for a site where you can try it out online, but if you need to run it a lot you should probably run it locally. If you do I recommend this version is it\u0026rsquo;s compatible with basically any modern GPU. You may also want to check out Waifu2x-Extension-GUI. Upscayl Same vibe as Waifu-2x, but a different model. Tends to perform a tiny bit better. Drain-App Dain-App is a free app that let you take any form of media like movies, stop-motion, anime, cartoons, sprites, etc and interpolate new frames, generating a bigger frame-rate from the original file. NOTE: drain-app only runs on systems with an NVDIA GPU Neat auto lighting/shading software (GitHub pages site) \u0026ldquo;[…]. Based on this observation, we design an algorithm to both estimate the density of strokes in a digital painting using color geometry, and then generate novel lighting effects by mimicking artists\u0026rsquo; coarse-to-fine workflow.\u0026rdquo; artwork traced by ToS2P from an artwork by David Revoy under CC-BY license, www.peppercarrot.com Pixatool (15 USD) convert \u0026rsquo;normal\u0026rsquo; art into pixel art Picbreeder “Picbreeder is a collaborative art application based on an idea called evolutionary art, which is a technique that allows pictures to be bred almost like animals. For example, you can evolve a butterfly into a bat by selecting parents that look like bats” Geon FX (10 USD) Particle effects generator/editor For Plotters See the 3D Printing \u0026amp; CNC page from the Engineering section of OpGuides for more resources\nvpype - aims to be the one-stop-shop, Swiss Army knife for producing plotter-ready vector graphics. Here are, for illustration, a few examples of what it can do:\nSequence Diagrams, Flow Charts, etc. (Mostly for the nerds) https://kroki.io “Kroki provides a unified API with support for BlockDiag (BlockDiag, SeqDiag, ActDiag, NwDiag, PacketDiag, RackDiag), BPMN, Bytefield, C4 (with PlantUML), Ditaa, Erd, Excalidraw, GraphViz, Mermaid, Nomnoml, Pikchr, PlantUML, SvgBob, UMLet, Vega, Vega-Lite, WaveDrom… and more to come!” Asciigrid ASCII to SVG mscgen.js Sequence Charts SVG-Sequence-Diagram by Andras Suller\nSequence Charts Chart Mage Sequence Diagrams \u0026amp; Flow Charts state-machine-cat State Machines xstate State Machines D2 D2 is a domain-specific language (DSL) that stands for Declarative Diagramming. Declarative, as in, you write in text what you want diagrammed, we generate it. Penrose Set diagrams, see building \u0026amp; running Nomnoml Text to UML, actually good looking DBdiagram.io database diagrams, it works Wavedrom Wave editor, for like showing bit patterns \u0026amp; such Edotor.net Graphviz editor … It\u0026rsquo;s a Graphviz editor. It looks how you\u0026rsquo;d expect. \\(\\LaTeX \\text{?}\\) If you\u0026rsquo;re looking at this list, there\u0026rsquo;s a good chance you\u0026rsquo;re either writing up technical documentation or working on an academic paper, and so using LaTeX. First, I feel your pain. Second, This DSPTricksManual from Paolo Prandoni may help with some graphing, as may the Tikz Examples on texample.net. There\u0026rsquo;s decent Circuit and Block Diagram examples, though I do still think loading in a picture from an external tool is probably in your best interest due to the PITA that is doing this in plain LaTeX.\nOther Resources Sound Design # There\u0026rsquo;s a LOT more tools listed in the music chapters, but there\u0026rsquo;s some more \u0026lsquo;for animation\u0026rsquo; tools here: rFXGen\nResources to learn Creative Coding # Noise in Creative Coding (Varun Vachhar)\nAs an aside, Simplex Noise is technically patented until Jan 8, 2022 (which is fucking stupid)\nMaking Perlin Planets (vinaybhaip.com)\nCreative Coding libraries # https://github.com/inconvergent/auxin Some inspiration # Python + Quantum Research = Art + Saving 1000s hours of CPU time (Reddit)\nGenerative Constellations (Reddit)\nIndra\u0026rsquo;s Net (Reddit)\nThe three above pieces are some of my absolute favorite pieces! Grant Custer\u0026rsquo;s Feed + Constraint.systems - Grant\u0026rsquo;s Text Walk Scroller and Moire are some of my favorites.\nShadertoy\ngenerated.space\nFrom Generated.space I like Marching Squares 2, Perspective Map Trace, Map Trace, Fractal Square 2, Noisify, and Interactive Pixel Sorter - I could see using the latter two for original art directly. Echo/printf to write images in 5 LoC with zero libraries or headers (Vidar\u0026rsquo;s Blog)\n10 innovative creative coding examples that are redefining programming (Shaping Design - Editor X)\nMETA: Hacker News Submission on this page, with a bit of discussion\n"},{"id":34,"href":"/design/photo/","title":"Photo","section":"DESIGN","content":" Photography # [TODO]\nThis Guy Flipped an Element in an Old Lens and Got ‘Magic’ Bokeh (PetaPixel)\nhttps://hackaday.com/2022/10/12/enjoy-the-beauty-of-corona-discharge-with-this-kirlian-photography-setup/\n"},{"id":35,"href":"/design/vbasics/","title":"Vbasics","section":"DESIGN","content":" Vega\u0026rsquo;s Not-As-Basics of Art and Design # We have the basics that any art program will focus on - Lines, Shape, Form, Color, Space, Texture, Value - and these are the standard starting topics for good reason. They\u0026rsquo;re tried and tested to make people better at art, and they apply to any piece. This is great, but I think there are a some things left out of this, I assume to make it more broadly applicable.\nHere\u0026rsquo;s my personal list of what I keep in mind for art, in addition to the above. Not all apply to every piece of art work, and you may have some you don\u0026rsquo;t care about or would add. Though if you do have some you want to add, you should really let me know! Interaction - How does the subject work with other things or influence its surroundings?\nDesires - What does it want? Aggression - How does it impede other objects desires? Mechanics - What does it support or cause to move? History - How was it used, worn down, grown, eroded, formed over time, or constructed? Was it treated lovingly or allowed to decay?\nMath - How much does the object repeat, branch out, spiral, and form math-y shapes.\nSimilarity/Symmetry - How similar are different regions of the subject? Is it like leave on a tree, or dirty stains on a pair of jeans? Patterns - Frequency? Is there an obvious cut point, like a pattern meeting a seam? Fractals - you know what these are. Self similar - What you probably think of when you think fractals - the kind that keep repeating forever. Natural - Branches of a tree Detail - How much detail do you want to capture? Where do you sit on the spectrum of photo-realistic to iconography?\nArtsy-ness - Is the subject supposed to be highly detailed and pretty, or purely functional and minimalist? Passive or attention grabbing?\nFocal Point or Vibe? - See Eastern \u0026amp; Western Design: How Culture Rewires The Brain (YouTube, Design Theory) Culture - Where is the subject supposed to be from, and what is the culture like there?\nEmotion - Is the subject supposed to elicit an emotional response?\nSubversion - Is the subject supposed to be misleading? Like a mimic (chest monster) or little girl demon. Message - Is subject supposed to convey a message by its existence? Like a gas mask worn in the city to comment on pollution. Story - Is there a sequence of events the viewer should see?\nImplied - Do you use clues for the meaning, use, and emotion attached to a place or object to hint at a past state. Overt - Comics, written out sounds, fade from before and after, etc. Interaction # Desires \u0026amp; Aggression # https://en.wikipedia.org/wiki/Crown_shyness\nMechanics # History # [TODO] picture of rock layers, dent in cup, age marks on wall\nMath # Similarity/Symmetry # Patterns # Fractals # Self-Similar # Natural # https://www.treehugger.com/amazing-fractals-found-in-nature-4868776\nDetail # Do not mistake detail for quality. More detail ≠ better. Artsy-ness # This is the worst named and most subjective item on this list. While with detail I mean how much of the subject\u0026rsquo;s characteristics do you intend to capture, with Artsy-ness I mean how do you want to capture it. Should you add extra frills, long sweeping curves, lots of useless but visually appealing stray lines, vibrant colors, and art-for-the-sak of art for your eye to follow? Or do you want each line to be vital to conveying the true form or purpose of the subject? I don\u0026rsquo;t mean minimalism, either. For example, you could have a highly detailed, photo-realistic drawing of an object - but that isn\u0026rsquo;t minimal. But photo realistic doesn\u0026rsquo;t have to mean \u0026ldquo;frilly\u0026rdquo; or \u0026ldquo;artsy\u0026rdquo; either.\nAlso, don\u0026rsquo;t mistake artsy for fun. You could have something be \u0026ldquo;artsy\u0026rdquo; but horror themed, or traditional and direct but fun - like a drawing of a rock concert.\nCulture # Emotion # Subversion # [TODO] image of mimic here Message # Story # Implied # Overt # Image originally from Panty \u0026amp; Stocking with Garterbelt, a very raunchy anime that uses this style of written-out sounds to great effect. Screen capture stolen from soundeffect.fandom.com. One last thing: Have FUN! # Making art should be something you enjoy. Yes, you may be doing it as a job, which will take some fun out of it, but your best work will always be the work you enjoyed making and felt passionate about. Good art doesn\u0026rsquo;t have to take days or weeks, it just has to make someone feel the way you want them to! Making people smile doesn\u0026rsquo;t take incredible talent, just a good idea:\nNilan_1999 on Twitter "},{"id":36,"href":"/design/web/access/","title":"Access","section":"DESIGN","content":" Accessibility # Contrast. # ░▒▓ Accessability doesn't mean ugly. ▓▒░ ♚ High contrast colors can look good. ♛ 🙟Like this, nice nature-y theme.🙝 → Or this in-your-face purple ← 🗹🗹🗹 these boxes are high contrast. !!! And it's not like this is hard to do. \u0026nbsp\u0026nbsp Hell, it's easier! These palettes made using https://randoma11y.com Though it's not hard to make your own. You just have to give a shit. Image alt-text # Using basic-ass HTML the way it\u0026rsquo;s intended. # Don\u0026rsquo;t make your buttons divs.\nFinding a balance. # A lot of sites that preach accessibility miss a point that everyone is thinking \u0026ldquo;If I\u0026rsquo;m focused on accessibility, I won\u0026rsquo;t be able to work as fast or make as many cool things.\u0026rdquo;. Yep. That\u0026rsquo;s true.\nHell, above where I wrote \u0026ldquo;🗹🗹🗹 these boxes are high contrast.\u0026rdquo;\nIt\u0026rsquo;s possible a screen reader will read that as\nballot box bold check ballot box bold check ballot box bold check these boxes are high contrast bold text end. With the bold text being in a, uh, bold voice? It depends on the user\u0026rsquo;s screen reader.\nAnd, yeah, ｏｏｆ. That\u0026rsquo;s not a good experience. It\u0026rsquo;s worth trying to balance your use of text, images, and (do-as-I-say-not-as-I-do) Unicode abusing spice.\nNot being a dick™ # TODO: Facebook putting each letter of sponsored in a different div breaking things.\nhttps://btxx.org/posts/Please_Make_Your_Table_Headings_Sticky/\n"},{"id":37,"href":"/design/web/content/","title":"Content","section":"DESIGN","content":" Content is King # At the end of the day, you can make a cool looking fancy website, but you still have to have something to say, a story to tell, a tutorial, videos, something to play. something. This isn\u0026rsquo;t a print book, you can come back and edit it later. The important thing is to just make something.\nIt doesn\u0026rsquo;t have to be good at first, it just has to exist. You\u0026rsquo;ll get better with practice, regardless of what part you\u0026rsquo;re bad it - the writing, the presentation, whatever. Just put in a little time every day.\nThat said, there are some tips that I\u0026rsquo;ve found useful for making better content faster\nMake something\nBe honest and excited!\nThis means being yourself. Write in your voice, don\u0026rsquo;t try to sound smart or professional, just write\nIf you\u0026rsquo;re writing about something, it\u0026rsquo;s probably because you care about it, but you may think that others don\u0026rsquo;t follow everything you\u0026rsquo;re saying\n\u0026ldquo;Ohh, I\u0026rsquo;d love to mention how the QMK keyboard firmware lets you set up multiple unicode layers but most people have no idea about mechanical keyboards, let alone Unicode or the QMK firmware so I need to cover that first…\u0026rdquo; BE YOURSELF. If you think it\u0026rsquo;s cool, others will enjoy your passion - even if they only follow half of what you\u0026rsquo;re saying. If nothing else, put something in to interrupt the flow of the rest of the page, like how I have my little speech bubbles and footnotes (1)\nHi there! Everything looks the goddamn same. Same sans serif fonts. Same flat illustrations. Same color schemes. Same. Same. Same.\nYou can get away with looking boring if something else about your work is inventive, but not if the whole thing you’re doing is by-the-numbers.\nEven if what you’re making is original, why not look memorable while you’re at it?\n- 100 Things Every Web Developer Should Know, №20 - Baldur Bjarnason Put more time into the intro \u0026amp; title \u0026hellip; assuming you care about people actually seeing what you\u0026rsquo;ve made A good intro and title can make a world of difference to a viewer\u0026rsquo;s attention. This is the same idea as a narrative hook Visuals are worth a lot \u0026hellip; and animated visuals are worth even more If explaining something, show everything concretely as soon as possible, with demos Balance consumption with creation\nInspiration is incredibly valuable Despite everything, a good, actual text book (paper or screen) tends to provide more food for thought than any other medium Hello! "},{"id":38,"href":"/design/web/cost/","title":"Cost","section":"DESIGN","content":" Cost # A pretty big question you should ask right away is \u0026ldquo;How much does this cost?\u0026rdquo;, and you probably already know the answer.\nIt depends.\nFirst thing you should worry about is the cost of hosting.\nWhat Is Hosting? # If you want to, you can run a web server off of your home internet connection. This has problems though:\nIt means everyone will know your public IP and any attacks on your site will be attacks directly on your network This isn\u0026rsquo;t the end of the world, but it does mean you have to be reasonably smart and good about network security You can use something like Cloudflare to remedy this, but at that point, why? Most home internet connections in the US are asymmetric, with a lot more download speed than upload. If you get a small amount of traffic a day, this might be fine, but if you have a viral post it\u0026rsquo;s unlikely to be able to handle the traffic Most home internet providers charge for a static IP address (Often at about $5/mo) You can get around this with something like dyn-DNS, but that\u0026rsquo;s weird. Most home internet connections are less reliable. If uptime matters to you, it may not be the best call The hardware costs money. Even a Raspberry Pi isn\u0026rsquo;t free, and neither is the power to run it. Even a pi 3b+ will use ~$5 of electricity a year, and the cost of the pi is ~$40 not counting the power supply, case, SD card, etc. TL;DR: economies of scale will hit you here, it\u0026rsquo;s cheaper, safer, and typically better for users if you host with either a Virtual Private Server (VPS) or use a web hosting solution- either free or paid.\nIf you\u0026rsquo;re making a small-ish personal (read: non-commercial / advertising) site like this one, then the best bet IMHO is to use free hosting from GitHub Pages, GitLab Pages or with a free VPS, though there are cheap VPS options that may be less of a headache, see https://lowendbox.com for some. Depending on your needs, it\u0026rsquo;s totally within reason to get well under $20 a year.\nHOWEVER: If you\u0026rsquo;re following this guide for the sake of learning the technical side, it\u0026rsquo;s totally reasonable to want to setup your own web sever on your own hardware and network! I\u0026rsquo;m not trying to dissuade you from doing so, I just want to make sure nobody is doing it \u0026ldquo;Because it\u0026rsquo;s cheaper\u0026rdquo;, because it\u0026rsquo;s probably not.\nHi nerds!\nThere are some cool esoteric hosting options too!\n\u0026ldquo;tilde sites\u0026rdquo; are basically shared servers, check out tildeverse.org for a list of options. There is a bit of a community aspect to tilde sites though, and while you could setup a redirect URL, it\u0026rsquo;s normal that your page will be a sub page of whatever domain you end up using. Neocities (a modern take on GeoCities) Hosting via IPFS if you\u0026rsquo;re feeling like experimenting with the future Gopher or Gemini are cool if you\u0026rsquo;re nostalgic or minimal. Realize that some of these may limit your reach or impose bandwidth limits, though. You might also consider going REALLLY old school and running a BBS, probably with Mystic or Synchronet VPS? - A brief detour # Alright, so, what the heck is a VPS? As stated above, it\u0026rsquo;s a Virtual Private Server. This means you\u0026rsquo;re getting a Virtual machine (basically a fake computer running in software) that is acting as a tiny slice of a larger server (note that servers are just fancy computers) but because all the other users are on Virtual machines, it\u0026rsquo;s Private: even though you\u0026rsquo;re sharing a physical computer, you have no way of seeing anything about your neighbors, and they can\u0026rsquo;t see anything about you. Finally, it\u0026rsquo;s a Server, which means it\u0026rsquo;s purpose is to, well, serve something, in our case a website, and is probably running an operating system that is better suited to that - almost always Linux.\nWhat this means is you might need to know at least a tiny bit about Linux and using the command line to get up and running if you go this route, but it shouldn\u0026rsquo;t be all that much.\nIf you\u0026rsquo;re already a tech-head, there is an advantage to the VPS route in that it gives you more control. You might even be able to run more than one service from the single VPS: A web server, a game server, a torrent box, etc.\nFor the actual guide on making your own website, I\u0026rsquo;ll be going over all three options: Using GitHub Pages, using a VPS, and self-hosting, I\u0026rsquo;ll come back to that though, for now, what else costs money?\nThe domain name # Domain Name System, or DNS, is what makes it so you can go to (at the time of writing) to https://facebook.com instead of 157.240.2.35 - it\u0026rsquo;s the thing that prevents you from needing to memorize a ton of numbers. Now, there\u0026rsquo;s a whole ton of complexity I\u0026rsquo;m going to gloss over, but what you need to know for right now is you probably want a custom domain name for your site. I say probably because if you\u0026rsquo;re using something like GitHub Pages, you\u0026rsquo;ll be able to use https://yourwebsitename.github.io for free, and you\u0026rsquo;ll get similar names for free with some of the other options, but for something more custom like opguides.info, you\u0026rsquo;ll have to pay for it.\nHow do you do that and how much does it cost? # Well, the how to do is pretty simple to buy, a bit weird to use, but we\u0026rsquo;ll get to that point in a bit. To buy it, you\u0026rsquo;ll want to find a reputable domain marketplace - Namecheap and Google Domains are nice - and see what you can find. Note that some Top Level Domains are more expensive and have weird requirements,\nfor example,\npleaseend.us is a .us domain, so is supposed to be strictly be for use by US citizen or entities\nisholdinghands.gay is a .gay domain, so prohibits anti LGBTQ content (and 20% of all registration revenue gets donated to LGBTQ non-profit organizations)\ndomains with .app or .dev require an SSL certificate, .edu and .gov for their respective institutions, etc.\nBut, assuming you want to be a normie and use .com, .net, or .org, it depends on if someone is already using that name or squatting on it (in which case you\u0026rsquo;d have to buy it from them at increased cost), but if not it\u0026rsquo;s not bad, for example iwanttobuythisdomain.com is $12/yr from google domains, while something like permium.autos is $2,160/yr. Sometimes what domains cost though the roof can feel pretty arbitrary, so you\u0026rsquo;ll want to have more than one idea in mind\nA Detour into TLS # You\u0026rsquo;ve probably heard that you should try to trust websites starting with https:// more than those with just http://. This is a bit of a failing of security nerds to explain things well. In short, the \u0026ldquo;s\u0026rdquo; just means that:\nOther people on your network shouldn\u0026rsquo;t be able to eaves drop on what you\u0026rsquo;re doing on that website (though they could still snoop and see that you\u0026rsquo;re using that website) They can\u0026rsquo;t Man-In-The-Middle your connection to the website, meaning an attacker can\u0026rsquo;t change what you see on that page What it does not mean is that the site is any more trustworthy, an https:// site totally can still give you a virus or scam you or whatever. For something like OpGuides, I don\u0026rsquo;t think https:// is necessary. It does still make the site look more legit though and, thanks to Let\u0026rsquo;s Encrypt, is free. Let\u0026rsquo;s Encrypt is \u0026ldquo;A nonprofit Certificate Authority providing TLS certificates\u0026rdquo;, which they do for free. If you use something like GitHub Pages, they handle this behind the scenes for you. If you use a VPS you\u0026rsquo;ll have to set it up with https://certbot.eff.org\nOkay… so… how much then? # OpGuides costs me a little $20/yr for the domain name, and I host the site with GitHub Pages, which also provides SSL via Let\u0026rsquo;s Encrypt. Before I bought the domain I was using https://opinionatedguide.github.io which was free, and… that\u0026rsquo;s it. That\u0026rsquo;s the entire cost to me for this website, the under $20/yr for the domain. That cost gets entirely covered by generous supporters of the OpGuides project. However, if you\u0026rsquo;re running a commercial website (and so can\u0026rsquo;t use GitHub Pages), need to send lots of data (Videos, big downloads), or need deeper control of the server (PHP code, extra servers like games or torrenting) the cost will go up. As I stated at the top of the page, it\u0026rsquo;s a big \u0026lsquo;ol \u0026ldquo;it depends\u0026rdquo;\n"},{"id":39,"href":"/design/web/garden/","title":"Garden","section":"DESIGN","content":" Your Own Garden # I just said you\u0026rsquo;d need to learn a bunch to do this, so, why bother?\nPlatforms like Facebook, Tumblr, etc. - Social Media - don\u0026rsquo;t let you customize the look of your page\n… and they track you\n… and they make the experience bad for those without accounts\n… and they can limit your speech, ban your account, etc.\nSite builders (Squarespace, Wix, WordPress, etc.) tend to lead to cookie-cutter websites\n… and are (typically) more expensive\n… and have vendor lock in\n… and (typically) cost more\n* I will however concede that they\u0026rsquo;re nice if you want to have a store front! But, that\u0026rsquo;s just reasons to not use those things, why do you actually want to do this?\nIt\u0026rsquo;s fun! You get to fully decorate and design your own virtual space!\nIt\u0026rsquo;s fulfilling! You\u0026rsquo;re learning how to do something with the real, big-boy tools\nYou can do real good - like making an educational page\nIt\u0026rsquo;s yours\n… you can say what you, how you want- change every visual details, add animation, whatever\n… you don\u0026rsquo;t need to worry about your content disappearing or losing access\nThough I do still recommend promoting on big platforms: see POSSE It can be nice for organization, like I have for myself with OpGuides\nI wouldn\u0026rsquo;t use a website like this one as my only organizational tool though! Things like Masterplan, Notion, and Obsidian all do that a bit better. Code from Noah Blon "},{"id":40,"href":"/design/web/jack/","title":"Jack","section":"DESIGN","content":" Jack of All Trades # You probably noticed the gradient heading this section: that was my warning to you that you\u0026rsquo;re about to walk into something that requires an interesting mixture of design and engineering skills. Making a good website requires a fair understanding of computers, some basic programming skills, and a willingness to dive into some technical topics. There\u0026rsquo;s a good reason most blogging now happens on Medium or Tumblr and that social media has boomed: The barrier to entry is dramatically lower. There\u0026rsquo;s also good reasons to want to make your own website and have your own little digital garden.\nBefore diving into anything, I want to level with you, teaching web development is hard for two big reasons:\nThe scope can vary wildly: For a personal blog, you can probably get away with googling enough HTML and CSS snippets to scrape by, never writing any JavaScript.\nGoing up a step, if you want to make an interactive page or want to add some flair to your site, you\u0026rsquo;ll need some real understanding. But if you want to make full-blow interactive dynamic website, like YouTube or Facebook, that will require way more skill. If you\u0026rsquo;re managing user data, you\u0026rsquo;ll need to know about encryption and probably how to manage a database. If you\u0026rsquo;re making something that serves a lot of data you\u0026rsquo;ll need to worry about Content Distribution Networks (CDNs), if the site being down can make customers angry, you\u0026rsquo;ll have to worry about redundancy, backups, DDOS protection, etc. There\u0026rsquo;s a huge variety of hats that you need to wear if you want to single-handedly manage something with a lot of features, extra so if money is involved.\nThere\u0026rsquo;s just a lot of ground to cover: Multiple languages, how basic networking works, how to make something actually look good on the web, etc. Larger organizations manage these things with different teams of people who don\u0026rsquo;t worry all that much about how the layers above or below them work - designers don\u0026rsquo;t think about networking.\nSo, what will you need to know?\nThe Technical Stuff: # How to write HTML - EASY\noften you can actually write in Markdown which is trivial to use, and you\u0026rsquo;ll use a tool which builds the HTML from that.\nMarkdown\n1 2 3 4 ### Heading text **bold text** more text * list item 1 * list item 2 HTML\n1 2 3 4 5 6 \u0026lt;h3\u0026gt;Heading\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;text \u0026lt;b\u0026gt;bold text\u0026lt;/b\u0026gt; more text \u0026lt;/p\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt; list item 1 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; list item 2 \u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; Rendered\nHeading text bold text more text list item 1 list item 2 How to write CSS - MODERATE\nCSS is what stylize your website. CSS is what defines the colors, font sizes, arrangement of content, etc. but, strangely, now sometimes does animations and other complex things. Sometimes CSS can be pretty hard to work with, with things sometimes interacting in weird ways. Worse, more and more (legitimately useful) features have been added to CSS over the years, some of which are now the right way to do things, but are still hard to learn (… fucking flexbox) It\u0026rsquo;s extraordinary difficult to make a website not break when viewed on both a phone and a normal display. You might want to use frameworks here, like https://tailwindcss.com, https://www.bonsaicss.com, https://getbootstrap.com, https://picturepan2.github.io/spectre/index.html … and you might want to use something that added extra features to CSS then gets turned back into CSS, the most common of these is SCSS, but https://lesscss.org is neat too. Here\u0026rsquo;s a neat example of using CSS to make some nice looking background stars. This example is more complex than anything you\u0026rsquo;d do as a beginner.\nSee the Pen Parallax Star background in CSS by Saransh Sinha (@saransh) on CodePen. Code by Saransh Sinha How to write JavaScript - IT DEPENDS\nJS is weird in that you will sometimes want to use it plain, and work with the language as is but often you\u0026rsquo;ll end up using frameworks (such as React, Angular, Vue) and libraries (Like jQuery, three.js, d3.js) The complexity of the thing you want to do and the libraries you\u0026rsquo;re using will make a big difference here, something like this text reveal effect is simple (Click Rerun in the bottom right corner to see the animation again) See the Pen Text Reveal Animation by Ali Ammar (@AliAmmarDev) on CodePen. Code by Ali Ammar But something like this is a lot harder\nSee the Pen Chaos Pendulum by Yannick Brandt (@Coderesting) on CodePen. Code by Yannick Brandt How to setup a domain\nYou\u0026rsquo;ll probably want to buy a domain name \u0026ldquo;mycoolsitename.com\u0026rdquo; or whatever, and you\u0026rsquo;ll need to know how to buy that and actually use it … and probably make it HTTPS How to setup hosting\nGitHub Pages, AWS, a VPS, whatever Some general CS shit\nGit Licenses "},{"id":41,"href":"/design/web/langs/","title":"Langs","section":"DESIGN","content":" HTML, (S)CSS, JS… WUT? # The rise of WASM # PHP needs to die. # "},{"id":42,"href":"/design/web/langs/css/","title":"Css","section":"Langs","content":" CSS # Let me start by saying that Cascading Style Sheets - CSS - is not a hard language to write. The problem is not the language(1), but with how humans don\u0026rsquo;t think about style and art in a linear way and dealing with the complexities of different devices.\nHow we think about style # Look around this website, there are things that are stylistically cohesive - the color theme, the way I indicate that something is a local link by putting it in a button with a color that matches where it goes. That makes sense to the part of our brains that wants to see the full overview and look at the completed picture. We like to think of art from the macroscopic scale.\nIn the vast majority of contexts, this line of thought works. Think about digital art - you put pixels on layers and stack those layers. The one thing you have to worry about is color on each pixel. Sure, if you\u0026rsquo;re stacking layers with weirder blend modes it can start to get more complicated but it\u0026rsquo;s almost always easy to think about what the change you\u0026rsquo;re making will look like before you make it. There is a convenient 1:1 relationship between you and the content on the screen.\nWe do not want to have to think about styling every. single. element. on our web page. You would not want to have to set the background color, font sizes, line height, etc. etc. each time you made a new element. You need to be able to set defaults for each type of thing on the page.\nAt the same time, it\u0026rsquo;s necessary to think about individual elements sometimes and give special attention to one thing on a page. For example on this website I have tables where things need color applied to make them easier to read.\nFor example, over on the \u0026ldquo;The Cloud\u0026rdquo; page I have this table:\nTraditional: Infrastructure as a Service Platform as a Service Software as a Service Applications Applications Applications Applications Data Data Data Data Runtime Runtime Runtime Runtime Middleware Middleware Middleware Middleware OS OS OS OS Virtualization Virtualization Virtualization Virtualization Servers Servers Servers Servers Storage Storage Storage Storage Networking Networking Networking Networking I wouldn\u0026rsquo;t want EVERY table to have that stair-cased highlight to it. It makes sense where used, but that alteration extends the style applied to all tables on the website. It doesn\u0026rsquo;t replace it.\nThis is the first problem: We have to think about microscopic changes as how they extend the behavior of the macroscopic. In most digital art, we can just zoom in, change a some pixels, and know that the sum of these small changes will result in a better picture as a whole - yes, even in normal art you\u0026rsquo;d have to keep the entire composition in mind - but In CSS, you need to think in both directions and be sure you understand what you want to applied on a macroscopic scale and what you want to be microscopic, and decide what you want to be \u0026ldquo;default\u0026rdquo;.\nFor example, lets say you have a bunch of images on your website,\nand you decide they\u0026rsquo;d all look better with rounded corners, so you make a CSS rule to apply rounded corners to ALL images on the site:\n1 2 3 img{ border-radius: 1rem; } That looks good, does what we want, great, right…\n… Oops, we broke the logo.\nUnintended consequences are the bane of your existence when working on CSS because you want to (and should) apply style to the most generic class that it applies to, but it\u0026rsquo;s easy to go one step too far and break other things. There are two ways to address this problem:\nFrom the microscopic side, we can assign a class to the logo image:\n1 \u0026lt;img class=\u0026#34;logo\u0026#34; src=\u0026#34;mylogo.svg\u0026#34;\u0026gt; and it should specify, in it\u0026rsquo;s style, that it should have no border radius:\n1 2 3 .logo { border-radius: 0rem; } This is probably the wrong way to do this. Unless you know that the logo is going to be the one exception to this rounded corner rule, you\u0026rsquo;re going to be playing Whac-A-Mole to un-round corners on images from here on out if you do this.\nThe better solution, in most cases, is just to make a new class for rounded corners:\n1 2 3 .rounded { border-radius: 1rem; } and then when you insert the images you set them as a member of the rounded class:\n1 \u0026lt;img class=\u0026#34;rounded\u0026#34; src=\u0026#34;meme.jpeg\u0026#34;\u0026gt; Now, if we did decide to round the logo we could add the rounded class on, (Yes, you can use more than one class):\n1 \u0026lt;img class=\u0026#34;logo rounded\u0026#34; src=\u0026#34;mylogo.svg\u0026#34;\u0026gt; but if we just left the logo alone and didn\u0026rsquo;t specify a class at all, it should be fine, because the defaults we apply to all img elements shouldn\u0026rsquo;t break it.\nIf you have something like our situation here, where you have two things which derive from the same class - here, \u0026ldquo;rounded images\u0026rdquo; and \u0026ldquo;logo images\u0026rdquo; are both of type img, you should never make a change to the parent of both (img in this case) for one child if it will require you undo that change in another - just make the change where it belongs in the first place!\nThe tough part about that is realizing when you need to make a new class and what those classes are. Above I made a rounded class, but that may not be sufficient. Maybe you need variants for setting the amounts of rounding, ranging from subtle to full-on-circle. What would you call those classes? You also don\u0026rsquo;t want to go to nuts with different classes, otherwise each element would have a whole pile of classes assigned to it. There is art in organization and picking the right amount of abstraction here. That\u0026rsquo;s an art that\u0026rsquo;s much harder to teach.\nWhat can CSS do? # (2) That said, you should probably not do to crazy of shit. Not all browsers behave the same or support everything. While nearly everything should work, you will find weird edge cases. For example, this website used to have a nice gradient for the background, but it had awful banding on Firefox and was unusable on the default browser on Samsung phones.\nIn general though, if you have an idea for a simple animation in mind, you can probably make it work with just CSS… ish. The limitation is if you want to actually change the content, that\u0026rsquo;s a job better suited to JavaScript, which we\u0026rsquo;ll look at next. Here, as a teaser:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function getRandomUnicodeLetter() { // Generate a random number between 65 (A) and 122 (z) const randomNumber = Math.floor(Math.random() * (122 - 65 + 1)) + 65; // Convert the number to a Unicode character and return it return String.fromCharCode(randomNumber); } function updateUnicodeLetters() { // Generate 7 random Unicode letters const letters = []; for (let i = 0; i \u0026lt; 7; i++) { letters.push(getRandomUnicodeLetter()); } // Update the text content of the element with the ID \u0026#34;unicode-letters\u0026#34; document.getElementById(\u0026#39;unicode-letters\u0026#39;).textContent = letters.join(\u0026#39;\u0026#39;); } setInterval(updateUnicodeLetters, 70); // Update the letters every 70 milliseconds \u0026lt;p\u0026gt; hello \u0026lt;span id=\u0026#34;unicode-letters\u0026#34; class=\u0026#34;conlang\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;, how are you?\u0026lt;/p\u0026gt; hello , how are you?\nOkay, so how do I actually learn it? # Same way as everything else: RTFM, experiment, and get your hands dirty. You\u0026rsquo;ve seen enough examples on this page that you\u0026rsquo;ve probably gotten a grasp for some of the syntax.\nTo start, you\u0026rsquo;ll just need a basic HTML page with some elements on it, so make a file like mytest.html and fill it with some content:\n1 2 3 4 5 6 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;mystyle.css\u0026#34;\u0026gt; \u0026lt;html\u0026gt; \u0026lt;h1\u0026gt;Title\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;this is \u0026lt;b\u0026gt;HTML\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; then, in the same folder, make a mystyle.css file:\n1 2 3 h1 { color: green; } and open mytest.html with your web browser and start experimenting - just refresh the page each time you change something.\nYou may want to follow along with some tutorials: https://web.dev/learn/css/ and https://www.w3schools.com/css/ are both decent starting places.\nAs some homework, I\u0026rsquo;d recommend trying to get\ncolumns of text to work, as it it\u0026rsquo;s a good test of your ability to handle padding, grids, etc. Plus, you should experiment with how having a smaller browser window breaks this. To work smarter not harder, you may want to use the browser\u0026rsquo;s development window and try changing things live - nothing you do there will save after a refresh - just press F12, (You may need to press fn + F12 depending on your keyboard) or right click on the page and click \u0026ldquo;Inspect Element\u0026rdquo; to look at the HTML and CSS for a specific item on the page. On the Styles tab you should be able to change things and see what they do live. If you want, you can ever try it on this page!\nInline styles # TODO why you shouldn\u0026rsquo;t use them, but why you might want to anyway.\nUnits. # px vs vh/vw vs rem vs em vs %\nFurther Reading # https://css-tricks.com/css-is-awesome/\nhttps://css-tricks.com/why-is-css-frustrating/\nhttps://www.thinkful.com/blog/top-five-css-mistakes/\nhttps://betterprogramming.pub/10-common-css-mistakes-that-web-developers-often-make-2423d052189b\nIf you have literal hours to kill, start going though everything on https://css-tricks.com/almanac/\nhttps://fffuel.co/css-selectors/\nMostly. If you're doing something complex, such as working with animations, the syntax can get a bit weird. .stage { height: 100px; width: 100%; margin: auto; position: relative; top: 0; right: 0; bottom: 0; left: 0; perspective: 9999px; transform-style: preserve-3d; } .animlayer { width: 100%; height: 100%; position: absolute; transform-style: preserve-3d; animation: effect 5s infinite alternate ease-in-out -7.5s; animation-fill-mode: forwards; transform: rotateY(40deg) rotateX(33deg) translateZ(0); } .animlayer:after { font: 50px/0.65 \"Roboto\", \"Trebuchet MS\", sans-serif; content: \"some pretty crazy shit\"; text-align: center; height: 100%; width: 100%; position: absolute; } .animlayer:nth-child(1):after { transform: translateZ(0px); } .animlayer:nth-child(2):after { transform: translateZ(-1.5px); } .animlayer:first-child:after { color: #fff; text-shadow: none; } @keyframes effect { 100% { transform: rotateY(-30deg) rotateX(-43deg); } } "},{"id":43,"href":"/design/web/langs/css_new/","title":"Css New","section":"Langs","content":" Draft: CSS Features That Aren\u0026rsquo;t Widely Supported But Should Be # element() - https://www.stefanjudis.com/a-firefox-only-minimap/\nIt\u0026rsquo;s highly unlikely chrome will ever support these has() - Coming Soon™ to a browser near you. (It\u0026rsquo;s waiting on Firefox, but is already there behind a feature flag)\n@scope - Still quite new, but looks promising.\ntext-wrap: balance - seems to be polyfill-able, https://github.com/adobe/balance-text but should get widespread support directly soon-ish.\nThis page will also check if the polyfill works. It seems to just fine. I don\u0026rsquo;t want to condone using it yet though, as the polyfill shouldn\u0026rsquo;t be necessary for long.\nThis heading will not have a weirdly long top line Compared to,\nThis heading will not have a weirdly long top line # @when / @else - nobody supports this at all at time of writing.\nlch() \u0026amp; lab() - totally supported on desktop, but GOD FUCKING DAMN SAMSUNG WHY THE FUCK ARE YOU SHIPPING YOUR OWN PIECE OF SHIT BROWSER. I\u0026rsquo;m debating putting something on this site just making a modal saying use a different browser for your own good. If I can\nBoth of the following should be a similar (but not the same) light blue.\nLCH TEST\nLAB TEST\nRelated, color-mix already has decent support Initial Letter - It\u0026rsquo;s weird that this isn\u0026rsquo;t already broadly supported, given almost everything already has it behind a flag.\nThe \u0026lsquo;W\u0026rsquo; in the following lyrics should be large and have a backing shadow.\nWe're no strangers to loveYou know the rules and so do I\nA full commitment's what I'm thinking ofYou wouldn't get this from any other guyI just wanna tell you how I'm feelingGotta make you understandNever gonna give you upNever gonna let you down\n@scroll-timeline - It\u0026rsquo;s still behind flags, but does appear to be at least actively worked on.\nmasonry flows, grids, and columns are all supported in Firefox but no other browsers at the time of writing. This one looks quite nice if it works in your browser.\nFirefox for the longest time, and still probably now, has had gradients without dithering, so they have obvious banding.\na You can work around this by using an image, but that\u0026rsquo;s annoying.\n"},{"id":44,"href":"/design/web/langs/html/","title":"HTML","section":"Langs","content":" HTML # HyperText Markup Language is the one thing on this list I suspect everyone reading this page has at least a smidgen of familiarity with.\nTo write HTML you\u0026rsquo;ll be working with a bunch of HTML tags. Tags are these point-bracketed enclosed words that mean something special to the browser, let\u0026rsquo;s actually make a HTML file right now to get started. Go ahead and open any plain text editor (1), and make a new file and name it whatever you want, just make sure to end it in .html\nnow, go ahead and type this into that document,\n1 2 3 4 5 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;h1\u0026gt;Title\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;this is \u0026lt;b\u0026gt;HTML\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; and then, hopefully, you should be able to double click that file and it will open into your browser, and it should be pretty basic black text on a white background, with a big heading and the term HTML in bold, and if you look at the code you wrote, that should make sense. The strange bits to you are probably the \u0026lt;!DOCTYPE html\u0026gt; and \u0026lt;html\u0026gt; bits, but those are pretty much just standard stuff that just defines the start and end of the page.\nWhat else can HTML do? # It\u0026rsquo;s pretty much more of the same from here. Just a bunch more tags that you should look into and understand how to use. There\u0026rsquo;s all the \u0026lt;h1\u0026gt; though \u0026lt;h6\u0026gt; variants for headings of decreasing size, \u0026lt;a\u0026gt; for links, \u0026lt;ol\u0026gt; and \u0026lt;ul\u0026gt; for ordered and unordered lists, which then contain list items with \u0026lt;li\u0026gt;, and so on. It\u0026rsquo;s reasonable to just go through every tag listed on W3 School\u0026rsquo;s HTML Element Reference Page, or follow their HTML Tutorial - though you might want to read through this page first.\nThere\u0026rsquo;s not much complexity in using plain HTML, it\u0026rsquo;s how it interacts with CSS and JS that make it interesting. Still, don\u0026rsquo;t underestimate how much you can do, basic HTML, with just \u0026lt;img\u0026gt; tags for images, \u0026lt;a\u0026gt; for links and so on can still get you quite far. HTML is the foundation of your website(2), so give it thought as you write it. Generally, I think you should try to make what you have in mind in HTML as much as you can before resorting to adding CSS or JS, but also don\u0026rsquo;t try to get HTML to do things it\u0026rsquo;s not designed for if CSS or JS is a better fit. Hopefully I can give you a better idea of what should to use when in the coming chapters, though to some extent this just requires experience. Still, it\u0026rsquo;s good to know where doing something hack-y is okay and where it\u0026rsquo;s not.\nA good example of this is tables.\nA lot of web dev noobs (myself included) will try to use tables for things that probably shouldn\u0026rsquo;t be in basic tables, and instead need something more custom and responsive. If you try to put big pictures and lots of text in a table, you\u0026rsquo;re probably doing something wrong, they\u0026rsquo;re better treated as basic spreadsheet like elements.\nMeanwhile, doing something hacky like using a lot of \u0026ampnbsp; tags in your html to move \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; text (like done here, before the word \"text\"), while hacky, is still semi-reasonable, and part of how I've gotten the chapter numbers to align in the left side bar Okay, so, then, how should you learn HTML? I think it\u0026rsquo;s worth asking how much you need to know in the first place. While you could write your entire website in raw HTML, it\u0026rsquo;s a massive headache, and probably not necessary. There\u0026rsquo;s a good chance you\u0026rsquo;ll be using a tool of some sort that lets you write in something a bit more user-friendly and converts it to HTML in the end.\nFor OpGuides, that tool is Hugo and the format I write in is Markdown. Both of these are pretty common.\nOn occasion, you\u0026rsquo;ll need to actually dive in and do something more manually. This might be putting in complex tables, inserting pre-formatted text (See the ASCII Art below), or, if the tool your using doesn\u0026rsquo;t make it easy, inserting in an audio or video clip, etc.\nBecause of this, you\u0026rsquo;ll still probably want to know some of the common HTML stuff and have enough familiarity to understand what you\u0026rsquo;re looking at when looking things up for these rare uses.\nI have no idea why anyone would ever want a table formatted like this but with HTML it is a thing you can do I made the table using https://www.tablesgenerator.com/html_tables as it makes doing things like this much easier ...... ........ . ...',,,'.. ....:odl:;.. ....;oxxxl:;... ... .. .. .. ...... . ....'cdxxddl:;'........... . .....','. .;l,,oxxdlccc::;,,'....... .. ........',,. ..'oxoddlcc::;::llcc;............ ..,'....';;,,'. ....,,..,cddl:::::;,;cooxo,..............:o;...,clc:;.. ....;dxc;ldxoc:::;;,,;;:cdx:..............'c:'';cc;;:,. ...'o00xoxxxo;,,,''.',,,,;:'................'',:;,,;:. ...,,,o0K0xxxxxc'.....''''''''.',,'...............'.';c;. . . ..'',,,lOXXOdxxxdc..',;:::::::;;,,,,,,,',''''.'''.....':c,. ..''',,';dKNKd:oxdl;,;ccccccccc:;'..',,,;:::;;;;;,;;,'...;:' . ...,;:::;,:xKNKd;:c:clllllllcccc;'.....,;ccccccccc:,,,,,'.'c:. ..,;:::;,;lk0K0x;.':llooooool:;,,;::;'.';llolccccc;'......:l,. ..',;::cc:,cxO0Oo,':ccccccllc;;;clool:'.',clllccc:;'......',,. . ...';ccccc;',cool,.;ccccccc:,':xkkkxoc,.,;';ccc:;:;,.......''.. ..';ccccc:,''',,'..,:cc::c;''cOK00Odc,.',,.':cc;,,,'...'....'.. ..,;:;;::;,'.......';;;;;,.'l0XXXKOkxoll:,..:c:,''.....'....... .'''..',,,'........''''''..ckKXNNNXX0kdol:'';:,.......,;'....... .........'..........'......,coxO0Okoc:;;;,''..........,:c;...''.. ...........'',:c,........',:lloo:,,;;:ldd,..... .......';'...,;'.. ...........,coodl'......';oOKKK0Okxoolcox:.....';;,...:c,....';'.. ...........,cooddl,...'''lk0XNWWNNNKOkxxdl;',:llllc:,';c;,.':c:'.. ...........';oddolc;'''',cdx0XNNWWWWNNNXK0koloddddolc,';ll;,;'... . ..........,cxkkdoc:::;,':odx0XNNXNNXXXKKKKK0OOOOkxdlc:,;:;c:. .... . .....,'..':oxkdlc::llccoxOOKKxoodkO0KKKKKK000OOkxdl;'...cd;. .;x00kc. .'..','..';lool:;:lodxxO0KK0o,.'lk0KXNXKKK0Oxol:;'.. ..lk:. .lXWWNWXd. ....','..',:cl:;;:ldkO0KKKKK0kl:ok0XNNNXKK0Odl'.... .,c' .cXWWWWNWNk;. .....''...',:c::;;:okO0KKKKKK0xllx0KKXKKK00kxl,.',,'.....;. . .kWNWWWWNNWKl. ........'';::,;:coxO000KK00Odook0KK000OOxdo:'..''...cd; . :KWNNWWNNWNWNk,. ....',;;;;;;;,,,,;clodxxkOkkkolokOkkkkxolcc,. ...,oOOc. . . .dNNNNNNNNNWNNNO;. ....';:cll:::;,;::;;;;::ccodxxxlc:coddoccc:'. ..;x0O0d. . . 'OWNNNXXNNNNNWWNO:. ..''..,:oddololcxOOdc:,,,''',,,;cl:ckkl;,,,,....,x0000O; . :KNNNXNXKKXNNNNNKkc'.'''..,:ldkkkxddOXX0kdlc:;,,''....'l0kc,,;:::,.,xK00O0Oc. .lKNNNXKKKKKXNNKko:,'....'',:ldxOOOxxOKXNX0kxdoc:::;,..'oo;..,:lol:cdkOOkOOOl. . .dKKXXXKKKXNNNNNKOdc;''...,;:coxOO0kxk0XNNNXXKOxoccc:;,,;....,cddclxdxOOOO00k,. . 'kK0OO000KXNNNNNWWNX0kl,.'',:ldO0000Oxk0XNNNWWNXOdllcc:;'..',',;;:ldkO00OOOOOd' ;OK0OOO0000KKKNWWWWNXK0d:;;:cok0KKK00kxdd0NNWWWNNKkdlc::;,,,,;;;;:cokOOOOOkkkOl. .:0K0OOOOO0000KKNWWWNNXOdlccloxO0KKKK0OkdclxKXNNNWWNKOdll:;;;;:codkkkxxkkkkOkk0O; .c00OOOkOOOOOOK0KNNNNN0occclxkO0000000Okkdlclox0XNNNNX0OxolccccloxO00kdodxkOOkO0d. . . . .l0000OxdxkkxkOOkOKXXOdlodxkOOOO0Okxddxkkxoc::coOXNNNNXKOOxolcllok00kc;codxxxxkOOc. . .oOOO00OxoddooooooxkkxoodxkOO0OOOxdooooolc:::::cx0KXXXXK00Oxoolclx0kc,,coddddddxOOl. ,xOkkk00kxocccccoxkkkkkxxdooooodddoolcc:;,,,'',:cdxO0000000kxoolodxl;,;:lodxxdoooxx;. ,kOOkkkOOko::coxkOOOOOOOkxolc:;;;:lcc:;,,,,,''''':ldxkO00OOkxoooollcc:;;:loxxdolloxo. . . 'x00Okkkkdc:ldxO000K0OOOkoc;;;,,,,;;;::::;,''.'',:ccoddddddoolllol:;:::;,;cdddolcoxkl. . . 'd00OOOOdc:loxO00KKK000Oxoc;,,,,,,,,,;;;:;'.',;codolc::ccc:c::coooc;:clol;;lollccldkk:.. .oO0000koclloxO0KKK000Okdoc;,,,,,,,,,,,,;,.':lodxkkkxolcc::cccclool;:cokOkc;::::cllodo:... .:k00K0Oo::coxO0KK0OOOOxdlc:;,,,,,,,,,,,;;,:odxO000O00OOkxdollllloc;:dk000Od:,;;;,''';::,. 'o0KKK0o;;:ldkO0OOkkdlcc:::;,,,,,,,,;:cooloxxOXNNNXXXXXKKK0Oxocc;;;ck0KKKK0kl,.... ..';:'. .,d0KK0xc:,;lxkkdol;'..''',,,,'',,,;:cloddxkOKNWWWWWWWWNNNNXK0Oxdolclk0KKKK0kc. .. .';;. ,kKKK0xc,.',cl:,,'.......';;,,,,,;ccloodxk0XWNWWWWWWWWWWNWNXXK0kd:'cO0000OOx,. ...,;'. .'coddkxo:'.';:;,,........,;'';:;:clodxkkkkKNWWWWWWWWWWWWNNNXKK0kl;cxO0OOkkkc... ...',,.. ....,:c;,..,,,'.........;,.'::codxkO00xodOXNNWWWWWWWWNNNXKKKK0kdodkOO0OOOd,.....','.. . .......','......''',,''';codkO0KKOkdcoOXNWWWWNWWNNNXKKKK0OkdoxOOOOOOo'......... ............',,,,,,,,;cdk000000ko::lx0KKXXXKKK0OOOOOkkdodkxxxxd:....... .........''''''''',,;coooolc:'...''';:;:lodddddooolllollc:'... ....................... . ...'.........''''.... . ..... . .. ........ ... Character owned by me, art is by Siplick, but ran through an ASCII art tool - note, this is text, not an image! And, yeah, I just had to write some HTML by hand to show those, but the majority of this page is still written in Markdown so that I don\u0026rsquo;t have to write every \u0026lt;p\u0026gt; and line break and what not. See the LaTeX and Markdown page for a quick overview (feel free to skip the \\(\\LaTeX\\) Section)\nAlso, if you dare to hit the Edit this page link on this page or any other on the site, you may see that there\u0026rsquo;s actually a third thing mixed in with the Markdown and HTML (well, like, 5th thing if you consider the occasional inline CSS and JS, but I digress) and that\u0026rsquo;s the weird tags that look like {{\u0026lt; attribution \u0026gt;}} or {{\u0026lt; columns \u0026gt;}} or the like, these are special blocks that work with Hugo, the tool I use to make OpGuides, and they basically just make it easy to reuse snippets of HTML. There\u0026rsquo;s a good chance that whatever tools you use to make your website will offer something similar, as writing HTML directly can get quite cumbersome if you\u0026rsquo;re repeating the same thing over and over.\nNote, this means NOT Microsoft Word, but Notepad will work. If you want, now is a good time to grab https://code.visualstudio.com In some cases a website will have little to no html but still be quite complex, but those tend to start going into web app territory, like https://squoosh.app where you can press f12→Elements and see there's not much there, because almost everything displayed uses JavaScript. There's nothing wrong with doing webdev this way, but it's more advanced! For the vast majority of websites, the HTML is the foundation. "},{"id":45,"href":"/design/web/langs/js/","title":"Js","section":"Langs","content":" JS # JavaScript is hard to talk about. Fundamentally, it\u0026rsquo;s a language for adding interactive content to the web.\nWant to make a button that increments a counter?\nClick me\n1 2 3 4 5 6 7 8 9 10 // Set the initial value of the counter to 0 let counter = 0; // Get a reference to the button element const button = document.getElementById(\u0026#39;countButton\u0026#39;); // Add a click event listener to the button button.addEventListener(\u0026#39;click\u0026#39;, function() { // Increment the counter and update the text of the button counter++; button.textContent = `Clicked ${counter} times`; }); This code, even if you\u0026rsquo;ve never read code before, should make sense.\nThen why is JS hard to talk about?\nFrameworks \u0026amp; Libraries # JavaScript is hard to talk about - hard to google questions for - because it\u0026rsquo;s so infrequently used without extra spice on top, and there are a vast number of different frameworks and libraries you\u0026rsquo;ll see used. React, Vue, Angular; TypeScript, jQuery, etc.\nThis tends to be a problem when looking up how do something because someone will inevitably provide an answer that depends on using one of them. My advice? If you even have an inkling that it\u0026rsquo;s using a library, run away - at least at first. At some point you may come to realize you\u0026rsquo;d benefit from using one of the big libraries/frameworks or a collection of specific ones like p5.js or d3.js for animations or showing data, respectively. But you\u0026rsquo;ll know when you get there. At first, just try to ignore it and write plain old vanilla JavaScript.\nLearning JS # Well, to start with you can follow the Programming Into section on this website. This uses a mix of Python and C, which, you\u0026rsquo;ll note, are not JavaScript. Fortunately, if you can program in Python and C, you can program in anything … sort of. JS is weird because it ties in to the HTML and CSS on the page, the whole point is that it can tie in with the page elements. You can change, add, or delete elements and their style with JavaScript with code.\nLet me say this again. You can change, add, or delete elements and their style with JavaScript with code. This is super fucking cool. It makes JS (and otherwise kinda shit language) awesome.\nIf you\u0026rsquo;ve already read though the programming chapters here, you should be able to plow though https://www.w3schools.com/js/ . To actually have some fun with JS, you may need to add some libraries, again, I do recommend checking out the p5 and d3\nhttps://tonejs.github.io\nhttps://pixijs.com\nhttps://sarcadass.github.io/granim.js/examples.html\nhttps://animejs.com\nhttps://underscorejs.org/#first\nhttps://threejs.org\nhttp://paperjs.org/examples/\nhttps://d3js.org\nhttps://p5js.org\nhttp://pablojs.com\nhttps://underscorejs.org\nhttps://stimulus.hotwired.dev\nhttps://maker.js.org\nhttps://github.com/mikeflynn/egg.js\nNote, this means NOT Microsoft Word, but Notepad will work. If you want, now is a good time to grab https://code.visualstudio.com In some cases a website will have little to no html but still be quite complex, but those tend to start going into web app territory, like https://squoosh.app where you can press f12→Elements and see there's not much there, because almost everything displayed uses JavaScript. There's nothing wrong with doing webdev this way, but it's more advanced! For the vast majority of websites, the HTML is the foundation. https://github.com/karpathy/convnetjs\nhttps://github.com/VincentTV/before-after-slider\n"},{"id":46,"href":"/design/web/resources/","title":"Resources","section":"DESIGN","content":" Other Resources # Blog Posts # Only 90s Web Developers Remember This\nhttps://www.learnui.design/tools/gradient-generator.html\nFonts # https://velvetyne.fr https://www.design-research.be/by-womxn/ https://usemodify.com "},{"id":47,"href":"/design/web/setup/","title":"Setup","section":"DESIGN","content":" Setting up everything you need to make a website # [TODO] - include instructions for GitHub pages, a VPS, and self-hosted but assume a Hugo site for all three. There\u0026rsquo;s gotta be limits in the complexity somewhere, and I draw the line at setting up everything for decent JS web app dev / PHP shit, cloud/AWS, etc. though I still want to link to external resources for those things. Also, this probably needs to be written for win/mac/lin, which means there will have to be a ton of permutations of getting things setup depending on hosting solution and OS. "},{"id":48,"href":"/design/web/static/","title":"Static","section":"DESIGN","content":" Static or Dynamic? # The \u0026lsquo;Weight\u0026rsquo; of your website # "},{"id":49,"href":"/design/web/thinkingweb/","title":"Thinkingweb","section":"DESIGN","content":" Thinking Web # [TODO] Present content in novel ways. Text as a last resort\n[TODO] Because of browser differences, screen size, Fonts, JS support, etc. you should check in other resolutions and browsers periodically\nFAQs: why we don’t have them (gds.blog.gov.uk)\nEvery pricing page should have GIFs (Tony Dinh)\nwhy Japan\u0026rsquo;s internet is weirdly designed (YouTube, Answer in Progress)\nNoScript fallback\nSome Beautiful Websites For Inspiration: # https://oxide.computer "},{"id":50,"href":"/design/web/tools/","title":"Tools","section":"DESIGN","content":" Web Development Tools # Code generation, libraries, etc.\nHTML Helpers # HTML Table Generator\n"},{"id":51,"href":"/engineering/a3-bom/","title":"A3 Bom","section":"Engineering","content":" Appendix C - BOM # As the guide isn\u0026rsquo;t anywhere near a usable state yet, this page should be ignored for the most part. OpGuides is free. Unfortunately all the tools and programs you\u0026rsquo;ll need to follow along aren\u0026rsquo;t necessarily. While you probably could do everything in this guide without getting the things in this Bill OF Materials (BOM) it will massively help to have it.\nI\u0026rsquo;ll do my best to keep the cost as low as possible though. If you need help confirming something in your cart is correct just hit me up.\nItem Price/item (approx, in USD) Quantity Backup Hard Drive 40/Tb optional Thumb Drive 8 1 Arduino nano 5/board 2 ESP8266 5/board 2 STM32F103C8T6 w/ programmer 8 Optional ICE-Breaker FPGA 80 Optional 74-series logic IC\u0026rsquo;s 25 Optional Assorted Resistors 10 Assorted Potentiometers 5 Assorted Capacitors (Ceramic) 10 Assorted Capacitors (Electrolytic) 10 Assorted Inductors 5 Assorted transistors 8 Assorted Diodes 10 Op-Amps (UA741) 5/10 Assorted LEDs 5 Assorted Crystal osc 555 Timers 4/10 Hook up wire jumper wire Solid Core wire Optional Breadboard 10/3pcs, don\u0026rsquo;t cheap out. Cheap ones super suck. These are decent. 3 should be plenty, but more if you\u0026rsquo;ll have more in-progress projects Proto PCB 12 ish, but varries Something like this, which has pre connected lanes like a normal breadboard is nice ╮(─▽─)╭ depends on how many projects you want to keep Buttons 7/50pcs ~32 (They break easily) DIP Switches 8/5pcs ish, get 4 or 8 switch blocks or a variety pack at least 32 total switches 7-segment display 1.5/IC For learning, get the raw pins, not the multi modules. Optional tiny OLED display 6 ish, varries by size and pixel count. Optional Accelerometer 4 ish, varries by accuracy and other features Optional Servo Depends on size and what you want to do with it. Just to learn, a 2 \u0026lsquo;micro servo\u0026rsquo; is fine. Optional Relay board 6 ish for a 4 relay traditional relay board not a significant difference to go for Solid State relays, which are much quieter and faster switching Optional Lab Power Supply 35 for a shit, 300ish for something multi channel and nice As with the OScope, it\u0026rsquo;s up to you on the investment 1, 2 optional Soldering Iron (TS100) 75 (full kit) Solder 9/spool. Varies in quality, you get what you pay for. You\u0026rsquo;ll want to make sure it\u0026rsquo;s pretty thin. Flux 10 or so. Varies in quality, you get what you pay for. Osciliscope 30 for a shit, 350 for a good one, not really an in between :( Optional-ish Multimeter 35 Logic Analyzer 10 for a cheap Saleae logic clone, ~65 for a good one obviously you can spend as much as you want for more channels or faster reads 1 Software Defined Radio 150ish for a HackRF or Lime Mini optional Proxmark3 very optional TOTAL BASE ;OPTINONAL Also we\u0026rsquo;re going to be building a little server, for this you\u0026rsquo;ll want\nItem Price Quantity ASRock J3455-ITX 75 1 ITX, SFX case (APEX MI Series MI-008, with power supply) 50 DD3L 40/8Gb 1 1Tb 2.5\u0026quot; hard drive (Redundant Storage) 55/dive 2 120Gb SSD (OS) 20 Extra Network interface card 25 Optional Total (Barebones) Total (Optional) OR\nYou can find a used Dell Poweredge r610 or poweredge 1950. Many of these will come with out drives, but this option is probably cheaper than the above for better specs. However; these servers are LOUD, loud enough to not be comfortable in the same room and absolutely drink power. As mentioned in the server section, the hardware you use really doesn\u0026rsquo;t matter, you\u0026rsquo;ll just want at least two hard drives, an OS drive, and multiple network interfaces are encouraged. These things can all be added to just about any desktop though, so going to electronics thrift stores or auctions and finding a desktop works too.\nGetting things for cheap # salvage, auctions\n"},{"id":52,"href":"/engineering/circuits/circuits1/","title":"Circuits1","section":"Engineering","content":" Chapter 23 - e-e-e-e-e-e-e-e-e-e-e- Electrons work for you # Further Reading # [TODO]\nhttps://learn.sparkfun.com/tutorials/voltage-current-resistance-and-ohms-law/voltage\nhttps://en.wikipedia.org/wiki/Transmission_line\nespecially as you can easily unlock it to make it much better, using http://www.n5dux.com/ham/riglol/, albeit not 100% legally "},{"id":53,"href":"/engineering/circuits/circuits2/","title":"Circuits2","section":"Engineering","content":" Chapter 24 - Circuits \u0026amp; Semiconductors # When I was a kid I thought about circuits as being alive, like Cells at Work!, only little electrons going around busily keeping the heart of my toy working instead of anthropomorphic red blood cells working in the human body.\nNow, as an adult - and a computer and electrical engineer at that - I still find this thought endearing. Though I\u0026rsquo;ve now come to see the physics and art of electronics to be even more beautiful when their true nature is really understood.\nThere\u0026rsquo;s a joke you\u0026rsquo;ll hear about those that work with these low level physics or that arrange logic gates to make full CPUs- that our job and passions boil down to teaching rocks to think.\nSo, let\u0026rsquo;s lean how to teach some rocks.\n©Vega, made with Noisedeck, inspired by pictures of silicon wafers, like this one. Chapter 24.1 - Semiconductors # TODO, looks very good briefly scrolling through it: https://lcamtuf.coredump.cx/electronics/\nDigilent\u0026rsquo;s \u0026lsquo;Real Analog\u0026rsquo; course looks okay too, and I might write this guide assuming their analog parts kit: https://learn.digilentinc.com/classroom/realanalog/\nSemiconductors? # Will gallium nitride electronics change the world? (YouTube, Engadget)\n[TODO] pic of silicon bulb\nhttps://en.wikipedia.org/wiki/Wafer_(electronics)\nP/N junctions, etc.\nhttps://hackaday.com/2015/02/08/photonic-reset-of-the-raspberry-pi-2/\nDiodes, the one way road # A diode is a two-terminal electronic component that conducts current primarily in one direction (asymmetric conductance); it has low (ideally zero) resistance in one direction, and high (ideally infinite) resistance in the other.\nDiode page on Wikipedia (which is actually superb) Alright, so in very basic terms, it\u0026rsquo;s a part that only lets current flow in one direction (ideally). A one-way road for current. If you put a sine wave in, you\u0026rsquo;ll get a sine-wave chopped in half out. Now, this assumes everything is ideal, as you\u0026rsquo;ll really get more like the top 40% of the wave out, but we\u0026rsquo;ll get to those details in a bit. For now, I recommend watching these videos:\nzeener, normal, bipolar\nvaristors , sparkgaps Leds - getting current both ways, LED safety Zener Diode (YouTube - EEVblog)\nVaricaps (Wikipedia)\nTunnel Diodes (Wikipedia)\nShottky\nDIY Diode (Simplifier) Part 2 Part 3 Part 4: Power Diode\nDiode Logic # The Diode Clock\nTransistors # [TODO]\nTransistor Families (JonDent - Blogspot)\nBipolar Transistor @ electronics-tutorials.ws\ntubes and how they work\nIntroducing Triodes (Aaron Lanterman - GT, YouTube)\nDIY Triode (Simplifier) Part 2 Part 3 Part 4 Part 5: Power Triode Part 6: Power Triode 2 Part 7: Portable Triode, Tetrode\nPNP V NPN # Mosfets? # JFETS? # IJBTs? # Tubes # That Elusive Valve Amp Sound, For Not a Lot! (There has to be a Catch) (hackday.com)\nIntegrated Circuits # [TODO]\nhttps://hackaday.com/2019/05/20/integrated-circuits-can-be-easy-to-understand-with-the-right-teachers/ Uncovering the Silicon: Demystifying How Chips are Built and How They Work (YouTube)\nReverse-engineering the TL431\nDistortion pedal with all homemade semiconductors, only one external component (cap for AC coupling) pic.twitter.com/M7t3Gl1m5P\n\u0026mdash; Sam Zeloof (@szeloof) July 6, 2020 Archive.org backup of the above embedded tweet Finally I learned how to do focus stacking with my macro (non-microscope) shots. 226 shots, 50µm camera shift per frame. Laowa 25mm F2.8@F4 on WeMacro rail. Stitched in Helicon Focus (pyramid, smoothing=1). 1 original photo for comparison. #WeMacro @laowa_lens #heliconfocus pic.twitter.com/yCdCIBXMRv\n\u0026mdash; Zeptobars (@Zeptobars) March 12, 2019 Archive.org backup of the above embedded Tweet + Archive.org copy of the image 555, OpAmp, 74-Series Logic # 555 Timer IC (YouTube)\n555 as an amplifier (don\u0026rsquo;t actually do this!)\nTiny Transistors\u0026rsquo; Clever TT555 Is a Pin-Compatible 555 Timer Built from Discrete Components (Hackster.io)\npotato semi\nhttps://zeptobars.com/en/read/Ti-Texas-Instruments-LMC555CMX-555-CMOS\n[TODO] note on price of chips that solve bigger problems - integrated filters, PLLs, VCAs, basically everything on this list\nChapter 24.2 - Op-Amps \u0026amp; Filters # Op-Amps # Handbook of Operation Amplifier Applications (TI)\nThese things aren\u0026rsquo;t actually ideal! # Not all OpAmps are rail-to-rail, meaning if you give them -12 and +12 V rails, you may only be able to hit -10 and +10 or so. OpAmps really need clean power. If you don\u0026rsquo;t put a small cap to filter the power right at the OpAmps VCC and Gnd pins, except noise. There will almost certainly be at least a little bit of DC shift in the output You do not actually have infinite gain You do not have infinite bandwidth They do not actually have infinite input resistance, it\u0026rsquo;s just really high. … See Real op amps, non-ideal aspects (Iowa State University : EE 230, PDF) Optical Electronics # [TODO]\nOpto Isolators, Vacttrols, Photoresistors\nCrystal Oscillators # [TODO]\nPiezoelectricity - Why hitting crystals makes electricity (YouTube)\nPWM # [TODO]\nDriving a PAL tv over RF thanks to PWM harmonics (Hackaday)\nADC/DAC # [TODO]\nhttps://en.wikipedia.org/wiki/Fourier_transform\nNyquist\nActive Filters # http://sim.okawa-denshi.jp/en/\nChebyshev Filters (YouTube - All About Electronics)\nButterworth Filters (YouTube - All About Electronics)\n[TODO]\nWaveguides # Waveguides Explained (YouTube)\nAudio Devices # [TODO]\nspeakers, piezos, amps, mics and pickup patters\nTODO # add motors, analog meters, various connection standards, radio, flex/pressure sense, grounding (chassis, digital, analog, ground planes, etc.), solar/photo reactive,\nRelating AC and Music # [TODO]\nRelate back to things like ADSR, Distortion, Reverb / Echo, Decibels (audio), etc. Use VCV RACK\nChapter 24.3 - Displays # There are many Reasons to Question Seven Segment Displays (Harold Thimbleby), especially today, as using literally anything else has gotten significantly easier.\n[TODO] Eink, OLED, TFT, etc.\nRussian nixie, VFD and numitron overview (Just another electronics blog)\nAlso, you may want to be able to update your display quickly, so keep in mind if your controller/device has either a native video output, or at least DMA that you can abuse (Just another electronics blog).\nChapter 24.4 - Safe Circuits # 10 Ways to Destroy an Arduino (Rugged Circuits) Protecting Inputs in Digital Electronics (Digi-Key)\nWhy 10,000 Volts at altitude is a Bad Idea (YouTube, Strange Parts)\nTODO: Efuses\nChapter 24.5 - Parts \u0026amp; Tools you\u0026rsquo;ll want to be aware exist # Tools # Wirewrapping Parts # PLL Logic Level Shifters LED Matrix Drivers Digipots Rheostat TL431 - Programmable Reference Tempcos PROM\u0026rsquo;s Regulators Thyristors Solenoid Ferrite beads Thermocouples Spark Gaps Filter ICs Chapter 24.6 - Rare and Dangerous Components # Dangerous Tesla coils High voltage/current/hot/whatever Don\u0026rsquo;t pretend to be an electrician Don\u0026rsquo;t use ATX psus for dumb things Some Components Are Just Bad, Like this USB-C Connector (Hackaday) Rare/Expensive Tubes, NOS parts, etc. - TODO: CRTs and Aquadag Continued Reading: # [TODO]\nAt this point I highly recommend \u0026lsquo;Practical Electronics for Inventors\u0026rsquo; ISBN 978-1259587542, namely chapters 2-12, and 15-16. It\u0026rsquo;s a very large, detailed book that does its best to keep things, well, practical.\nhttps://taleri.files.wordpress.com/2014/02/practical_electronics_for_inventors_-_scherz_paul.pdf\nHardware isn\u0026rsquo;t generally copyrightable\nHackady.io 2020 Circuit Sculpture Challenge\nRGB LED, Inductively Powered, Frequency Controlled (YouTube, Wolf Tronix)\nHow to protect circuits from reversed voltage polarity! (YouTube, AfroTechMods)\nCircuit Sculpture Workshop (Hackaday, Kristina Panos)\nCurrent Loop (Wikipedia)\n"},{"id":54,"href":"/engineering/circuits/digitallogic/","title":"Digitallogic","section":"Engineering","content":" Chapter 25 - Digital Logic # Digital logic is what it sounds like- it\u0026rsquo;s doing logical operations on digital data - 1\u0026rsquo;s and 0\u0026rsquo;s; True and False. Chain some of (er, a lot of) these logical operations together and you can do anything you want! Want to make your own CPU? Done. Want to make dedicated circuitry to do what your code does but hundreds of times faster? This is the way to do it.\nAs an example, here\u0026rsquo;s a rather artistic representation of a digital logic circuit that takes in a four bit binary number and outputs seven different signals corresponding to the lights on a 7-segment LED to show the right number (in hexadecimal)\nBinary (0b) Hex (0x) Decimal 0000 0 0 0001 1 1 0010 2 2 0011 3 3 0100 4 4 0101 5 5 0110 6 6 0111 6 7 1000 8 8 1001 9 9 1010 A 10 1011 B 11 1100 C 12 1101 D 13 1110 E 14 1111 F 15 lineart by https://merveilles.town/@chirrolafupa, I (Vega) filled it in and turned it into a gif. To access the original line art, use a gemini browser to go to gemini://caracolito.mooo.com/coloring-computers/ Now, it\u0026rsquo;s worth considering here that this circuit is probably not the most efficient way to do this. This could also be done by just using a look up table (LUT), in that case, all of those individual logic elements are skipped and the input bits are basically just used as an address to look up a different value. The end result is the same. We\u0026rsquo;ll wrap back around to this idea later.\nSome of this look familiar? If you\u0026rsquo;ve played Minecraft before, you may have gotten Redstone vibes from the GIF above. Those intuitions are correct. Many Redstone circuits are actually just clever ways of using the same binary logic ideas we\u0026rsquo;re about to go over! What is digital logic? # ignoring the analog world (10%/90%)\nTruth Tables, K-Maps # min/max terms, Don\u0026rsquo;t cares, SOP/POS, multiple out\n[TODO] http://nandgame.com\nBasic Logic Gates # Not # Image CC BY-SA 3.0, by Heron Input Output 0 1 1 0 [TODO] transistor implementation w/ CMOS, cost, power consumption at switch\nAND # True if A and B are true, else false. Often written as A∧B or just AB\nInput A Input B Output 0 0 0 0 1 0 1 0 0 1 1 1 NAND (Not AND) # False if A and B are true, else True. Often written as ¬(A∧B), ((¬A)∧(¬B)), or A⊼B\nInput A Input B Output 0 0 1 0 1 1 1 0 1 1 1 0 Bitwise AND is often used in programming to make a mask of which bits you want to select from another value or to clear a specific bit or set of bits.\nOR # True if A or B are true, else False. Note, this includes if both are true. Often written as A∨B or A+B\nInput A Input B Output 0 0 0 0 1 1 1 0 1 1 1 1 Bitwise OR is often used in programming to set a bit or set of bits without changing the other bits in the value.\nNOR (Not OR) # True if neither A or B are True, else False.\n\\( \\text{Often written } \\overline{x \u0026#43; y}\\) Input A Input B Output 0 0 1 0 1 0 1 0 0 1 1 0 XOR (Exclusive OR) # True if A or B are exclusively True, else False. Note, this does not include if both are true. Often written as A⊕B\nInput A Input B Output 0 0 0 0 1 1 1 0 1 1 1 0 XNOR (Exclusive Not OR ) (also known as XAND) # For two bits, most easily thought of as True if both bits are equal. More broadly, it is the negation of the exclusive or logic.\nImage CC BY-SA 3.0, by Heron Input A Input B Output 0 0 1 0 1 0 1 0 0 1 1 1 Mux \u0026amp; Demux # Go read the Multiplexer Wikipedia article. It\u0026rsquo;s actually excellent.\nEncoders # [TODO] like Binary to BCD\nSOP \u0026amp; POS # + Kmaps\nBasic combinational logic # propagation delay, fan in/out, POS/POS\n2\u0026rsquo;s Compliment, Floating Pt, Math # overflow, carry, ripple, fast, mul, shift-and-add mult, divider,\nFeedback Circuits # Oscillators, Monostable, Osc if high, Bistable (controllable/not controllable)\nLatches and Flip Flops # SR, Dl, edge triggering, Dff, Tff, JKff,\nRegisters # + Shift registers\nClocking \u0026amp; Counters # [TODO] dividers, multipliers, delay\nMemory Circuits # Static Memory # Dynamic Memory # https://www.adafruit.com/product/1895\nMaking Some Circuits # There\u0026rsquo;s a ton of simulators out there for making simple circuits educationally, but most sorta suck, so I\u0026rsquo;m going to delve right into something fun: Minecraft\nIf you don\u0026rsquo;t own Minecraft and can\u0026rsquo;t afford it, MineTest with mesecons is an option. It\u0026rsquo;s… not great. (sorry MineTest team, I still love what you\u0026rsquo;re doing \u0026lt;3 ) But it is Open Source. If you\u0026rsquo;re using Arch Linux (and updates haven\u0026rsquo;t broken things since writing) you should be able to install MineTest from the community repo and mesecons-git from the AUR.\nMinetest Circuit Challenge\nHalf Adder # Full Adder # Analog To Digital \u0026amp; Digital To Analog # Schmitt Triggers # I like to think of a schmitt trigger as the logical equivalent of a heavy light switch. Once it\u0026rsquo;s on, it takes a fair amount of force to turn off, and once it\u0026rsquo;s off, it takes a fair amount of force to turn on, but in our case that force is a voltage.\nThis means we can say \u0026ldquo;Until you see 1V at the input, don\u0026rsquo;t turn on\u0026rdquo; and \u0026ldquo;Until you see -1V at the input don\u0026rsquo;t turn off\u0026rdquo;. If after being turned on, it went to .5, or even -.5V, it would stay on. If it was off and we gave it input of .5V, it would stay off. We have to cross the threshold either way to change state.\nOf course, we can make schmitt triggers with different thresholds and output levels.\nThe horizontal and vertical axes are input voltage and output voltage, respectively. T and −T are the switching thresholds, and M and −M are the output voltage levels. Image by Alessio Damato - CC BY-SA 3.0. From Wikipedia. ADCs # [TODO] + Parallel Output vs via data bus\nDACs # More Digital Logic resources # We\u0026rsquo;ll come back to look at more complex digital logic in chapter 28 \u0026ldquo;Let\u0026rsquo;s try out programmable logic\u0026rdquo; and 29 \u0026ldquo;Let\u0026rsquo;s make our own CPU\u0026rdquo; , but if you\u0026rsquo;re hungry for even more, here are some resources\n"},{"id":55,"href":"/engineering/circuits/embedded/","title":"Embedded","section":"Engineering","content":" Chapter 26 - Embedded Systems # By Make It With Me If you\u0026rsquo;re reading this page, it\u0026rsquo;s expected that you\u0026rsquo;re either pretty comfortable with C and programming on a normal computer already or that you\u0026rsquo;ve at least read though both the programming intro chapter starting with\n\u0026ldquo;Lets Write Some Code\u0026rdquo; and the \u0026ldquo;Low Level Programming\u0026rdquo; page What is an Embedded System? # [TODO] need source These little devices are Pocket Operators made by Teenage Engineering, they\u0026rsquo;re relatively inexpensive synths that can be chained together, and I think they\u0026rsquo;re a great example of what an embedded system is, but for the sake of clarity, here\u0026rsquo;s how Wikipedia defines it: An embedded system is a computer system—a combination of a computer processor, computer memory, and input/output peripheral devices—that has a dedicated function within a larger mechanical or electronic system. - Wikipedia Alright, so how do these pocket operators show this well? Well, the pocket operators have a Microcontroller on them as well as a fair amount of things connects to it, but let\u0026rsquo;s hang on for a second- Microcontroller? Microcontrollers, sometimes written as μC, MCU, or just micro are the heart of most embeded projects\nA microcontroller is a small computer contained in an integrated circuit (IC) chip. A microcontroller contains one or more CPUs (processor cores) along with memory and programmable input/output peripherals. Microcontrollers are designed for embedded applications, in contrast to the microprocessors used in personal computers.\nMicrocontrollers are used in automatically controlled products and devices, such as automobile engine control systems, implantable medical devices, remote controls, office machines, appliances, power tools, toys and other embedded systems.\n- Wikipedia, minor edits Alright, so that\u0026rsquo;s a lot of words. The gist of it is you\u0026rsquo;re getting a tiny computer that\u0026rsquo;s roughly comprable in specs to a computer from the 80\u0026rsquo;s, but is inexpensive (usually under $2.00, especially in bulk) and that has a ton of pins that you can connect other things to- LEDs, motors, buttons, etc.\nThese computers usually don\u0026rsquo;t run a full operating system, and instead usually just run a loop of your code forever. They also usually have some special pins that can do things like read analog voltages, communicate over SPI or \\(\\text{I}^2 \\text{C}\\) , trigger interrupts, or be used for PWM (Puse Width Modulation).\nProbably the most commonly recommend microcontroller for beginners is the ATMEGA328P on the Arduino Uno. The 328P and Uno are both… not awesome. But, for first learning and getting your toes wet they\u0026rsquo;re fine.\nIt\u0026rsquo;s worth noting, the μC itself is the Atmega328P- the really big black rectangular chip. The board that breaks these pins out to the headers for you to plug wires into, provides the USB connection, power filtering, reset button, etc. is the Development Board- in this case it\u0026rsquo;s been named the Arduino Uno.\nImage by Sahand Babali Image by Vishnu Mohanan Sometimes the lines for what\u0026rsquo;s a microcontroller or embedded system can get blurry. This is especially the case when using a development board on a finished product or when a full computer that runs a desktop OS is involved. For example, the Raspberry Pi, pictured here, is an embeded system; however, it has a full blow ARM System On a Chip (SoC) that can run Linux and be used as a full desktop computer. More confusing still, the Pi itself has multiple embedded systems in the embedded system- for example the dedicated chip on the Pi3b+ that provides the Ethernet connectivity could be considered part of its own embedded system. Yet, the Pi has General Purpose Input Output (GPIO) pins like most microcontrollers.\nAll of this is to say, don\u0026rsquo;t worry about it too much. As you work with it more, you\u0026rsquo;ll learn the differences. This is all just jargon anyway, and sometimes not everything fits cleanly under a single label. Instead, you should focus on what matters: Knowing what parts to use, what features they offer, and how to program them to do what you want.\nFor the rest of this page, I\u0026rsquo;m going to be talking about embedded systems that don\u0026rsquo;t have processors beefy enough to run Linux - those are usually called \u0026ldquo;Single Board Computers\u0026rdquo; or SBC\u0026rsquo;s anyway, just because they\u0026rsquo;re really in an entirelly different weight class and price bracket. If you know how to work on the classic μC embedded systems as I\u0026rsquo;ll dicuss going forward and you know how to do general desktop development, making software for a Single Board Computer, such as the Pi, is really just a blend of the two and should come pretty naturally.\nPlaying around - Hello World and blink # Alright, so you have a microcontroller, presumably on a dev board, maybe even aforementioned Arduino Uno (though seriously, the 328p is trash- coming back to that in a bit) but you want to make it do something. Generally, the first thing you\u0026rsquo;ll want to do with a devboard is the exact same as you do when learning any programming language, make it say \u0026ldquo;Hello World\u0026rdquo;. Now, this is pretty easy, if you have a controller that can run the Arduino framework (this is more than just boards from Arduino- Arduino the framework runs on a bunch of other boards that aren\u0026rsquo;t made by Arduino the foundation), you can download the Arduino IDE, write this code:\n1 2 3 4 5 6 7 8 9 void setup() { // put your setup code here, to run once: Serial.begin(9600); Serial.println(\u0026#34;Hello World!\u0026#34;); } void loop() { // put your main code here, to run repeatedly: } Connect your board, press upload, and if you go to Tools → Serial Monitor you should see the Arduino send back the words \u0026ldquo;Hello World!\u0026rdquo;. Now, this is super not exciting, as it doesn\u0026rsquo;t really seem any different from just running similar code on your computer. However, keep in mind that code spitting out that text didn\u0026rsquo;t execute on your computer. It ran on that lil\u0026rsquo; board, and then that text was sent back over the USB cable.\nBut, there are a few things I want to address first:\nThe Arduino IDE is fucking garbage (for now, it should be getting better with Version 2.0) This code leaves a lot obscured. Where is Serial from? Why are we not just using printf()? What\u0026rsquo;s up with setup() and loop() instead of main()? Why 9600? So, to answer 1. - Yeah, don\u0026rsquo;t use the Arduino IDE. For now, the best option is PlatformIO on VSCode.\nTo rapid fire 2. - Serial is from a library that gets installed by default with Arduino and by using a call to it in your code, the Arduino IDE links it in for you, without the need for #include like we saw back in the low level programming chapter. This may sound nice, but it\u0026rsquo;s actually really annoying. There are a bunch of libraries like this, and often you won\u0026rsquo;t realize you\u0026rsquo;re even using something non-standard- like setup() and loop() Arduino actually has a file sitting elsewhere that literally has the code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include \u0026lt;Arduino.h\u0026gt; int main(void) { init(); #if defined(USBCON) USBDevice.attach(); #endif setup(); for (;;) { loop(); if (serialEventRun) serialEventRun(); } return 0; } which, while may look a bit weird, you\u0026rsquo;ll see does contain our typical main() and just executes setup() once then whatever we put in loop() in an infinite for loop. It also contains #include \u0026lt;arduino.h\u0026gt; which will include if you dive into you\u0026rsquo;d see includes the Serial library too.\nOkay, but WTF is \u0026ldquo;Serial\u0026rdquo;? Why not just use printf() Okay, so, there\u0026rsquo;s a few things here.\nFirst, the \u0026ldquo;arduino\u0026rdquo; framework isn\u0026rsquo;t actually C it\u0026rsquo;s C++ and the standard way printing is done in C++ is a bit different anyway - yes, you can use printf() in normal desktop programs in C++, but you usually want to use a syntax closer to this\ncout \u0026lt;\u0026lt; \u0026quot;Hello World!\u0026quot;;\nBut, more improtantly, C++ is also object oriented, so we\u0026rsquo;re calling the println() function from the Serial class - it\u0026rsquo;s an entirely different language. Again, not a big deal to think about right now. There are two take aways you need to really answer your question\nprintln is basically just a printf that add\u0026rsquo;s the newline for us Serial is a class that gives provides us functions for working with the serial interface hardware on the board Now, 2. Is the more important and more confusing point and requires a smidgen of historical context.\nYou connected the board to your computer over USB or Universal Serial Bus. Prior to USB we also had … Serial. Just… Serial. USB can (with a lot of hand waving to what is actually going on) let devices show up as old school Serial devices though. If you\u0026rsquo;re on Windows, these will show up as com ports (COM4 or whatever) on Linux, they\u0026rsquo;ll show up as /dev/ttyACM0 or /dev/ttyUSB0 (with the number incrementing depending on the number of devices) - this old school serial connection is pretty damn slow but basically just gives us a way to send data (usually text) back and forth to a device - allowing us to print that data to a terminal or send data from a terminal.\nThis is why we can\u0026rsquo;t just use printf() - where would that text even show up?! There\u0026rsquo;s no screen on the board! no terminal. We need to send the data back to the computer over the serial interface to have a way to read it!\nFinally, just to be though, that 9600 which may seem like a magic number, is the baudrate the board was sending data to the computer over Serial. 9600 is stupidly slow, yet is the default that many programs with the Arduino framework will use- most boards can do 115200, which is 12 times faster.\nReally, most of this abstraction is just in our way. This isn\u0026rsquo;t C++\u0026rsquo;s fault, the Serial class providing functions like println and having encasulated functions for setup - great, that\u0026rsquo;s well made. Not including serial.h ourselves or having a convient tool for looking at how the underlying libraries tie together? That is a dumpster fire.\nThere\u0026rsquo;s no need for all of that to sit between us and the code!\nA lot of \u0026ldquo;Makers\u0026rdquo; will only learn to use the Arduino functions and way of doing things. Yeah, they might make some things easier, but long term they\u0026rsquo;ll seriously limit what you can do. I love \u0026ldquo;Makers\u0026rdquo; and \u0026ldquo;Hackers\u0026rdquo; and consider myself one, but if you use the title as an excuse to not learn how shit works, you\u0026rsquo;re doing it wrong.\nSometimes, a quick n\u0026rsquo; dirty solution will work. If you just want to make some LEDs blink or switch a relay to turn something on and off, sure. The problem is, sooner or later you\u0026rsquo;ll find something where you need fast response times and need to use interrupts, or where you need to get fine control over PWM and need to twiddle bits, and the Arduino library will make doing so a massive pain in the ass.\nSo, let\u0026rsquo;s try this again, this time, don\u0026rsquo;t use the Arduino IDE, but grab PlatformIO and make a new project.\nI\u0026rsquo;ll assume that most people reading this are- despite how much of a massive pile of shit they are- using an Arduino Uno (or clone). If that\u0026rsquo;s all you have, frankly, the Arduino library is still your best bet for some things, so when you make a new project because it does provide some things that are a total pain to do by hand, like setup aforementioned Serial. That said, the other library that works in PlatfromIO for the Uno, Simba is pretty cool and will abstract out a lot of that mess too.\nThe biggest reason to use the Arduino framework is that there\u0026rsquo;s a mountain of libraries written for it, so if you get a little board for RFID or temperature sensing or GPS or whatever, there\u0026rsquo;s probably already a drop in library with example code. But, frankly, the 328P is so under powered and old that I just can not justify learning on it. Instead, I\u0026rsquo;m going to recommend the STM32F411CE - or, as it\u0026rsquo;s more commonly known, the \u0026ldquo;Black Pill\u0026rdquo;\nIf you\u0026rsquo;re buying one to follow along, be careful. There are variants of the BlackPill that have the F401 or F103. The F103 boards almost universally have issues, so at the very least make sure it\u0026rsquo;s an F401 or F411. But, I hear you asking, \u0026ldquo;why?\u0026rdquo;\nArduino Uno/Nano (328p) BlackPill (STM32F411CE)* Price ~$6.00 ~$6.00 + ~$7 debugger № Bits 8 32 Clock Speed 20Mhz 100Mhz Program Memory 32Kb 512Kb Ram 2Kb 128Kb I/O Voltage 5V 3.3V (lots of 5V tolerant pins) Debugging Kinda, but not really. With ST-Link USB that big ol\u0026rsquo; printer style on the UNO, or micro-usb on the Nano USB-C *The STM32F401CE boards are a smidgen worse, but honestly, they\u0026rsquo;re both so good it probably won\u0026rsquo;t matter to you. Get whatever is cheaper. Even if most of these specs don\u0026rsquo;t mean anything to you and whatever projects you have in mind don\u0026rsquo;t need a beefy processor, while learning espcially you don\u0026rsquo;t want to be constantly running out of RAM or room to store your code.\nIf that doesn\u0026rsquo;t convince you, then I don\u0026rsquo;t know what will. Oh, and the BlackPill still supports the Arduino framework, if you do actually need it. Now, to be fair, there\u0026rsquo;s a lot more to this than these specs. The 328p will almost certainly have better library support than the BlackPill, the Uno has a bunch of snap-on accessories, and some things do actually work better with the 5V i/o of the Uno. It\u0026rsquo;s just… sort of dumb to start on something so old and so far removed from modern practices.\nYou\u0026rsquo;d also want to consider what protocols and inputs the boards can handle. In this case, the BlackPill is basically better in every way in that front too. If you were looking at other options though, some boards may not have analog input pins, for example, and that might be a dealbreaker for some projects. I\u0026rsquo;ll talk more about how to find the right μC / Devboard for your project later, for now, let\u0026rsquo;s move on assuming you have the BlackPill in front of you.\nSo, let\u0026rsquo;s try making our Hello World! again.\n[TODO] Blinking the onboard LED\n[TODO] Using the Arduino framework in PlatformIO, then setting up STM32CubeIDE because it\u0026rsquo;s actually good. But explain that PlatformIO is still great because of support for ATmega, ESP8266/32, bigger STM boards like the STM32F7xx, Longan Nano, BBC Micro:bit, pi pico\nPWM, SPI, I2C, What\u0026rsquo;s going on?! # For this, you\u0026rsquo;ll probably actually want a few devices to experiment with. Unless you\u0026rsquo;ve already gone out and gotten a kit of stuff, I strongly recommend against those \u0026ldquo;Lean Arduino\u0026rdquo; kits, and instead insist you buy the parts yourself. It\u0026rsquo;s a tad more expensive just to get started, but honestly a lot of the kit shit, is, well, shit. For this section, I\u0026rsquo;ll be talking about and using a strip of WS2812b RGB LEDs (~$5), the MPU GY-521 Gyroscope/Accelerometer ($1), a HC-SR04 ultrasonic distance sensor ($5), and a ENC28J60 Ethernet breakout (~$8), as well as various parts from the Digilent Analog Parts Kit (~$55) and breadboards (don\u0026rsquo;t cheap out, get good ones ~$11) that I recommended earlier. I do realize this makes the total cost probably peak a smidge above the $100 mark. Sorry ¯\\ _(ツ)_/¯ Alright, so making the board send text to the computer or blink an LED is cool and all, but, that\u0026rsquo;s not really all that interesting. Let\u0026rsquo;s go further, lets… uh… blink a different LED!\n[TODO] LED pull up/down\n[TODO] PWM dimming, show in slo-mo\n[TODO] WS2812b, but without a library\nAlright, hopefully you\u0026rsquo;re not totally bored by making lights flash, let\u0026rsquo;s have a bit more fun! We\u0026rsquo;ll start by looking at that Ultrasonic sensor\n[TODO] ultrasonic sensor, basic digital input and timing, interrupts, etc.\nNow, let\u0026rsquo;s look at that MPU GY-521 Gyroscope/Accelerometer\n[TODO] i2c? SDA, SCL, and interrupt handling (not on all devices)\nSo, that\u0026rsquo;s i2c, which is nice, but sometimes you\u0026rsquo;ll want to talk to a device with full duplex communication. \u0026ldquo;Full duplex?\u0026rdquo; I hear you ask. Well, while \\(\\text{I}^2 \\text{C}\\) is a great protocol and is easy to use, it\u0026rsquo;s also only half duplex this means that, like a radio, only one side can talk at a time. Full duplex communication methods let both sides talk at once. While in a phone call this might be chaotic, there\u0026rsquo;s often times when it\u0026rsquo;s helpful to be able to send data to a device while we get data from it- for example, when working with that Ethernet adapter I said we\u0026rsquo;d be using above. For Ethernet, this is often necessary, as with TCP, a networking protocol I\u0026rsquo;ll dive into in the programming chapter, you need to repeated send replies saying \u0026ldquo;Yep, I got what you last sent, keep em\u0026rsquo; coming\u0026rdquo; while still listening for more data.\n[TODO] SPI Ethernet or SPI flash?\nSPI has four modes, depending on CPOL and CPHA [TODO] mention UART \u0026amp; CAN bus\nDriving a PAL TV over RF thanks to PWM harmonics (Hackaday)\nProject 1 - Calculator # [TODO] diode matrix inputs, LED matrix outputs (7-seg), beeper, what\u0026rsquo;s a memory mapped register, bit-fields, structs, basic polling, no return from main, ever.\nProject 2 - MIDI Controller # [TODO] Gyro + photo-resistor + a few knobs \u0026amp; buttons, interrupts\nProject 3 - ADC to the DAC # [TODO] ADC → μC →DAC, floating point, DMA?\nDepending on the board you\u0026rsquo;re using (not the Arduino Uno) you may have a/multiple Digital to Analog Converter(s) (DAC), as well as Analog to Digital Converters (ADCs) which… do what you think. ADCs let you take an analog signal in - like the output of a guitar or the voltage as you turn a knob. DACs let you output a signal (like audio). Assuming you have enough computational horsepower and the DACs and ADCs on board are good enough, the combination of these could let you do everything from a guitar pedal to making your own radio (On top of just being able to read knob positions)\nUnfortunately, DACs and ADCs are complicated, and you really should know a lot about them as they\u0026rsquo;re used a lot, so, without further-a-deux:\nMore about DACs than you probably need to know:\nNyquist Rate vs Oversampling DACs Decoder-based, Binary weighted, Thermometer code, \u0026amp; hybrid Monotonictity \u0026amp; Linearity ; Integral \u0026amp; Derivative Nonlinearity (INL/DNL) Some DACs \u0026amp; ADCs also allow for Direct Memory Access (DMA). A DAC with DMA, for example, will let you write samples to a buffer and at a defined rate spit them back out without CPU intervention. This allows for dramatically more complicated processing, as you no longer need to consistently get a new sample to the DAC before the next deadline (often this would need done 48,000 times a second!) Basically, DMA lets you offload some processing from the CPU. Problem? Now you need to write memory that something else is trying to access. So, how do we fix this? Well, there\u0026rsquo;s a pretty easy solution:\nA ping pong buffer.\nEssentially, we can just alternate back and forth between the DMA device \u0026ldquo;owning\u0026rdquo; half of the memory and the CPU owning half, alternating who gets what half every time the DMA indicates that it ran out of samples.\nNote, here I\u0026rsquo;m talking about DMA as if they only apply to DACs and ADCs; however, they can be used for many other things. Commonly, this includes networking and writing to displays, though there are many other times they\u0026rsquo;re useful. So, keep this in mind. Want to know more about ADCs and DACs? Here are some links:\nRetrotechtacular: The Forgotten Vacuum Tube A/D Converters of 1965 (Hackaday)\nProject 4 - LEDs… again? # [TODO] Power with transistors, filtering, PWM. Color input from temp and magnetic field sensors\nProject 5 - Euclidean Rhythms # [TODO] Power with high, spiky loads, code with events and scheduling, watchdogs- using stepper, servo, and solenoids\nProject 6 - The Epochalypse # [TODO] low power (sleep states), graphics (eink), RTC\nonly 24 most significant bits, which should only change every 255 seconds, or every 4.25 minutes. Plenty of time to sit in sleep mode\n[TODO] From Zero to main() (Interrupt)\nReal Time Operating Systems # RIOT-OS, MBED, etc\n[TODO note, MBED was used on the euclidean drum project for its event queue]\ntalk about scheduling (CFS, etc.)\nIntrinsic Operations \u0026amp; ASM # Your Instruction Set Architecture (ISA)\ndifferent operations may take a different number of instructions Pipelining may make this hard to predict, especially with interrupts Project 7: ASM Blink # Other weird and cool projects: # Of Course It Leaks!\n\u0026ldquo;The Simplest of Pseudo Random Number Generators\u0026rdquo; - Hackaday\nReverse Engineering an Unknown Microcontroller (Dmitry.GR)\nChapter 14.1 - Embedded Hardware comparison # [TODO, Pi V RockPi4 V Arduino V x86, ref architecture information from chapter 3.3]\nmention pi SD card performance / stability limits and pi advantages in how common it is\nArduino ≠ Arduino # I really want to make this clear: Arduino is a framework. Not a specific hardware platform. Different Arduino devices can run with wildly different specs and support wildly different features, and not all devices that run the Arduino framework are made by the Arduino foundation. The Arduino Uno (ATmega328p) is both an Arduino foundation project and runs the Arduino framework. The STM32 BlackPill, NodeMCU, PiPico, etc. are all not made by the Arduino foundation, but can run the Arduino framework. STM 32 # The \u0026lsquo;Black Pill\u0026rsquo; (STM32F411) is replacing the \u0026lsquo;Blue Pill\u0026rsquo; (STM32F103) (Hackaday)\nFirst up is the brains of the operation: an STM32F103. Not a lightweight chip: It\u0026#39;s a Cortex M3 @ 72MHz. It\u0026#39;s got 256kB of flash and 48kB of RAM and that\u0026#39;s a 100-pin TQFP package!https://t.co/oPCeo7XMpe pic.twitter.com/niDPuIFBPT\n\u0026mdash; Stargirl 🌠 (@theavalkyrie) November 17, 2020 Archive.org link to Tweet Getting Started in Robotics (Arthur Allshire\u0026rsquo;s Blog)\n14.2 - Projects I recommend # Hand wiring a keyboard: https://docs.qmk.fm/#/hand_wire?id=hand-wiring-guide "},{"id":56,"href":"/engineering/circuits/intro/1-intro/","title":"1 Intro","section":"Engineering","content":" Chapter 23 - e-e-e-e-e-e-e-e-e-e-e- Electrons work for you # Normally, I would start a new section with some inspiring paragraph about all the cool things you can do with the topic - but I don\u0026rsquo;t even know where to start on this page.\nI mean, sure, you\u0026rsquo;re literally reading this page from a magic glowing rectangle powered by electricity but, like, who cares? You don\u0026rsquo;t need to know how to work with electricity to use a computer. Hell, most programmers don\u0026rsquo;t even know that much about circuits so clearly it\u0026rsquo;s not required even for advanced use.\nSo, consider this your de-motivational speech. Electricity can be damn cool and you can do some awesome things with it, but depending on your goals, you may not need to care.\nIf you just want to make video games, software, apps, etc - you probably don\u0026rsquo;t need to know any of this.\nOn the other hand, if you want to work on machines and make something that interacts with the real world, spin motors, read sensors, make guitar pedals, DIY your own tools, and do things beyond what code is readily capable of, then yeah, you\u0026rsquo;ll need to learn how to work with circuits.\nUnfortunately, \u0026ldquo;circuits\u0026rdquo; isn\u0026rsquo;t one thing anymore and it\u0026rsquo;s increasing tied to the world of programming as more and more systems have a computer of varying capability integrated into them. Even without the invasion of code and computers, \u0026ldquo;circuits\u0026rdquo; is a pretty wide ranging description.\nMaybe you want to make an power system for your project, to make the batteries last longer and easier to recharge. That, and much more, falls under the \u0026ldquo;power electronics\u0026rdquo; umbrella.\nMaybe you want to design strictly analog audio equipment, like guitar pedals, amplifiers, or speaker systems.\nMaybe you\u0026rsquo;re wanting to wire together motors, servos, and actuators to make robot.\nMaybe you want to design complex digital logic systems in hardware that don\u0026rsquo;t need code - just logic gates.\nMaybe you want to make radio systems for long range wireless communication.\nThere\u0026rsquo;s a lot of ground to cover here, and while each has things is common, there are details that somebody with decades in experience doing one would have no idea about in the other. There are some things that are considered bad practice in some areas that are common and correct in other areas.\nRegardless, if you want to go down this road, one thing\u0026rsquo;s for sure, you\u0026rsquo;ll need to make electrons do work for you.\nTo get started on that journey, let\u0026rsquo;s establish a baseline. There\u0026rsquo;s some things that most lay people should know, and we can make some connections to make a platform of knowledge we can build on.\nThe Stuff You Probably Know # Open (broken) circuit → Electricity can\u0026rsquo;t flow Closed (completed) circuit → Electricity can flow Switches can open or close a circuit, or switch between two (or more) different circuits Fork in an outlet → Short circuit, electricity flows without limit Voltage = Potential energy ≈ Pressure Voltage source = source of potential energy, like a battery Measured in Volts (duh.) Current = Flow of electrons = releasing that potential energy to do something Measured in Amps Power = Pressure (Volts) * Flow (Amps) high pressure but low flow has the same power draw as low pressure but high flow\nTiny hose with lots of pressure Vs fire hose with low pressure could both move the same amount of water = use the same amount of power Power = Voltage * Current ( \\(P=I\\times V\\) )\nWe use A for the unit (Amps) but I for equations… for reasons. To much voltage, and things blow up (lightning strike, power surge, etc.) To much current draw, and things blow up (accidental short, phone in toilet, etc.) Usually, a short will blow the breaker Not all devices immediately blow your breaker Therefore, not all devices draw the maximum available current Therefore, they have some way to resist current flow Resistors are a thing that exist AC = Alternating Current Like what you get from your wall DC = Direct Current Like what comes out of your phone charger Electricity can kill you High voltage look really cool High voltage can extra kill you Low voltage can kill you too This is extra true if you touch it with wet hands Atoms have a positively charged nucleus and electrons doing their thing around that Current = flow of electrons Clearly, these electrons can move away from the atom we\u0026rsquo;d normally associate with them Metals conduct better than, say, air or rubber metals just let the electrons flow easier But sometimes electricity jumps though the air? If you make the electrons angry enough, they break the rules. Electromagnetism is a thing Electromagnets are a thing They\u0026rsquo;re made with a coil of wire Drills and motors have multiple coils of wires They must be using the coils, turning them on and off, to spin the core Some homework # To avoid reinventing the wheel, go checkout Sparkfun\u0026rsquo;s introduction to Voltage, Current, and Ohm\u0026rsquo;s Law . There\u0026rsquo;s 4 pages, 3 of which have videos. This should bring you up to speed enough to make the next section a bit easier going.\nAdditionally, while I\u0026rsquo;ll cover each thing covered in this video in more detail, getting this initial exposure should be quite helpful to provide added context as we move forward:\n"},{"id":57,"href":"/engineering/circuits/intro/2-tools/","title":"2 Tools","section":"Engineering","content":" The Tools of the Trade # Okay so we know we have voltage, current, and power. Additionally, you\u0026rsquo;ve probably heard about terms like resistance, impedance, capacitance, and maybe inductance before. What the heck do these mean? Well, to each into a more tangible context, lets look at the tools used to measure each.\nBuilding, fixing, and analyzing circuitry requires the use of a some tools and appliances, so let\u0026rsquo;s look at the basics of working with electricity by looking at what purpose the tools serve. While there are many more than those listed here, these are the most important ones and should be all you need for most applications.\nUnfortunately, there will be some cost involved in getting these. I\u0026rsquo;ll do my best to give you advice to keep the cost down while still getting good equipment as we go over what each is for. I do really recommend having at least the most basic version of these tools to get started.\nCharacter owned by Vega, art by Shade If you go for the absolute cheapest options and hunt for used equipment, it\u0026rsquo;s reasonable to get everything for about $175. I realize to many that\u0026rsquo;s a tough pill to swallow, so if you just can\u0026rsquo;t do that, that\u0026rsquo;s 100% okay! You can get by for a good while with just a multimeter, the power supplied by a microcontroller, and simulation software. That brings the actual upfront cost down to around $30.\nOf course, that\u0026rsquo;s not counting the actual parts needed for whatever you\u0026rsquo;re building, though parts tend to actually be quite inexpensive.\nThe Multimeter # note, the above video uses U=IR instead of V=IR like \u0026rsquo;normal\u0026rsquo;. You\u0026rsquo;d think that engineers could just get along and pick consistent symbols, but, nope. The \u0026rsquo;normal\u0026rsquo; way to write it is V (voltage) = I (current) * R (Resistance), though you\u0026rsquo;ll also often see E=IR or, less common, U=IR like here. The Multimeter generally serves three roles: A voltmeter, an Ammeter, and an Ohmmeter. These are for measuring Voltage (in Volts - V), Current (in Amps - A), and Resistance (in Ohms - Ω (omega)) respectively. Furthermore, most multimeters can do continuity testing (checking if two points are connected).\nResistance and the OHM meter # Resistors do one thing- resist current.\nUsing the ohm meter function of your multimeter you can find out the amount of this resistance measured in ohms (ohms are represented with a capital omega, Ω) using an ohm meter is simple, just poke and prod with at least one component in between the leads. If there\u0026rsquo;s nothing in between - that is the leads are touching one another- there will be no resistance, if there\u0026rsquo;s no way for a DC voltage to get from one point to the other, that will be infinite or \u0026lsquo;overload\u0026rsquo; resistance\nBut, uh, why should you care.\nWell, resistors on their own are mostly useless - well, except for making heat. In most circuits though waste heat is something we want to avoid.\nThe reason you should care is because we can use resistance for doing important things in a circuit. For example,\nin this circuit we have two resistors of the same value in parallel hooked up to a voltage source. Because they\u0026rsquo;re the same value each will have half the voltage of the source across it. It\u0026rsquo;s a voltage divider!\nWhile this divides it in half each way, we could adjust the values to get different ratios.\nThis isn\u0026rsquo;t the most efficient or by-any-means the best way to get a lower voltage, but it does work, and in some applications is a perfectly reasonable solution.\nVoltage, Ground, and the Volt Meter # Voltage can be thought of as the \u0026lsquo;pressure\u0026rsquo; in a hose. (And a battery the pump)\nHowever, this pressure is relative to another point, the point we usually take reference to is called \u0026lsquo;ground\u0026rsquo;, though this doesn\u0026rsquo;t have to be the case- you can measure the voltage across a single resistor or other component too.\nJust remember, measuring the voltage with both probes at a point or along the same wire doesn\u0026rsquo;t make sense because a volt meter only tells you the voltage difference between two points. This would be like seeing the pressure difference in hose between two nearby points, obviously the pressure of one point minus the other will be 0.\nIn general, there are two primary ways you will work with voltage- AC or DC, these stand for Alternating Current and Direct Current.\nDC is simply a constant voltage level output. AC on the other hand is any time varying signal, usually (but not always!) periodic (repeating) and most commonly a sine, though many other waves are used like square, triangle, saw, and any mixture of these, including the same signal with a DC offset. Not here that AC is technically referring to the current having this shape and not the voltage, it\u0026rsquo;s just that in the basic scenario with a constant load, the current and voltage waves will look the same\nYour multimeter will likely have two different settings for measuring voltage, one for DC and one for AC.\nOf note, most inexpensive multimeters are not true RMS (Root Mean Square) meters, meaning the reading of AC voltage is not an accurate measure of how much energy the wave can deliver unless it\u0026rsquo;s a clean, no DC offset sine wave. Imagine a square wave like the above, with the same height, but where the peaks are thinner, with longer periods of rest in between (this is known as having a lower duty cycle), in this case the wave would still have the same Voltage Peak-to-Peak (Vpp) value but on average wouldn\u0026rsquo;t be able to carry as much energy.\nThat\u0026rsquo;s where RMS comes in, it is effectively the measure of how much energy that waveform can deliver and is much, much more useful in general. RMS is a topic we\u0026rsquo;ll be covering later, but to wet your appetites, this image from Wikipedia may help: RMS on Wikipedia Of note, from a mathematical perspective all time varying signals can be represented as an infinite number of sine waves added together, this is actually used to do practical computation in many things, and what is used if you ever want to get into digital signal processing. I only mention it here because I foresee it being a rabbit hole someone could fall down when trying to gronk what RMS is. Again, we\u0026rsquo;ll talk more about all of this latter, so I\u0026rsquo;m going to move on for now.\nFourier Series on Wikipedia If you\u0026rsquo;re feeling really adventurous Chapter 28 - Signals \u0026amp; Systems has more resources on this topic, but we\u0026rsquo;ll get there eventually.,\nCurrent and the Ammeter # If voltage is the pressure in the hose, then current is how much water actually flows. This analogy holds up too, because if we use a resistor to kink the hose and the flow is restricted, the current will go down.\nIf you were to stick a fork directly into the wall outlet (Don\u0026rsquo;t), all the current the wall can give will try to flow though. It\u0026rsquo;s like hooking up a fire hose to your spigot- at least until the breaker blows (the breaker is there to prevent exactly this).\nNow, when you plug in any normal appliance you (hopefully) don\u0026rsquo;t blow a breaker. Plus, you know some things use more power than others. So, obviously each device restricts current draw to some extent.\nJust placing a resistor in line will do this. In fact, you\u0026rsquo;ll often hear the term \u0026ldquo;current limiting resistor\u0026rdquo; for exactly this reason. As mentioned before though pretty much all resistors do is produce heat, so unless you\u0026rsquo;re after a space heater usually that power will be used doing something more useful (making light, moving a motor, etc.)\nStill, in most cases, we can roughly model those useful effects the same as we would a resistor and make our lives easier.\nThis brings us, finally, to the most important equation in all of circuitry, behold:\nOHM\u0026rsquo;s Law # \\(V=I\\times R \\implies R = \\frac{V}{I} \\implies I = \\frac{V}{R}\\) It\u0026rsquo;s really just one equation, \\(V=I\\times R\\) , but the different ways to rearrange it are important.\nAs for what it actually means: that is, Voltage = Current * Resistance\nor, Resistance = Voltage / Current or, Current = Voltage / Resistance I can not in words convey how important this equation is. If there is any single equation you should have related to electricity committed to memory, it is this one - though, before you commit it independently, you should consider how it relates to the power equation from the start, and how you can substitute in ohm\u0026rsquo;s law.\n\\(P=I\\times V \\implies P = I \\times I \\times R \\implies P = I^2 \\times R\\) The good thing here is that if you know any two of the four (P, V, I, R) you can find the other two, you just might have to do a smidgen of algebra.\nBack to the ammeter,\nTo measure the current though a circuit we can\u0026rsquo;t just probe between two points as before though. Instead, the probes need to form the exclusive path that part of the circuit can flow through.\nIn practice, this means the wire you want to measure current through will need to be cut and the ammeter\u0026rsquo;s probes hooked up at either end, making the meter part of the circuit. If you want to measure flow, you actually have to put the flow meter in line!\nCurrent, just like voltage, can vary, and in AC circuits usually does. This leads to some more interesting topics like \u0026ldquo;power factor\u0026rdquo;, but we\u0026rsquo;ll get to that later.\nContinuity Tester # The continuity tester does exactly what it\u0026rsquo;s name implies, it makes sure two points are connected electrically.\nIf you have a piece of metal and put both probes on, it should beep, but if you put the probes on rubber, they clearly will not be. The continuity tester isn\u0026rsquo;t really much different from the ohm meter in operation, and many will actually display the resistance if there is any.\nThe main use is that it beeps when the resistance is low enough to be confident two points are electrically connected or for checking that two points aren\u0026rsquo;t connected (such as ensuring there\u0026rsquo;s no short between two pins of a small part)\nOf note, the continuity tester is not magic. It works by applying a small voltage to the circuit and checking if it can pick up that voltage on the other probe. If you\u0026rsquo;re working on something particularly sensitive, this small voltage could destroy it. This is why it\u0026rsquo;s good to know how your tools work!\nThe Lab Power Supply # Lab Power Supply Units or \u0026lsquo;PSU\u0026rsquo;s are useful because, unlike your phone charger which puts out a singular voltage of 5 volts (ignoring fast charging), they can have their output voltage varied. Usually the range is between 1 and 35-ish volts, though if you need more, there are options.\nThough, probably most important for a lab power supply is current limiting, useful when you\u0026rsquo;re unsure of how much current your circuit might sink or need it for safety. Sometimes you may just want to hook up your freshly made circuit with the current limit very low as a method of finding if there\u0026rsquo;s a short without making the entire thing go up in smoke.\nThis is a good time to bring up the common myth \u0026ldquo;It\u0026rsquo;s not the voltage that kills you, it\u0026rsquo;s the current!\u0026rdquo;\nBullshit.\nConsider the following required viewing before you ever go near a live circuit, but don\u0026rsquo;t let his confidence lead you to believe electricity isn\u0026rsquo;t dangerous. It is, and that\u0026rsquo;s his real point. It can and does kill electricians and electrical engineers regularly. More often than not due to impatience.\nNot all power supplies sold as lab power supplies have current limiting. If it doesn\u0026rsquo;t current limit, don\u0026rsquo;t buy it. It technically only takes about 100mA or so to outright kill you, and with even less you can lose muscle control and get stuck holding the thing shocking you. Keep in mind, 100mA is really not much! Your phone charger can probably put out about 20 times this…. Sort of… What you should keep in mind is the resistance of the human body. This is massively variable (especially if your hands are wet or sweaty) but is generally so high that actually getting this much current to go through you is actually a bit of a challenge. So, the takeaway? Keep shit dry, respect high voltages which can just arc right through the skin, and don\u0026rsquo;t be dumb ass. Will you die using a non-current limited supply? Probably not. Should you risk it when you don\u0026rsquo;t have to? Hell no. I do high voltage wood burning. This is an activity that kills about 30 people a year. How do I do it safely? I never get close to it while it is on - I throw the switch from a distance. Cool as it looks, it\u0026rsquo;s not worth risking getting bit by the arc and having it stop my heart. When looking for your first lab PSU, it may be overwhelming. You\u0026rsquo;ll see some going for $40, and some going for $500. Generally, the cost difference gets you a few things: Multiple channels and cleaner output (undesired AC ripple in DC supply = bad). For starting out, nobody wants to spend that.\nThe biggest difference the high end ones will often have is being multi-channel and how clean the output is.\nBeing multichannel is basically just two (or more) lab power supplies glued together. This can be handy for powering things that expect a \u0026ldquo;split rail\u0026rdquo; commonly OpAmps (a part we\u0026rsquo;ll talk about later) will want to be powered with both +12 and -12 volts. You need two supplies to get both (and you have to wire them in a special way to do it)\nFortunately, you can get around needing two supplies to start with by using a little module to generate those voltages for you from another supply. These are usually ~$5.\nOutput cleanliness is a matter of how constant is the signal coming out. If you set it to 10V but it\u0026rsquo;s a jittery signal randomly swinging from 9V to 11V super rapidly, that\u0026rsquo;d be super dirty. You want it to be constant and smooth. This example is extreme though and it\u0026rsquo;s unlikely you\u0026rsquo;ll be working on anything where you need that clarity for a while.\nSo, while there are some downsides, I recommend grabbing pretty much the cheapest lab power supply you can find that allows for setting current limiting (constant current, or CC is the same thing) and one of these boost/buck converters. Just be aware of its limitations and confirm its voltage with your multimeter. Also, confirm it\u0026rsquo;s current limiting works by intentionally drawing a higher load through a resistor and checking that the voltage drops in response.\nFor example, if you set the supply to 10V and hook up a 100Ω resistor, you should expect that to draw \\(I = \\frac{V}{R}\\) → \\(I = 10V/100Ω\\) →.1A (usually this would be written as 100mA)\nSo, if you set your supply to max out at 50mA, you should see the current remain constant at 5mA but the voltage drop to ~5V. If this doesn\u0026rsquo;t happen, current limiting may not be working.\nif you can find a used dual or tripple-output power supply where each channel has adjustable voltage and current limits at a good price, go for it. I nabbed a dual output supply on EBay for around $50 + another $50 shipping since it\u0026rsquo;s a good 30lbs or so, but that\u0026rsquo;s still a chunk of change.\nThe Frequency or Waveform Generator # Frequency generators can be used to output a signal that is alternating, unlike the DC signal of the Lab PSU. Usually they\u0026rsquo;ll support a range of wave shapes, frequencies, amplitudes, and DC offsets. Many support far more than this, though the applications for the more advanced modes are few. If you\u0026rsquo;re just starting out, you can (with precautions) just use the audio output of your computer or buy an inexpensive one for under $20, unlike the expensive example below:\nhttps://en.wikipedia.org/wiki/Arbitrary_waveform_generator\nOf all the equipment on this page, this is probably the one you can most easily scrape by without or DIY cheaply enough with a microcontroller and a Digital to Analog Converter (DAC) - something I\u0026rsquo;ll cover how to do later.\nIf you\u0026rsquo;re only working on digital electronics, it\u0026rsquo;s less likely you\u0026rsquo;ll need one, but if you\u0026rsquo;re in the analog world, they\u0026rsquo;ve very helpful for checking the frequency response of your circuits. For example, say you want to make an simple circuit to boos the bass of an audio output - You\u0026rsquo;d want to check what frequencies it raises and what frequencies it lowers.\nThis example is actually sorta bad because the better way to do that is to run white noise though the circuit and look at the frequency response as a whole. But, trust me, there are plenty of times you\u0026rsquo;ll just want a basic signal - like a sine wave at a specific voltage and frequency - to test with. The Oscilloscope # The oscilloscope (or OScope or simply Scope) allows you to see an AC signal and how it varies over time as a plot of Voltage on the Y axis and time on the X.\nMore simply, it lets you watch how your circuit behaves over time.\nMost OScopes will allow you to look at multiple signals at once, with one overlaid on the other. Furthermore, most support X-Y mode, where the plot is actually the voltage of one input as the X axis and the voltage of another as the Y, moving a dot and it\u0026rsquo;s trail around the screen. In fact, this is how the first computer monitors worked:\nModern OScopes look much different than their phosphorescent green ancestors, though:\nHowever, a decent \u0026lsquo;Digital Storage Oscilloscope\u0026rsquo; or DSO like the one above run a minimum of $300 at the time of writing, so many hobbyists opt for older scopes like this one:\nNote, a lot of hobbyists will try to get by on a really cheap new scope (less than $100).\nThere\u0026rsquo;s a particularly popular really cheap (often under $10) exposed red PCB one and just… don\u0026rsquo;t. Either get a used scope (often around $100) or get something good outright, as for \u0026ldquo;good\u0026rdquo; I\u0026rsquo;d really recommend the Rigol DS1054Z(1), or the Diglent Analog Discovery 2 which packs a lot of these tools all into one thing. I know it\u0026rsquo;s a lot of money, but ideally this is something you can think of as an investment.\nIf you absolutely want the cheapest possible option, you can go through the mild headache of setting up a Raspberry Pi Pico (~$4) with Sigrok-Pico. You\u0026rsquo;ll need some resistors (very cheap) and probably the breadboard with the pico\u0026rsquo;s pinout. Total price should be around ~$15. These are going to be god awful analog inputs though - they\u0026rsquo;re only 7-bit, so you get 128 different values out and the max sample rate is 120Msps… not awesome, but maybe you don\u0026rsquo;t need much.\nRegardless, this still hasn\u0026rsquo;t really told you why you\u0026rsquo;d want one.\nWhile the multimeter is great as a quick diagnostic tool, it only tells you the value of whatever you\u0026rsquo;re looking at in that moment. Usually, for a circuit to be interesting, different signals are changing in values all the time. If it\u0026rsquo;s digital, those values should just be on or off, if it\u0026rsquo;s analog, they could be anything.\nBut that brings up the first use - confirming a digital signal is actually okay.\nIt\u0026rsquo;s pretty common for a signal you expect to transition between on and off (or off and on) more-or-less instantaneously to have some switching time. Making the what-should-be-a-square wave look like more of a hill. This can cause the digital circuit to freak out because the value while in that slope isn\u0026rsquo;t really on (1) or off (0). If you\u0026rsquo;re curious about this, look at the Wikipedia page for eye patterns.\nIf it\u0026rsquo;s analog, well, the scope is your way to look at what is going on at all. You can use it to figure out what frequency a signal is, what it looks like, what voltages its swinging between. You can hook up two signals and let the scope to math on them to see how they\u0026rsquo;re related in some way (if you subtract them, do they cancel out?)\nIt\u0026rsquo;s also usually possible to setup the scope to only capture a brief window when a signal changes. Say you know that right after one signal turns on you expect another signal to do a lot of things, but very briefly. You can set this up to trigger on that signal and record that otherwise hard to isolate signal.\nFor most modern scopes, this is only scratching the surface. For example, they\u0026rsquo;ll usually let you view the spectrum of an incoming signal as well - but we\u0026rsquo;ll get there with time.\nQuake on an oscilloscope (YouTube)\nThe Logic Analyzer # Logic Analyzers… analyze logic. Who could\u0026rsquo;ve guessed?\nBut what does that mean? Well, in reality they are somewhat similar to an oscilloscope in that they show a voltage over time, the difference is they only show either on or off over time based on the set TTL (Transistor–transistor logic) voltage. This lets you eavesdrop on the digital communication going on over a wire. Here\u0026rsquo;s an example output:\nIn this particular encoding, the longer high bumps represent a 1 and the short high bumps a 0, so you\u0026rsquo;re looking at the binary that was sent over a wire. While it\u0026rsquo;s common that a wire sends raw high for a 1 and low for 0, other schemes, like the one above, are used a lot too. For most encodings the software can actually be used to decode the received data into raw binary or if it was human-readable characters it can get those characters out for you too.\nUsing a logic analyzer is pretty simple, most today are connected to your computer over USB and then use software like Pulseview as shown above, then you just select the sample rate (how many times per second to check the wire, here 1MHz) and the number of samples to collect and hit start. You may want to set up a trigger too - which does more-or-less the same thing as for the OScope above.\nMost logic analyzers support 8 or more simultaneous data streams, though in the picture above I\u0026rsquo;m only using one.\nYou might be wondering why you\u0026rsquo;d even want a logic analyzer. Isn\u0026rsquo;t this just an OScope but worse?\nI mean, sorta, but:\nAll logical analyzers will provide data decoding based on protocol Some scopes will do this too, but it\u0026rsquo;s less common Logic analyzers will usually have a lot more inputs (Between 8 and 32 is common) Usually for a given sampling rate they\u0026rsquo;ll be cheaper Actually, they\u0026rsquo;re just cheaper in general The window of time you can record is generally much, much longer Often, this time window is effectively infinite - as long as it can stream data to the computer as fast as it can capture it. Probably the most common use of a logic analyzer is to check that code running on a small processor is causing the correct signals to be output on some pins and at the correct time. As you should\u0026rsquo;ve seen from the previous chapters, sometimes writing that code can be error prone, so having a way to verify it\u0026rsquo;s working correctly - or look at the signal when you know it\u0026rsquo;s not - is quite handy.\n[TODO] Evaluate Using a pi Pico as a logic analyzer\nSoldering Iron # It\u0026rsquo;s a big ol\u0026rsquo; heat stick. Grab some solder and melt it around a component to bond two things together with a nice conductive glob of metal.\nhttps://www.digikey.com/en/maker/blogs/rohs-vs-non-rohs-soldering\nHeat Gun # "},{"id":58,"href":"/engineering/circuits/intro/3-lcr/","title":"3 Lcr","section":"Engineering","content":" OHM\u0026rsquo;s law, Nodal \u0026amp; Mesh Analysis, Superposition, Thevanins # ⅏ ⟛ Ω # [TODO]\nResistors # [TODO]\npotentiometer read from Arduino full range (center tap or max resistor)\nLCR Meter # Capacitors # [TODO]\nKemet Capacitor Simulator\nTrue, Reactive, Apparent \u0026amp; Deformed Power\nWhy electrolytic capacitors are actually kinda shitty 💩 (YouTube)\nIdeal Capacitors aren\u0026rsquo;t real\nCap Types: Electrolytic \u0026amp; Ceramic - Collin’s Lab Notes (YouTube)\nCapacitor Types P2: Tantalum \u0026amp; Film - Collin’s Lab Notes (YouTube)\nInductors # [TODO]\nRGB LED, Inductively Powered, Frequency Controlled (YouTube)\nMotors\nTransformers, Variacs # World\u0026rsquo;s Most Powerful Pancake Slayer Tesla Coil? Melts Copper! (YouTube, Plasma Channel)\nPlanar Transformers # image stolen from Raspberry Pi PoE+ Hat product page [TODO]\nDecibels # [TODO]\nHow to read logarithmic first, example for why they\u0026rsquo;re needed: log-scales demo in uPlot (github)\n# Filters # The easiest way to understand filters is to see them in action with audio, so, well before we ever look at a circuit you should check out Opinionated Music - Filters .\nThere are many ways to delineate between types of filters, but initially the most convenient is to differentiate between passive filters and active filters. Passive filters don\u0026rsquo;t need extra power supplied to them, the components used are only capacitors, resistors, and inductors (no transistors or integrated circuits like OpAmps which may require their own power).\nWe\u0026rsquo;ll focus on these passive filters here first, then we\u0026rsquo;ll check out active filters in the next chapter.\nRC Low / High Pass (Integrator/Differentiator) # https://en.wikipedia.org/wiki/RC_circuit\nRL Low / High Pass # https://en.wikipedia.org/wiki/RL_circuit\nRLC Low, High, Band Pass \u0026amp; Band Stop # Now with Resonance! https://en.wikipedia.org/wiki/RLC_circuit\nWhy go Active? # Passive filters have some limitations, most notably their cutoff is pretty shallow. If we want to reach our stop band sooner, we need to use active components. More over, without having any gain, the total signal power will be reduced, which is often not desired.\nRC Low Pass Filter (YouTube - All About Electronics)\nSeries Resonance in RLC Circuit (YouTube - All About Electronics)\nTransient Analysis of the RLC Circuit (YouTube - All About Electronics)\nRelays # https://en.wikipedia.org/wiki/Relay\nIn the next chapter, we\u0026rsquo;ll look at transistors, which are what you probably think of when you think about an electrically controlled switch (that is, using one signal to turn another on and off) but if you just want to turn a signal on and off, don\u0026rsquo;t need to do it very often, and need a huge ratio between the control power/voltage and the signal being switched, - for example, using a microcontroller to turn on or off an incandescent bulb - relays are awesome!\nFundamentally, relays are just a light switch with a magnet to pull the switch closed.\n[TODO] solid state vs old school\n"},{"id":59,"href":"/engineering/circuits/intro/4-sim/","title":"4 Sim","section":"Engineering","content":" Software Simulation # [TODO]\nCircuit Simulator\nSimulide\nVCV Rack?\n"},{"id":60,"href":"/engineering/circuits/intro/todo/","title":"Todo","section":"Engineering","content":" ? - Making Something # As I\u0026rsquo;m writing these, it\u0026rsquo;s occurring to me I\u0026rsquo;m really leaving out the practical. If somebody really wants to lean how to do electronics stuff, even at the hobbiest level, they need to be able to\nKnow how to pick parts Know how and where to order parts How to actually assemble things (a bit of mechanical know-how) Feel comfortable making things that do things Beginner projects then are a bit of a problem. Doing it Shu Ha Ri style, we need something to start with to just blindly follow (Shu) and get a taste for it. The problem is, most options at this stage pretty much suck for either being\nuseless (solder practice boards) Too difficult (anything SMD to start) Not modern (no micro controllers) Yes, this conflicts with the no SMD to begin with Too\u0026hellip; general → people want to make something they\u0026rsquo;re actually passionate about. To fix this, I want to come up with a list op options for first projects that range across intrerests, a \u0026ldquo;why you should care\u0026rdquo; for each (cost, not available commercially, freedom to make something personal, etc.).\nSo far, the best bet I\u0026rsquo;ve found is Guitar pedals from PedalPCB and parts from StompBoxParts \u0026amp; Digikey.\nIdeals:\nGuitar pedals from PedalPCB and parts from StompBoxParts \u0026amp; Digikey. Alt. Eurorack Retro computing? RC Cars/Drones? Atari punk console and start a rack for using synths to teach electronics? This could also still be a pedal and hook it into synth later? I might make an OSHW eurorack variant that\u0026rsquo;s maximally cheap for OpGuides "},{"id":61,"href":"/engineering/circuits/parts/","title":"Parts","section":"Engineering","content":" 24½ - Parts # When thinking about electronics, it\u0026rsquo;s easy to focus on the bits that electricity actually flows though. This chapter is for everything else\nPart Codes # Okay, sort of still electrically relevant, but as your peruse your options for parts you\u0026rsquo;ll see some patterns in how things are named, such as diodes starting with a 1N prefix. If you want to know more about that, these links are decent:\nReading Transistor Markings (Electronics Express) All about circuits forum Potentiometers # including sliders, motorized, dual, linear, exponential, logarithmic, etc.\nKnobs, Key-Caps # Enclosures # Adhesives # Adapters # + PCB footprint adapters, like SOP to DIP\nWires # Stranded, enamaled, etc.\nButtons # Switches # SPST DPST etc\nEncoders # vs a pot, w/ a button\n"},{"id":62,"href":"/engineering/circuits/pcb/","title":"Pcb","section":"Engineering","content":" Chapter 27 - Let\u0026rsquo;s make our own PCB # Printed Circuit Borads look like something reserved for only big business, but that is very much so not the case. It\u0026rsquo;s suprisingly cheap to get smaller boards made, espically if you\u0026rsquo;re okay with waiting a week or two on international shipping. But, let me back up- what even is a PCB?\nWell, when anyone first starts with circuits, they go for the ever popular breadboard:\nImage by Vishnu Mohanan Then, you may decide to make a more reliable version, soldered together on a perma-proto board:\nBut ultimately, the best, most reliable way to build your circuit is with a PCB:\nIn case it\u0026rsquo;s not obvious, these three images are not of the same circuit. So, you can\u0026rsquo;t directly compare complexity between these images. Now, there\u0026rsquo;s a few things you should notice about the version on the PCB:\nIt\u0026rsquo;s a hell of a lot more compact The wiring is all part of the board - it\u0026rsquo;s very difficult to correct a mistake at this point But it\u0026rsquo;s more reliable, no risk of a lose wire or bad contact like in the breadboard The parts are much smaller This isn\u0026rsquo;t required - you could use the same, through-hole parts, but generally these Surface Mount Device (SMD) components that you see are actually easier to work with and, due to their small size, keep cost down So, how do you make one? Well, software is needed obivously. For that, there\u0026rsquo;s many options but for most people the free and open source tool KiCad will do everything you need. So, go grab the latest version of it from https://www.kicad.org or your repos if you\u0026rsquo;re using Linux. Get that installed. Then, go ahead and watch this video which does a better job of explaining things quickly than I possibly could in text:\nimage/svg+xml 1) Create a project File New Project New Project cheatsheet 2) Eeschema : draw the schematic Add components : A Move item1 : M + Copy item : C + Copy selection : + Shift Delete item : Del + Delete selection : Shift Ctrl + + Rotate item : R + Mirror item : Y + X / Add wires : W Edit properties : E Add power symbols : P Add no-connect : Q Add text : T Add labels : L List of shortcuts : ? Grab item1 : G + Edit value : V 1grab keeps connections, move doesn't 3) Create new components as necessary If editing an existing library : Select working library Draw component Add pins Library editor / Load component to edit from current library Create new component Save current component to new library / Update current component into current library Preferences Component libraries How to load the new library in Eeschema : Component library files Add Select your .lib file P 4) Create and assign footprints Footprint Editor If editing an existing library : Select active library Draw component Add pins / Load footprint from library New footprint Create new library and save current footprint / Save footprint in active library Run CvPcb to associate components and footprints Preferences Footprint libraries How to load the new library in CvPcb : Append with wizard Select your .pretty folder Generate netlist 6) Export Gerbers File Plot Generate Drill File Plot + Check result using GerbView Anthony Gautier - http://silica.io http://kicad-pcb.org/help/documentation/ 5) Pcbnew : design the layout Read netlist Select top layer : Copy item : Rotate item : Add via : Switch posture : Add tracks : Switch track width : Drag track : Fill zones : 3D viewer : Design Rules Layers Setup Design Rules + Grab item1 : M + C + R + V Q X W D B + 3 Alt Shift + ( ) G + 1grab keeps connections, move doesn't (Only for AZERTY keyboards) Move item1 : Select bottom layer : PgDn PgUp Sorce: Foalyy @ https://forum.kicad.info/t/cheatsheet-for-kicad/5247 [TODO] - pick a PCB design to walk though making on this page - maybe an APC?\nPCB specic things - Layers, Vias, fills, silk, mask, 0-ohm resistors, Make it work Make it not emit a ton of RF or go to shit when around it (everything is an antenna) Make it pretty ref that weird russian autorouter as limits on this Make it repairable Pretty + Repairable means we need good, well labled silkscreen, componet spacing, etc. Know when to do a PCB or a Perma-Proto Assuming parts will only be available for so long Do not assume same package = same pinout Do not assume a sane pinout, even in a device family. The tab can be anything! Expect to need to order a 2nd time https://llllllll.co/t/pcb-art-artfully-shaped-copper-traces/22027/2t\nTweet from @GregDavill David Hulton, @0x31337 Let KiCad and Python design your PCB Coils [Hackaday]\nKiKit for KiCAD\nKiCad STM32 + RF + USB Hardware Design (YouTube, Phil\u0026rsquo;s Lab)\nhttps://hackaday.io/project/174310-copxie-chainable-dual-57-tiny-led-matrix\nChapter 26.1 - PCB Components # It turns out that there\u0026rsquo;s quite a few components which you can make into the PCB itself, basically costing no more than the price for the extra area on the PCB.\nProbably the most common of these to see is antennas, usually for 2.4Ghz (WiFi and Bluetooth). These require some pretty gnarly math to design and make actually compliant with radio frequency regulations, but they\u0026rsquo;re still pretty sweet.\n[TODO] picture\nYou\u0026rsquo;ll also ocassionally see PCB Spark gaps (EEVblog, YouTube) which are useful for protecting againt high voltage spikes. Similarly, it\u0026rsquo;s possible to make a fuse by using a very thin trace. See This video by Leaf Rex (YouTube)\nIt\u0026rsquo;s also possible to impliment coils, useful for inductive coupling or transformers - see RGB LED, Inductively Powered, Frequency Controlled (Wolf Tronix, YouTube).\nGetting a bit weirder, you can also make a capacitor by using traces on different layers; however, you\u0026rsquo;ll usually only be able to get up to a few hundred pico ferrads max. It\u0026rsquo;s typically not worth the complexity introduced, espically as the exact value will be variable due to manufacturing tollerances.\nEntering the relm of black magic fuckery, you can actually make high frequency filters by adjusting the length and gaps between traces - these are called distributed element filters and are really fucking cool.\nBack to being useful for normal humans, flexible PCBs, while expensive, may allow you to design some things that would otherwise be quite difficult. Typically, the flexiblity shouldn\u0026rsquo;t be repeatedly stressed, but it\u0026rsquo;s a good way to add small, reliable connections between things. Tweet from @LoialOtter Finally, I want to mention that there\u0026rsquo;s some pretty esoteric PCB manufacturing methods, though the weirder you want, the more you pay. For example, making PCBs with Heavy copper traces (Hackaday) is totally possible, but you\u0026rsquo;ll pay for it.\nChapter 26.2 - Pretty Boards \u0026amp; Badges # Source: @AkioOhtori on Twitter https://hackaday.com/2018/08/21/all-the-badges-of-def-con-26-vol-2/\nFurby Theremin Badge (Tindie, Harbinger LTD)\nhttps://github.com/badgeek/svg2shenzhen\nhttps://mitxela.com/projects/melting_kicad\nOSH Park After Dark - Clear Solder Mask\nChapter 26.3 - Alternatives to PCBs # [TODO] Wirewrap, permaproto, etc.\n"},{"id":63,"href":"/engineering/deeper/comparch/","title":"Comparch","section":"Engineering","content":" Chapter 37 - Let\u0026rsquo;s make our own CPU # How To Make A CPU - A Simple Picture Based Explanation (RobertElder)\nThis chapter will be split into three parts:Part 1, understanding the interval workings of a CPU. This is effectively just a computer architecture class, and will be by far the largest section.Part 2, making that CPU on an FPGA.Part 3, making that CPU do something. [TODO] http://www.lighterra.com/papers/modernmicroprocessors/\n[TODO] A Density Metric for Semiconductor Technology - past nm for sizing\nPart 1: Computer Architecture # Motivation: # Any sufficiently advanced technology is indistinguishable from magic.\nArthur C. Clarke\u0026rsquo;s 3rd law Computers, to a normal user, look like magic. In previous chapters I\u0026rsquo;ve shown you how to harness this magic though programming, and revealed at least some of its internal workings in Chapter 3, Into The Hardware. But this is all low level magic, the sort the lowest level mages can handle. To truly master the craft, one must dive deep into the dark arts and study the origin of magic itself and understand how we breathe life into otherwise inanimate rock. Back in Chapter 14, Semiconductors I covered how the basics of the very, very low level work to form semiconductors, then in Chapter 15, Digital Logic we saw how transistors could be chained to give rise to the fundamental logic gates. Finally, last chapter we looked at the basics of FPGAs to see how they let us make large scale logic circuits quickly. That all builds to this, making complex logic circuits that actually do useful work. These can be everything from application specific tasks, like bitcoin miners or hardware encoders and decoders for video codecs, to the generic CPU. For this guide, I\u0026rsquo;ll focus on the CPU. However, I think this can be relatively boring without further motivation, so, before we actually get to the CPU, let me show you how and why CPUs have evolved\n[TODO] loop memory operations w/ godbolt, cisc/risc, chiplets, core counts, branch prediction, N/S bridge to chipset (memory controller), etc. Moore\u0026rsquo;s Law ending, voltage minimums, minimum transistor sizes before quantum effects, etc.\nHere you can see there are three memory operations(2x MOV and one ADD that have DWORD PTR in them). With 4-byte ints on a 4Ghz CPU, this works out to $ 3 \\times4(Bytes) \\times (4 \\times10^9(hz)) = 48GB/s $. This is pretty close to the 55GB/s that this linux tool reports that I get, per core, on my system. Fortunately, most modern CPUs have ways of parrelizing these operations internally, having multiple integer units per core as well.\n[TODO] newer systems, https://www.cerebras.net/cerebras-wafer-scale-engine-why-we-need-big-chips-for-deep-learning/, https://www.anandtech.com/show/14750/hot-chips-31-analysis-inmemory-processing-by-upmem, intel optane\n[TODO]\nData-Level, Task-Level, and Instruction-Level Paralleism (Application Parrallelism)\nInstruction Level Parrelism (Pipelining), Thread-Level and Request-Level Parellism (Architectural Parallelism)\nSingle Instruction Stream, Single Data Stream (SISD)\nSingle Instruction Stream, Multiple Data Streams (SIMD)\nMISD is not used commercially\nMultiple Instruction Streams, Multiple Data Streams (MIMD) (tightly and loosely coupled)\nIn Memory Processing\nNeuromorphic Computing\nPower wall, max Silicon freq, max density before tunneling\nBranch predictor: How many \u0026ldquo;if\u0026quot;s are too many? Including x86 and M1 benchmarks! (Cloudflare Blog)\nPart 2: What Make a CPU tick? # [TODO]\nhttps://computersciencewiki.org/index.php/Architecture_of_the_central_processing_unit_(CPU)#Major_parts_of_a_CPU\nMaybe Ben Eaters bread board CPU series?\nPart 3: Making the CPU # Part 4: Making It Do Something # Before we start, I\u0026rsquo;ll warn you this isn\u0026rsquo;t easy, but it\u0026rsquo;s also not as bad as it sounds, and it\u0026rsquo;s certainly not as bad as it used to be\n[TODO]\nFPGA Linux Kernel drivers\nAn FPGA that only plays Doom\nThe DooM-chip! It will run E1M1 till the end of times (or till power runs out, whichever comes first).\nAlgorithm is burned into wires, LUTs and flip-flops on an #FPGA: no CPU, no opcodes, no instruction counter. Running on Altera CycloneV + SDRAM. (1/n) pic.twitter.com/wd7j4JnfWn\n\u0026mdash; Sylvain Lefebvre (@sylefeb) May 8, 2020 Archive.org backup of the above tweet My Nor - \u0026ldquo;a single board computer that does not have a CPU. Instead, the CPU consists of discrete logic gates from the 74HC series. This computer also has no ALU. Only a single NOR gate is used to perform all computations such as addition, subtraction, AND, OR and XOR.\u0026rdquo;\nChapter 29.1 - FPAAs # ZRNA FPAA\nWeird Things # https://hackaday.com/2020/11/23/a-cpu-less-computer-with-a-single-nor-gate-alu/\n"},{"id":64,"href":"/engineering/deeper/compileassemble/","title":"Compileassemble","section":"Engineering","content":" Chapter 34 - Compilers and Assemblers # https://lee.earth/til/compiling-c-code-a-step-by-step-guide/\n[TODO] Better Firmware with LLVM/Clang\n[TODO] Zig cc: a Powerful Drop-In Replacement for GCC/Clang\nCommon Flags and When to Use them # These flags are not universal, instead they\u0026rsquo;re from GCC. GCC and Clang are the big two compilers you\u0026rsquo;ll see a lot and these flags should be mostly the same between the two. Of course, there are many, many other compilers, but I\u0026rsquo;m going to start with the common stuff\n-o (Output) # Note, this is a lowercase \u0026lsquo;o\u0026rsquo;\nYou should\u0026rsquo;ve seen this already, I\u0026rsquo;m mentioning it mostly to give a brief review of what a flag is, it\u0026rsquo;s basically just another term for an argument to a program where the program is run as program-name argument1 argument2 ... but, usually flags are prefixed by - or --\nin the case of -o it just means, use the next argument as the output name, so using\ngcc input.c -o myprogram gives you an executable named myprogram instead of just input.\nWarnings # Just, read this: https://interrupt.memfault.com/blog/best-and-worst-gcc-clang-compiler-flags - It\u0026rsquo;s a lot more in depth than anything I could write here. It\u0026rsquo;s focused on Embedded development, but should be broadly applicable.\n-S (aSSembly) # -v (Verbose) # Optimization # Note, this is an uppercase \u0026lsquo;O\u0026rsquo;\nAnd now we can get to fun stuff. -O is generally used in levels, here with no space, so there\u0026rsquo;s -O, -O2, -O3, and -Ofast are for speed, and -Os is for size of the binary. (or -Oz for clang)\nTechnically, -Ofast can break your code. This is rather unlikely, though.\nEach of these will take longer to compile but be more aggressive about optimizing the assembly code that is generated from your input. For example, let\u0026rsquo;s look at the code\n1 2 3 4 int mult(int m, int n){ char a[m][n]; return sizeof(a); } This is a very stupid multiply function. Effectively, it\u0026rsquo;s multiplying two numbers by making a matrix of size m by n, and then counting the number of spots in that matrix instead of just multiplying the two numbers. I\u0026rsquo;ve embedded a GodBolt page below with this code on the left, and it\u0026rsquo;ll show the assembly output on the right. At the top you should be able to see a box to type compiler options, go ahead and put in -O. You should see a huge, long mess of assembly that used multiple imul (multiply) instructions be reduced to 3 lines of assembly with only a single multiply. The compiler has figured out that what we were doing was a stupid multiply and optimized it for us.\nHere there\u0026rsquo;s no difference between -O and O3, but with more complex code there often is. Just keep in mind that this is a trade-off, there is the upfront cost of a longer compile time.\n[TODO] Code Size Optimization: GCC Compiler Flags (Interrupt)\n-march, -mtune, -flto, -msse4.2, -mavx, -mavx2 # -ansi # Stripping (Not like that, perv) # Strip command [Wikipedia]\nUnderstanding compilers and common compiler flags # How expensive is integer-overflow trapping in C++? / Hacker News Comments on article\nHow the cpython compiler works\nCS 6120: Advanced Compilers: The Self-Guided Online Course\nRecommended compiler and linker flags for GCC (Red Hat)\n[TODO]\nMaking a compiler and assembler, DIY language eso-lang style\nMaking an interpreted language # Making a compiled language # https://medium.freecodecamp.org/the-programming-language-pipeline-91d3f449c919\nGarbage Collection # Garbage Collection Algorithms + Writing a memory allocator\nContinued Reading # At this point, I highly recommend \u0026lsquo;The Art of Exploitation\u0026rsquo; by Jon Erickson\nFun things # Malloc Geiger (GitHub)\nMovfuscator\nWitchcraft Compiler Collection\nCrinkle - \u0026ldquo;an executable file compressor (or rather, a compressing linker) for Windows for compressing small demoscene executables. As of 2020, it is the most widely used tool for compressing 1k/4k/8k intros.\u0026rdquo;\n"},{"id":65,"href":"/engineering/deeper/fpga1/","title":"Fpga1","section":"Engineering","content":" Chapter 36 - Let\u0026rsquo;s try out programmable logic # Before we get started, please be sure you\u0026rsquo;ve read Chapter 24 - Digital Logic Simulation of an Intel 4004 in TICS (The Integrated Circuit Simulator) a (abandoned?) WIP by Oni, Download the interpreter here, the repo has plenty of examples.\nSome similar pixel art simulation tools are wired-logic, reso, wireworld,\n[TODO]\nFinite State Machines, VHDL, Verilog, FPGA \u0026amp; CPLD internals\nChapter 28.1 - Field Programmable Analog Arrays? # [TODO] https://hasler.ece.gatech.edu/FPAA_IEEEXPlore_2020.pdf\nWeird Ways to do Logic? # Using an EEPROM to replace combinational logic (Ben Eater, YouTube)\n"},{"id":66,"href":"/engineering/deeper/nonsilicon/","title":"Nonsilicon","section":"Engineering","content":" 37½ - Non-Silicon Computing # Most computers today use integrated circuits which use silicon as a semiconductor. This, historically, was not the only option. In the past, there were some chips made with gallium arsenide (such as those in the Cray-3) though it shouldn\u0026rsquo;t be confused with gallium nitride (GaN) which are getting common use not for logic, but for power electronics. Of course, it\u0026rsquo;s not just Gallium. Germanium is also a semiconductor which used to be used for transistors and diodes, and there has been modern research into using a silicon–germanium alloy. Of course, research has found more interesting potential futures to keep our basic transistor style computers going, probably most notably Graphene and Carbon nanotubes.\nStill, that\u0026rsquo;s if we want to keep things relatively same-y. We could go weird. First up:\nQuantum Computing # Optical Computing # Nanomagnetic Logic # Biological Computing # Related # Processing in memory, Analog logic, etc.\n"},{"id":67,"href":"/engineering/deeper/reverse/","title":"Reverse","section":"Engineering","content":" Chapter 35 - Reverse Engineering # Software # Anyone know of good resources for learning binary reversing? Not particular tools necessarily, but like theory and how to think @XMPPwocky on Twitter An Opinionated Guide on How To Reverse Engineer Software is decent.\nfor me personally:\nknow some assembly, and in particular make sure you know the calling conventions for your platform.\nwhen starting out, do it on binaries you can actually run in a debugger and see what\u0026rsquo;s actually happening at runtime.\nlearn common patterns for things like \u0026ldquo;looping over an array\u0026rdquo;, \u0026ldquo;iterating over a linked list\u0026rdquo;, etc. this is very important.\nthe process, at least for me and most of the folks i\u0026rsquo;ve talked to, is one of iteration - start with what you know, use that to figure out other stuff. now you know more things, repeat.\nSo:\ngo for easy wins as much as you can. Strings! I love strings (mind you I don\u0026rsquo;t do malware much). See a printf(\u0026quot;access_check: ACL rule %d check denies action %s for user %s\u0026quot;, foo, bar, baz)? Rename that function to access_check, rename foo to \u0026ldquo;acl_rule\u0026rdquo;, rename bar to \u0026ldquo;acl_action\u0026rdquo;, rename baz to \u0026ldquo;user\u0026rdquo;. Now follow those back as far as you can, with everything that calls access_check. Something calls access_check(woof, bark, meow)? woof is acl_rule, bark is acl_action, meow is user. if you use Binary Ninja right it\u0026rsquo;ll do a lot of this for you, not sure about other tools these days. Look for logging functions especially - not only are they helpful, often they\u0026rsquo;re called by macros that pass the function name as an argument - you can set the name of hundreds of functions with a script that way.\nAlso, symbols obviously help- not just exported/local symbols either. Use imports! if something\u0026rsquo;s passed as the first argument to open, that\u0026rsquo;s a filename.\nstructs structs structs structs. again, binary ninja does really well here because it propagates type information. but for most binaries I encounter, figuring out a handful of structs and looking at how they\u0026rsquo;re passed between functions pretty much makes it clear exactly what\u0026rsquo;s going on. DON\u0026rsquo;T GET STUCK. if you can\u0026rsquo;t figure out roughly what a function does (enough to give it a name) within a few minutes or so of looking at it, bookmark the function and move on- reverse other stuff. Very good chance that\u0026rsquo;ll make it obvious what the function does. If not - remember why you are reversing this binary. If you\u0026rsquo;re doing it to hunt for vulns… does the function handle user input or do security-critical things? If not, MOVE ON. Cheat! see an interesting string? Google it, and search GitHub for it! You never know where open-source code pops up… (or where some helpful engineer has accidentally put proprietary code on GitHub). Not sure what protocol something\u0026rsquo;s using? Look up the company\u0026rsquo;s engineers on LinkedIn- what do they have experience with? Don\u0026rsquo;t be afraid to use things other than the specific binary you\u0026rsquo;re reversing to figure out how it works. oh also if you see a function with loads of xrefs to it that seems really complicated, maybe does a bunch of bitwise operations, maybe uses weird vector instructions you don\u0026rsquo;t understand, and takes at least one pointer as an argument… it\u0026rsquo;s probably memcpy/memset/bzero/str[n]len/str[n]cpy. if it\u0026rsquo;s not obviously something else, assume it is - if its prototype matches memcpy\u0026rsquo;s, call it memcpy_maybe and DON\u0026rsquo;T GET STUCK trying to figure it out exactly unless something else means you need to (e.g. if a vuln would be exploitable only if it\u0026rsquo;s strncpy instead of memcpy\nReversing for dummies - x86 assembly and C code (Beginner/ADHD friendly) (0x41.cf) and pwn.college also look good, but I haven\u0026rsquo;t gotten the chance to go though either link yet!\nCircuits # [TODO]\nTools? # Hardware: # Most tools for reverse engineering are really tools you\u0026rsquo;d use for otheng things anyway plus some special sauce. For circuits, your logic analyzer, OScope, etc. are all still valid; however, you may want to add some tools like a software defined radio (like the HackRF with portapack running mayhem), Jtagulator, Proxmark-3 (with iceman firmware), a Bus Pirate/Shikra, and the ChipWhisperer - and some less specialized, but abnormal for electroics work too, like a microscope, endoscope, and a current probe. Don\u0026rsquo;t like race out to buy these things though - you\u0026rsquo;ll know if you need them. On top of this, you\u0026rsquo;ll need some actual tools - screwdrivers with those weird torx security bit, pry tools to take off a screen, etc. Hardware hacking tends to get rather crazy rather fast, so dont be suprised if you find you need some acids to get at the die in an IC, to throw a board in a freezer to get it nice and cold, or to shine a bright light on an IC to get it to crash.\nDon\u0026rsquo;t forget your search enginer either though- looking up the FCC certification, patents, and documention on anything and everything you can is likely to tell you a lot more a lot faster than you can figure it out by actually poking the thing.\nSoftware: # Binaries: # As for software, the big one is an executable reverse engineering tool like Radare2, Cutter, Ida, BinaryNinja, etc.\nThese let you take a compiled program and work your way back to source code… slowly. Of course, this sometimes isn\u0026rsquo;t necessary. Hell, sometimes you just need to throw strings at the problem. Other times, the reverse engineering tool won\u0026rsquo;t be enough, and you may need to throw DIE, WCC, Binwalk, pwntools, etc. at the problem. Of course, you shouldn\u0026rsquo;t forget about watching the actually active state about the problam either, so GDB is still your friend - and rr and gef make great companions to GDB. Other times, cheatengine may be useful for finding an important piece of memory, Valgrind for finding when memory goes wrong, and you\u0026rsquo;ve always got strace \u0026amp; ltrace handy. Keep in mind that there may be special binary reversing tools for your platform too, like apktool or\nResource hacker may be handy too.\nIf all else fails, there\u0026rsquo;s always the ever-unfriendly hex-editor at your disposal, or Hobbits (GitHub) if you\u0026rsquo;re feeling fancy. Example image from the Hobbits GitHub repo There\u0026rsquo;s also fq which is a super nice tool for working with binary formats. Or maybe Poke.\nIf you happen to need to diff two binary files, biodiff may help. It will try to align the two if a section is missing or added.\nNetworking: # Assuming things start to get network-y, you\u0026rsquo;ll need to be familiar with network-y tools. See the Networking page, but the short version is you\u0026rsquo;ll want to know:\nTraceroute (or mtr) Dig Wireshark netcat (or socat) Scapy Airmon-ng … and your firewall system, be it iptables or something else … and your network config tool. On Linux, ip; on Windows, pain \u0026amp; suffering. With those, you really should be able to about 99% of the reversing \u0026amp; security reseach for networking you\u0026rsquo;d want to do, at least assuming you don\u0026rsquo;t need to setup some crazy, emulated networking environment or that you\u0026rsquo;re not trying to just crack a wifi-password or router password or bypass a captive portal (which is boring and illegal, so not usually worth doing)\nBreaking Things and Watching Them Scream: # Of course, sometimes you just need to break things to see how they work. For that, having a whole pile of fuzzers tends to come in handy\nTrust me, you\u0026rsquo;ll want a VM of basically every system you can think of ready to go. Windows XP through 11, Arch, Ubuntu, MacOS, android, out of date Ubuntu and Android… everything. On each of these, you\u0026rsquo;ll want a full suite of system analsis tools. Task Manager and Top isn\u0026rsquo;t going to cut it here - you\u0026rsquo;re gonna want Process Explorer (or Process Hacker), Process Monitor for Windows and htop for Linux at minimum, though procmon, sysdig, VmStat, lsof, netstat, iotop, nethogs, pmap, and nmon are all awesome in Linux too. Also, in Windows being able to trigger a BSOD is sometimes nice. For that there\u0026rsquo;s NotMyFault and the good ol\u0026rsquo; WinDbg. Occasionally, vmmap might come in handy as well. Keep in mind that on Linux systems you can dive into /proc, /sys, and /dev to get information too.\nBut what about X? # Of course, this list is far from exhaustive. There\u0026rsquo;s a lot of other tools that you\u0026rsquo;ll want depending on the situation - so naturally a search engine is your №1 friend. Hell, you can probably assume it was the №1 friend of whoever wrote what you\u0026rsquo;re poking too, so don\u0026rsquo;t be afraid to google \u0026ldquo;how do I X?\u0026rdquo;, look at stack overflow, and assume that is the same code you\u0026rsquo;re trying to reverse.\n34.1 - Is This Even Legal? # I am not a lawyer, but a lawyer would tell you \u0026ldquo;It depends\u0026rdquo;.\nIt\u0026rsquo;d be nice if you could do whatever you want to anything you own, but IP is a bitch and if you put Linux on your PlayStation, Sony can probably sue you and win- same for emulating a Switch on your PC, getting root on your TV, etc.\nWill they? Probably not. If you\u0026rsquo;re actually woried about it, talk to a lawyer. If you think this is bullshit, then join me in giving everyone the middle finger and getting root on everything you own.\n34.2 - Resources # John Hammond (YouTube)\nLiveOverflow (YouTube)\n\u0026ndash; TODO\nhttps://dogbolt.org/\n"},{"id":68,"href":"/engineering/intro/howtolearn/","title":"Howtolearn","section":"Engineering","content":" Ⅱ - Learn how to learn # Nobody learns (effectively) by being shown what to do. You can watch hundreds of hours of people playing guitar, even explaining how they do it, but you won\u0026rsquo;t be able to randomly pick one up and play if you never have before.\nFurthermore, as much as you can learn from direct reading and instruction, it has its place and limits. This guide, book, whatever you want to call it, was never meant to be followed like instructions. You should go out on your own and poke around, get lost in the weeds as you go. If you find a topic dull, don\u0026rsquo;t read it as in depth. I don\u0026rsquo;t want you wasting your time.\nBreak things. Make mistakes.\nBy the end of this, you should know what a burning resistor smells like, what it\u0026rsquo;s like to try to recover from a Linux system that just won\u0026rsquo;t boot, and how it feels when a bug has been eluding you for hours and your code still doesn\u0026rsquo;t work.\nThe only way that happens is if you try ideas when you get them and do more than what\u0026rsquo;s in this guide. So, please, if you find a topic interesting, don\u0026rsquo;t make this website you\u0026rsquo;re one stop shop - go surf the web.\nFailing is part of learning and proof that you\u0026rsquo;re doing well.\nThese experiences should teach you things in their own right. The smell of burning electronics may help you diagnose a future circuit, the lesson to not fall into a pit of technical debt may help when a bug has engulfed your code, and the late night of terminal only based work as you try to get your computer working again will teach you more than this book ever can.\nTo quote someone much smarter than myself→\n@LiveOverflow You should also constantly be looking for how to break, modify, or look into how things work. For example, try right-clicking on this sentence and select Inspect, like this:\nOwO, What's this? You should see a \u0026lt;p hidden\u0026gt; element, try editing it to remove the word hidden, then the text from that element should appear above this. (this sometimes doesn\u0026rsquo;t work correctly right away, so you might have to right-click and inspect twice, but then you should see the HTML source for this section of the page)\nBut try to take this lesson elsewhere, try renaming a .docx (word) file to a .zip and extracting it, or looking through the ventilation of your electronics to see if you can see what makes them tick, whatever. Curiosity is my primary incentive to learn, and often taking a peek into the innards of electronics or code or machines can reveal a lot.\nIf you\u0026rsquo;re looking for some more advice, see this page, literally titled \u0026ldquo;Advice\u0026rdquo; Other Resources # How To Learn Stuff Quickly (Josh W Comeau)\nUse Google like a pro\nLearn about problems, not solutions (Gareth Dwyer)\nHow to learn things at 1000x the speed (Pranay Prakash)\nMy Engineering Axioms (Martin Rue\u0026rsquo;s Blog)\nxkcd №2501 "},{"id":69,"href":"/engineering/linux/arch/","title":"Arch","section":"Engineering","content":" Chapter 2 - Installing Arch Linux # Some Background # ⬤◯◯◯◯◯◯◯◯◯\nUnlike Windows or Mac which are primarily differentiated by versions (Windows XP, Vista, 7, 10…), Linux has two important things to look out for:\nThe distribution name (Arch, Ubuntu, Mint, Debian, etc.) Kernel version number (5.18 last time this page was updated) So, what do each of these mean?\nWell, Linux is actually just the name of the underlying \u0026lsquo;core\u0026rsquo; of the system, known as the kernel, as such, there are literally thousands of Linux variations or \u0026lsquo;distributions\u0026rsquo;. Some of the well known variants include Ubuntu, Fedora, OpenSuse, and Arch (No disrespect to the other distros out there!). Each of these has a different target audience, with some meant for servers, some meant for casual users as an alternative to Windows, others as work station for hard core computing. They also ship with different software pre-installed to be accessed after the first boot.\nThe other differentiating factor is the version of the Linux Kernel that they use. Some chose to use an older, battle hardened kernel that is known to be very, very stable, others chose a nice middle ground, while yet others continuously release an update to the newest available kernel. There are pros and cons to each model and each has its place; however, the distro I\u0026rsquo;m going to have you install, Arch, uses the (almost) the newest available, updating very regularly. Arch has a reputation as one of the hardest distros to work with, but also one of the most cutting edge, fun to tinker around in, and best documented.\nArch is what\u0026rsquo;s known as a rolling release distribution, which means it gets the bleeding edge features and the newest kernel pretty much as fast as possible, though really the biggest thing that makes Arch special is how bare bones it is out of the box, shipping with basically no pre-installed software. In fact, when you first start it up the only thing you\u0026rsquo;ll see is a screen to type and run commands, and that\u0026rsquo;s where we\u0026rsquo;re going to start. Arch Linux Logo from archlinux.org For most distros like Ubuntu or OpenSuse (feel free to look these up, this page isn\u0026rsquo;t going anywhere) there\u0026rsquo;s a nice graphical, point and click installer which helps you install the system and somewhat mitigates potential risk of killing your original OS (Mac/Win) or losing data; however, the goal of this guide is to learn. Arch\u0026rsquo;s install process, entirely by typing commands in this terminal is hard, but that difficulty leads to a deeper understanding and respect for the system as a whole\nWhen we\u0026rsquo;re done you\u0026rsquo;ll have a system that has exactly what you need and nothing you don\u0026rsquo;t. You won\u0026rsquo;t find weird forcibly installed software like Win 10\u0026rsquo;s Candy Crush App here, and your system will only do exactly what you tell it. Of course, this implies you know how to speak it\u0026rsquo;s language and tell it what you want. Thankfully with some practice you\u0026rsquo;ll get used to running Arch and you\u0026rsquo;ll wonder why you ever dealt with other systems to begin with.\nHowever,\nand I really can't stress this enough, Arch Linux expects you to fully understand your system\n. This is \"enforced\" by making the installation process DIY with relatively little guidance. You're expected to research everything and understand the differences, pros \u0026 cons, of each choice. TLDR; STFW:\nArch is a distro that really expects you to put in the effort. The community, while typically fine, can be a bit… unsavory if you ask questions that are easily answered by google (STFW = Search The Fucking Web) or reading a wiki page. That said… You shouldn't have to R all TFMs.\n(RTFM = Read The Fucking Manual) The problem with this is Linux (and everything with computers) is complicated and getting more complicated by the year. Not that it's the best way of looking at things, but for context, back when I was first getting started with Arch Linux in 2014, the kernel had about 13 million lines of code. Now it has almost 30 million lines. In that time there have been countless additions and changes to the number of options for low level configurations. So, I want to help you understand your system and the choices you'll be making, but I want to help narrow the scope at least a little bit. The Boring Intro Part Of The Manual That You Should Still Actually Read # ⬤⬤◯◯◯◯◯◯◯◯\nWe\u0026rsquo;ll be following along with the Official Arch Linux Installation Guide, so you\u0026rsquo;ll see this page has a lot of quote boxes:\nThis document is a guide for installing Arch Linux using the live system booted from an installation medium made from an official installation image. The installation medium provides accessibility features which are described on the page Install Arch Linux with accessibility options. For alternative means of installation, see Category:Installation process. - Install Guide - GNU Free Documentation License Okay, that\u0026rsquo;s a lot, so let\u0026rsquo;s break it down. By \u0026ldquo;live system\u0026rdquo; this means we\u0026rsquo;re going to be booting into an operating system from our installation media - for almost all situatations, this is a flash drive. This OS is \u0026ldquo;live\u0026rdquo; in that it is a true, full, Linux operating system. It\u0026rsquo;s just running directly off the flash drive. In this case, this live system is really just used so that we can install Linux to a more permanent drive. So, rather ironically, we\u0026rsquo;ll be using Linux to install Linux.\nThe \u0026ldquo;with accessibility options\u0026rdquo; page is if you need something like a screen reader or if you have a braille display. I have no experiance helping with these things. More relevant to most readers, the Category:Installation process page has a bunch of very important steps that aren\u0026rsquo;t on this page. Most importantly, there\u0026rsquo;s a page about Setting up a Dual Boot system with Windows - which I\u0026rsquo;ll be going through here. I won\u0026rsquo;t be covering the process if you have a Mac, but there is a page for that: Mac Installation. Note that Apple\u0026rsquo;s newer computers with their own processors aren\u0026rsquo;t supported. are still a massive pain in the ass to get working.\nBefore installing, it would be advised to view the FAQ. For conventions used in this document, see Help:Reading. In particular, code examples may contain placeholders (formatted in *italics*) that must be replaced manually. - Install Guide - GNU Free Documentation License Alright, let\u0026rsquo;s buzz over to the FAQ and see the relevant bits:\nWhy would I not want to use Arch? # You may not want to use Arch, if:\nyou do not have the ability/time/desire for a \u0026lsquo;do-it-yourself\u0026rsquo; GNU/Linux distribution. you require support for an architecture other than x86_64. you take a strong stance on using a distribution which only provides free software as defined by GNU. you believe an operating system should configure itself, run out of the box, and include a complete default set of software and desktop environment on the installation media. you do not want a rolling release GNU/Linux distribution. you are happy with your current OS. - FAQ - GNU Free Documentation License All of these are very good points. The fact of the matter is Arch does take time and know how to maintain. You\u0026rsquo;re standing on the edge of a cliff here. You have to be dedicated and willing to learn. You also have to have hardware that actually works with Arch (which should be the case with most anything but Chromebooks and newer Apple hardware). The one that I think is hard for users starting out with Arch is the last point \u0026ldquo;you are happy with your current OS.\u0026rdquo; - I\u0026rsquo;m going to take a bet and say you don\u0026rsquo;t really fully understand why you\u0026rsquo;d be unhappy, let alone un happy with things enough to justify all this work. All I can say is trust me and you\u0026rsquo;ll see.\nThere\u0026rsquo;s also that Help:Reading (which, yes, sounds like it really wants to insult your intelligence) but it is helpful. The most notable thing here is\nSome lines are written like so:\n# mkinitcpio -p linux Others have a different prefix:\n$ makepkg -s The numeral or hash sign (#) indicates that the command needs to be run as root, whereas the dollar sign ($) shows that the command should be run as a regular user.\n- Help:Reading - GNU Free Documentation License which will be exteremly relevant later.\nThere are other things of relevance in the FAQ, but I think a lot of it won\u0026rsquo;t mean much at this point, so let\u0026rsquo;s move on.\nFor more detailed instructions, see the respective ArchWiki articles or the various programs\u0026rsquo; man pages, both linked from this guide. For interactive help, the IRC channel and the forums are also available. - Install Guide - GNU Free Documentation License A little self referential here, but good advice- the ArchWiki is really awesome and if you need help it\u0026rsquo;s a good idea to just search the Wiki for the topic you\u0026rsquo;re stuck on. This also mentions \u0026ldquo;man pages\u0026rdquo;. This is where I have to go down a bit of a tangent.\nTo install Linux, you\u0026rsquo;ll have to use a lot of commands. For example running ls from the terminal will list your files, while cd can be used to change what folder you\u0026rsquo;re working with. But these commands have other, more complex uses which you can read about from the terminal itself by running man ls or man cd. Generally, if you want a manual for any command, you can just put the word man before it.\nThe latter two recommendations are ways to get live help from real people. IRC is a really, really old chat platform that is still heavily used by tech-heads, but can be a bit difficult to get setup. The forums are what you expect, but I\u0026rsquo;ve noticed they\u0026rsquo;re not all that welcoming of new users. There\u0026rsquo;s not many good options though, so if you do need more help, there\u0026rsquo;s really either the Arch Linux Telegram Chat or you\u0026rsquo;ll have to figure out how to use IRC.\nArch Linux should run on any x86_64-compatible machine with a minimum of 512 MiB RAM, though more memory is needed to boot the live system for installation.[1] A basic installation should take less than 2 GiB of disk space. As the installation process needs to retrieve packages from a remote repository, this guide assumes a working internet connection is available. - Install Guide - GNU Free Documentation License In English:\nYour computer needs to not be a new mac or a chromebook Your system needs to have better hardware than something from 2001 You\u0026rsquo;ll need some room on your computer\u0026rsquo;s storage to actually install Arch You\u0026rsquo;ll need an internet connection Finally, before we get do actually doing the thing, you might want to read Arch Community Ethos by Xyne. To some extent, the existance of this page goes against the community ethos, but the install guide is also needlessly dense, as stated above.\nActually Starting To Do Something - Downloading # ⬤⬤⬤◯◯◯◯◯◯◯\nPre-installation # Acquire an installation image # Visit the Download page and, depending on how you want to boot, acquire the ISO file or a netboot image, and the respective GnuPG signature.\n- Install Guide - GNU Free Documentation License Alright, so you need to actually download the live OS installer \u0026ldquo;image\u0026rdquo; (it\u0026rsquo;s called an image for historical reasons - same for .iso, it\u0026rsquo;s for CDs, but you can put the file onto a flash drive). If you go to that download page you\u0026rsquo;ll see an ton of options and some mention of using something called dd to get the image onto a flash drive. Ignore almost everything. The only thing we need to worry about is the section labeled BitTorrent Download (recommended)\nThis has the advantage of verifying the PGP signarute for us, which is what that extra line about the GunPG signature line is telling us about. TL;DR of PGP (and GPG, which is an implimention of PGP, as confusing as that is) is that it can be used to confirm that a file is actually what it says it is and is from who it says it\u0026rsquo;s from. This makes sure your download isn\u0026rsquo;t corrupted and that it actually came from the people that it claims to be from.\nSo, to download this then you\u0026rsquo;ll need a Torrent client.\nTorrenting is type of download that runs over distributed peer to peer connections, this means you\u0026rsquo;re directly downloading the file from multiple people rather than from one large server. For projects like Arch this is important as they don\u0026rsquo;t really have the cash to put up to host centralized servers. Popular programs for downloading torrents on Windows include uTorrent, qBittorrent, and Deluge. I personally use Deluge on Windows, so it\u0026rsquo;s what I\u0026rsquo;ll recommend if you don\u0026rsquo;t already use something else. If you\u0026rsquo;re on a Mac, here\u0026rsquo;s a link to qBittorrent.\nRegardless, once you have the torrent client installed you should be able to back to that download page and click the magnet link - which should open up whatever torrent client you installed and prompt you to start the Download.\nNote, when the download completes, your torrent client will continue to serve the file to other people looking to download it to using your internet connection. Generally, this is a good thing to do, but you\u0026rsquo;ll want to turn it off, at least temporarily, as we move forward. If you don\u0026rsquo;t, some of the next steps may complain at you saying the file is open/in use. This also might end up eating all of your bandwidth or be undesirable if you\u0026rsquo;re on a metered internet connection.\n☕ The download shouldn\u0026rsquo;t take long, but this depends on your connection. Feel free to go get a drink or take a break while you wait.\nOnce that\u0026rsquo;s done downloading your torrent client should automatically confirm the image by using PGP, but as this is a good learning opportunity let\u0026rsquo;s do a manual double check as well.\nWindows Windows # open up a command prompt by pressing ctr+r and typing \u0026lsquo;cmd\u0026rsquo; then enter, and we\u0026rsquo;ll need to navigate to the location of the downloaded file it should be named something along the lines of archlinux-20xx.xx.xx-x86_64.iso and be in your Downloads folder.\nWhen you open a command prompt on Windows it should start out in your user folder (C:\\Users\\%username%). To list the folders in this folder you can type \u0026lsquo;dir\u0026rsquo; and press enter. You should, at minimum, see folders like \u0026lsquo;Downloads\u0026rsquo; \u0026lsquo;Desktop\u0026rsquo; and \u0026lsquo;Documents\u0026rsquo; to enter the Downloads folder simply type \u0026lsquo;cd Dow\u0026rsquo; and press tab, the line should auto-complete to \u0026lsquo;cd Downloads\u0026rsquo;, then press enter. Now you can type \u0026lsquo;certutil -hashfile arch\u0026rsquo; , press tab to complete it to \u0026lsquo;certutil -hashfile archlinux-20xx.xx.xx-x86_64.iso\u0026rsquo; then add \u0026lsquo;sha256\u0026rsquo; on the end so the finally command looks like\n1 certutil -hashfile archlinux-20xx.xx.xx-x86_64.iso sha256 Note, if this spits out \u0026ldquo;The process cannot access the file because it is being used by another process.\u0026rdquo; you\u0026rsquo;ll need to close your torrent client or stop seeding the file first!\nSo let\u0026rsquo;s look at this command:\nThe first part, certutil, is a program on your computer, \u0026lsquo;-hashfile\u0026rsquo; says the next string of text is the name of the file we want to examine, and the last part sha1 is the checksum as mentioned before.\nFinally, if you go back to https://www.archlinux.org/download/ and look under \u0026lsquo;Checksums\u0026rsquo; you can compare the output of the command you just ran against the SHA1 sum provided to be sure you didn\u0026rsquo;t have any errors in the file. This is mostly a security check as in theory someone could provide a \u0026lsquo;bad\u0026rsquo; version of the OS containing malware, but such a version would produce an incorrect checksum, in practice this is extraordinarily uncommon. Though this does also serve to ensure the download wasn\u0026rsquo;t corrupted in any way either.\nWe\u0026rsquo;re not quite done though, as this only really checks the integrity of the file, not that you got it from someone trusted as, in theory, someone could hack the Arch website and put the checksum of virus-filled version there. So, now we want to check the GPG signature. To do this, install GPG4Win. Close your command prompt and reopen it (ctrl+r \u0026ldquo;cmd\u0026rdquo;). Go back to your browser and scroll down on the download page and you\u0026rsquo;ll see a link to download the \u0026ldquo;ISO PGP signature\u0026rdquo; - do that. You\u0026rsquo;ll also see a long command prefixed by \u0026ldquo;WKD Lookup\u0026rdquo; that should start with gpg --auto-key-locate clear,wkd -v --locate-external-key and end in an arch maintainer\u0026rsquo;s email. WKD stands for Web Key Directory, so this is looking up the maintainer\u0026rsquo;s public key which they used to sign the image, which we\u0026rsquo;ll check matches the image signature and the file together with the next command which uses both files we\u0026rsquo;ve downloaded:\ngpg --verify archlinux-xxxx.iso.sig archlinux-xxx.iso\nWhat you should see is something like:\ngpg: Signature made 1/1/2023 9:49:49 AM Central Standard Time gpg: using EDDSA key 3E80CA1A8B89F69CBA57D98A76A5EF9054449A5C gpg: Good signature from \"Pierre Schmitz \" [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 3E80 CA1A 8B89 F69C BA57 D98A 76A5 EF90 5444 9A5C Which should concern you, right? This key is not certified with a trusted signature! sounds bad? Well, if we look back on the download page, there\u0026rsquo;s a link with some hex characters ( looks like 0xABCEDF ) that, if you go to, you should see the same long string of numbers as that last line on the top of the page (Search results for \u0026lsquo;0x3E80CA…, in this case.). Congrats, while that was incredibly tedious and more-or-less unnecessary, you should at least somewhat understand there\u0026rsquo;s some cryptographic systems at play to ensure what you\u0026rsquo;ve downloaded is what you think it is and signed to be from the person it says it\u0026rsquo;s from.\nWhy do you care? Because Linux will do this automatically for almost all software you install in the future. This gives us trust. Could someone still do something malicious / make a virus? Sure. It\u0026rsquo;s just much, much, much harder for it to wind up on your computer.\nMac Mac # open up a terminal by going to the Utilities fore in Applications and open \u0026lsquo;Terminal\u0026rsquo;. The mac terminal is very, very similar to what you\u0026rsquo;ll use in Linux actually, and the commands here are actually identical. You should see something like\n1 MacBook:~ username$ waiting for input.\nThat ~ represents that you\u0026rsquo;re in your user or \u0026lsquo;home\u0026rsquo; folder, and assuming you downloaded Arch\u0026rsquo;s install image to your downloads folder you should be able to type\nMacBook:~ username$ shasum -a 1 Downloads/arch\nfollowed by pressing tab to make that auto complete to something like\nMacBook:~ username$ shasum -a 1 Downloads/archlinux-20xx.xx.xx-x86_64.iso\nupon pressing enter the terminal should print out a long string of text.\nSo let\u0026rsquo;s look at this command. The first part, shasum, is a program on your computer, \u0026lsquo;-a 1\u0026rsquo; says to use the sha1 algorithm instead of something like sha256, and the last part is the filename we want to compute the checksum of.\nNow, if you go back to https://www.archlinux.org/download/ and look under \u0026lsquo;Checksums\u0026rsquo; you can compare the output of the command you just ran against the SHA1 sum provided to be sure you didn\u0026rsquo;t have any errors in the file. This is mostly a security check as in theory someone could provide a \u0026lsquo;bad\u0026rsquo; version of the OS containing malware, but such a version would produce an incorrect checksum, in practice this is extraordinarily uncommon. Though this does also serve to ensure the download wasn\u0026rsquo;t corrupted in any way either.\nWe\u0026rsquo;re not quite done though, as this only really checks the integrity of the file, not that you got it from someone trusted as, in theory, someone could hack the Arch website and put the checksum of virus-filled version there. So, now we want to check the GPG signature. To do this, install GPG Tools. Once you have that, go back to your browser and scroll down on the download page and you\u0026rsquo;ll see a link to download the \u0026ldquo;ISO PGP signature\u0026rdquo; - do that. You\u0026rsquo;ll also see a long command prefixed by \u0026ldquo;WKD Lookup\u0026rdquo; that should start with gpg --auto-key-locate clear,wkd -v --locate-external-key and end in an arch maintainer\u0026rsquo;s email. WKD stands for Web Key Directory, so this is looking up the maintainer\u0026rsquo;s public key which they used to sign the image, which we\u0026rsquo;ll check matches the image signature and the file together with the next command which uses both files we\u0026rsquo;ve downloaded:\ngpg --verify archlinux-xxxx.iso.sig archlinux-xxx.iso\nWhat you should see is something like:\ngpg: Signature made 1/1/2023 9:49:49 AM Central Standard Time gpg: using EDDSA key 3E80CA1A8B89F69CBA57D98A76A5EF9054449A5C gpg: Good signature from \"Pierre Schmitz \" [unknown] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 3E80 CA1A 8B89 F69C BA57 D98A 76A5 EF90 5444 9A5C Which should concern you, right? This key is not certified with a trusted signature! sounds bad? Well, if we look back on the download page, there\u0026rsquo;s a link with some hex characters ( looks like 0xABCEDF ) that, if you go to, you should see the same long string of numbers as that last line on the top of the page (Search results for \u0026lsquo;0x3E80CA…, in this case.). Congrats, while that was incredibly tedious and more-or-less unnecessary, you should at least somewhat understand there\u0026rsquo;s some cryptographic systems at play to ensure what you\u0026rsquo;ve downloaded is what you think it is and signed to be from the person it says it\u0026rsquo;s from.\nWhy do you care? Because Linux will do this automatically for almost all software you install in the future. This gives us trust. Could someone still do something malicious / make a virus? Sure. It\u0026rsquo;s just much, much, much harder for it to wind up on your computer.\nNow, we finally have file that we can 100% trust. Realistically, this level of scruntiny isn\u0026rsquo;t really necessary, but I wanted you do go through it and understand it at least once for reasons you\u0026rsquo;ll understand later.\nMaking The Installer # ⬤⬤⬤⬤◯◯◯◯◯◯\nOkay, so we have the OS, how do you install the damn thing? Well, get ready for a fun time. The first thing you\u0026rsquo;ll need is a flash drive with nothing on it you care about, as it\u0026rsquo;s going to be reformated, which will wipe any data on it. To install an OS you have to create \u0026lsquo;bootable media\u0026rsquo; this used to be done with a CD, though mostly it\u0026rsquo;s done with flash drives now. You\u0026rsquo;ll actually be putting the OS on the flash drive and then using that to put it on your hard drive / SSD.\nLet\u0026rsquo;s not get ahead of ourselves though, we need room to put the new operating system in! Thankfully Linux is small- really small. Even 50Gb should be plenty for the OS, all your programs, and tons of room to spare for data, but I typically recommend at least 100GB, and since we\u0026rsquo;ll be installing a lot of development tools, it makes sense to do this right to begin with.\nThe following guide will be assuming you\u0026rsquo;re installing Linux on the same drive as Windows or MacOS, making it applicable for most systems right away; however, I strongly recommend getting an extra SSD and giving Linux it\u0026rsquo;s own disk outright instead. This is far easier to do in a desktop, but if you have a laptop with a CD drive you may be able to put a SSD in it\u0026rsquo;s place, or the system may just have an unused slot.SSD prices have been steadily declining over the past few years, but as of the time of writing a 250Gb SSD should be available for under 50 USD. I\u0026rsquo;d recommend a larger disk though, with 500Gb being plenty for most people. You\u0026rsquo;ll want to do research about what works best in your computer. There\u0026rsquo;s multiple form factors (2.5\u0026quot; and M.2) as well as connection standards (NVMe and SATA), but not all computers will support everything, so look first! If you need help with this, first see M.2 As Fast As Possible (YouTube, Techquickie)(1) but if you still need help you can reach out to me directly. Windows Windows # When you got your computer with windows is likely that all of the room on your main storage (Hard driver or SSD) was preallocated for windows (as it should be!) so we\u0026rsquo;ll need to shrink this down and make room for Linux to live along side Windows. Open the start menu and type disk managment and hopefully \u0026ldquo;create or format hard drive partitions\u0026rdquo; will show up as an option. Open that. At the bottom you should see a few bars showing partitions on your disk(s). If you have multiple drives there will be multiple rows of bars, otherwise there will be only one row. If you have multiple drives it\u0026rsquo;s likely that one is a larger hard drive (HDD) and the other a smaller solid state drive (SSD), if you have room on your SSD use that, if you don\u0026rsquo;t using the HDD will be fine, but the OS may feel slower than you\u0026rsquo;re accustomed to. If you only have one drive, ignore this. Right click in what is likely the largest box, labeled \u0026lsquo;primary partition\u0026rsquo; and chose \u0026lsquo;Shrink Volume\u0026rsquo;. After it finishes querying available disk space enter 102400 as the amount of room to shrink (This is 100GB as there are 1024MB in a GB) or a lower or higher value as you please, but realize this is data you will not be able to access from windows.\nIf the window shows 0MB of available shrink space first try running \u0026ldquo;disk cleanup\u0026rdquo; and choose \u0026ldquo;cleanup system files\u0026rdquo;. Then, if that doesn\u0026rsquo;t work, try turning off system restore. If it\u0026rsquo;s still angry, disable the page file. In my experince it\u0026rsquo;s usually the pagefile, which kinda sucks. You\u0026rsquo;ll probably need to google how to do these things.\nIf none of this works, you do have another option: wiping everything and installing linux. This is actually easier, however, it\u0026rsquo;s a bit more extreme, as you won\u0026rsquo;t be able to boot back to windows for anything. You may instead want to try linux out on an old, usused computer first. Either way, you do you, but I\u0026rsquo;m not liable if things go wrong. See This Medium Article for additional info on getting Windows to let you make room.\nAlright, we\u0026rsquo;re getting there I promise. You should now have a gray block next to that blue block of space that shows unused space, that\u0026rsquo;s perfect. Next up we\u0026rsquo;ll need to turn Fast Boot off. In my experience turning this off doesn\u0026rsquo;t effect windows boot time at all, and by having it off we\u0026rsquo;ll be able to access window\u0026rsquo;s file from inside linux later. To do this: go to \u0026rsquo;edit power plan\u0026rsquo;, then in the top bar navigate back to \u0026lsquo;Power Options\u0026rsquo;, select \u0026lsquo;Chose what the buttons do\u0026rsquo; on the left side, click \u0026lsquo;Change settings that are currently unavailable\u0026rsquo; and then un-check \u0026lsquo;Turn on Fast Startup\u0026rsquo;.\nOkay, now we\u0026rsquo;re finally ready to copy the OS to a flash drive so we can install Arch, to do this, you\u0026rsquo;ll need to download a program called Etcher from https://www.balena.io/etcher/. Download, run, etc. When it opens select the flash drive as your \u0026lsquo;device\u0026rsquo; , press the select button under that and select the archlinux-20xx.xx.xx-x86_64.iso file we downloaded earlier.\nThe .iso file NOT the .iso.sig , the one you got from torrenting. Everything else should be fine, so click start. This may take a second, in the mean time, open this guide on another computer as the next few steps will require a lot of restarting and doing things outside of windows.\nMac Mac # Before we go any further I really want to warn you of two things, one, it\u0026rsquo;s going to be harder to follow this guide on a MAC. More steps are involved, and some work arounds are necessary, and more importantly, I have no experience with it. so I\u0026rsquo;m mostly regurgitating other things I\u0026rsquo;ve read. Pages like https://wiki.archlinux.org/index.php/Mac#Installation may prove helpful later.\nFirst, you\u0026rsquo;ll need to open up \u0026lsquo;Disk Utility\u0026rsquo; in Applications/Utilities, then pick your disk and click \u0026lsquo;Partition\u0026rsquo; and click the \u0026lsquo;+\u0026rsquo; button to make a new partition. Choose how much space you want to leave on the disk for MacOS and how much you want for Arch. The format of the new partition doesn\u0026rsquo;t matter.\nNote, if your disk is encrypted, you\u0026rsquo;ll need to decrypt first.\nNow, you\u0026rsquo;ll need to open a terminal like you did back when checking the checksum. Plug in either an empty flash drive or one which you don\u0026rsquo;t mind erasing, and run\ndiskutil list and you should see something like /dev/diskX (external, physical) which is your flash drive. Now run diskutil unmountDisk /dev/diskX where X is your flash drive disk number from above, then finally run dd if=path/to/arch.iso of=/dev/rdiskX bs=1m. Note that the of part has /rdiskX . The path to your arch iso is probably something like ~/Downloads/archlinux-20xx.xx.xx-x86_64.iso\nBe extremely careful not to use the wrong /dev/disk[letter] as you could wipe your data\nThis command won\u0026rsquo;t print anything while it\u0026rsquo;s running, but when it\u0026rsquo;s done you\u0026rsquo;ll see a new line asking for input. Two more notes ripped straight from https://wiki.archlinux.org/index.php/USB_flash_installation_media#In_macOS:\nTo view progress, send SIGINFO by pressing Ctrl+t. Note diskX here should not include the s1 suffix, or else the USB device will only be bootable in UEFI mode and not legacy. After completion, macOS may complain that \u0026ldquo;The disk you inserted was not readable by this computer\u0026rdquo;. Select \u0026lsquo;Ignore\u0026rsquo;. The USB device will be bootable.\nNext, you\u0026rsquo;ll need to make room on your drive for Arch. I\u0026rsquo;m absolutely no help here, so, see Arch Linux with OS X or other operating systems from the Arch Wiki and try to follow along, assuming that went well, you should be good to carry on with this page.\nBefore we move on, I think it\u0026rsquo;s good to sight see a bit:\nPrepare an installation medium # The installation image can be supplied to the target machine via a USB flash drive, an optical disc or a network with PXE: follow the appropriate article to prepare yourself an installation medium from the chosen image.\n- Install Guide - GNU Free Documentation License If you followed along, you should have already prepared the installation image on a flash drive, but you could have put it on a CD or use PXE. You\u0026rsquo;re probably thinking \u0026ldquo;WTF is PXE?\u0026rdquo; Well, it\u0026rsquo;s a way to send a new operating system image to a computer over the network. This is mostly used by really big sever farms/datacenters, but you should still know it exists, even if you\u0026rsquo;re unlikely to ever use it.\nBooting Up The Live Environment # ⬤⬤⬤⬤⬤◯◯◯◯◯\n☠☠☠ Seriously, backup your shit. I've done this countless times and have still managed to accidentally wipe a drive. There's a non-0 chance you're about to completely murder your windows install, It shouldn't happen, but it can. This is a necssary evil to learn, and I assure you'll be happy you've done all this, but this next bit is actual hell for people. I'm sorry it gets so bad so early. I promise it's worth it, okay? The next section requires a lot of reboots and has steps where you can't have this guide open on the computer you're working on, so you may want to have a spare system (or this page open on your phone) next to you to follow these insturctions on and Google if anything goes wrong.☠☠☠ To be fair, you should probably be doing backups anyway. We\u0026rsquo;ll talk about this at some point, but, if you don\u0026rsquo;t have a regular back up solution + an occasional full disk backup you sholud remedy that sooner rather than later Okay, so we\u0026rsquo;re finally ready to enter Arch Linux\u0026rsquo;s installation environment, which as previously mentioned, is actually itself Arch Linux…\nBoot the live environment # Note: Arch Linux installation images do not support Secure Boot. You will need to disable Secure Boot to boot the installation medium. If desired, Secure Boot can be set up after completing the installation.\n- Install Guide - GNU Free Documentation License … or we would be, if Microsoft didn\u0026rsquo;t try to shove Secure Boot mess down our throats. This is the most in-flux part of this guide, as it\u0026rsquo;s a bit unclear what the implications of Windows 11 requiring Secure Boot will be. This mess is in part described in This article (nerdschalk.com) but the TL;DR is Microsoft is really doing their best to turn a \u0026ldquo;security feature\u0026rdquo; into an Antitrust lawsuit.\nPoping in to let you know that despite the name, disabling secure boot is pretty much not a problem when it comes to malmare. Assuming your system is new enough to be using secure boot, you have two options\nFollow that disable Secure Boot link and do what\u0026rsquo;s necessary to get that done You can go down the rabbit hole of Making the installer work with secure boot. To say this is a massive pain in the ass would be an understatment. In theory the five step in this stack exchange answer should be enough to get it working, at least enough to boot the installation image. You\u0026rsquo;ll still need to work a bit harder later to work around things. If your system is older then congrats(?) you don\u0026rsquo;t need to worry about this.\nFor now, I\u0026rsquo;m going to assume option 1. as upon asking others, you can still disable Secure Boot in Windows 11 and everything seems to be working fine. If this changes, please let me know, and I\u0026rsquo;ll update this guide.\nPoint the current boot device to the one which has the Arch Linux installation medium. Typically it is achieved by pressing a key during the POST phase, as indicated on the splash screen. Refer to your motherboard\u0026rsquo;s manual for details.\nWhen the installation medium\u0026rsquo;s boot loader menu appears, select\nArch Linux install medium\nand press Enter to enter the installation environment.\nTip: The installation image uses systemd-boot for booting in UEFI mode and syslinux for booting in BIOS mode. See README.bootparams for a list of boot parameters.\nYou will be logged in on the first virtual console as the root user, and presented with a Zsh shell prompt.\n- Install Guide - GNU Free Documentation License With secure boot disabled (or the modified installation image) you should, finally, be able to reboot your computer into the installation image. Mash the whatever key is required to get to the boot menu on your system (F11,Delete,F12,F7, and F2 are common). Do this and select the flash drive from the list.\nYou might have a system that makes the time in the UEFI loading screen to short to be able to get to a boot menu. As recommended on the disabling secure boot page, you can also do Settings \u0026gt; Update \u0026amp; Security \u0026gt; Recovery \u0026gt; Advanced startup (Restart now) \u0026gt; Troubleshoot \u0026gt; Advanced options \u0026gt; UEFI Firmware settings and hopefully you can find a setting to change to give yourself some time on load to change boot device, but you\u0026rsquo;ll almost certainly see a boot order or boot override option. Chance things as necessary so that the next boot will be off of the flash drive.\nFor some reason some times the flash drive will show up multiple times. If this is the case and it doesn\u0026rsquo;t work the first try, try one of the other entries. Until this point I\u0026rsquo;ve been avoiding going over the difference between UEFI and BIOS, but now we really need to cover it. For most newer systems (~2015ish) the computer will be using UEFI, while if it\u0026rsquo;s older it\u0026rsquo;s probably using BIOS. The Binary Input Output System or Unified Extensible Firmware Interface both more-or-less serve the same purpose: When you turn the system on, they initialize the firmware of all of the components inside your system and sort of serve as the initial system to get everything working before handing things off to the boot loader, which then boots up the operating system. So, the process goes:\nBIOS/UEFI → Boot loader→ OS (Windows/Linux/Mac)\nFrom our perspective, the biggest difference is really just that UEFI is newer and a bit easier to work with, but there are a lot of interesting changes I encourage you to read up on later. We do still need to know which we\u0026rsquo;re using though. Assuming you had to deal with Secure Boot, you\u0026rsquo;re using UEFI. If you didn\u0026rsquo;t, you\u0026rsquo;re probably using BIOS. Fortunately, we can now check by running a command. So, go ahead and get your keyboard layout set so you can comfortably type, and then run the command under \u0026ldquo;Verify the boot mode\u0026rdquo; →\nConnecting to the Internet # ⬤⬤⬤⬤⬤⬤◯◯◯◯\nSet the console keyboard layout # The default console keymap is US. Available layouts can be listed with:\n# ls /usr/share/kbd/keymaps/**/*.map.gz To set the keyboard layout, pass a corresponding file name to loadkeys(1), omitting path and file extension. For example, to set a German keyboard layout:\n# loadkeys de-latin1 Console fonts are located in /usr/share/kbd/consolefonts/ and can likewise be set with setfont(8).\nVerify the boot mode # To verify the boot mode, list the efivars directory:\n# ls /sys/firmware/efi/efivars If the command shows the directory without error, then the system is booted in UEFI mode. If the directory does not exist, the system may be booted in BIOS (or CSM) mode. If the system did not boot in the mode you desired, refer to your motherboard\u0026rsquo;s manual.\n- Install Guide - GNU Free Documentation License If you\u0026rsquo;re a dvorak user, like me, the command you want is loadkeys dvorak Take note of if you\u0026rsquo;re using BIOS or UEFI, because it will be relevant later. For now, we need to get you connected to the internet.\nConnect to the internet # To set up a network connection in the live environment, go through the following steps:\nEnsure your network interface is listed and enabled, for example with ip-link(8): # ip link\nFor wireless and WWAN, make sure the card is not blocked with rfkill.\nConnect to the network:\nEthernet—plug in the cable. Wi-Fi—authenticate to the wireless network using iwctl. Mobile broadband modem—connect to the mobile network with the mmcli utility. Configure your network connection:\nDHCP: dynamic IP address and DNS server assignment (provided by systemd-networkd and systemd-resolved) should work out of the box for Ethernet, WLAN, and WWAN network interfaces. Static IP address: follow Network configuration#Static IP address. The connection may be verified with\nping: # ping archlinux.org\nNote: In the installation image, systemd-networkd, systemd-resolved, iwd and ModemManager are preconfigured and enabled by default. That will not be the case for the installed system.\n- Install Guide - GNU Free Documentation License Okay, so, there\u0026rsquo;s a lot here, let\u0026rsquo;s just step back and go over this. The first step here is just making sure the system detected your hardware and has a driver for connecting to the network. Linux has most network drivers you\u0026rsquo;d ever want baked in, so that should just work. In this case, when running ip link you should see either something like enp6s0 or wlan0. In this case, the former is a wired interface while the latter is for Wi-Fi.\nIf this didn\u0026rsquo;t work and there\u0026rsquo;s only a device called lo, there are options, but they\u0026rsquo;re a bit complicated.\nIf you can, getting things working by using a wired connection is much, much easier. If you had a wired connection attached when you booted into the installation environment, it should just be working. in which case you can r\nThen, congrats, you\u0026rsquo;re good to move on.\nWi-FI Unless you really have to use Wi-Fi, please don\u0026rsquo;t. While sometimes it works easily, sometimes connecting to Wi-Fi from the installation image is a massive headache. We can still make it work later, but just getting through the installer with a wired connection is usually easier. If your computer doesn\u0026rsquo;t have an ether port and you don\u0026rsquo;t mind dropping a few bucks, you can buy pretty much any cheap USB-Ethernet adapter, usually it\u0026rsquo;s about $15 for a good, gigabit, adapter. Okay, so you\u0026rsquo;re really gonna use Wi-Fi to install, fine.\nAgain, this assumes that ip link showed up with something like wlan0 in its output, as otherwise you\u0026rsquo;re probably in for a bad time, as you need to switch over to the \u0026ldquo;I don\u0026rsquo;t see a network interface\u0026rdquo; tab.\nNow, as the guide says, let\u0026rsquo;s double check the interface isn\u0026rsquo;t blocked with rfkill:\nRfkill caveat # Many laptops have a hardware button (or switch) to turn off wireless card, however, the card can also be blocked by kernel. This can be handled by rfkill. To show the current status:\n# rfkill list 0: phy0: Wireless LAN Soft blocked: yes Hard blocked: yes If the card is hard-blocked, use the hardware button (switch) to unblock it. If the card is not hard-blocked but soft-blocked, use the following command:\n# rfkill unblock wifi - Network Configuration - GNU Free Documentation License Then, just run iwctl and follow the instructions on https://wiki.archlinux.org/title/Iwd#iwctl to get connected. This tends to be a massive pain in the ass on anything but consumer-security level Wi-Fi networks, so if you\u0026rsquo;re on a University network, please, please, please just try to find a wired adapter.\nStill, this should just work. If it doesn\u0026rsquo;t you might need to play around with things a bit. As the guide install guide says, this will be different if you\u0026rsquo;re using a local, static-IP, but you\u0026rsquo;re probably not. If you are, just follow the link back up above to set that up.\nWired This should have just worked. If not, there\u0026rsquo;s a few possibilities:\nYou just need to turn the interface on Your wired connection requires a login This is rather uncommon, but might be the case at a University or other large network You plugged in the wire after you started the installer and so DHCP failed and while you could restart it, it\u0026rsquo;s literally easier to just restart the computer. Do that. I don\u0026#39;t see a network interface It is possible that you\u0026rsquo;re running a weird network card that just outright is not supported at all, but this is unlikely. Instead, you\u0026rsquo;re probably just running something that\u0026rsquo;s pretty uncommon and isn\u0026rsquo;t supported by default on the installation image.\nThis means we\u0026rsquo;ll need to first figure out what networking driver you need, then see if it can run on Linux at all, and (if it can) we need to get it installed and working.\nSo, first things first, Assuming it\u0026rsquo;s not a USB based network adapter, run lspci -k | grep -i net. This should tell you the manufacturer and specific part of you network interface. On my desktop where networking works outright, this returns,\n06:00.0 Ethernet controller: Intel Corporation I211 Gigabit Network Connection (rev 03)\nwhile on a little tablet of mine which doesn\u0026rsquo;t work right away, I get:\n01:00.0 Network controller: Qualcomm Atheros QCA6174 802.11ac Wirelss Network Adapter (rev 32) So, I\u0026rsquo;ll walk you through how I tackled that one:\nThe ArchWiki is actually (at the time of writing) out of date for Atheros Wi-Fi adapters, with this chip currently using the ath10k_pci driver. This was determined by running lspci -v. While the Network Configuration: Troubleshooting Drivers and Firmware page only mentions ath5k and ath9k drivers. Let this be a lesson: The Arch Wiki is great. It\u0026rsquo;s also not perfect. So, now we need to get more information. Let\u0026rsquo;s start by running dmesg | grep -i ath, this goes though the system diagnostic messages and searches for the letters \u0026ldquo;ath\u0026rdquo;. The \u0026lsquo;-i\u0026rsquo; is to make it case-insensitive. This shows us, that yes, the ath10k_pci driver is trying to load, but failing to do so. The full output is this:\nath10k_pci 0000:01:00.0: board_file api 2 bmi_id N/A crc 32 318825bf ath10k_pci 0000:01:00.0: htt-ver 3.60 wmi-op 4 htt-op 3 cal otp max-sta 32 raw 0 hwcrypto 1 ath: EEPROM regdomain: 0x5f ath: EEPROM indicates we should expect a direct regpair map ath: invalid regulator domain/country code 0x5f ath: invalid EEPROM contents ath10k_pci 0000:01:00.0: failed to initialize regulatory: -22 ath10k_pci 0000:01:00.0: could not register to mac80211 (-22) Okay, so, that\u0026rsquo;s really dense and technical. Let\u0026rsquo;s break it down. I have no clue what the first few lines mean, but lines 3, 5, and 7 all seem to be complaining about something to do with a regulatory domain, which is also called a country code on line 5. From past experience, I know Wi-Fi has different regulations and capabilities depending on where you are in the world, and so you\u0026rsquo;re expected to tell the OS what regulatory domain you\u0026rsquo;re in (the US for me). I can set that with # iw reg set US and then reload the driver by running rmmod ath10k_pci and then loading it back up with modprobe ath10k_pci. And no dice. Okay, something\u0026rsquo;s fishy still. What\u0026rsquo;s about that regulatory code 0x5f? What does that correspond to? Well, Googling, both This link and this one This link confirm that the regulatory domain is being set to APL10_WORLD which is a South Korean regulatory domain.\nGiven this is a Samsung laptop-ish-thing (Galaxy Tab Pro S 12\u0026quot;) I\u0026rsquo;m trying to get up and running 🖕Samsung for shipping out a device which a hardware locked regulatory domain to something non standard. The latter of those two links is from https://patchwork.kernel.org - a page for tracking Linux kernel changes/patches, and was last updated under a month ago at the time of writing. So, clearly I\u0026rsquo;m working with something a bit more bleeding-edge here. (Though the laptop is actually rather old, the driver is still bleeding) This means I can assume that support will be directly baked into Linux at some point, it\u0026rsquo;s just not yet.\nAlright, so, failing that, I just googled the laptop name + Linux. Eventually, I wound up at this GitHub repo with a folder of files for Wi-Fi, labeled as being for Linux 4.7 (Current arch installer is using 5.15) and a script for controlling the screen brightness. Okay, let\u0026rsquo;s see what we can do with this.\nIn that folder is a board.bin and firmware-4.bin file. These seem to be actual device specific drivers, probably yoinked out of the Windows driver. So, we can loading these. Without Wi-Fi to load the file, we can either plug in a second USB stick and copy from it, or, just shut down and place them onto the installer drive from another computer. I loaded them up, and checked if the files were even different from those currently in /lib/firmware/ath10k/QCA6174 and… the firmware-4.bin file was exactly the same. Still, the board.bin file was different. Tried swapping them out, still no dice.\nOkay, what now? … Now we call it a day. This driver will not work on Linux without some serious work. Maybe it\u0026rsquo;ll be working in a future version, but this should still be a lesson: Not everything is going to work on Linux. I tried as hard as I\u0026rsquo;m willing to before the number of hours put in just isn\u0026rsquo;t worth it to me. So, what options do I have?\nI could just… not use this laptop. It\u0026rsquo;s severely under powered with a CPU that only goes to like 1GHz and it\u0026rsquo;s just not fun to use\nYes, I know this is a privileged option, but seriously, while this laptop is sleek and good looking, it runs like a potato. A cheap, used laptop from some tech recycling place will massively outperform this. Yes, I know this doesn\u0026rsquo;t apply as well if you\u0026rsquo;re actually on something like an expensive gaming laptop I could decide to always use a USB adapter- either a Wi-Fi or Ethernet adapter\nThis is a mild PITA, will probably provide worse performance, and eats a USB port If this Laptop were able to be opened up \u0026amp; the Wi-Fi card was removable I could try swapping out the Wi-Fi card for something better supported\nUnfortunately, this one can\u0026rsquo;t be opened Unfortunately-er, a lot of laptops use vendor-locked Wi-Fi cards with weird pinout. Still, it\u0026rsquo;s worth a Google to try. You may have better luck than I did, it\u0026rsquo;s entirely possible that by following the Network Configuration: Troubleshooting Drivers and Firmware page on the Wiki you\u0026rsquo;ll find the answer you need and get up and running quickly. I just wanted to set realistic expectations and show that even pretty experienced users some times throw in the towel.\nFrankly, I also would have never purchased the laptop with this Wi-Fi card in it myself anyway - in part because of it\u0026rsquo;s aforementioned lame CPU, but also because I search to see if hardware I want to buy supports Linux decently before I click the purchase button. If it doesn\u0026rsquo;t, there\u0026rsquo;s also a good chance it will also cease to get Windows updates in the future too - like this laptop did. Now it\u0026rsquo;s basically a brick. Not getting Windows updates (including security updates) and unable to run Linux reasonably.\nAgain, run ping archlinux.ong and if after a few seconds you see something like\n64 bytes from archlinux.org (░░.░░░.░░░.░░░): icmp_seq=░ ttl=░░ time=░░░ms\nThen you\u0026rsquo;re good to move on.\nPress Ctrl+C to stop ping\nWhile it may seem like an odd time to do so, now that you\u0026rsquo;re connected to the internet, go ahead and get the time of your system fixed. This uses Network Time Protocol to get the time, which is why we had to do it after connecting to the internet.\nUpdate the system clock # Use timedatectl(1) to ensure the system clock is accurate:\n# timedatectl set-ntp true To check the service status, use timedatectl status.\n- Install Guide - GNU Free Documentation License With that done, we\u0026rsquo;re onto the fun bit.\nThe Part Where You can Really Fuck Up # ⬤⬤⬤⬤⬤⬤⬤◯◯◯\n☠☠☠ Seriously, backup your shit. Last Warning.☠☠☠ This is the part where we need to partition the disks. Remember before how I told you needed to make free space on your hard drive in the Windows Disk Management utility? This is where that comes into play.\nPartition the disks # When recognized by the live system, disks are assigned to a block device such as /dev/sda, /dev/nvme0n1 or /dev/mmcblk0. To identify these devices, use lsblk or fdisk.\n# fdisk -l Results ending in rom, loop or airoot may be ignored.\nThe following partitions are required for a chosen device:\nOne partition for the root directory /. For booting in UEFI mode: an EFI system partition. If you want to create any stacked block devices for LVM, system encryption or RAID, do it now.\n- Install Guide - GNU Free Documentation License I\u0026rsquo;ve written this assuming you\u0026rsquo;re installing alongside Windows. If it\u0026rsquo;s a mac, it should be more-or-less the same, but mentally substitute NTFS for HFS+ - I\u0026rsquo;ll explain what these are in a second. Okay, first things first, fdisk -l is going to give you a ton of information that you probably don\u0026rsquo;t know how to read, so let\u0026rsquo;s just use lsblk , and while it\u0026rsquo;s a lot to type, running\nlsblk --output NAME,MODEL,TRAN,SIZE,FSTYPE,MOUNTPOINT will give us a lot of useful info in a digestable format. On a typical system with one or maybe two disks, you should be looking for the drive with multiple partitions where one of them is a small vfat partition, one is a large NTFS partition, and there\u0026rsquo;s a big unformulated block that you free\u0026rsquo;d up earlier. There might also be an extra, probably NTFS, recovery partition for Windows.\nNow, that you have the output of this command for yourself as reference, let\u0026rsquo;s talk about what\u0026rsquo;s going on here:\nA tangent about File Systems \u0026amp; Partition Table Schemes # Okay, here we have to go off into the weeds to understand something real quick - partition tables and file systems.\nTo begin with, let\u0026rsquo;s look at what good ol\u0026rsquo; Wikipedia has to say:\nA partition table is a table maintained on a disk by the operating system that outlines and describes the partitions on that disk. The terms partition table and partition map are similar terms and can be used interchangeably. The term is most commonly associated with the MBR partition table of a Master Boot Record (MBR) in PCs, but it may be used generically to refer to other formats that divide a disk drive into partitions, such as: GUID Partition Table (GPT), Apple partition map (APM), or BSD disklabel. - Wikipedia - \u0026ldquo;Partition Table\u0026rdquo; Well, uh, that was a lot of words that didn\u0026rsquo;t say much, we have to go deeper. MBR? That sounds familiar click. A master boot record (MBR) is a special type of boot sector at the very beginning of partitioned computer mass storage devices like fixed disks or removable drives intended for use with IBM PC-compatible systems and beyond.\n[…]\nThe MBR holds the information on how the disc\u0026rsquo;s sectors are divided into partitions, each partition notionally containing a file system. The MBR also contains executable code to function as a loader for the installed operating system—usually by passing control over to the loader\u0026rsquo;s second stage, or in conjunction with each partition\u0026rsquo;s volume boot record (VBR). This MBR code is usually referred to as a boot loader.\n[…]\nThe organization of the partition table in the MBR limits the maximum addressable storage space of a partitioned disk to 2 TiB\n[…]\nTherefore, the MBR-based partitioning scheme is in the process of being superseded by the GUID Partition Table (GPT) scheme in new computers.\n- Wikipedia - \u0026ldquo;Master Boot Record\u0026rdquo; Okay, so, the Partition Table is basically an index of partitions - divided sections of your disk - and what file system each one uses. Old computers used to use a MBR partition table, new computers use GPT.\nWhat about these File Systems then, what\u0026rsquo;s that? Let\u0026rsquo;s ask the all knowing Wikipedia again:\nIn computing, a file system or filesystem (often abbreviated to fs) is a method and data structure that the operating system uses to control how data is stored and retrieved. Without a file system, data placed in a storage medium would be one large body of data with no way to tell where one piece of data stopped and the next began, or where any piece of data was located when it was time to retrieve it. By separating the data into pieces and giving each piece a name, the data are easily isolated and identified. Taking its name from the way a paper-based data management system is named, each group of data is called a \u0026ldquo;file\u0026rdquo;. The structure and logic rules used to manage the groups of data and their names is called a \u0026ldquo;file system.\u0026rdquo; - Wikipedia - \u0026ldquo;File System\u0026rdquo; Wow, uh, that was strangely readable for tech stuff, right? There is one bit of context missing here though - there\u0026rsquo;s more than one way to sort your files - similarly, different file systems have been made over time.\nThe two you\u0026rsquo;re likely familiar with are NTFS and FAT32. NTFS is the one Windows uses by default for your operating system and storage drives, FAT32 is what most flash drives use. You may have ran into limitations of FAT32 before, most notably that you can\u0026rsquo;t store a file larger than 4GB - making moving a large video or ZIP archive an issue.\nBut, why? If NTFS doesn\u0026rsquo;t have this problem, why would anything use NTFS? Moreover, what does Apple use HFS+ and Linux use EXT4 or BTRFS (commonly, there\u0026rsquo;s many others).\nWell, the answer is complicated. Some of it is politics with patents, some of it is backwards compatibility, some of it is for speed vs stability, some of it for supporting different physical media (spinning platters vs solid state vs tape)\nWhile there\u0026rsquo;s literally hundreds of file systems in existence, only some are used enough to be worth knowing about. Here\u0026rsquo;s the extreme TLDR of each:\nNTFS -The only decent file system that Windows supports. Stable, does the job. Annoying to mount on Apple devices, but can accessed on most systems. FAT32, exFAT - Old, shit, but it works on everything easily. The default for SD cards and flash drives. EXT3, EXT4 - Common on Linux. Stable, does the job. Very annoying to mount on Windows. HFS, HFS+, APFS - 🍎, Think Different. ZFS - Need to store an ever living fuck load of data across a boat load of drives? ZFS will do that, make sure some drives can fail without loosing anything, let you speed it up by using an SSD or RAM for cache, and do some crazy voodoo to ensure data never gets corrupted + snapshotting (file history) + automaticly using spare disks if one fails + per-user limits… Awesome, right? Yep. And also a true pain in the ass to setup, a RAM hog, etc. Basically, ZFS is perfect for a file server and not worth the pain \u0026amp; RAM use at all in a normal setup. BTRFS - Somewhere between ZFS and EXT4. A sane option for most personal Linux setups. Has had broken RAID 5 for a long time, don\u0026rsquo;t use that and you\u0026rsquo;re fine. F2FS - I have a NEED, A NEED FOR SPEED … and data corruption… Shit. For SSDs, the new kid on the block, and ready to eat your data if you have to hard shutdown. Only use this if you know what you\u0026rsquo;re doing. But, it do zoom. For setting up your system to dual boot Linux and Windows, you\u0026rsquo;ll need to use NTFS to read your existing data, FAT for the boot partition (more on that soon), and I\u0026rsquo;ll be showing setting up the Linux root using BTRFS, but using EXT4 is also a fine choice.\nThere are a few weird not-true-filesystems you should be aware of too:\nCIFS/SAMBA - Used to mount network shared storarge SWAP - Swap isn\u0026rsquo;t actuallllly a file system, it\u0026rsquo;s actually more like explicitly saying you don\u0026rsquo;t want a filesystem here. This is used for storage when you\u0026rsquo;re out of RAM or when something in RAM hasn\u0026rsquo;t been used in while it gets swapped to, well, swap. You can\u0026rsquo;t directly put files here. TMPFS - Almost the inverse of Swap, TMPFS is a special file system for storing data directly in RAM. This makes it stupidly fast. It\u0026rsquo;s also volatile, data written to TMPFS will be lost when your computer reboots. You may want to dive into the Arch Wiki page on File systems.\nAn aside about size # If you bought a computer and were told it has a 1TB SSD, it does, but your computer may tell you it\u0026rsquo;s only 931GB. What gives!?\nWell, the problem is we have two ways of specifying size, Megabytes and Mebibytes, and often the \u0026ldquo;wrong\u0026rdquo; term is used. I say \u0026ldquo;wrong\u0026rdquo; as it\u0026rsquo;s very rare anybody uses the Mebi version at all, and instead Mega is used for both. But, okay, what\u0026rsquo;s the difference?\nIn SI units, we have prefixes that you should known killo=1000, mega=100000, Gig=1000000000, etc. So a Kilobyte should be 1000 bytes, right? Well, by definition yes, but often people will mean Kibibytes where it\u0026rsquo;s actually 1024 Bytes. Why 1024?\nComputers work in base-2 (binary) and so if we do 1 \u0026lt;\u0026lt; 10, an operation that literally means take 1 (in binary, which is also 1 in decimal) and move it over 10 places, to put 10 zeros behind it, we get the number, in binary, 10000000000, now, to read a binary number you start at the right most digit and that\u0026rsquo;s your 1\u0026rsquo;s place (just like decimal) but then the 2nd digit is your 2\u0026rsquo;s, the 3rd your 4\u0026rsquo;s, and so on. Finally, you\u0026rsquo;ll hit the 11\u0026rsquo;th digit which is your 1024\u0026rsquo;s place. so this number, with only the 11th digit being 1, is equal to 1024 in decimal.\nBasically, 1024 is a much more convenient number to work with for the computer than 1000, which in binary would be 1111101000.\nFinally, we can work our way up and the problem get\u0026rsquo;s worse. A megabyte is a thousand killobytes, but a mebibyte is 1024 kibibytes. So now the difference is 1000*1000 vs 1024*1024, then repeat up to Terabyte. That\u0026rsquo;s why your numbers may not match.\nFortunately, this rarely matters as if you\u0026rsquo;re doing something where you have to think about the difference it\u0026rsquo;ll usually be with other numbers that set your constraints and the difference won\u0026rsquo;t matter. For example, we\u0026rsquo;re about to format your drive for Linux, but you\u0026rsquo;ll be constrained by the remaining size for each partition and for the few small ones we need to make being off by the difference of the binary or decimal version just won\u0026rsquo;t matter. Still, good to know.\nFUSE, Encryption, LVM, RAID, WTFFFF‽? # FUSE # Okay, I swear we\u0026rsquo;ll get to the actual formatting soon, but there are a few more things you need to know about first.\nFirst, FUSE,\nFilesystem in Userspace (FUSE) is a mechanism for Unix-like operating systems that lets non-privileged users create their own file systems without editing kernel code. This is achieved by running file system code in user space, while the FUSE kernel module provides only a \u0026ldquo;bridge\u0026rdquo; to the actual kernel interfaces. - Archwiki - FUSE You\u0026rsquo;re eyes probably just glazed over reading that. I don\u0026rsquo;t blame you. Basically, Linux will normally assume only the root (admin) user can create a files system as doing so is something that typically happens at the kernel (operating system core) level. FUSE, well, fuses fyle systems on to kernel interfaces that are already there so that a non-admin user can mount things.\nWhy is this helpful?\nWell, the most obvious is flash drives. It\u0026rsquo;d sort suck if you had to provide a password and do low level management every time you want to read a flash drive. FUSE let\u0026rsquo;s you not do that.\nBut that\u0026rsquo;s not all. With extra software on top,\nIt\u0026rsquo;ll let you mount a .iso so you can peruse it\u0026rsquo;s contents without actually writing it to flashdrive/CD. It\u0026rsquo;ll let you mount network shares via SSH (the normal tool used to remotely manage Linux devices) It\u0026rsquo;ll let you mount NTFS file systems with an older, more stable, and faster implementation of the file system driver It\u0026rsquo;ll let you mount your GoggleDrive as a local folder for easier use Among other things.\nThere\u0026rsquo;s a catch to all of this though. FUSE is generally a bit slow. The NTFS situation as mentioned above is an outlier here, but there are some negatives to its convenience.\nEncryption # I\u0026rsquo;m sure you know what Encryption is broadly, and generally that it\u0026rsquo;s a good thing for security. But I want to point out a few things before we jump on the \u0026ldquo;Let\u0026rsquo;s encrypt all the things!\u0026rdquo; train.\nEncryption makes your computer do a bit more work on every read and write, making it a hair slower and use more battery.\nEncryption makes recovering your system if something has gone wrong more difficult\nEncryption can be a pain to setup\nEncryption only protects your files when the computer is off *\n* -ish. It is possible to setup encryption that locks most of your files if the computer goes to sleep or locks after you\u0026rsquo;ve been away for a while, but this doesn\u0026rsquo;t lock everything. It\u0026rsquo;s up to you to decide if it\u0026rsquo;s worth it to you. If you do want full system encryption, I do recommend making an extra, unencrypted FAT32 partition with a singe .txt file with details to contact you if you loose your computer - or, better, put an \u0026ldquo;IF FOUND RETURN TO\u0026rdquo; sticker on it.\nI\u0026rsquo;ll lead you though setting up home directory encryption on this page, as I think it\u0026rsquo;s a happy middle ground.\nLVM # I swear we\u0026rsquo;ll be getting back to the install for real in a second, the last thing related to drive formatting you should know about is Logical Volume Management. To Wikipedia we go!\nLVM is used for the following purposes:\nCreating single logical volumes of multiple physical volumes or entire hard disks (somewhat similar to RAID 0, but more similar to JBOD), allowing for dynamic volume resizing. Managing large hard disk farms by allowing disks to be added and replaced without downtime or service disruption, in combination with hot swapping. On small systems (like a desktop), instead of having to estimate at installation time how big a partition might need to be, LVM allows filesystems to be easily resized as needed. Performing consistent backups by taking snapshots of the logical volumes. Encrypting multiple physical partitions with one password. LVM can be considered as a thin software layer on top of the hard disks and partitions, which creates an abstraction of continuity and ease-of-use for managing hard drive replacement, repartitioning and backup.\n- source Plus, not on that page, it can be used to cache frequently used content on a faster disk. This is awesome for making an old HDD feel snappy on a system with a big HDD(s) and a small SSD.\nSo, basically, it\u0026rsquo;s a layer in between the physical device (SSD, HDD, whatever) and the file systems to make it so you can resize and mess with them while the system is still running, use encryption in a sane way, and easily add or remove drives.\nThere is a big ol\u0026rsquo; fuck you here: Using LVM makes it more annoying to access the Linux files from Windows. So while in nearly any other situation I\u0026rsquo;d say you should use it, if you\u0026rsquo;re setting up dual boot, don\u0026rsquo;t. Since that\u0026rsquo;s the setup I\u0026rsquo;m assuming you\u0026rsquo;re going for here, I will not be showing LVM setup on this page.\nIf you\u0026rsquo;re not setting up a dual boot system and you\u0026rsquo;re up to the challenge, these two pages are very nice:\nArch Wiki - LVM \u0026amp; Arch Wiki - Installing on LVM\nBe very, very, very sure you know the disk/partition you\u0026rsquo;re about to nuke # Okay, so, we from here on this guide has a lot of commands that are not exactly what you should type, as the exact command will vary depending on your hardware. The most important variable here is the disk you\u0026rsquo;re planning to install to. If you get this wrong, you\u0026rsquo;ll eat Windows. Just be careful and you\u0026rsquo;ll be okay.\nDoing the Actual Partitioning \u0026amp; mkfs # Use fdisk or parted to modify partition tables. For example:\n# fdisk /dev/the_disk_to_be_partitioned Note:\nIf the disk does not show up, make sure the disk controller is not in RAID mode. If the disk from which you want to boot already has an EFI system partition, do not create another one, but use the existing partition instead. Swap space can be set on a swap file for file systems supporting it. Example layouts # UEFI with GPT:\nMount point Partition Partition type Suggested size /mnt/boot1 /dev/*efi_system_partition* EFI system partition At least 300 MiB [SWAP] /dev/*swap_partition* Linux swap More than 512 MiB /mnt /dev/*root_partition* Linux x86-64 root (/) Remainder of the device Other mount points, such as /mnt/efi, are possible, provided that the used boot loader is capable of loading the kernel and initramfs images from the root volume. See the warning in Arch boot process#Boot loader. BIOS with MBR:\nMount point Partition Partition type Suggested size [SWAP] /dev/*swap_partition* Linux swap More than 512 MiB /mnt /dev/*root_partition* Linux Remainder of the device See also Partitioning#Example layouts.\n- Install Guide - GNU Free Documentation License Okay, what this is saying is that when we got to make our partitions - assuming we\u0026rsquo;re on a not-ancient computer - We\u0026rsquo;ll need 3 partitions. One for booting, one for swap, and one for everything else. This is where things start to get weird in this guide, as, if you\u0026rsquo;re dual booting with Windows, we can commandeer the Windows EFI system partition (the boot partition) to make our lives easier. First though, we need to check we can actually do that.\nAbove, what probably feels like forever ago with all this reading, you should have ran\nlsblk --output NAME,MODEL,TRAN,SIZE,FSTYPE,MOUNTPOINT\nand you should get output at least sorta-kinda similar to this:\nNAME MODEL TRAN SIZE FSTYPE MOUNTPOINT loop0 702.1M squashfs /run/archiso/airootfs sda Cruzer Blade usb 29.3G iso9660 ├─sda1 801M iso9960 └─sda2 15M vfat nvme1n1 CT4000P3SSD8 nvme 3.6T ├─nvme1n1p1 nvme 300M vfat ├─nvme1n1p2 nvme 128M ├─nvme1n1p3 nvme 3.6T ntfs └─nvme1n1p4 nvme 714M ntfs nvme0n1 SPCC M.2 PCIe SSD nvme 953.9G Now, there\u0026rsquo;s bound to be some differences. Here, I have a separate, unused disk to install Linux onto - nvme0n1 down there with no file system, no partitions, and nearly a whole terabyte free to use. If you instead had to shrink Windows to make room for the install, you\u0026rsquo;ll probably have something closer to this:\nNAME MODEL TRAN SIZE FSTYPE MOUNTPOINT loop0 702.1M squashfs /run/archiso/airootfs sda Cruzer Blade usb 29.3G iso9660 ├─sda1 801M iso9960 └─sda2 15M vfat nvme1n1 CT4000P3SSD8 nvme 3.6T ├─nvme0n1p1 nvme 300M vfat ├─nvme0n1p2 nvme 128M ├─nvme0n1p3 nvme 1.6T ntfs ├─nvme0n1p4 nvme 714M ntfs └─nvme0n1p5 nvme 2TB Where instead of having a second disk, you have a large (hopefully 128GB+) partition with no file system on it. Either is fine. Regardless, what you need to note is the name of disk or partition. In the first example that\u0026rsquo;s nvme0n1, as the entire disk is free for use to use as windows is on an entirely different drive. In the second example it\u0026rsquo;s nvme0n1p5 as we\u0026rsquo;re going to be splitting up and using that partition, but you\u0026rsquo;ll also still need to note the drive, which in that case is also nvme0n1.\nIn either case, we can avoid the need to make a new boot partition because that vfat partition on the same drive that has the NTFS partitions is a boot partition. It\u0026rsquo;s the one Windows uses and the one we\u0026rsquo;re going to steal.\nMy examples here all use nvmeXnX but your drives may be sdX which is fine. It won\u0026rsquo;t matter. So, let\u0026rsquo;s do it. In both examples above - the made-space and fresh drive - the drive name we\u0026rsquo;re targeting is /dev/nvme0n1 so, we can run cfdisk /dev/nvme0n1 . That c on the start of the command the guide recommends will give us a nicer interface.\n(note, this is a screenshot of a drive with Windows without free space, as I can\u0026rsquo;t easily screenshot from a system mid-install)\nWhat you should do is first make 10GB SWAP partition. To do this, arrow-key down to the big block of free space on your drive (or, if it\u0026rsquo;s a fresh disk, it\u0026rsquo;s the only thing there) and use the left and right arrows to highlight \u0026ldquo;new\u0026rdquo; at the bottom. Press enter. It\u0026rsquo;ll ask you for a size. It should default to all the remaining size. We don\u0026rsquo;t want that. Backspace it and write 10G for 10 gigabytes. This is a good amount of swap on most systems.\nAlright, that should have made the partition, but it\u0026rsquo;ll say \u0026ldquo;Linux Filesystem\u0026rdquo; on the right. We want this to be swap. With it highlighted, go over to \u0026ldquo;Type\u0026rdquo; and press enter. That\u0026rsquo;ll bring up a big dialog, select \u0026ldquo;Linux Swap\u0026rdquo;.\nNow, arrow down to your remaining free space and hit New. Leave it with all your remaining space. Press enter. This new partition should say Linux Filesystem, it should be at least 100GB in size, and conveniently, if we hover over it should say at the bottom Filesystem: BTRFS - it\u0026rsquo;s making a BTRFS file system on the partition for us. Sweet.\nOkay, that\u0026rsquo;s done, we can now use the arrow keys to select \u0026ldquo;Write\u0026rdquo; and press enter. It\u0026rsquo;ll warn you this is where shit can hit the fan. Type \u0026ldquo;yes\u0026rdquo; to say you want to do it, to which it should respond with \u0026ldquo;The partition table has been altered.\u0026rdquo;\nCongrats, you made the partitions and formatted the drive. Easy, right? arrow over to quit, and press the up arrow a few times until the previously entered lsblk --output NAME,MODEL,TRAN,SIZE,FSTYPE,MOUNTPOINT command shows up, and press enter. You should now see your new partitions - one with the FSTYPE btrfs and one swap. Hell yeah!\nAt the time of writing, there appears to be a bug with how cfdisk makes the btrfs partition. To remedy this, look for the btrfs partition name in the above output and run mkfs.btrfs -f /dev/[name of partition] for example, mkfs.btrfs -f /dev/nvme0n1p2. Format the partitions # Once the partitions have been created, each newly created partition must be formatted with an appropriate file system. See File systems#Create a file system for details.\nFor example, to create an Ext4 file system on /dev/*root_partition*, run:\n# mkfs.ext4 /dev/root_partition If you created a partition for swap, initialize it with mkswap(8):\n# mkswap /dev/swap_partition Note: For stacked block devices replace /dev/**_partition* with the appropriate block device path. If you created an EFI system partition, format it to FAT32 using mkfs.fat(8).\nWarning: Only format the EFI system partition if you created it during the partitioning step. If there already was an EFI system partition on disk beforehand, reformatting it can destroy the boot loaders of other installed operating systems. # mkfs.fat -F 32 /dev/efi_system_partition - Install Guide - GNU Free Documentation License AYYYY, we already did this. We already have our swap and BTRFS partitions. (We\u0026rsquo;re using BTRFS, but the above shows using EXT4 for the same use - it doesn\u0026rsquo;t matter much). That big warning in yellow is exactly the step we\u0026rsquo;re not doing because we\u0026rsquo;re using Windows EFI partition.\nMounting # Mount the file systems # Mount the root volume to /mnt. For example, if the root volume is /dev/*root_partition*:\n# mount /dev/root_partition /mnt Create any remaining mount points (such as /mnt/efi) and mount their corresponding volumes.\nTip: Run mount(8) with the --mkdir option to create the specified mount point. Alternatively, create it using mkdir(1) beforehand.\nFor UEFI systems, mount the EFI system partition:\n# mount --mkdir /dev/efi_system_partition /mnt/boot If you created a swap volume, enable it with swapon(8):\n# swapon /dev/swap_partition genfstab(8) will later detect mounted file systems and swap space.\n- Install Guide - GNU Free Documentation License Okay, when we ran lsblk to confirm we have our partitions, we can see what the partition name is. For me, on the fresh disk, this gave me\nNAME MODEL TRAN SIZE FSTYPE MOUNTPOINT loop0 702.1M squashfs /run/archiso/airootfs sda Cruzer Blade usb 29.3G iso9660 ├─sda1 801M iso9960 └─sda2 15M vfat nvme1n1 CT4000P3SSD8 nvme 3.6T ├─nvme1n1p1 nvme 300M vfat ├─nvme1n1p2 nvme 128M ├─nvme1n1p3 nvme 3.6T ntfs └─nvme1n1p4 nvme 714M ntfs nvme0n1 SPCC M.2 PCIe SSD nvme 953.9G ├─nvme1n1p1 nvme 10GB swap └─nvme1n1p2 nvme 943.9G btrfs So to mount my btrfs partition I\u0026rsquo;m going to run mount /dev/nvme1n1p2 /mnt. This will make the storage we made accessible at the folder /mnt. Finally. We could actually go store a file there now if we wanted. We don\u0026rsquo;t want to, but we could.\nOkay, now we need to mount the boot partition, the place we\u0026rsquo;re going to store the information Linux needs to start itself. Like I said, we\u0026rsquo;re commandeering the Windows spot for this. Fortunately both can live along side eachother fine. You\u0026rsquo;re looking for the moderately sized vfat partition on the same drive as some NTFS partitions. Here, that\u0026rsquo;s nvme1n1p1.\nWe want to mount this inside of the existing /mnt This may seem weird, but it\u0026rsquo;s like saying if you go to this folder inside of this file system, you\u0026rsquo;re actually going to a different file system all together. This is really common in Linux and admittedly a bit weird to think about.\nAnyway, we need to put this boot partition at /mnt/boot, so with this example I\u0026rsquo;ll run mount --mkdir /dev/nvme1n1p1 /mnt/boot. The --mkdir part of that makes the folder named \u0026ldquo;boot\u0026rdquo; on the btrfs partition to mount this in. If that doesn\u0026rsquo;t make sense don\u0026rsquo;t worry about it to much.\nFinally, we\u0026rsquo;ll enable our swap, you know the drill. Find the partition the swap is on - above it\u0026rsquo;s nvme1n1p1 so I\u0026rsquo;ll run swapon /dev/nvme1n1p1.\nCongrats, Now you can actually install Arch. # ⬤⬤⬤⬤⬤⬤⬤⬤◯◯\nSelect the mirrors # Packages to be installed must be downloaded from mirror servers, which are defined in /etc/pacman.d/mirrorlist. On the live system, after connecting to the internet, reflector updates the mirror list by choosing 20 most recently synchronized HTTPS mirrors and sorting them by download rate.\nThe higher a mirror is placed in the list, the more priority it is given when downloading a package. You may want to inspect the file to see if it is satisfactory. If it is not, edit the file accordingly, and move the geographically closest mirrors to the top of the list, although other criteria should be taken into account.\nThis file will later be copied to the new system by pacstrap, so it is worth getting right.\n- Install Guide - GNU Free Documentation License Technically you should check this and make sure it\u0026rsquo;s sane. In reality, if you have internet connection - which we made sure you did above - it should be. Doing this manually is a pain, so I\u0026rsquo;ll just assume it\u0026rsquo;s fine.\nInstall essential packages # Use the pacstrap(8) script to install the base package, Linux kernel and firmware for common hardware:\n# pacstrap /mnt base linux linux-firmware Tip:\nYou can substitute linux for a kernel package of your choice, or you could omit it entirely when installing in a container. You could omit the installation of the firmware package when installing in a virtual machine or container. The base package does not include all tools from the live installation, so installing other packages may be necessary for a fully functional base system. In particular, consider installing:\nuserspace utilities for the management of file systems that will be used on the system, utilities for accessing RAID or LVM partitions, specific firmware for other devices not included in linux-firmware (e.g. sof-firmware for sound cards), software necessary for networking (e.g. a network manager or DHCP client), a text editor, packages for accessing documentation in man and info pages: man-db, man-pages and texinfo. To install other packages or package groups, append the names to the pacstrap command above (space separated) or use pacman while chrooted into the new system. For comparison, packages available in the live system can be found in packages.x86_64.\n- Install Guide - GNU Free Documentation License FINALLY. This is the fun command. It\u0026rsquo;s called pacstrap because it uses pacman (the system package-manager) to pull the system up by it\u0026rsquo;s bootstraps - We\u0026rsquo;re finally getting this thing rockin`.\nSo, lets do it. run pacstrap /mnt base base-devel linux linux-firmware linux-headers. That\u0026rsquo;ll take a hot minute and fill you screen with many lines of text. When it\u0026rsquo;s done you\u0026rsquo;ll have a very minimal (read: Mostly useless) Linux install done. Unfortunately, you can\u0026rsquo;t even boot into it yet as you haven\u0026rsquo;t even installed a boot loader.\nGetting The Basics Configured # ⬤⬤⬤⬤⬤⬤⬤⬤⬤◯\nFstab # Generate an fstab file (use -U or -L to define by UUID or labels, respectively):\n# genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab Check the resulting /mnt/etc/fstab file, and edit it in case of errors.\n- Install Guide - GNU Free Documentation License Do the thing ↑. We\u0026rsquo;ll need to edit it later, but for now that command alone should do the trick.\nIn short, this is generating (gen) your filesystem (fs) tabulation (tab) file which is what Linux looks for on startup to figure out what filesystems to load, where they\u0026rsquo;re at, and how to load them.\nChroot # Change root into the new system:\n# arch-chroot /mnt - Install Guide - GNU Free Documentation License Run that command ↑.\nWhat this is doing is changing our root (chroot = change root) to our new install. This means when we edit files from here on out we\u0026rsquo;re working on the system we\u0026rsquo;ll actually be using instead of the one that booted off the flash drive.\nTime zone # Set the time zone:\n# ln -sf /usr/share/zoneinfo/Region/City /etc/localtime Run hwclock(8) to generate /etc/adjtime:\n# hwclock --systohc This command assumes the hardware clock is set to UTC. See System time#Time standard for details.\n- Install Guide - GNU Free Documentation License To see your options you can type ln -sf /usr/share/zoneinfo/ and press tab. Type the region and the slash, then press tab again. Obviously the city doesn\u0026rsquo;t have to be where you live, it just has to be in the same time zone.\nThe second command synchronizes the computer\u0026rsquo;s hardware clock.\nThis does have an annoying side effect. When you boot back to Windows, the time will be wrong. You can fix that by next time your in windows, opening an admin command prompt and running\nreg add \u0026quot;HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\TimeZoneInformation\u0026quot; /v RealTimeIsUniversal /d 1 /t REG_DWORD /f\nLocalization # Edit /etc/locale.gen and uncomment en_US.UTF-8 UTF-8 and other needed locales. Generate the locales by running:\n# locale-gen Create the locale.conf(5) file, and set the LANG variable accordingly:\n/etc/locale.conf:\nLANG=en_US.UTF-8 If you set the console keyboard layout, make the changes persistent in vconsole.conf(5):\n/etc/vconsole.conf:\nKEYMAP=de-latin1 - Install Guide - GNU Free Documentation License Ironically, the edit part of this is the awkward part as you don\u0026rsquo;t actually have a text editor yet. So, lets go install one.\nBecause your system has just been installed, we know it\u0026rsquo;s list of packages that are available is up to date, so we can run pacman -S nano to -Synchonize the nano package to our system using pacman. nano is the name of a basic, terminal-user-interface (TUI) text editor. You\u0026rsquo;ll be asked if you want to install it. Press \u0026lsquo;y\u0026rsquo; and \u0026rsquo;enter\u0026rsquo;.\nNow, we can edit that file. Run nano /etc/locale.gen. For pretty much any of my readers your LANG should be en_US.UTF-8 so scroll down in the file that opened with your arrow keys until you find that and then remove the # before it. Then, to save the change, do Ctrl+o (the ^ character in the usage guide at the bottom means Ctrl). Then do Ctrl+x to exit.\nThen make the /etc/locale.conf file, to do this run nano /etc/locale.conf and fill it with what you need, LANG=en_US.UTF-8 as in the example above is probably applicable to most readers. Save it and exit nano again.\nFinally, run locale-gen.\nNetwork configuration # Create the hostname file:\n/etc/hostname:\nmyhostname Complete the network configuration for the newly installed environment. That may include installing suitable network management software.\n- Install Guide - GNU Free Documentation License Okay, so, right now you have access to the network in your chroot because the networking as setup from the flash-drive\u0026rsquo;s live system is still active, but if were to reboot (and you had a bootloader, which you don\u0026rsquo;t yet) you wouldn\u0026rsquo;t have networking because you have no networking stack setup to provide it!\nLet\u0026rsquo;s fix that.\nFirst, you should do what the guide says and set your host name. This is the name other computers on the network can use to identify your computer. You could make it say \u0026ldquo;bobs-laptop\u0026rdquo; but you can also have fun and make it more-or-less whatever you want. Don\u0026rsquo;t use spaces or weird characters though.\nLike before, you just need to nano /etc/hostname. Type the name you want. Save. Close.\nOkay, now we need to actually set up the networking software. I recommend using NetworkManager. We can install that with pacman -S networkmanager\nWe\u0026rsquo;ll set it up in full later.\nRoot password # Set the root password:\n# passwd - Install Guide - GNU Free Documentation License This is effectively the admin password. Do not forget this, or you\u0026rsquo;re pretty much fucked.\nWhile we\u0026rsquo;re at it, let\u0026rsquo;s set up the very start of a user account, as using root all the time is very unsafe. To do so run:\n1 useradd -m -G wheel mycrappyusername followed by,\n1 passwd mycrappyusername (I recommend using the same password you used for root)\nNow, we need to make it easy to use your account as an admin account via the sudo command (super user do).\nrun\n1 EDITOR=nano visudo then find the line that says\n1 # %wheel ALL=(ALL) ALL and remove the \u0026lsquo;#\u0026rsquo;\nAs an explanation, the \u0026lsquo;#\u0026rsquo; is turning that line in that file into a comment. In programming it\u0026rsquo;s common practice to use comments to disable sections of code so say we had a program:\n1 2 3 for i in range(5) #print(i) print(i/2) the # before print(i) is preventing it from actually executing so the output of this would be {1/2,1,3/2,2,5/2} instead of {1,1/2,2,1,3,3/2,4,2,5/2,5}\nBoot loader # Choose and install a Linux-capable boot loader. If you have an Intel or AMD CPU, enable microcode updates in addition.\n- Install Guide - GNU Free Documentation License This gets to be all kinds of fun, because this is where some computers just say \u0026ldquo;Nah, fuck you.\u0026rdquo; And you\u0026rsquo;ll have to either debug from hell to figure out why something isn\u0026rsquo;t working or you\u0026rsquo;ll have to try another option.\nIf you\u0026rsquo;re computer is UEFI (so, not ancient) systemd-boot has historically work quite well for me, but because I want to be 100% sure if you\u0026rsquo;re following this guide that your computer will actually work, I\u0026rsquo;m going to recommend the ol\u0026rsquo; reliable: Grub.\nTo do so, first actually install the packages pacman -S grub efibootmgr os-prober\nWe need to set grub to detect the Windows install. nano /etc/default/grub and remove the # on the line with GRUB_DISABLE_OS_PROBER=false\nthen actually install grub with\ngrub-install --efi-directory=/boot --bootloader-id=GRUB\nIn it\u0026rsquo;s output it should say os-prober will be executed… somewhere.\nFinally Removing The Flash Drive # ⬤⬤⬤⬤⬤⬤⬤⬤⬤⬤\nReboot # Exit the chroot environment by typing exit or pressing Ctrl+d.\nOptionally manually unmount all the partitions with umount -R /mnt: this allows noticing any \u0026ldquo;busy\u0026rdquo; partitions, and finding the cause with fuser(1).\nFinally, restart the machine by typing reboot: any partitions still mounted will be automatically unmounted by systemd. Remember to remove the installation medium and then login into the new system with the root account.\n- Install Guide - GNU Free Documentation License [TODO] make sure the UEFI loads the new bootloader\nWhen you boot into the new system it will ask you for a username and password. The username is and password is whatever you set before. When you type the password it won\u0026rsquo;t look like you\u0026rsquo;re entering anything, don\u0026rsquo;t worry, it\u0026rsquo;s still registering the input. Just type it and press enter.\nNow, we can load up networking. Run systemctl enable NetworkManager and systemctl start NetworkManager. Enabling makes it start up on each boot, starting it starts it now for this boot. You won\u0026rsquo;t need to run these again. Now, we can actually configure the network - if you\u0026rsquo;re wired in, it should just work, but if you\u0026rsquo;re on WiFi just run nmuti → \u0026ldquo;Activate a connection\u0026rdquo; → find your network, enter your password. Keep pressing escape to get back to the terminal when done.\nRun ping archlinux.org and if after a few seconds you see something like\n64 bytes from archlinux.org (░░.░░░.░░░.░░░): icmp_seq=░ ttl=░░ time=░░░ms\nThen you\u0026rsquo;re good to go. Press Ctrl+c to stop ping.\nBut Wait? This is worse than when we started? # ⬢⬡⬡⬡⬡⬡⬡⬡⬡⬡\nYep, as it is right now you\u0026rsquo;ll have a terminal that pretty much does nothing. Great! Time to go grab all the things you want.\nDual boot? Getting access to the other disk # Before we do that though, if you\u0026rsquo;re dual booting, you\u0026rsquo;ll want to set up your system so that it automatically mounts your other OS\u0026rsquo;s disk. The easiest way to do this is to.\nIf it\u0026rsquo;s not already, make sure you have ntfs-3g installed. Just do a pacman -S ntfs-3g.\nRun lsblk -o name,mountpoint,label,size,fstype,uuid\nFigure out which Partition has Windows on it. If you have multiple disks, this may be a bit awkward. Here, for example is mine:\nnvme1n1 953.9G ├─nvme1n1p1 /boot 2G vfat EAEC-8D86 ├─nvme1n1p2 16M ├─nvme1n1p3 951.2G ntfs D00CEBCB0CEBAB24 └─nvme1n1p4 715M ntfs DA1E14C51E149C97 nvme0n1 953.9G ├─nvme0n1p1 1G vfat 96EE-30CD └─nvme0n1p2 / 952.8G ext4 629cedc3-e5bf-4496-a75b-78d6d1c30d88 What you should see is one partition that has a mount point of /boot (nvme1n1p1, in my case) and one that has a mountpoint of just / (nvme0n1p2 in my case). Assuming nothing else weird about your setup, (no extra drives, etc.) you\u0026rsquo;re looking for a large (probably 250G+) ntfs partition that has no mount point. The only thing matching that above is nvme1n1p3. Note, your disks may start with \u0026ldquo;sd_\u0026rdquo; instead of \u0026ldquo;nvme_\u0026rdquo;\nLet\u0026rsquo;s see if that\u0026rsquo;s the right partition\nRun mount /dev/[partition name] /mnt/win (for me, this would be mount /dev/nvme1n1p3 /mnt/win)\nRun cd /mnt/win then ls -a . You should see all the folders you\u0026rsquo;d expect to see at the base of a C drive, \u0026ldquo;Users\u0026rdquo;, \u0026ldquo;Windows\u0026rdquo;, \u0026ldquo;Program Files\u0026rdquo;, etc.\nIf you don\u0026rsquo;t - don\u0026rsquo;t panic. Do you see anything other than . ..? Do you recognize the folders? It\u0026rsquo;s possible you have multiple big partitions - maybe when your in Windows you also have another disk (probably D:/) - this might be that. This is good! It means we now know the partition with some of your data on it. Note this down somewhere - like sda3 has data and start from 1. again, pick another big NTFS partition, but when you go to mount change the path to /mnt/win[number you increment], and go from there.\nIf you don\u0026rsquo;t see anything other than . .. it\u0026rsquo;s likely nothing got mounted at all. Re-run the big lsblk command and see if the partition shows up as mounted - see how this has the /mnt/win next to it now?\n├─nvme1n1p3 /mnt/win 951.2G ntfs D00CEBCB0CEBAB24 If /mnt/win is next to none of them, then the mount didn\u0026rsquo;t even work. Start from 1. If you still can\u0026rsquo;t get anywhere, ask around for some help.\nOkay, so your disk is mounted and you have access to your files, but you really don\u0026rsquo;t want to do that every time you boot. Let\u0026rsquo;s add the partition(s) (multiple, if you have a data disk) to our FSTAB. Run nano /etc/fstab (with sudo, if you\u0026rsquo;ve jumped ahead and made a user) and add the line:\nUUID=[Your disks UUID] /mnt/win ntfs-3g defaults,nofail,noatime,uid=1000,umask=0011 0 0 For example, for mine, this would be:\nUUID=D00CEBCB0CEBAB24 /mnt/win ntfs-3g defaults,nofail,noatime,uid=1000,umask=0011 0 0 Now, if you reboot, your disk should automatically be mounted to /mnt/win.\nAs a brief explanation. ntfs-3g sets what NTFS driver to use. ntfs3 instead should in theory be much faster, but it\u0026rsquo;s not super stable at the time of writing. As for the other flags:\ndefaults just sets sane mounting options for most things based on filesystem (NTFS, in this case) type nofail sets it so that if it can\u0026rsquo;t mount the Windows partition, Linux doesn\u0026rsquo;t say \u0026ldquo;Nope!\u0026rdquo; and drop you into a \u0026ldquo;recovery shell\u0026rdquo;. noatime sets it not to store access times. There\u0026rsquo;s a not-insignificant performance impact in doing so, so may as well turn it off. uid=1000,umask=0011 - set\u0026rsquo;s it so that files are the users (well, when you make one) which should be of id 1000 and that all files are set to be able to be read, written, or executed. This is bad for security, but as your computer is probably single user, it\u0026rsquo;s fine. The 0 0 at the end The first one should always be 0 as it\u0026rsquo;s for marking if the disk should be backed up using an old back up system nobody should use, and the second if a system should be checked for file system checking, and in what order. If it\u0026rsquo;s an NTFS disk and you dual boot, set it to 0. Your root / partition should be set to 1, if you care, you can set the others (if you have any) to 2, but, like, FS checking (fsck) is usually one of those things you\u0026rsquo;ll know if you need to do, so as long as the system boots, fuck it. Post-installation # See General recommendations for system management directions and post-installation tutorials (like creating unprivileged user accounts, setting up a graphical user interface, sound or a touchpad).\nFor a list of applications that may be of interest, see List of applications.\n- Install Guide - GNU Free Documentation License Making a User Account # Users and groups # A new installation leaves you with only the superuser account, better known as \u0026ldquo;root\u0026rdquo;. Logging in as root for prolonged periods of time, possibly even exposing it via SSH on a server, is insecure. Instead, you should create and use unprivileged user account(s) for most tasks, only using the root account for system administration. See Users and groups#User management for details.\nUsers and groups are a mechanism for access control; administrators may fine-tune group membership and ownership to grant or deny users and services access to system resources. Read the Users and groups article for details and potential security risks.\n- General Recommendations - GNU Free Documentation License Privilege elevation # For a list of applications to allow running commands or starting an interactive shell as another user (e.g. root), see List of applications/Security#Privilege elevation.\n- General Recommendations - GNU Free Documentation License Setting up System-y Stuff (Logs, Background tasks, etc.) # ⬢⬢⬡⬡⬡⬡⬡⬡⬡⬡\nService management # Arch Linux uses systemd as the init process, which is a system and service manager for Linux. For maintaining your Arch Linux installation, it is a good idea to learn the basics about it. Interaction with systemd is done through the systemctl command. Read systemd#Basic systemctl usage for more information.\n- General Recommendations - GNU Free Documentation License System maintenance # Arch is a rolling release system and has rapid package turnover, so users have to take some time to do system maintenance. Read Security for recommendations and best practices on hardening the system.\n- General Recommendations - GNU Free Documentation License Booting # This section contains information pertaining to the boot process. An overview of the Arch boot process can be found at Arch boot process. See Category:Boot process for more.\nHardware auto-recognition # Hardware should be auto-detected by udev during the boot process by default. A potential improvement in boot time can be achieved by disabling module auto-loading and specifying required modules manually, as described in Kernel modules. Additionally, Xorg should be able to auto-detect required drivers using udev, but users have the option to configure the X server manually too.\nMicrocode # Processors may have faulty behaviour, which the kernel can correct by updating the microcode on startup. See Microcode for details.\nRetaining boot messages # Once it concludes, the screen is cleared and the login prompt appears, leaving users unable to gather feedback from the boot process. Disable clearing of boot messages to overcome this limitation.\nNum Lock activation # Num Lock is a toggle key found in most keyboards. For activating Num Lock\u0026rsquo;s number key-assignment during startup, see Activating numlock on bootup.\n- General Recommendations - GNU Free Documentation License Installing and Removing Software # ⬢⬢⬢⬡⬡⬡⬡⬡⬡⬡\nPackage management # This section contains helpful information related to package management. See FAQ#Package management and Category:Package management for more.\nNote: It is imperative to keep up to date with changes in Arch Linux that require manual intervention before upgrading your system. Subscribe to the arch-announce mailing list or the recent news RSS feed. Alternatively, check the front page Arch news every time before you update.\npacman # pacman is the Arch Linux package manager: it is highly encouraged to become familiar with it before reading any other articles.\nSee pacman/Tips and tricks for suggestions on how to improve your interaction with pacman and package management in general.\nRepositories # See the Official repositories article for details about the purpose of each officially maintained repository.\nIf you plan on using 32-bit applications, you will want to enable the multilib repository.\nThe Unofficial user repositories article lists several other unsupported repositories.\nYou may consider installing the pkgstats service.\nMirrors # Visit the Mirrors article for steps on taking full advantage of using the fastest and most up to date mirrors of the official repositories. As explained in the article, a particularly good advice is to routinely check the Mirror Status page for a list of mirrors that have been recently synced.\n- General Recommendations - GNU Free Documentation License Arch Build System # Ports is a system initially used by BSD distributions consisting of build scripts that reside in a directory tree on the local system. Simply put, each port contains a script within a directory intuitively named after the installable third-party application.\nThe Arch Build System offers the same functionality by providing build scripts called PKGBUILDs, which are populated with information for a given piece of software: integrity hashes, project URL, version, license and build instructions. These PKGBUILDs are parsed by makepkg, the actual program that generates packages that are cleanly manageable by pacman.\nEvery package in the repositories along with those present in the AUR are subject to recompilation with makepkg.\nArch User Repository # While the Arch Build System allows the ability of building software available in the official repositories, the Arch User Repository (AUR) is the equivalent for user submitted packages. It is an unsupported repository of build scripts accessible through the web interface or through the Aurweb RPC interface.\n- General Recommendations - GNU Free Documentation License Making your mouse serve a purpose again # ⬢⬢⬢⬢⬡⬡⬡⬡⬡⬡\nMost mere mortals will prefer working in a graphical environment instead of the terminal for literally everything (though it is possible to do some crazy things so you can browse the web comfortably from one). So, that means we\u0026rsquo;ll need to grab display drivers corosponding to your graphics card (AMD, Nvidia, or Intel), pick a desktop environment and/or window manager (How everything looks and feels), and set up the Display Manager (What mostly serves as a login screen).\nGraphical user interface # This section provides orientation for users wishing to run graphical applications on their system. See Category:Graphical user interfaces for additional resources.\nDisplay server # Xorg is the public, open-source implementation of the X Window System (commonly X11, or X). It is required for running applications with graphical user interfaces (GUIs), and the majority of users will want to install it.\nWayland is a newer, alternative display server protocol and the Weston reference implementation is available.\n- General Recommendations - GNU Free Documentation License If you\u0026rsquo;re wanting to dive into something very strange but very cool, you might give Arcan a shot too. Just be warned, you\u0026rsquo;ll probably have to compile it from source!\nDisplay drivers # The default modesetting display driver will work with most video cards, but performance may be improved and additional features harnessed by installing the appropriate driver for AMD or NVIDIA products.\n- General Recommendations - GNU Free Documentation License Desktop environments # Although Xorg provides the basic framework for building a graphical environment, additional components may be considered necessary for a complete user experience. Desktop environments such as GNOME, KDE, LXDE, and Xfce bundle together a wide range of X clients, such as a window manager, panel, file manager, terminal emulator, text editor, icons, and other utilities. Users with less experience may wish to install a desktop environment for a more familiar environment. See Category:Desktop environments for additional resources.\nWindow managers # A full-fledged desktop environment provides a complete and consistent graphical user interface, but tends to consume a considerable amount of system resources. Users seeking to maximize performance or otherwise simplify their environment may opt to install a window manager alone and hand-pick desired extras. Most desktop environments allow use of an alternative window manager as well. Dynamic, stacking, and tiling window managers differ in their handling of window placement.\n- General Recommendations - GNU Free Documentation License Display manager # Most desktop environments include a display manager for automatically starting the graphical environment and managing user logins. Users without a desktop environment can install one separately. Alternatively you may start X at login as a simple alternative to a display manager.\n- General Recommendations - GNU Free Documentation License If you\u0026rsquo;re feeling particularly weird, you might want to try ly too.\nUser directories # Well-known user directories like Downloads or Music are created by the xdg-user-dirs-update.service user service, that is provided by xdg-user-dirs and enabled by default upon install. If your desktop environment or window manager does not pull in the package, you can install it and run xdg-user-dirs-update manually as per XDG user directories#Creating default directories.\n- General Recommendations - GNU Free Documentation License Mouse and Keyboard Configuration # ⬢⬢⬢⬢⬢⬡⬡⬡⬡⬡\nInput devices # This section contains popular input device configuration tips. See Category:Input devices for more.\nKeyboard layouts # Non-English or otherwise non-standard keyboards may not function as expected by default. The necessary steps to configure the keymap are different for virtual console and Xorg, they are described in Keyboard configuration in console and Keyboard configuration in Xorg respectively.\nMouse buttons # Owners of advanced or unusual mice may find that not all mouse buttons are recognized by default, or may wish to assign different actions for extra buttons. Instructions can be found in Mouse buttons.\nLaptop touchpads # Many laptops use Synaptics or ALPS \u0026ldquo;touchpad\u0026rdquo; pointing devices. For these, and several other touchpad models, you can use either the Synaptics input driver or libinput; see Touchpad Synaptics and libinput for installation and configuration details.\nTrackPoints # See the TrackPoint article to configure your TrackPoint device.\n- General Recommendations - GNU Free Documentation License Making your computer not drink power and run like ass # ⬢⬢⬢⬢⬢⬢⬡⬡⬡⬡\nPower management # This section may be of use to laptop owners or users otherwise seeking power management controls. See Category:Power management for more.\nSee Power management for more general overview.\nACPI events # Users can configure how the system reacts to ACPI events such as pressing the power button or closing a laptop\u0026rsquo;s lid. For the new (recommended) method using systemd, see Power management with systemd. For the old method, see acpid.\nCPU frequency scaling # Modern processors can decrease their frequency and voltage to reduce heat and power consumption. Less heat leads to more quiet system and prolongs the life of hardware. See CPU frequency scaling for details.\nLaptops # For articles related to portable computing along with model-specific installation guides, please see Category:Laptops. For a general overview of laptop-related articles and recommendations, see Laptop.\nSuspend and hibernate # See the main article: Power management/Suspend and hibernate.\n- General Recommendations - GNU Free Documentation License - Improving Performance - GNU Free Documentation License - SSDs - GNU Free Documentation License Audio would be nice # ⬢⬢⬢⬢⬢⬢⬢⬡⬡⬡\nMultimedia # Category:Multimedia includes additional resources.\nSound system # ALSA is a kernel sound system that should work out the box (it just needs to be unmuted). Sound servers such as PulseAudio and PipeWire can offer additional features and support more complex audio configuration.\nSee Professional audio for advanced audio requirements.\n- General Recommendations - GNU Free Documentation License Networking-y Stuff # ⬢⬢⬢⬢⬢⬢⬢⬢⬡⬡\nNetworking # This section is confined to small networking procedures. See Network configuration for a full configuration guide and Category:Networking for related articles.\nClock synchronization # The Network Time Protocol (NTP) is a protocol for synchronizing the clocks of computer systems over packet-switched, variable-latency data networks. See Time synchronization for implementations of such protocol.\nDNS security # For better security while browsing the web, paying online, connecting to SSH services and similar tasks consider using DNSSEC-enabled DNS resolver that can validate signed DNS records, and an encrypted protocol such as DNS over TLS, DNS over HTTPS or DNSCrypt. See Domain name resolution for details.\nSetting up a firewall # A firewall can provide an extra layer of protection on top of the Linux networking stack. While the stock Arch kernel is capable of using Netfilter\u0026rsquo;s iptables and nftables, neither are enabled by default. It is highly recommended to set up some form of firewall. See Category:Firewalls for available guides.\nNetwork shares # To share files among the machines in a network, follow the NFS or the SSHFS article.\nUse Samba to join a Windows network. To configure the machine to use Active Directory for authentication, read Active Directory integration.\nSee also Category:Network sharing.\n- General Recommendations - GNU Free Documentation License Printing # CUPS is a standards-based, open source printing system developed by OpenPrinting for Linux. See Category:Printers for printer-specific articles.\n- General Recommendations - GNU Free Documentation License - General Recommendations - GNU Free Documentation License Making things look pretty # ⬢⬢⬢⬢⬢⬢⬢⬢⬢⬡\nAppearance # This section contains frequently-sought \u0026ldquo;eye candy\u0026rdquo; tweaks for an aesthetically pleasing Arch experience. See Category:Eye candy for more.\nFonts # You may wish to install a set of TrueType fonts, as only unscalable bitmap fonts are included in a basic Arch system. There are several general-purpose font families providing large Unicode coverage and even metric compatibility with fonts from other operating systems.\nA plethora of information on the subject can be found in the Fonts and Font configuration articles.\nIf spending a significant amount of time working from the virtual console (i.e. outside an X server), users may wish to change the console font to improve readability; see Linux console#Fonts.\nGTK and Qt themes # A big part of the applications with a graphical interface for Linux systems are based on the GTK or the Qt toolkits. See those articles and Uniform look for Qt and GTK applications for ideas to improve the appearance of your installed programs and adapt it to your liking.\n- General Recommendations - GNU Free Documentation License Back to the Terminal # ⬢⬢⬢⬢⬢⬢⬢⬢⬢⬢\nConsole improvements # This section applies to small modifications that improve console programs\u0026rsquo; practicality. See Category:Command-line shells for more.\nTab-completion enhancements # It is recommended to properly set up extended tab completion right away, as instructed in the article of your chosen shell.\nAliases # Aliasing a command, or a group thereof, is a way of saving time when using the console. This is especially helpful for repetitive tasks that do not need significant alteration to their parameters between executions. Common time-saving aliases can be found in Bash#Aliases, which are easily portable to zsh as well.\nAlternative shells # Bash is the shell installed by default in an Arch system. The live installation media, however, uses zsh with the grml-zsh-config addon package. See Command-line shell#List of shells for more alternatives.\nConsole prompt # The console prompt (PS1) can be customized to a great extent. See Bash/Prompt customization or Zsh#Prompts if using Bash or Zsh, respectively.\n- General Recommendations - GNU Free Documentation License Bash additions # A list of miscellaneous Bash settings, history search and Readline macros is available in Bash#Tips and tricks.\nColored output # This section is covered in Color output in console.\nCompressed files # Compressed files, or archives, are frequently encountered on a GNU/Linux system. Tar is one of the most commonly used archiving tools, and users should be familiar with its syntax (Arch Linux packages, for example, are simply zstd compressed tarballs). See Archiving and compression.\n- General Recommendations - GNU Free Documentation License Mouse support # Using a mouse with the console for copy-paste operations can be preferred over GNU Screen\u0026rsquo;s traditional copy mode. Refer to General purpose mouse for comprehensive directions. Note that you can already do this in terminal emulators with the clipboard.\nSession management # Using terminal multiplexers like tmux or GNU Screen, programs may be run under sessions composed of tabs and panes that can be detached at will, so when the user either kills the terminal emulator, terminates X, or logs off, the programs associated with the session will continue to run in the background as long as the terminal multiplexer server is active. Interacting with the programs requires reattaching to the session.\n- General Recommendations - GNU Free Documentation License This video has aged a bit. Sata Express effectively doesn't exist now and some M.2 NVMe drives are now PCIe 4.0, though the 3.0 ones are still stupid fast. "},{"id":70,"href":"/engineering/linux/firstgoal/","title":"Firstgoal","section":"Engineering","content":" Chapter 1 - The first goal # Art by @monoxromatik Every journey needs a place to start, and while many may like to start slow, I think a head first approach is best. So that\u0026rsquo;s exactly what we\u0026rsquo;re gonna do. The very first thing we\u0026rsquo;re going to do is install a new Operating System (OS)(1) on your computer. This is a pretty involved process. It will require you to Repartition(2) your drive, change settings in your BIOS or UEFI(3), and install a new Bootloader(4). I know this sounds really hard, but it\u0026rsquo;s not as bad as it sounds, and I assure you it\u0026rsquo;s worth it. The OS we\u0026rsquo;ll be installing is called Linux. Linux is actually what powers both Android and ChromeOS, and is a common descendant of the same system as Mac OSX. Linux is the OS that almost all of the servers on the internet use - from massive website like Facebook and Google to small Minecraft servers you can rent online to play with friends. What\u0026rsquo;s cool about Linux is it lets you get much closer to the hardware and see what\u0026rsquo;s going on, and it just generally makes writing code much easier.\nFurthermore, it\u0026rsquo;s super easy to set up an amazing development environment in Linux for getting work done with code or electronics, and at the end of the day you can still watch YouTube, play most games that are on Steam, or open up an office suite, just like Windows or Mac. Unlike Windows and (to a lesser extent) Mac though, the system is laid out in a way so that all the moving parts are exposed and able to be tinkered with. No setting or configuration is locked in and you have total control over your computer with Linux. It\u0026rsquo;s not just easier to run and use software and tools for doing hardware and programming development on Linux, but it\u0026rsquo;s also easier to find and install the tools in the first place, as you\u0026rsquo;ll see shortly. Finally, Linux has a great track record of stability(5), as there are many Linux servers that run 24/7/365 to serve web pages, host services like games, and crunch big data in real time. In fact, all of the world\u0026rsquo;s top 500 super computers run Linux.\nBeyond that, there\u0026rsquo;s a degree of respect Linux has for the user that Windows and Mac both lack. In Windows 10 ads are being baked into the preinstalled programs from Minesweeper to the Email client, the OS pesters you to use Edge and Bing while simultaneously spying on everything you do. If you attempt to do even remotely system level things it\u0026rsquo;s increasingly easy to get the Frowny Face Blue Screen of Death (BSOD): Add to this the fact that Microsoft basically laid off their entire testing department, and the nightmare that Windows 10 updates have cause, forced online accounts, or well, just read this list. You\u0026rsquo;ll see pretty quickly why most \u0026rsquo;nerds\u0026rsquo; have a pretty deep seeded hatred for Microsoft.\nHonestly, the big one for me is just how much Windows tries to force their tools down my throat.\nI mean, this was a real error message I saw when trying to upgrade my system from 8.1 to 10:\nImage source do you really think Microsoft is at all competent anymore?\nNote, for everything above, I mostly picked on Microsoft and Windows as that\u0026rsquo;s what most people run. I have just as many, if not more, complaints for Apple and OSX. It\u0026rsquo;s just that I suspect there will be far more Windows users reading this than Apple users. According to Wikipedia, \"An operating system (OS) is system software that manages computer hardware and software resources and provides common services for computer programs.\" put simply on your hardware this is probably Windows or Mac OS, and it's what everything else runs on top of To partition a drive means to take all the space on the hard drive and divide it into partitions onto which you can put a file system. Most operating systems like Windows, Mac OsX, or Linux, use multiple partitions for the operating system to function. Usually a filesystem is set up on each of these partitions, in windows this is typically NTFS for Hard Drives and FAT32 for flash drives, these file systems are effectively the index for all the files you'll put on the drive, and as you may have multiple partitions and multiple file systems on one disk each will have an index to match. As complicated as it may seem this means the partition table can be seen as an 'index of indices' of sorts. Don't worry if that's a lot to understand right now, we'll come back to this topic in depth.You may also need to know how your drive is formatted, this is if it is using MBR (Master Boot Record) or GPT (GUID Partition Table), again, we'll cover this. Don't stress over all the new terms. The Binary Input Output System (BIOS) or Unified Extensible Firmware Interface (UEFI) is the thing you see before you computer loads the operating system, usually prompting to press delete or f2 to change settings. This is the system that is used to change the way all the components around the computer talk to one another and at what speed. The bootloader sits at a special place on the hard drive selected for boot in the UEFI or BIOS, and is what the computer uses to load the full operating system, most will let you choose what operating system you want to boot if you have multiple installed on you computer at once I'll admit, it's less stable and performant on laptops than desktops and servers. This is usually due to laptops having switchable graphics - using a graphics chip integrated into the CPU to save power until it has hard work to do where it'll flip to the stronger graphics card. Not all laptops do this, and on those that do it does often work, but sometimes it doesn't easily (and rarely not at all). It's also the case that, very rarely, you'll stumble into a laptop that has issues with WiFi on Linux. Overall though, the experiance is usually fine. "},{"id":71,"href":"/engineering/linux/git/","title":"Git","section":"Engineering","content":" Chapter 5½ - Git. # Git is a distributed version control system that tracks changes in any set of computer files, usually used for coordinating work among programmers collaboratively developing source code during software development. - Wikipedia So it\u0026rsquo;s a way of versioning my files? Why not just click save-as and give it a new name? You could. It\u0026rsquo;s just that git can do a lot more! Namely, it\u0026rsquo;s really good at:\nLetting multiple people work together where real-time (Google Docs style) colaboration doesn\u0026rsquo;t work well. Allowing for changes to be reverted later Allowing for branches If it helps, think of it like saving in a video game. You can save - or go back to a previous save -and have two different branches where you make a different decision in each. The only big point where this analogy breaks down is that you can merge two branches, resolving conflicts between them and that two different people can work on two different branches for them to be merged together.\nTechnically, Git isn\u0026rsquo;t the only version control system out there. There\u0026rsquo;s also Subversion, Mercurial, CVS, \u0026amp; Fossil to name a few. It\u0026rsquo;s just that git has a supermajority of the market share because it\u0026rsquo;s really damn good. 1. Letting multiple people work together # Say you have a file with the single sentence Bob has a dog in it. You want to change Bob\u0026rsquo;s name to Dave and your friend wants to change the dog to a cat\nSo, you both make the changes to your versions of the file, each on your own computers. You have Dave has a dog, your friend has Bob has a cat.\nNow, you both go submit your changes. Naturally, one of you has to go first. Let\u0026rsquo;s assume you make it first, the file now says Dave has a dog. Then, your friend goes to do their changes. Keep in mind, their version they were based on doesn\u0026rsquo;t have the name changed to Dave yet. Now, git is smart enough to realize that you only changed Dave\u0026rsquo;s name and your friend only changed the dog to a cat, so, it merges the two for you and you get Dave has a cat\nSometimes, the changes can\u0026rsquo;t be resolved so easily and you will have what\u0026rsquo;s called a merge conflict. These are fine, but does require some human intervention. In the above, if both of you had changed the persons name, the latter person would have to select which name to keep. Usually, each change is reviewed by multiple people working on the project, and if there\u0026rsquo;s a conflict the preson the conflict is with would help get it resolved - in this case, picking which name to actually use.\n2. Allowing changes to be reverted later # Say you\u0026rsquo;re working alone on the project and are working with two files\nFILE A: The Rockwell Engineering Retroencabultor is neat. FILE B: Usuage Guide: Don\u0026#39;t. and you make some changes\nFILE A: The Aperture Science Retroencabultor is neat. FILE B: Usuage Guide: Lick it. and some more,\nFILE A: The Aperture Science Retroencabultor is dangerous. FILE B: Instructions: Lick it. But you realize you realize the middle edit was in error. Git will let you revert one or both files, plucking just the changes you made in that single \u0026ldquo;commit\u0026rdquo; (basically a project snapshot). If we wanted to revert the changes just to File B in the second change, we could:\nFILE A: The Aperture Science Retroencabultor is dangerous. FILE B: Instructions: Don\u0026#39;t. Again, sometimes this will fail. If you\u0026rsquo;ve made changes where reverting like this is nonsensical or there\u0026rsquo;s just to many changes for it to understand what has actually changed, it won\u0026rsquo;t work. But, generally, it\u0026rsquo;ll do a decent job.\nEven if it doesn\u0026rsquo;t work, it\u0026rsquo;ll let you pluck it out manually and ask you to fix all the changes after it to make sense based on removing that change - a bit tedious, but better than any alternative in complex situations.\n3. Allowing for branches # Motivating this outside of Git\u0026rsquo;s intended purpose (code) is a bit awkward, but branches generally serve two uses:\nLetting multiple people make a series of changes without constantly breaking eachother\u0026rsquo;s work Keeping a large project organized 1. should sort of make sense intuitively. If multiple people on a team are working on a series of complex changes, a change to one thing while someone works might temporarily break something else. It\u0026rsquo;s easier if you can take a snapshot, work off of that branch, and then submit those changes when they\u0026rsquo;re ready, not constantly keeping up with everyone else\u0026rsquo;s changes.\nSure, sometimes someone else\u0026rsquo;s changes will conflict with yours, but espically if you\u0026rsquo;re mostly adding entirely new files, it usually just works - no conflicts.\n2. is roughly the same idea. Say you\u0026rsquo;re working on a program and you want to add a feature to do X. All of the changes to make X work should be self contained. When the feature is fully ready, then you merge the branch in as one big \u0026ldquo;add this feature\u0026rdquo; to the project merge. This is done because otherwise half-finished ideals will have code just hanging around.\nWith that context, I really recommend you go watch \u0026amp; read:\n./missing-semester - Version Control Done with that page? Cool, welcome back.\nThere are a few extra things I want to mention:\nA lot of people conflate Git and GitHub\nGIT is the protocol. GITHUB is a provider of git services. You can use git using GitHub\u0026rsquo;s platform, but you could also use Gitlab, Gitea, or about 10000 other hosting provides - or host your own git server.\nStill, you may want to use GitHub. It\u0026rsquo;s nice to use and is often the only way a lot of people use git. It does add a fair amount of extra features on top of git too. So, for better or worse, you\u0026rsquo;ll probably want to know how to use it and those extra features too.\nSetting up a GitHub account # If you haven\u0026rsquo;t already, go though the usual steps to make an account on https://github.com.\nOne of the first things you should have to do when using GitHub is set up a secure method to send your changes to GitHub\u0026rsquo;s servers. For security reasons, you can\u0026rsquo;t just use a password (This is a good thing) and instead need to set up key based authentication.\nI\u0026rsquo;m going to save the nitty-gritty about how public-private key based authentication works for the Security chapter, but for now what you need to know is having a key pair will let you securely access git (and ssh, when we get to that) services on various servers, so we need to get keys setup.\nWindows Assuming you\u0026rsquo;re running a somewhat recent release of Windows 10 or Windows 11, ssh should be installed by default. SSH is something we\u0026rsquo;ll use later for it\u0026rsquo;s intended purpose, but right now we need to use something included along with it, called ssh-keygen. If you open up a command prompt window, you should be able to run, well, exactly that- just type ssh-keygen and press enter. It should prompt you for where to save it - leave it the default by pressing enter. Then, it\u0026rsquo;ll ask if you want to put a password on it, that\u0026rsquo;s up to you, it\u0026rsquo;s not strictly necessary. When done, that will make some new files for you in a folder at C:/Users/{YourUserName}/.ssh (note, this isn\u0026rsquo;t in your documents, it\u0026rsquo;s literally in your user folder, one below documents) the two files you just made are id_rsa and id_rsa.pub, these are your private and public keys respectively.\nIt\u0026rsquo;ll also probably generate a pretty picture, something sorta like this:\nAs the names imply, you should keep your private key private, while you need to share your public key - in this case that means sharing it with GitHub. To do so, you can open id_rsa.pub in a text editor (if you have office installed, it might try to open it with \u0026ldquo;Publisher\u0026rdquo; - don\u0026rsquo;t. Notepad or VSCode will work though)\nYou should see text that looks something like this:\n+---[RSA 3072]----+ | ..oo| | o ++| | . + o .=| | + . E= ..*| | = S... +.| | o =o=o= . | | o ooX.=. | | + =.B +.o | | . +...= | +----[SHA256]-----+ ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCXdDCxYNL58FFxfeDRuokZGfvmo1S7cTr7tXOjQ1oAFAF4cWNjcNsFWUVO5oHkY59yVcLM0OSe029rCIP8ecGsXQdDP9wi3sRgpWBfaEf0vTKQ8oAJN1ipw+J2e57gV+UOMIapoTPHSSp3pCyUVS9GnZHct5vorLOCdr6V6JCTMj0KzvrlF67FV8pX9/6kiRjAQuFdFkYzeXwebW2l2GSe7nF/WfkZWMK6KAYPltnWjN9sXXbv5SXyeU6UmrnmKFJAygUj24AK8eXT8wqxIJBsIMUtO1pplLM/XJUCYC8XGcAmjo+E4heWmj3PAHO3A7GltmZoBNzsYdAvYbqVWNpn [YourUserName]@[YourComputersName] We need to copy that and upload it to GitHub. Just head on over to https://github.com/settings/keys and click New SSH Key and paste that text in, name it whatever you like.\nWhen done, you should see something like this:\nNow, you need to actually go install git to Windows. There are plenty of ways to do this, but since you\u0026rsquo;re in the command prompt anyway. You can use winget, Microsoft\u0026rsquo;s package manager to grab it - just run winget install -e --id Git.Git. If you\u0026rsquo;re on an older system without winget or just don\u0026rsquo;t want to use it, you can grab git for windows here.\nBy the way, winget is pretty awesome and has a lot of packages. Everything from Chrome to VLC is available, and it\u0026rsquo;s a nice way to quickly set up a new computer. Now we can set up your user in a .gitconfig file, fortunately, you can do this directly from the same command prompt you\u0026rsquo;re at. Just run git config --global user.email \u0026quot;YourEmail@InQuotesHere\u0026quot; followed by git config --global user.name \u0026quot;Your Username In Quotes Here\u0026quot;. For simplicity, you might want to make sure the email and username both match the ones you use on GitHub, though (I think?) the username can be different without issue.\nLinux \u0026amp; Mac Mac OS X ssh should be installed by default, as should almost any Linux distro, if it\u0026rsquo;s not, it\u0026rsquo;ll usually be in the openssh package, so just install that with your package manager. SSH is something we\u0026rsquo;ll use later for it\u0026rsquo;s intended purpose, but right now we need to use something included along with it, called ssh-keygen. If you open up a terminal, you should be able to run, well, exactly that- just type ssh-keygen and press enter. It should prompt you for where to save it - leave it the default by pressing enter. Then, it\u0026rsquo;ll ask if you want to put a password on it, that\u0026rsquo;s up to you, it\u0026rsquo;s not strictly necessary. When done, that will make some new files for you in a folder at ~/.ssh the two files you just made are id_rsa and id_rsa.pub, these are your private and public keys respectively.\nIt\u0026rsquo;ll also probably generate a pretty picture, something sorta like this:\nAs the names imply, you should keep your private key private, while you need to share your public key - in this case that means sharing it with GitHub. To do so, you can open id_rsa.pub in a text editor, such as TextEdit on Mac or VSCode/Nano/Sublime/Whatever on Linux.\nYou should see text that looks something like this:\n+---[RSA 3072]----+ | ..oo| | o ++| | . + o .=| | + . E= ..*| | = S... +.| | o =o=o= . | | o ooX.=. | | + =.B +.o | | . +...= | +----[SHA256]-----+ ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCXdDCxYNL58FFxfeDRuokZGfvmo1S7cTr7tXOjQ1oAFAF4cWNjcNsFWUVO5oHkY59yVcLM0OSe029rCIP8ecGsXQdDP9wi3sRgpWBfaEf0vTKQ8oAJN1ipw+J2e57gV+UOMIapoTPHSSp3pCyUVS9GnZHct5vorLOCdr6V6JCTMj0KzvrlF67FV8pX9/6kiRjAQuFdFkYzeXwebW2l2GSe7nF/WfkZWMK6KAYPltnWjN9sXXbv5SXyeU6UmrnmKFJAygUj24AK8eXT8wqxIJBsIMUtO1pplLM/XJUCYC8XGcAmjo+E4heWmj3PAHO3A7GltmZoBNzsYdAvYbqVWNpn [YourUserName]@[YourComputersName] We need to copy that and upload it to GitHub. Just head on over to https://github.com/settings/keys and click New SSH Key and paste that text in, name it whatever you like.\nWhen done, you should see something like this:\nNow we need Git. On Mac, git is kinda installed by default. If you go to run it, you\u0026rsquo;ll get prompted to install \u0026ldquo;Command Line Developer Tools\u0026rdquo;. Do that.\nOn Linux, you probably already have git, but if not, it\u0026rsquo;s probably in your distro\u0026rsquo;s repositories as git, so just install it as you normally would.\nNow we can set up your user in a .gitconfig file, fortunately, you can do this directly from the same command prompt you\u0026rsquo;re at. Just run git config --global user.email \u0026quot;YourEmail@InQuotesHere\u0026quot; followed by git config --global user.name \u0026quot;Your Username In Quotes Here\u0026quot;. For simplicity, you might want to make sure the email and username both match the ones you use on GitHub, though (I think?) the username can be different without issue.\nYou have successfully set up keys for your account!\nEven more security… # GitHub has a second layer of authentication that\u0026rsquo;s worth setting up too, which adds a sort of virtual signature to each change you push to GitHub as a confirmation to people that what they see was really written by you.\nBut I already had repos on GitHub, how do I make them use these keys? There\u0026rsquo;s a good chance that when you made the repo and pulled it down to your computer you used the URL of the repo on GitHub, such as running git clone https://github.com/VegaDeftwing/OpGuidesHugoSrc, while this does work, it sets GitHub to use the HTTP protocol for authentication, which isn\u0026rsquo;t what we want, instead we need to use the git protocol.\nLike this, where the link is instead git@github.com:VegaDeftwing/OpGuidesHugoSrc.git (so the command you need to run might be git clone git@github.com:VegaDeftwing/OpGuidesHugoSrc.git) but the problem is you already cloned your repo, so what now? You don\u0026rsquo;t need to delete everything and restart, you just need to change the remote.\nStart by running git remote -v to see what the current URL is Copy the git based URL from GitHub (or wherever you host your repo) Run git remote set-url origin git@github.com:UserName/repo.git, using the URL you copied run git remote -v again to confirm it changed over. For example:\n1 2 3 4 5 6 7 8 9 10 ╭─vega@lyrae ~/git/local/opguides ‹master› ╰─➤ git remote -v origin\thttps://github.com/VegaDeftwing/opinionatedguide (fetch) origin\thttps://github.com/VegaDeftwing/opinionatedguide (push) ╭─vega@lyrae ~/git/local/opguides ‹master› ╰─➤ git remote set-url origin git@github.com:VegaDeftwing/opinionatedguide.git ╭─vega@lyrae ~/git/local/opguides ‹master› ╰─➤ git remote -v origin\tgit@github.com:VegaDeftwing/opinionatedguide.git (fetch) origin\tgit@github.com:VegaDeftwing/opinionatedguide.git (push) Note though, you probably don\u0026rsquo;t want to clone everything as git, especially if it\u0026rsquo;s someone eles\u0026rsquo; repo you\u0026rsquo;re grabbing to build yourself, as sometimes it will try to authenticate with git and fail because you don\u0026rsquo;t have permissions to access the repo. This is an annoying edge case and usually doesn\u0026rsquo;t matter, but it can.\n[TODO] adding GPG key to account for GitHub verified thing\n[TODO] GitHub PR to OpGuides\nMaking A PR on GitHub # Go to OpGuide\u0026rsquo;s GitHub Repo\nClick \u0026ldquo; Fork \u0026quot; in the top right\nClone your copy of the repo, git clone git@github.com:YouUserName/OpGuidesHugoSrc.git\nGo to this file (content→Engineering→Linux→git.md)\nAdd your name to the list below using a text editor.\nRun git add . to stage your changes. (The . character means all files)\nThen git commit -m \u0026quot;added [yourname] to Cool People\u0026quot; To put those staged files into a commit.\nRun git push to push your changes to your copy of the repo on GitHub\nGo back to the OpGuide\u0026rsquo;s GitHub Repo\nYou\u0026rsquo;ll see a banner at the top of the page that looks something like this:\n[TODO]\nClick [TODO]\nYou\u0026rsquo;ll be prompted with the checklist that\u0026rsquo;s in the pull_request_template.md file. Since you\u0026rsquo;re just adding your name, please check the first box \u0026ldquo;Everything I\u0026rsquo;m contributing…\u0026rdquo; and the first box on the Public Domain option.\nClick [TODO]. Now the Pull Request has been summited but should be marked as \u0026ldquo;Open\u0026rdquo;. This means that I now need to either approve it or not. If it gets approved you\u0026rsquo;ll see \u0026ldquo;Merged\u0026rdquo; otherwise you\u0026rsquo;ll see \u0026ldquo;Closed\u0026rdquo;. This may take a few days. Once I\u0026rsquo;ve merged the change, it may not go live right away, as I still have to push it to the live version of the website.\nOptionally, once the PR is done, you may want to delete your copy of the repo from your repositories.\nCool People that Have Submitted A PR To Edit This Page # [Your Name Here] Actually learning to use Git correctly: # learngitbranching.js.org Git User Interfaces # Graphical # There are graphical user interfaces that can be used to make working with git dramatically easier. If you\u0026rsquo;re using GitHub, GitHub Desktop is a decent option.\nYou may want to dig through these if that doesn\u0026rsquo;t work well for you:\nhttps://extrawurst.itch.io/gitui https://aurees.com https://gitfiend.com http://cong.tools (Windows only) https://github.com/FredrikNoren/ungit https://gitextensions.github.io (Windows only) https://tortoisegit.org/download/ (Windows only) Command Line Interface # Some tools also exist to make the command line interface to git better.\nAgain, GitHub has their own tool, https://cli.github.com\nBut you may also want to check out Bit, an alternative git CLI (GitHub) and gut\nThe basic git command really isn\u0026rsquo;t bad though. This Cheatsheet may help you if you want to learn it better.\nA Note on GitHub and competition # Many people will use a fleshed out, consistent timeline of git-commits as a high point in their resume. While having this is good, it\u0026rsquo;s also really easy to abuse and shouldn\u0026rsquo;t be used as some golden metric. See Stop using number of git commits as any metric (u/Sajjon on Reddit)\nStill, I do understand taking pride in your work and have this auto-generating trophy thing on my profile:\nSo, while it\u0026rsquo;s okay to brag a bit, don\u0026rsquo;t think that someone not doing so - or using Git in a way that looks less flashy or consistent - means they\u0026rsquo;re a bad programmer. Some people have workflows that result in them intentionally pushing as few commits as possible. It\u0026rsquo;s quality, not sheer quantity, that matters.\nPlus, you can totally cheat the graph. It\u0026rsquo;s really a ＢＡＤ ＭＥＴＲＩＣ.\nhttps://github.com/gelstudios/gitfiti TODO: # μGit- DIY Git in python\nSSH keys article on the (Arch Wiki)\n[TODO] .gitignores\n[TODO] show git log --all --graph --decorate --oneline and adding it to the gitconfig\n[TODO] git diff\nhttps://github.com/dandavison/delta\n[TODO] Git on not-GitHub, DIY hosting\nhttps://dhwthompson.com/2019/my-favourite-git-commit\n[TODO] Files Git works with\nhttps://blog.martinfenner.org/2014/08/25/using-microsoft-word-with-git/\n[TODO] Not committing private info to Git\nWhat will happen when you commit secrets to a public Git repo? https://onlywei.github.io/explain-git-with-d3/\nWeird Git # CSS in GitHub READMEs\nFurther Reading # ./missing-semester - Metaprogramming\nChapter 6¾ - Documentation # Let\u0026rsquo;s talk about changelogs, or, how I loathe \u0026lsquo;bugfixes and performance improvements\u0026rsquo; (Remy van Elst\u0026rsquo;s Blog)\nhttps://keepachangelog.com/en/1.0.0/\n"},{"id":72,"href":"/engineering/linux/hardware/","title":"Hardware","section":"Engineering","content":" Chapter 3 - Into The Hardware # One of the nifty things about Linux is you don\u0026rsquo;t need to install extra software to check out the deeper parts of your hardware. While on Windows you might need a tool like CPU-Z to look at information about the CPU on Linux you can do it out of the box. Even better, Linux makes changing values and tweaking performance easier, too.\nBefore we get started, let\u0026rsquo;s just look into abyss, hopefully when we\u0026rsquo;re done you\u0026rsquo;ll be able to recognize everything in this picture:\nImage by Sadeq Shahsvan Let\u0026rsquo;s get started on that then!\n"},{"id":73,"href":"/engineering/linux/hardware/architectures/","title":"Architectures","section":"Hardware","content":" Chapter 3½ - Architectures # Instruction Set Architectures # Today, there are two main computer architectures you\u0026rsquo;ll use x86_64 and ARM. You\u0026rsquo;ve probably heard this in passing, but you may not know what they are. These are Instruction Set Architectures (ISA), and they define the list of instructions your computer can understand and the basics about how those instructions are laid out.\nLet\u0026rsquo;s say we have a fictional computer, really old, that\u0026rsquo;s only 8-bit (most modern systems are 32 or 64bit) this would mean we get eight 1\u0026rsquo;s and 0\u0026rsquo;s to define our instruction. We might decide to have the first 4 bits hold the Opcode (short for Operation Code) We might decide that any instruction starting with 0000 is a store, 0001 a move, 0010 a jump, 0011 an add, and so on. Then, we might say the other four bits should represent registers, that is, locations of other numbers. So we might have 00110110 where the 0011 means add, and the next two bits, 01, mean registers 1 and the next two bits, 10, mean register 2. For this, we\u0026rsquo;d probably have to assume the result gets stored in one of these registers, so it might be that 00110110 means add the numbers in register 1 and register 2 and store the result back into register 1.\nAlright, so, that\u0026rsquo;s pretty easy to understand.\nThe next thing you should know is that generally, there\u0026rsquo;s two kinds of instruction sets, CISC and RISC. CISC is Complex Instruction Set Computer, and RISC is Reduced Instruction Set Computer. The names are pretty self-explanatory. While CISC may have a ton of specialty instructions for doing bigger tasks in one instruction (for example, PSHUFB: Packed Shuffle Bytes or MPSADBW: Compute Multiple Packed Sums of Absolute Difference, if you\u0026rsquo;d like to have your brain hurt for a moment). This is compared to RISC, where there\u0026rsquo;s usually dramatically less instructions. A bit counterintuitively, RISC has generally been found to be a bit faster now, because even though the individual instructions can\u0026rsquo;t do as much, they can be pipelined (a topic we\u0026rsquo;ll go over later) much more easily.\nJust for comparison, check out this ARM assembly code cheat sheet from Azeria Labs vs this x86 opcode cheat sheet:\nIt\u0026rsquo;s also a bit stunning just how rarely a lot of x86_64 instructions are even used:\n@pepijndevos re: \u0026quot;Does a compiler use all x86 instructions?\u0026quot; 942 unique instructions, most common are mov, lea, call, int, je, jmp, cmp. 25 instructions appear only once. pic.twitter.com/IJtI4Y5rJD\n\u0026mdash; Vega Deftwing (@Vega_DW) May 12, 2021 Part of what makes this so complicated is the variety of instructions available even for what sounds like a standard set. Not all processors with the same ISA actually support the same instructions. Both x86_64 and ARM have gotten a lot of instruction set extensions, see Wikipedia\u0026rsquo;s x86 instruction listings just to get an idea of this. You may even see some of these mentioned in conversation about what CPU to buy, for example, at the time of writing only a subset of modern desktop processors support AVX-512, a 512-bit instruction (yes, that\u0026rsquo;s a thing, even on 64bit systems) that should make some workloads faster.\nThere\u0026rsquo;s a lot more to computer architecture than this. I only touched on the difference in instruction sets, not how two processors that both implement the same instruction set may vary wildly in actual implementation or how there are different schools of thought when it comes to having memory be separate or combined for data and instructions. We\u0026rsquo;ll come back to that later, though, in Chapter 29: Let\u0026rsquo;s Make our own CPU.\nI do want to leave you with something to ponder though- here\u0026rsquo;s a list of ISAs supported by Radare2, a reverse engineering toolkit:\nArchitectures\ni386, x86-64, ARM, MIPS, PowerPC, SPARC, RISC-V, SH, m68k, m680x, AVR, XAP, System Z, XCore, CR16, HPPA, ARC, Blackfin, Z80, H8/300, V810, V850, CRIS, XAP, PIC, LM32, 8051, 6502, i4004, i8080, Propeller, Tricore, CHIP-8, LH5801, T8200, GameBoy, SNES, SPC700, MSP430, Xtensa, NIOS II, Java, Dalvik, WebAssembly, MSIL, EBC, TMS320 (c54x, c55x, c55+, c66), Hexagon, Brainfuck, Malbolge, whitespace, DCPU16, LANAI, MCORE, mcs96, RSP, SuperH-4, VAX.\nFrom the README.md file at https://github.com/radareorg/radare2 Operating Systems and SysCalls # For lack of a better place to put it, it\u0026rsquo;s worth pointing out that just because a program is made up of the correct instructions for a given processor, doesn\u0026rsquo;t necessarily mean it will run on that architecture without some surrounding context to make it work correctly. The most obvious thing that mucks things up in this regard is the Operating System being used. Obviously, a program written for Windows and a program written for Linux (usually) won\u0026rsquo;t run on the other without some sort of compatibility layer like Wine or WSL. This is mostly because pretty much any non-trivial program will need to use system calls (often abbreviated to \u0026lsquo;syscall\u0026rsquo;) which is, very basically, just the OS specifying that any request for hardware access (say, opening a file, writing data to disk, getting network access, etc.). This list of system calls and how they\u0026rsquo;re requested will vary between operating systems. So now we have a mix of Instruction Set Architectures (with a mix of extensions) and a mix of operating systems, so that must be the full picture, right?\nHa. No. But before I go further, I do want to point out that while I mentioned Windows and Linux, obviously there\u0026rsquo;s a lot more than this. There\u0026rsquo;s macOS, Android, iOS, and a huge variety of smaller projects like TempleOS and Haiku.\nExecutable File Formats # So, what else contributes to the incompatibilities? Well, one major one is the large variety of executable formats. Some of these formats are effectively just a bunch of instructions for their respective architecture with a little bit of information tacked on to point to shared system libraries, others (like java jars) are executable formats that depend on using a virtual machine to try to work around the incompatibility issues between ISAs and Operating Systems.\nFile Formats\nELF, Mach-O, Fatmach-O, PE, PE+, MZ, COFF, OMF, TE, XBE, BIOS/UEFI, Dyldcache, DEX, ART, CGC, Java class, Android boot image, Plan9 executable, ZIMG, MBN/SBL bootloader, ELF coredump, MDMP (Windows minidump), WASM (WebAssembly binary), Commodore VICE emulator, QNX, Game Boy (Advance), Nintendo DS ROMs and Nintendo 3DS FIRMs, various filesystems.\nFrom the README.md file at https://github.com/radareorg/radare2 [TODO] note on hackintoshes\nhttps://manybutfinite.com/post/how-computers-boot-up/\nIn case you need it, here\u0026rsquo;s a SubV/RiscV ISA ref sheet:\ns-ol@merveilles.town "},{"id":74,"href":"/engineering/linux/hardware/biggerpicture/","title":"Biggerpicture","section":"Hardware","content":" 10 - The Bigger Picture # Something that\u0026rsquo;s most people get wrong about computers is thinking that the majority of what makes a computer go faster at something is being able to do math faster. After all, if you can add, divide, multiply, subtract, etc. numbers faster, that\u0026rsquo;s everything a computer does, right? So making math twice as fast means everything is twice as fast? No. Very much so no.\nIt turns out, the vast majority of what your computer does is not math and logic, but just moving data around.\nThis is so much so the case that roughly 30% of the instructions your computer runs are the mov instruction, which does what it sounds like. This makes it by far the most used.\nWhat this means is that when we get to writing code, fast code isn\u0026rsquo;t really code that does math fast, it\u0026rsquo;s code that gets the data to the processor to work on fast. It\u0026rsquo;s code that moves data as fast as possible. There\u0026rsquo;s a catch, though: The faster the memory and the closer to the CPU it is, the more it cost (like, in dollars).\nThe Storage Hierarchy: # Registers→Cache→Memory→Disk (\u0026amp; The role of interrupts) # When people talk about computer storage and data access, they often describe RAM as short term memory and storage on a hard drive or solid state drive as long term memory. That metaphor is decent, but I like to break it down into further levels.\nAt the very fastest access is CPU registers. If RAM is a big pool of short term memory, registers are the thing you\u0026rsquo;re actively thinking about. Like if you\u0026rsquo;re playing a board game, it\u0026rsquo;s the number of steps you\u0026rsquo;ve just read off the dice. It\u0026rsquo;s actively being processed and worked on.\nBetween the registers and RAM for size and speed is Cache (of which there are multiple levels, but don\u0026rsquo;t worry about that for now). Imagine you\u0026rsquo;re playing a really complex game, you may have all the rules in your short term memory, but each turn has phases - you\u0026rsquo;d have the steps for that particular phase in mind during that phase, but in each phase you need to sort of mentally refresh yourself how it works. This is hugely bigger than the storage in the registers, but still usually not big enough to hold all the rules of the game. Breaking the metaphor a bit, you will usually have multiple programs running (games, in this metaphor), and all of them are probably keeping at least some information in cache.\nThen you have RAM. This is the mental space where you keep all the rules of the game while you\u0026rsquo;re playing it. This is hugely bigger than the amount of cache. Breaking the metaphor a bit, it\u0026rsquo;s big enough to actually hold the rules of multiple games (programs) in full.\nThen you have Solid State storage and Hard drives. You might only have one or the other, or you might have both. For the sake of analogy, I\u0026rsquo;ll assume you have both.\nOn the solid state drive you\u0026rsquo;d keep your often done tasks, it\u0026rsquo;s a sort of mental catalog of memories you can bring back pretty quickly, but aren\u0026rsquo;t sitting at the front of your mind until you need them. There is some overhead in getting those thoughts up the hierarchy. You still have a lot more room here than in the above levels, but it\u0026rsquo;s not endless.\nThen you have your hard drive. Your hard drive is like a little notebook of things you can never seem to remember you keep with you. You have to open it up, find what you\u0026rsquo;re looking for, read it, then you can think about it. This can be something as small as a shopping list or as large as all the words to a play or the complete plot of a series of books.\n… Okay, I do have to modify the metaphor here a bit. Hard drives and solid states drives both actually act like this book metaphor, but imagine you had a little minion you could summon to go find what you were looking for. This would free you up to do something until the minion came back, poked you, and said \u0026ldquo;Here\u0026rsquo;s your request boss!\u0026rdquo;. That\u0026rsquo;s how they actually work, that poke is a CPU interrupt. Hard drives and Solid state drives more-or-less look the same to your computer. They\u0026rsquo;re both bulk storage you toss files onto. It\u0026rsquo;s just that you get a lot more storage per dollar with a hard drive than an SSD, but SSDs are much, much, much faster. Hard drives, as mentioned back in the storage chapter, do literally have to move a read head to correct position on a spinning platter after all. A big thing SSDs are faster at isn\u0026rsquo;t just bulk transfer - how quickly that minion can keep fetching things that are stored sequentially - but also in how quickly they can locate things. Think of it like giving the minion super speed bionic legs and a kick ass index. He still has to go read the books and fetch things for you, but he can find where the book is and get that data much faster… albeit it\u0026rsquo;d still be faster if you didn\u0026rsquo;t have to ask the minion in the first place.\nThen you have networking. Sending your virtual minion though the internet (or intranet), the information storage and what you can access is effectively endless but getting there may not be as reliable and even just factoring in the over head of the speed of light down wires to go around the world it may take a while.\nOkay, so, again\nCPU Registers → Cache → RAM → SSD → HDD → Network.\nGot it? Cool.\nNow to stop with the metaphor.\nStalling # There\u0026rsquo;s a computational effect that\u0026rsquo;s really important here. When the CPU wants to access data that\u0026rsquo;s not in its registers, it will try to read from cache.\nIf when it goes to read from cache, the memory still isn\u0026rsquo;t there, that\u0026rsquo;s called a cache miss.\nWhen this happens the CPU has to go read from RAM (well, actually it gets another page from RAM and puts it into the cache). Now, remember before how with the normal analogy you hear people say RAM is like our short term memory? This is why I don\u0026rsquo;t love that analogy - reading from RAM compared to Cache or registers is insanely slow. It\u0026rsquo;s so slow that the CPU will almost certainly run out of work to do. The term for when this happens is actually a CPU Stall.\nNumbers vary, but while reading from registers is instant (by definition of how they work), reading from the cache may take anywhere from 3 to ~80 cycles (depending on the cache layer/level, again, skipping this for the moment). Assuming one cycle per instruction (which is its own weird conversation), that\u0026rsquo;s up to 80 instructions like adds and multiplies and what not. But what if we have to go all the way to RAM? That\u0026rsquo;s usually around 300 cycles. Yikes! See why I said memory access is so important now?\nObviously, this is a huge problem. There are ways to make it less-bad, such as getting the CPU to go do something else while it finishes(1), trying to re-order instructions to have data be ready when it\u0026rsquo;s needed (out of order execution (Wikipedia)), guessing what result from a branch (if a do b, else do c) will actually run and computing it early (Speculative Execution (Wikipedia)), and generally just loading data in intelligently, such as assuming a program executes with a reasonable level of spatial locality (that is, if we\u0026rsquo;re reading memory at locations 1, 2, and 3, we probably want 4 next) and temporal locality (if we keep reading 1,2,1,2,1,2, we probably want 1 next), or, yunno\u0026rsquo;, just making the CPU cache bigger and adding more registers, which is something that generally happens which each new processor release.\nLearning more about this, such as about how different Cache placement policies (Wikipedia) and Cache replacement policies (Wikipedia) as well as how the interact with Virtual Memory page replacement algorithms (Wikipedia), CPU Scheduling (Wikipedia), and CPU Pipeling (Wikipedia) and then actually decide how to get data from bulk storage (be it from something like a NVMe SSD - hence the advent of Direct Storage (Wikipedia) - or as slow as hard drive) is why studying modern computer architecture is super difficult and confusing. It\u0026rsquo;s this gross interplay of hardware, operating systems, memory technologies, and about a million other variables where the reason things are slow is literally because we\u0026rsquo;re fighting the speed of light (as that dictates how quickly electrical signals can get from one point to another), switching speed of transistors that are nanometers wide, and the effects of data corruption when we\u0026rsquo;re sending this data at the crazy rates we are. Fortunately, for 99.9% of things, you really don\u0026rsquo;t need to know how all of that works. All you really need to know is that while, yes, a CPU with a faster clock will process things faster, if that just means stalling, waiting for data more often it\u0026rsquo;s not really a big win.\nAt then end of the day, I\u0026rsquo;m telling you all of this to make it clear that a lot of really smart people have thought really hard to make the CPU in your computer try it\u0026rsquo;s very best to move data around as little as it can and have the data it needs ready when it needs it, yet still over ⅓ of your computer\u0026rsquo;s time is spent moving things around. So, when we actually get to writing code (I swear we\u0026rsquo;ll get there eventually…) we\u0026rsquo;ll cover doing some what-should-currently-sound-like-black-magic like:\nTODO: I want to link to a page doing each of these, that is, each bullet should have a button.\nIn GPU Computation you\u0026rsquo;ll see it can make sense to take a massive, temporary speed hit to copy data to a GPU (Graphics Processing Unit) because for big enough data with the right operations, it will pay off significantly For example, if you have two lists of a million numbers and you need to make a third list which is the elment-wise sum. The GPU can do that really, really, fast because it can do much of the work in parallel instead of working on each operation sequentially. Spending a few cycles to move data around and pack it into a special structure so that we can do Single Instruction Multiple Data Operations (Practical SIMD Programming by Jacco Bikker) https://ispc.github.io Use buffers, memory alignment, and avoiding OS locks to speed up computation (A Little Story About the yes Unix Command, endler.dev) Using Huge Pages to make VM\u0026rsquo;s faster Manually placing memory on embedded systems Setting up Direct Memory Access (DMA) peripherals on embedded systems Setting up interrupts on embedded systems Writing assembly code that modifies itself (this is very stupid, but neat) Using Ram Disks Using Ram Compression (zram/zswap) Setting Ram \u0026ldquo;Swappiness\u0026rdquo; Setting processor affinity Using mmap to make file access stupid fast (*sometimes) Using fancy system calls based on io_uring to prevent blocking. Where every one of these things relates back to this page - keeping the time spend moving and accessing data down.\nNow, a good chunk of that is really advanced stuff, and 95% of the time when you\u0026rsquo;re writing code you won\u0026rsquo;t have to worry about any of this. Hell, depending on the language you\u0026rsquo;re working in, you literally can\u0026rsquo;t because you wont have control over how things like that are done. But understanding how it works and knowing that you can is important, as some problems would otherwise be impractical. Let me explain:\nSay you\u0026rsquo;re working on real time audio. To keep things \u0026ldquo;real time\u0026rdquo; you can buffer around 128 samples of audio, and you\u0026rsquo;ll probably be playing back 48,000 samples a second. So, that means any computation you do has to happen reliably within 2.6 milliseconds deadlines.\nOr, say you\u0026rsquo;re working on a game rendering engine and you want to target 60fps. That\u0026rsquo;s a bit better at 16.6 milliseconds per frame, but think about how much work the computer has to do to draw one frame - lighting, camera projection, physics, etc on potentially tens of thousands of triangles that make up the 3d scene. I love looking at benchmarks ran with the wireframe on to just bask in the awe of modern rendering. But that doesn\u0026rsquo;t come without massive effort to make such things fast.\nThe following video shows some of how caches work in a security context, but does make everything a bit more concrete:\n# # Ever wondered what Hyper Threading is, or why you have more cores than threads? This is a big part of it. Basically, it lets something else run when the CPU is waiting on the cache to populate. "},{"id":75,"href":"/engineering/linux/hardware/buying/","title":"Buying","section":"Hardware","content":" 11 - How to Know What to Buy # I\u0026rsquo;ve tried writing this like 5 times, trying to work around the fucked up GPU market, I just can\u0026rsquo;t even show the process of finding parts when things are this messed up. I can\u0026rsquo;t recommend a pre-built system either, since DELL is awful, but so is everyone else. Fuck this. Unless you literally don\u0026rsquo;t have a computer, just don\u0026rsquo;t buy anything for a while.\nSo you want to build a computer? Great! Now you\u0026rsquo;re probably wondering what to buy.\nThe very first things you should ask yourself are:\nWhat will this system be used for? What\u0026rsquo;s my budget? Are used parts okay? That first question will dramatically narrow down your options, whether you realize it or not. If this system needs to have Microsoft Office (Word, Excel, etc.) and LibreOffice won\u0026rsquo;t do the trick, you\u0026rsquo;re pretty much limited to Intel and AMD based systems, instead of throwing a cheap Raspberry Pi at the problem. If you need utmost stability, like 24/7/365 this system absolutely can not go down, you\u0026rsquo;ll probably have to plan on getting something more server grade, possibly with redundant power supplies, hard drives, and (traditionally) ECC RAM. If you\u0026rsquo;re making something and just need it to be as fast as possible, you\u0026rsquo;ll still want to consider what software you\u0026rsquo;re running. Some tasks are heavily dependent on your CPU speed, while others need you to have a kick ass graphics card.\nThe second question will be the one that hurts to admit. If you only have $300 to throw at a gaming computer, it\u0026rsquo;s not that you can\u0026rsquo;t make it work, it\u0026rsquo;s that you\u0026rsquo;ll probably not have as good of a time as you\u0026rsquo;d like. That is where the third question comes in. If used parts are okay, you can probably get a way better deal. Just be sure not to get totally fucked on over-used hardware. Graphics cards used for crypto mining and hard drives that have been on for 6 years straight in a server aren\u0026rsquo;t good, and it\u0026rsquo;s easier than you\u0026rsquo;d think to end up with either on accident. You\u0026rsquo;ll also have to be careful that the older hardware still supports everything you need. That old graphics card may not have hardware video encoding, making it less than awesome if you want to stream your games on Twitch, and that older CPU might not let you watch Netflix in 4k (yes, this is a real problem- there\u0026rsquo;s shitty digital rights management stuff built into the CPU). There are a lot of little snafus like this you might not be aware of.\nOkay, so, let\u0026rsquo;s look at building a computer. I\u0026rsquo;m going to try to put together a gaming and streaming computer with a budget of $750 (excluding mouse, monitor, keyboard). I\u0026rsquo;m going to assume that the streamer also wants to connect their console to the system, so we need a way to do HDMI capture as well, let\u0026rsquo;s walk through building a system with that in mind.\nEven if you\u0026rsquo;re reading this soon after this page has gone live (July of 2021), I\u0026rsquo;m not actually recommending this system. This is being done as an example only. I\u0026rsquo;m not affilitated with any of the brands or products I\u0026rsquo;m listing here.\nI\u0026rsquo;m also writing this during the fucking nightmare of a GPU market caused by cryptocurrency, plus the added mess of Chia, a cryptocurrency that eats hard drives, plus a global silicon shortage. You should be able to get something better than this for this amount of money.\nOkay, so we know that we\u0026rsquo;ll want a fair number of CPU cores for dealing with gaming and streaming simultaneously. Even if conventional wisdom is that games (usually) only benefit from 4 cores, with streaming and other background tasks we\u0026rsquo;ll need more. We might be able to lessen this need if we can score a decently priced Nvidia GPU though, as Nvidia cards have really nice hardware video encoding called \u0026ldquo;NVENC\u0026rdquo;, and that has improved with each generation of cards from Nvidia. That said, if we find a really cheap but better performing AMD GPU, we can just put the money into a better process, and it\u0026rsquo;ll balance out. To keep things at least sorta modern, I think it\u0026rsquo;s reasonable to say nothing older than about 2017. That leaves cards as old as AMD\u0026rsquo;s Vega series and some of Nvidia\u0026rsquo;s 10 series, but newer would still be nice. At the time of writing, finding a graphics card is still a massive pain in the ass due to crypto miners, but let\u0026rsquo;s check new egg just to get a baseline. Nvidia\u0026rsquo;s cards are a bit easier to follow with the model number. The first number is the generation, with higher being newer. (10,16,20,30) and the second how high end it is (90\u0026gt;80\u0026gt;70, etc.) if there\u0026rsquo;s a \u0026lsquo;\u0026ldquo;ti\u0026rdquo; or \u0026ldquo;super\u0026rdquo; on the end, it\u0026rsquo;s a bit better.\nLet\u0026rsquo;s go over to PCPartPicker and start with the GPU, then. As a rough baseline, we should probably put about half the budget into the GPU, since this is a gaming computer. So, that puts us at a $375ish limit on that. Let\u0026rsquo;s look a bit higher, though, as there might be a good deal.\n"},{"id":76,"href":"/engineering/linux/hardware/cooling/","title":"Cooling","section":"Hardware","content":" 8 - Cooling # Computers, who\u0026rsquo;d\u0026rsquo;ve guessed, use power. Shocker, right? Well, using power means making heat, and we need to get that away from the components as fast as we can - if they stay hot they\u0026rsquo;ll throttle down to a lower speed, and it degrades their quality over time. Not good.\nSo, what are our options?\nAir Cooling # 3-pin and 4-pin fans # Air flow VS Static Pressure # Fan size # Noise # Smaller → Louder.\nBearing type # See The Basics of Case Fan Bearings - Which Bearing is Best? (Gamers Nexus) - though that is a hair out of date as, now, if you want to go all out you can go for Magnetic Levitation bearings. They\u0026rsquo;re expensive as hell, but they\u0026rsquo;re quieter, live longer, and are all around better.\nHeat pipes \u0026amp; Vapor Chambers # Filtering # Liquid Cooling # Just to get it out of the way now - liquid cooling is not as good as most gamers think it is. The pump itself can make noise and fail, the radiator will require high static pressure fans, and it\u0026rsquo;s just generally more difficult to work with. That said, if you\u0026rsquo;re chasing performance or putting in some of the beefiest hardware, you still might have to use it. So, where\u0026rsquo;s that threshold? Well, to put it simply, if you\u0026rsquo;re not putting on at least a 2-fan radiator, you\u0026rsquo;re doing it wrong. Any of the single 120mm or 140mm radiator options are just a worse value than a big ol\u0026rsquo; heatsink. So, when do you need something this big? Well, the cut-off is probably right as you enter the 100w TDP range, though even at that borderline it\u0026rsquo;s often a toss up if you get a big heatsink. It\u0026rsquo;s really when you start to get into the Intel i9\u0026rsquo;s, Threadrippers, etc. that it starts to make sense.\nNow, as with all things, there are exceptions here. Maybe you\u0026rsquo;re building in a case where you can\u0026rsquo;t fit a big tower cooler, but you can fit a large radiator. Maybe your workload is very burst-y and by using a radiator the thermal mass of the liquid will absorb the spikes in a way that prevents the fans from ever ramping up.\nBut, generally, just\u0026hellip; don\u0026rsquo;t? Unless you\u0026rsquo;re already building a seriously top of the line system (one where you actually need a 1000 watt power supply) you\u0026rsquo;re probably better off just putting more money into your actual components and getting a damn good air cooler.\n"},{"id":77,"href":"/engineering/linux/hardware/cpu/","title":"CPU","section":"Hardware","content":" 1 - The CPU # Note, there\u0026rsquo;s more the a CPU on some of these boards. On the big one, only the square thing in the middle is the CPU, on the pi-0 (the board with the HDMI and USB Ports) the CPU is under the metal heatsink - and in truth the CPU is actually an SOC (System On a Chip) - more on that in a bit. Finally, on the blue board, the CPU is only the black chip in the middle, though in this case it is again the definition is blurred, as in truth this is a microcontroller. This will all make sense shortly! These are CPUs or Central Processing Units. They\u0026rsquo;re the beating heart of your computer, doing the number crunching. The whitle, rectangular one is of one of the first CPUs in the lineage leading up to CPUs like the ones used in desktop\u0026rsquo;s today, with further successors shown in order from top left to the bottom right. The metal-capped one at the bottom right, while a tad old, is visually quite representative of a modern desktop CPU, though the CPUs in a laptop or smart phone do look quite different still.\nOne of the nifty things we do pretty easily in linux is get information about our hardware directly. Just as when we were installing Arch and we used lsblk to see an overview of the disks on the system, we can use some other tools to find out some other information about the system. Let\u0026rsquo;s start off basic and see what CPU you have. Go ahead and run\n1 2 ╭─vega@lyrae ~ ╰─➤ cat /proc/cpuinfo This is actually just using that same cat command we used before. This time we\u0026rsquo;re using it to read the system generated file that tells us about the processor in this system. I\u0026rsquo;m going to provide the output from my system for reference:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 processor : 0 vendor_id : AuthenticAMD cpu family : 23 model : 1 model name : AMD Ryzen 7 1700 Eight-Core Processor stepping : 1 microcode : 0x8001137 cpu MHz : 2018.119 cache size : 512 KB physical id : 0 siblings : 16 core id : 0 cpu cores : 8 apicid : 0 initial apicid : 0 fpu : yes fpu_exception : yes cpuid level : 13 wp : yes flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf pni pclmulqdq monitor ssse3 fma cx16 sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb hw_pstate sme ssbd sev ibpb vmmcall fsgsbase bmi1 avx2 smep bmi2 rdseed adx smap clflushopt sha_ni xsaveopt xsavec xgetbv1 xsaves clzero irperf xsaveerptr arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold avic v_vmsave_vmload vgif overflow_recov succor smca bugs : sysret_ss_attrs null_seg spectre_v1 spectre_v2 spec_store_bypass bogomips : 7688.44 TLB size : 2560 4K pages clflush size : 64 cache_alignment : 64 address sizes : 43 bits physical, 48 bits virtual power management: ts ttp tm hwpstate eff_freq_ro [13] [14] Alright, that\u0026rsquo;s a whole lot of information, let\u0026rsquo;s break it down.\nFirst of all, almost all modern Central Processing Units (CPUs) have multiple cores, and as with most things in computers the\u0026rsquo;re counted from 0, so on a 4 core computer you\u0026rsquo;ll have cores 0, 1, 2, and 3. Multiple cores simply let your computer do things in parallel, running multiple programs or tasks at the same time\nNext is the vendor ID, family, model, name, and stepping. My processor is an AMD Ryzen 7 1700. There\u0026rsquo;s a pretty good chance your CPU will be made by Intel, and as such the family, model, name, and what not will reflect that. AMD and Intel are practically the only two laptop and desktop CPU providers(1), though in the future we\u0026rsquo;ll work with boards that use CPU\u0026rsquo;s made by other manufactures. Really, most of this doesn\u0026rsquo;t matter. Some CPUs are nicer than others, and if you follow the market or care it\u0026rsquo;s easy to get a sense of a CPU\u0026rsquo;s speed just based on it\u0026rsquo;s name, but let\u0026rsquo;s move on for now.\n1 2 3 microcode : 0x8001137 cpu MHz : 2018.119 cache size : 512 KB Each of these things is very important, but I\u0026rsquo;m going to start with cpu MHz as it\u0026rsquo;s probably the easiest to understand, however, to understand this we\u0026rsquo;ll need to get even a bit lower level than this and learn about the electronic component that changed humanity: the transistor.\nClock Speed # However, to get to transistors we\u0026rsquo;ve gotta go just a bit further down the rabbit hole to the relay. Relays are super simple to understand, they\u0026rsquo;re just a metal switch that is pulled open or closed using another input signal (usually a magnet pulling/pushing the switch closed/open) basically imagine a light switch, where the switch itself is controlled by yet another electrical signal. Relays are slow though, they require a physical metal plate to move to change the connection. Because of this they have limited reliability and worth note they\u0026rsquo;re actually loud. You can hear an audible click of the switch as they change state.\nIf this is already interesting to you, here\u0026rsquo;s a video demonstrating a relay computer you can actually buy! Enter the vacuum tube. Though rarely used today outside of high end audio and old radios, for a period of time the logic inside a computer used these tubes. Essentially theres three important parts of the tube, the Cathode, Plate and Grid. Put very simply the Cathode emits electrons and the Plate collects them. Where it gets interesting is the grid in between. By applying a voltage to the grid a signal can be controlled giving us the same ability to turn something on or off by a third wire as in the relay.\nWorth note but irreverent for digital electronics: tubes and transistors can actually pass a scalar of the input back out. This actually means that both tubes and transistors can act as an amplifier, using a small input range to control a much larger signal. This is actually one of the few places where tubes are still used- in high end audio amplifiers and guitar amps Though the real break though here was the fact that this was no longer a mechanical system. With relays there was a very slow limit on the rate at which they could respond reliably, but with tubes this increased exponentially. Tubes were still expensive, large, and power hungry though. However, with their invention early computers saw a massive boost in speed with a decrease in cost.\nFinally, enter the transistor. The physics here isn\u0026rsquo;t that far removed from the vacuum tube, only now instead of a vacuum the electrons are moving though a semiconductor - typically silicon. Again this brought a massive shrink in physical size and increase in that rate at which it could respond. Pictured above are two discrete transistors, however, this is where things get mind blowing:\nThe Ryzen 1700 CPU in the computer I\u0026rsquo;m typing this on has 4,800,000,000 transistors in a package that is only 213 mm², and finally, we can refrence the number output by cat /proc/cpuinfo\nAt the moment I got that output the transistors where being turned on and off at a rate of 2018Mhz*. or 2Ghz. That\u0026rsquo;s 2000000000 times per second.\n* Obviously, not all the transistors are changing state off→on and on→off on every clock edge. As for the power usage, most digital electronics have two sources of power usage: static and dynamic. Dynmaic power being that used every time a transistor changes state, and static power being power that is lost due to junction leakage (more on this much later) if there\u0026rsquo;s any power applied at all. In short, this means a given CPU will use more power the faster it runs, but there\u0026rsquo;s a floor to how little power it can use if power is applied at all. However, this system can run up to roughly 3.8Ghz. The faster this speed the faster your computer; however, your CPU will also use more power and run hotter. It\u0026rsquo;s for this reason that most systems adjust the speed based on load. Doing simple things like writing this document and as seen with that output my system runs at nearly half speed which is actually the slowest it can run. Because the computer is hardly doing anything right now the majority of that switching is actually just doing nothing but using power running \u0026rsquo;no operation instructions\u0026rsquo; the functional equivalent of just running 0+0 while it waits for something to do.\nWhile not listed in this output, by googing the Ryzen 1700 we can also see it was made on a 14nm process. Put a bit reductively, this means each transistor is 14nm wide. For context, a human hair is about 70,000nm wide. This is relevant, because generally the smaller the process the faster a chip can run (max speed) while using less power.\nBut, I want to put this into perspective a bit: At the top of this document, there\u0026rsquo;s a white, rectangular chip which is a very old CPU: The Intel 8088 from 1979, it\u0026rsquo;s only 8-bit, runs at 16Mhz, was made on a 3μm process, and has ~29,000 transistors inside. So, each individual transistor is over 200 times larger, they switch much slower, and there\u0026rsquo;s a human-understandable number of them. But why bring this up? Because I broke one open!\nWhat you\u0026rsquo;re seeing here is the actual silicon, with the individual MOSFETs (transistors) causing the different reflections of the light and the gold wires going out to the pads which eventuall go out to the external pins, this isn\u0026rsquo;t all that different from a modern CPU though. While pointing out what sections do what isn\u0026rsquo;t hugely relevant, sufice to say different sections do different jobs. One block might be cache (talked about further down this page) while another might be the chain of transistors that do the logic to add two binary numbers together. At the end of the day, these tranistors are real, they\u0026rsquo;re tiny, but they\u0026rsquo;re real. This is the \u0026ldquo;magic\u0026rdquo; behing the fancy chip. These, therefore, have real, physical limitations. The electricity running through them can only be switched so fast before it becomes hard for the circuit to differentiate a 1 from 0, on from off.\nIf you\u0026rsquo;re particularly interested in this on-from-off test, look into Eye Diagrams Back to power and speed in a modern system: The OS itself actually tells the processor what speed it should be running at. In Windows, when you change your power plan to \u0026lsquo;high performance\u0026rsquo; one of the major things it does is not allow the processor to run at a slower speed, and in Linux you can similarly control this using some cpu speed commands. We\u0026rsquo;ll get to that later though.\nFinally it\u0026rsquo;s worth note that on some systems, primarily high end desktops, you can actually run your processor outside of factor specifications by increasing the maximum clock rate of the processor. Doing this can lead to system stability issues and obviously leads to a higher power usage and heat output though. This process is known as \u0026lsquo;overclocking\u0026rsquo; as your taking the internal clock of the processor beyond it\u0026rsquo;s rating. My CPU, a Ryzen 1700 at the time of writing, has actually been over clocked in order to get 3.8Ghz on all of the cores.\nFinally, I want to note that clock speed is far from the single measure of performance. Two chips that both have the same clock speed and same number of cores may still perform radically differently depending on many, many things about how the processor works. Note that I didn\u0026rsquo;t say each \u0026rsquo;tick\u0026rsquo; of this clock is a single instruction? That\u0026rsquo;s because different processors have different Instructions Per Clock (IPC) values. It\u0026rsquo;s totally possible that a slower clocked CPU will outperform a faster one because it is able to execute more instructions per each tick of the clock. IPC can also varry depending on the workload, as some instructions will take more clock cylces than others and different tasks will require a different mix of instructions. If in doubt, look at benchmarks that directly compare the performance of CPUs in various workloads with their real, measured execution times.\nAs an aside, there were some hand-cranked, mechanical computers even. There were \u0026ldquo;computers\u0026rdquo; far before the advent of the relay. Hell, the term \u0026ldquo;Computer\u0026rdquo; was actually originally a job title of a person who ran equations all day by hand. Microcode # Modern processors are very, very complicated. So complicated in fact that there is a full very tiny computer in your processor. This computer does multiple things, but the main one we\u0026rsquo;ll talk about is the translation between types of machine code. In order to understand this we\u0026rsquo;ll need to look a basic program written in the language \u0026lsquo;C\u0026rsquo;.\nThis code first makes two integers, a and b, gives them values, then adds them together and stores the result back into a. Finally, the program returns a 0 to the operating system in order to say \u0026ldquo;I ran without errors\u0026rdquo;. 1 2 3 4 5 6 7 8 int main() { int a; int b; a = 8; b = 16; a = a + b; return 0; } Unlike python, which get\u0026rsquo;s converted to something the computer can understand as it executes, C is compiled before hand. This makes it so programs written in C are much, much faster than those written in python, though obviously C code is more difficult to write. Compilation is the process of turning a program into a file full of instructions the computer actually understands. This happens in two steps, first the program is turned into assembly code, for the above code this results in the output to the right: 1 2 3 4 5 6 7 8 9 push rbp mov rbp, rsp mov DWORD PTR [rbp-4], 8 mov DWORD PTR [rbp-8], 16 mov eax, DWORD PTR [rbp-8] add DWORD PTR [rbp-4], eax mov eax, 0 pop rbp ret As you can see, it is hard to determine what this does compared to just reading the C code above. This in turn gets turned into binary as can bee seen by this screenshot generated using https://godbolt.org/\nBinary (0b) Hex (0x) Decimal 0000 0 0 0001 1 1 0010 2 2 0011 3 3 0100 4 4 0101 5 5 0110 6 6 0111 6 7 1000 8 8 1001 9 9 1010 A 10 1011 B 11 1100 C 12 1101 D 13 1110 E 14 1111 F 15 See the weird numbers next to each instruction? like 4004b255? That\u0026rsquo;s a base 16 number or hexadecimal usually referred to as \u0026lsquo;Hex\u0026rsquo;. Hex is what is used by most computer guys to represent numbers because computers operate in base 2, or binary- like 01001100, which is very difficult to read and type accurately, however, base 10, the normal numbering system your used to, makes translating between binary and decimal a bit uncomfortable as the common factor is 5, an number that is both odd and in turn not a factor of two, where as 16 is 2^4 (2*2*2*2) so that means we can easily represent binary by using this conversion table here.\nOkay, so now those 1\u0026rsquo;s and 0\u0026rsquo;s are what your computer actually reads to run instructions. We\u0026rsquo;ll come back to this later, but since we\u0026rsquo;re here I\u0026rsquo;ll drop this link where you can see how these 1\u0026rsquo;s and 0\u0026rsquo;s are arranged to tell the computer what to do. That is super advanced for where we are now though, so let\u0026rsquo;s get back on track- what the hell is micro code already?\nWell, it turns out that modern processors are still compatible with some really, really old code. All the way back to the first 8086 processor made by Intel in 1978. It was here that the x86 instruction set - the instructions like \u0026lsquo;mov\u0026rsquo; , \u0026lsquo;push\u0026rsquo;, and \u0026lsquo;add\u0026rsquo; above that define the x86 architecture were born. Originally these were 16bit CPUs, that is each instruction only had 16 1\u0026rsquo;s and 0\u0026rsquo;s but soon the i386 came along and used 32bits. Back when 32 bit computers were common this is what this was in reference to.\nAs with all things technology progressed and 64bit cpu\u0026rsquo;s came along. Many attempts were made to make 32bit programs run with backwards comparability at high speeds on these CPU\u0026rsquo;s, though in the end AMD made the method used today, dubbed the x86_64 instruction set. Overtime this instruction set was expanded with various additions. We can actually see the names of these additions that are available on the CPU in the system by looking yet again at the output of cat /proc/cpuinfo and looking at the flags section. While not all of these signify instruction set additions, many do. The most common \u0026lsquo;famous\u0026rsquo; if you will is SSE, of which there have been multiple revision, the first version alone adds 70 instructions, which are used to make math faster\nAlright, so finally, enter Mircocode. At some point all of this became a lot to manage and processor designs evolved even further, getting exponentially more complicated and faster with more and more instructions, so they added this little computer which has the primary duty of turning the mess of countless possible instructions into yet even smaller instructions that the heavy duty \u0026lsquo;real\u0026rsquo; processor does. Every once in a while a problem will be found in the way this is done, or a security vulnerability in the hardware itself may be found, and your CPU manufacture will release a microcode update.\nThat update version is what you see on that line of cat /proc/cpuinfo\nNow, at the beginning of this guide I said I wouldn\u0026rsquo;t provide useless information, and I\u0026rsquo;m sure that all looks pretty useless without more context. In general, this is interesting because you can (and will need to) write some assembly code by hand every now and then. Thankfully, its usually not x86 assembly which is very, very difficult to write but instead assembly on much smaller, micro controllers (basically really tiny computers), where that assembly is necessary because the system is so limited.\nDon\u0026rsquo;t worry about what x86 means here, we\u0026rsquo;ll come back to that in Chapter 3½ - Architectures If you\u0026rsquo;re interested, check out the Wikipedia article on Microcode and MicrocodeDecryptor (GitHub) Cache # Okay, next up is cache. Cache, just like in the real world, is a small place to store things. Most people like to think the majority of what a computer does is raw number crunching, doing hard math, but the truth is more often than not it\u0026rsquo;s just moving data around. This follows a path from slowest and cheapest storage up to the fastest but most expensive. Typically this order looks a bit like\nHard Drive → Solid State Drive → Ram → Cache → Registers , where the price for storage on a hard drive can be under $0.10Gb, Ram upwards of $10Gb, and Cache and registers, which are storage baked directly onto the CPU, cost much, much, more to implement. It\u0026rsquo;s of note that these not only are faster with each jump - able to read and write data more quickly -, but also usually physically closer to the CPU. A hard drive can be 10\u0026rsquo;s of feet of wire from the CPU while the RAM can be a few inches at best, and the cache and registers are physically part of the CPU. Most of the data above the HDD/SSD level is actually just smaller subsets of each previous pool. In fact, on modern CPU\u0026rsquo;s there are actually usually 3 levels of cache, each with a progressively smaller size but increase in proximity to the executed instruction.\nWe\u0026rsquo;ll come back to this idea a bit in Chapter 3.10 - The Bigger Picture .\nPut simply, just as with adding more Random Access Memory (RAM) to your system, having more cache means more information can be within arm\u0026rsquo;s reach of the CPU to do work on at any moment.\nLet\u0026rsquo;s take a look. install the hwloc package using yay and then run lstopo and you should get an output that looks a bit like this\nThe stuff on the right are connections around the system, you can ignore those for now, but see the various cache layers, designated by L3, L2, L1d and L1i, and you can see how each core has it\u0026rsquo;s own cache. Finally, you can see that each core has two processing units? Hey, wait, what\u0026rsquo;s that all about?\nHyper threading, or SMT, or whatever the new term is for it, is a way of adding paths for doing things to keep every part of the CPU active. We\u0026rsquo;ll go into this more later, but for now, suffice it to say it\u0026rsquo;s a way of getting just a bit more performance out of a system.\nInterrupts # While not listed in the /proc/cpuinfo output , it\u0026rsquo;s still relevant to bring up CPU interrupts, which are, fittingly, listed in /proc/interupts\nOutput of cat /proc/interupts on my system Output of information for the first 3 cores on my system displayed graphically using Netdata CPU interrupts are a bit confusing because the term interrupt can refer to the action itself, the code that executes, or the general concept. In general a CPU interrupt is when something needs to poke the CPU to tell it to interrupt what it\u0026rsquo;s doing. This can be when physical pin in the CPU gets a signal, a timer going off, or a program dividing by 0. We\u0026rsquo;ll cover this more in depth later, but from the hardware perspective what\u0026rsquo;s relevant is the CPU is generally so fast compared to other actions that the rest of the system mostly just triggers an interrupt to let the CPU know that a task the CPU asked to be done has completed. The most common example is requesting data from disk (Hard drive or SSD) takes so long, even at just a few milliseconds, that the CPU can get millions of things done while it waits for the request to be fulfilled. So rather than waste that time having the CPU poke the device asking \u0026ldquo;Are you done yet? Are you done yet?\u0026rdquo; the disk (or the controller it\u0026rsquo;s hooked up to, like the chipset) issues an interrupt to the CPU to let it know a task has completed. USB works in a similar way, though the really old keyboards with the circular connector (PS2) actually did interrupt the CPU directly on each key press.\nWe\u0026rsquo;ll come back and explore this more later, but if you\u0026rsquo;re really interested you can read ahead by going over these links and reading these man pages: Oreilly on Interupts, Oreilly cont., man trap, man syscall,\nPower # The CPU is one of the most power hungry parts of your computer, and as such it does some interesting things to try to keep it\u0026rsquo;s power usage lower. Most notably, it\u0026rsquo;ll turn down its clock speed to do less operations per second, but theres other things like entering sleep and hibernation states the processor is also capable of. The main thing you might want to concern yourself with from a performance to power consumption stand point is how aggressive this clock speed changing is. You can go as extreme as to tell the system to never let the processor get to full speed or to say \u0026lsquo;only run at max speed all the time\u0026rsquo;. The latter is actually quite useful as often it can take quite a few clock cycles after a heavy load is started for the processor to come up to speed, but if it\u0026rsquo;s always running full steam ahead this is a non issue. This entire topic is particularly relevent to laptops, and on Arch you may want to install a program to manage some of this for you or set sane defaults to save battery. I\u0026rsquo;ve had good luck using the tlp package. The cpupower package is helpful for looking at how arch handles cpu scaling and it lets you directly set these min and max frequencies or pick the scaling governor to handle how aggressive the switching is. We\u0026rsquo;ll get more into tuning the system to use less power in Chapter 3.7 - Power .\nI very strongly recommend looking into this on any system though, as by default some CPUs will run at the minimum frequency only.\nIf you want to actually see how much power is used, rapl should do the trick, just be sure to actually put the system under load first- stress-ng --cpu 16 (or whatever your thread count is) should work.\nIf you are also on a Ryzen system, you may need to use rapl-read-ryzen (github) / (aur) to get this output We\u0026rsquo;ll talk about delivering power to the CPU in a bit, when we talk about the Voltage Regulation Module (VRM) on the Motherboard.\nPhysically, what and where is this thing? # The CPU is on a square or rectangular board that is usually covered by a large heat sink used to keep it cool under load. It connects to the motherboard via hundreds of small, gold plated pins to send and receive signals (which well will discuss in depth later) from all around the system. Even though most modern CPUs are x86_64, generation to generation and cross manufacturer there are changes in the number of pins and the way they are arranged, meaning getting a new processor that\u0026rsquo;s not from the same generation usually won\u0026rsquo;t work. Furthermore, most laptops have soldered on processors that can not be upgraded to begin with.\nNuma Nodes? Chiplets? Die Yield? # [TODO] + CCX Groups and pinning processes to cores - https://github.com/AdelKS/LinuxGamingGuide\nBranch Prediction \u0026amp; Pipelining # I don\u0026rsquo;t want to dive toooo deep into the weeds, but because of the Meltdown and Spectre vulnerabilities, I find it necessary to briefly talk about branch prediction.\nBasically, modern CPUs do a very good job of guessing what path of code will be executed on branches, that is code like this: 1 2 3 4 if condition == True: doThing() else: doOtherThing() The CPU will do a good job guessing which path will actually be taken. This is done because CPUs are actually pipelined.\nCPUs have to do a few things per each instruction, generally they need to FETCH the instruction, DECODE what that instruction is telling the CPU to do, EXECUTE that instruction, and then WRITE BACK the result of the computation.\nThis could be done in order,\nbut because the CPU uses different parts internally, they can be pipelined, sort of like an assembly line. While one instruction is in WRITE BACK, the next instruction is being EXECUTED, the next-next instruction is being DECODED, and the next-next-next is being FETCHED.\nNow, there\u0026rsquo;s a lot more that goes into this, times where this doesn\u0026rsquo;t work -like if two instructions work on the same data, have to wait for write back before that data can be executed on- but the relevant bit here is that as much as we can, we want to keep this pipe line full. That is, we want to keep each point in the assembly line busy. To do this, the above code with an if utilizes branch prediction, and assuming it\u0026rsquo;s correct, is able to keep the pipeline full and running like normal. If it\u0026rsquo;s wrong, it has to empty the pipeline, go back, and do the correct instructions instead.\nThe issue with this that lead to the Spectre bug was that the assumed correct path to be executed may include a security level elevation, that is, it might be code that should only be able to be executed by the administrator (root) user, but in the prediction code there\u0026rsquo;s no check there, so if the prediction can be abused, code can be executed as an admin- a doomsday level vulnerability.\nMeltdown is similar- you can read how it works on Wikipedia (actually human readable and explained well).\nSOC? Microcrontrollers? # In the blurb under the CPU picture I mentioned both SOCs and Microcontrollers [TODO]\nA note on x86, vendors, and CPU politics # [TODO]\nIntel took an AMD Zen microarchitecture presentation and turned it into a patent\nchina trying to make their own silicon , apple to own SOC (Called it), etc.\nhttps://www.agner.org/forum/viewtopic.php?f=1\u0026t=6\nNew Intel chips won\u0026rsquo;t play Blu-ray disks due to SGX deprecation (Bleeping Computer)\nOther things done by the CPU: # The CPU has a lot of dedicated hardware inside for specific functions, for example many CPUs have a dedicated hardware random number generator, a \u0026ldquo;media engine\u0026rdquo; (encoders/decoders) (Quick Sync), Encryption, DSP\n\u0026ldquo;Managment Engine\u0026rdquo; # The future # From the past: Analog Computers # Built-in Programmable Hardware # Offloading Security: The TPM, Apple\u0026rsquo;s T2, Microsoft\u0026rsquo;s Pluton # Yet More Acceleration # TCP offloading, DSP++, Software Defined Radio?, In-Memory Processing, Tensor Cores, etc.\nFurther Reading # If you want to know about the internals of the CPU itself, check out Chapter 29 - Let\u0026rsquo;s Make our own CPU which goes into the componets of the CPU, why they\u0026rsquo;re made the way they are, and what the future of CPU architecture may look like.\nPutting the \u0026ldquo;You\u0026rdquo; in CPU (Lex Mattick \u0026amp; Hack Club) Why you should use \u0026rsquo;nproc\u0026rsquo; and not grep /proc/cpuinfo\nSpyware at The Hardware Level - Intel ME \u0026amp; AMD PSP (YouTube, Mental Outlaw)\nCascade: CPU Fuzzing via Intricate Program Generation\nWith the exception of Apple's newer hardware, which runs their own silicon, and some low end devices like chromebooks which may run processors like you'd find in phones. "},{"id":78,"href":"/engineering/linux/hardware/gpu/","title":"Gpu","section":"Hardware","content":" 4 - Graphics \u0026amp; Acceleration # Photo by Thomas Foster, depicting an Nvidia RTX 3070 Hi Gamers!\nThis page will obviously appeal to you, those that drive the sales of these chonky, expensive cards; however, it\u0026rsquo;s important to note that this page is about all graphics \u0026amp; acceleration- from the iGPU in low power systems to the compute cards used for AI research and wasteful crypto mining. Still, this more in depth knowledge will probably be helpful in helping you extract more FPS from your GPU.\nHi Miners, Please Stop!\nYes, I realize this page may be helpful for educating those that wish to mine cryptocurrency. The best I can do is express my incredible distaste for the practice. It\u0026rsquo;s a massive waste of electricity for what is mostly used either as a pyramid scheme or for criminal activity - and I\u0026rsquo;m even saying this as someone who was given free crypto and made a few bucks on it. See Cryptocurrency is an abject disaster (Drew DeValut\u0026rsquo;s Blog), This Twitter Thread from @ummjackson, this one from @Pinboard, or This video … I could keep going. If reading these, and looking at their sources, doesn\u0026rsquo;t convince you, then you\u0026rsquo;re obviously so biased as to not consider the arguments fairly. Yes, I see why crypto is cool, and I see its use as governments become increasingly interested in spy tech, etc. This isn\u0026rsquo;t the solution, and anyone that can separate their morals from their wallet can see that.\nMost \u0026lsquo;beefier\u0026rsquo; systems have a graphics card, but (almost) every computer that can output a video signal has dedicated graphics processing of some sort. For many lower end or low power systems (especially laptops) this graphics processing unit, or GPU, is built into the CPU and uses the system\u0026rsquo;s same ram for video. For larger systems there\u0026rsquo;s typically a larger graphics card (often the graphics card is called a GPU as shorthand; however, the GPU is technically just the processor on the board), which is a separate device hooked up though an expansion connection (like PCIe). Typically, these cards differ from their integrated-into-the-CPU counterparts in that they\u0026rsquo;re much, much faster and drink much more power. In general the GPU is required because while CPUs are great at very fast consecutive operations like taking \u0026lsquo;1+1=a, a+1=b, b+1=c\u0026rsquo; the GPU is excellent at parallel operations like \u0026lsquo;1+1=a, 2+2=b, a+b=c\u0026rsquo;, where both of the first two operations can be done at the same time by different processing units before being manipulated together in the third operation. In reality, this is because the modern GPU really only treats pushing color data to the screen as a secondary operation, instead its main purpose is to do complex matrix and vector math which is what goes into drawing polygons in a 3D scene, and these matrix operations are massively parallel. So while a CPU has at the high end a dozen cores, a GPU may have multiple thousand. These cores are much more limited in what they can do of course, and typically run at a lower clock speed than the CPU, but for their purpose they absolutely shred though large data. This has given rise to GpGPU Computing, or General Purpose Graphics Processing Unit Computing, where in the GPU is used for things other than graphics, like accelerating database searchers or training AI models.\nOkay, so, saying thousands of cores is sort of a lie. It really depends on how you define a \u0026lsquo;core\u0026rsquo;. It\u0026rsquo;s really more fair to compare cores of a CPU to Compute Units (CUs) of a GPU. Gentle Introduction to GPUs inner workings (vkSegfault) goes into this quite well, but assumes more technical background than that title might imply. The \u0026lsquo;Parallel Architectures\u0026rsquo; page from Nvidia\u0026rsquo;s \u0026lsquo;The Graphics Codex\u0026rsquo; is a good resource too. As a brief note, historically graphics cards served primarily to actually draw to the screen, with some only having a fixed number of characters they could draw for rendering a text interface and others having a quite limited color palette that dictated how final images would look.\nToday, there are three primary manufactures of GPUs: Nvidia, AMD, and Intel.\nThe largest player in the space, Nvidia, makes cards targeted primarily to gamers in their GTX and RTX lineup, and has cards meant for professional/compute tasks in their Tesla and Quadro lines. While the two lines are very similar technically, they vary mostly in drivers and compute bit depth, with the professional cards providing the ability to do higher resolution floating point calculations easier. This is primarily done for market segmentation, though- to prevent professional from buying the much cheaper (albeit still far too expensive) \u0026lsquo;gaming\u0026rsquo; cards. All of Nvidia\u0026rsquo;s cards support CUDA, a programming framework that makes it easier to take advantage of Nvidia\u0026rsquo;s cards for GpGPU purposes.\nAMD is currently offering little competition to Nvidia in the high end; however, their more midrange cards have found great success, as they perform plenty well for the majority of games and compute work loads at what is often a fraction of the cost. Of note, AMD cards do not support CUDA, though they do support a variety of open standards that serve the same purpose. This is still an issue, though, as many programs that can take advantage of GpGPU acceleration depend on CUDA and therefor require an Nvidia card. Nvidia has frequently been quite hostile to the open source community, and their drivers significantly lag behind in quality and performance compared to AMD\u0026rsquo;s for Linux.\nAlso of note, AMD makes many \u0026lsquo;APU\u0026rsquo;s or Accelerated Processing Units, which is just branding for their take on graphics integrated into the CPU. However, AMD\u0026rsquo;s integrated graphics, at least at the moment, far out do Intel\u0026rsquo;s offerings. Intel, at the moment, only offers integrated graphics that are less than stellar performers. Despite this, laptops with Intel Integrated Graphics are very common due to their low power usage. Intel\u0026rsquo;s Integrated Graphics have very good drive support, though, both on Linux and Windows.\nAs of the time of writing, Intel is starting to send prototype graphics cards to vendors in a bid to break out of the integrated graphics only space.\nMoving into the actual hardware itself, let\u0026rsquo;s look at three graphics units, starting with Intel Integrated.\nBoth Intel and AMD offer integrated graphics of various capability that usually pair reasonably well with the CPU they share the die with. Below is an image of the inner workings of a ryzen CPU with integrated graphics, showing the actual CPU cores (I believe this is a 4 core eight thread system?) in CCX0, the memory controller, and the very large Vega series GPU on the right. This looks to be a Vega11 GPU as you can count the 11 stacks of Compute Units in the GPU section. Of note, if you get a CPU with integrated graphics and don\u0026rsquo;t actually use it because you\u0026rsquo;re getting a separate, more powerful card, then you\u0026rsquo;re effectively paying for a large amount of hardware you\u0026rsquo;re not using. As you can see below, if the GPU was not there, there would be a lot more room to add more CPU cores or other features to the CPU to make it more powerful. Unfortunately, due to market segmentation even if the actual cost to add these extra cores would be the same or less as the iGPU\u0026rsquo;s cost, a CPU of the equivalent size would likely be much more expensive.\nFinally, it should be noted the iGPUs share system memory for graphics memory, which is actually one of their most limiting factors- as system memory (RAM) is optimized for a different kind of access pattern, it is not nearly as fast as GDDR or HMB2, both of which are memory technologies that have been optimized for use with graphics devices.\nImage Source Moving on to graphics cards, looking above at the stacks of graphics cards above, you\u0026rsquo;ll probably notice that a graphics card is basically just a full separate motherboard and processor on a card. Really, this is pretty accurate, as there is a separate compute device (the GPU), ram (GDDR or HBM), and io (fan control, etc.) on the board. Of course, the Graphics card can\u0026rsquo;t really be used as a full separate computer, but thinking about it as such isn\u0026rsquo;t entirely wrong either. In fact, graphics cards really harken back to much older systems, where it was common to add a math coprocessor chip alongside the CPU to make some mathematical operations faster.\nFurther reading on GPU hardware:\n\u0026ldquo;World\u0026rsquo;s Simplest TTL VGA circuit?\u0026rdquo; - George Foot on Hackaday\nHardware Acceleration # Cerebras Wafer Scale Engine: Why we need big chips for Deep Learning\nHardware Accelerated Decode # [TODO]\nhttps://utcc.utoronto.ca/~cks/space/blog/web/Firefox80VideoAccelConfusion\nA trip through the Graphics Pipeline 2011: Index\nA note I have no better place to put: On Windows, if you press Win+Ctrl+Shift+B you can force your GPU driver to reset. This can get you out of some (but not all) lock ups. Handy to keep in mind.\n"},{"id":79,"href":"/engineering/linux/hardware/legacy/","title":"Legacy","section":"Hardware","content":" # 12 - Legacy Hardware? # There\u0026rsquo;s some old hardware almost everyone is familiar with: Floppy disks and big ol\u0026rsquo; CRT monitors became a big part of what defined a computer, and became recognizable enough that the shape of a floppy disk is still the standard save icon today. But still, why care?\nIn history classes, the line “Those who don\u0026rsquo;t know history are destined to repeat it.\u0026quot; but I think there\u0026rsquo;s a bigger reason here: those who don\u0026rsquo;t understand the legacy hardware have no idea what the fuck is going on.\nThe Curse of Backwards Compatibility: # The biggest reason knowing how legacy hardware works is important is because it has left us with bugs that will never be fixed, ways of working that will never be updated, and reliance on systems that are built on an endless cascade of abstractions. To be the best you can be at using a modern system, you must also know how and why those systems got to the point they did. Seeing how steps that were logical to take at the time but with hindsight seem crazy have gotten us to our current landscape of computation will help you be better at working with what we have now.\n[TODO: look at USB, Floppy→HDD→SSD, 32→64bit, etc.]\nHistory # Computing as a field has some interesting history dating back to the 1800\u0026rsquo;s. I really recommend reading A Brief History of Computers (lesswrong.com) if this interests you.\n"},{"id":80,"href":"/engineering/linux/hardware/motherboard/","title":"Motherboard","section":"Hardware","content":" 3 - The Motherboard # This is an older motherboard, but still new enough to have modern parts. Let\u0026rsquo;s start by looking at the most obvious physical features and move to smaller things from there.\nThe most obvious thing to point out is the size of the motherboard. This is a mATX motherboard, which is considered the normal size for most systems. Most gaming or DIY computers will use full size ATX motherboards, which look very similar but are a bit longer vertically, allowing for more expansion slots - those horizontal black bars - among other features. Other form factors include ITX, a smaller form factor with only a single expansion slot, eATX (extended ATX) which is rarely used now, and SSI and EEB which are both server motherboard sizes.\nThe large, white square is the CPU socket. This is an older board made for an AM3+ processor. The AM3+ processor line, as well as most consumer processors from AMD use a PGA or Pin Grid Array socket. these CPUs have many pins on the bottom which fall into these holes to make contact. Before the CPU is inserted the metal leaver arm, seen at the bottom of the socket if you look carefully, is raised and the CPU should smoothly plop right in, after which the arm can be lowered. Modern Intel CPUs follow a similar-ish mechanism, only instead of having a bunch of pins that go into holes the \u0026lsquo;pins\u0026rsquo; are actually tiny springy pieces of metal on the motherboard which make contact with pads on the CPU, that socket looks a bit like this, albeit this is an old one:\nImage By Appaloosa, Own work , CC BY-SA 3.0, Wikipedia Image Link If you\u0026rsquo;re looking at a server or high end workstation you may actually run into a single motherboard with multiple CPU sockets. These are becoming less common with time, but even though there are multiple CPUs the system still operates as one larger system. For example, I have access to a system with 4, 8 core, 16 thread cpu\u0026rsquo;s to give for a total of 64 threads. Giving this beautiful sight:\nClearly, a server with that much horsepower will use a lot of electricity though, and there is some overhead for the system when getting information from one physical CPU to another.\nAbove and left of the CPU on you\u0026rsquo;ll see a bunch of copper coils in little boxes and some small metal cylinders, as well as a cluster of these with a large, 4-hole plug a bit further left, directly above the big aluminum heat sink. This all makes up the VRM or Voltage Regulation Module. The connector there is where the CPU power plug from the PC power supply would be plugged in. The power needs to be carefully controlled, filtered, and adjusted based on the needs of the CPU, that\u0026rsquo;s what all of this is for. Generally the beefier and faster a CPU, the larger the VRM. The VRM also needs to dissipate a good amount of heat on higher end systems so many nicer motherboards will cover this up with a large heatsink.\nMoving on from the CPU you\u0026rsquo;ll see 4 vertical slots next to socket, these are where the RAM sticks are inserted. You\u0026rsquo;ll notice they\u0026rsquo;re color coded as to indicate which slots share the communication channel, so in this case you\u0026rsquo;d want to put the first memory stick in the blue slot closest to the socket, followed by the black slot closest to the socket, then repeat.\nWhile we\u0026rsquo;re looking at this side of the board- next to the RAM slots you\u0026rsquo;ll see two things of note. First, that black circular thing is actually a little buzzer. A lot of even modern systems have these on board to buzz error codes out in morse code if something goes wrong. Below that is a large, 20 or 24 pin connector (most modern systems use the 24pin varient) which is where the power supply is plugged in to provide power to the motherboard (with the exception of the CPU) as well.\nOn the other side of the CPU and down a little you\u0026rsquo;ll see a sizable metal heatsink. This is covering the chipset. We\u0026rsquo;ll come back to what the chipset does in a bit. This motherboard is actually a bit weird, on most motherboards the chipset is found almost directly below the RAM, but in general look for a large heatsink and it\u0026rsquo;s probably under that.\nBelow the chipset here are 4 expansion slots, all of which use the PCI-e standard in this case. We\u0026rsquo;ll come back to these in a bit.\nIn the bottom right of the motherboard there are 6 SATA connectors, here each is a different color (for no apparent reason?). These are for connecting storage like hard drives.\nVertically in line but closer to the center of the board you\u0026rsquo;ll also spot a coin cell battery. This is so the system can keep time with use of an on board Real Time Clock (RTC) even when fully powered down and disconnected from wall power.\nAlong the bottom you\u0026rsquo;ll see various connectors with pins sticking out, these are mostly for front panel connections- where the USB, audio, power button, etc. from the front of your case connect.\nFinally, along the top of the back left edge you\u0026rsquo;ll see the metal tops of the main \u0026lsquo;rear i/o\u0026rsquo; for the computer. These are all the main connections for your system. The bulk of the system\u0026rsquo;s USB ports, networking, and audio ports will be found here.\nSo, how do we get any information from the motherboard? Well, in case it wasn\u0026rsquo;t already obvious, the motherboard isn\u0026rsquo;t really one thing. It\u0026rsquo;s more a common interconnect point and routing system than anything; however, it does have some of it\u0026rsquo;s own responsibilities. To start small let\u0026rsquo;s look at one small, but exceedingly import role of the motherboard: fan and temperature control.\nTo see what your fans are doing on Linux you\u0026rsquo;ll need to grab the package lm_sensors with yay, then you can run sudo sensors-decect and mash enter until it\u0026rsquo;s done. After this you should be able to run sensors and see an output similar to this one:\nOf note, depending on your system, there\u0026rsquo;s a small chance nothing will be detected at all or that some information will be wrong. Even in my case this is true as my CPU fan is reporting 0 RPM. Actually entering your motherboard\u0026rsquo;s UEFI or BIOS settings may expose more information, but we\u0026rsquo;ll talk about that more later.\nAlright, so that\u0026rsquo;s coll and all, but what else can you do?\nAlright, let\u0026rsquo;s move on to seeing the system buses, namely, the pci bus.\nThe pci bus is where most of the system\u0026rsquo;s add in cards, controllers, and the like connect. Here\u0026rsquo;s a shortened version of the output of lspci from my system\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 00:00.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-0fh) Root Complex 00:00.2 IOMMU: Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-0fh) I/O Memory Management Unit 00:01.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-1fh) PCIe Dummy Host Bridge 00:01.1 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-0fh) PCIe GPP Bridge ... 00:08.1 PCI bridge: Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-0fh) Internal PCIe GPP Bridge 0 to Bus B 00:14.0 SMBus: Advanced Micro Devices, Inc. [AMD] FCH SMBus Controller (rev 59) 00:14.3 ISA bridge: Advanced Micro Devices, Inc. [AMD] FCH LPC Bridge (rev 51) 00:18.0 Host bridge: Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-0fh) Data Fabric: Device 18h; Function 0 ... 00:18.7 Host bridge: Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-0fh) Data Fabric: Device 18h; Function 7 01:00.0 Non-Volatile memory controller: Phison Electronics Corporation E12 NVMe Controller (rev 01) 02:00.0 USB controller: Advanced Micro Devices, Inc. [AMD] X370 Series Chipset USB 3.1 xHCI Controller (rev 02) 02:00.1 SATA controller: Advanced Micro Devices, Inc. [AMD] X370 Series Chipset SATA Controller (rev 02) 02:00.2 PCI bridge: Advanced Micro Devices, Inc. [AMD] X370 Series Chipset PCIe Upstream Port (rev 02) 03:00.0 PCI bridge: Advanced Micro Devices, Inc. [AMD] 300 Series Chipset PCIe Port (rev 02) ... 03:07.0 PCI bridge: Advanced Micro Devices, Inc. [AMD] 300 Series Chipset PCIe Port (rev 02) 07:00.0 USB controller: ASMedia Technology Inc. ASM1143 USB 3.1 Host Controller 08:00.0 Ethernet controller: Intel Corporation I211 Gigabit Network Connection (rev 03) 0a:00.0 PCI bridge: Advanced Micro Devices, Inc. [AMD] Device 1470 (rev c3) 0b:00.0 PCI bridge: Advanced Micro Devices, Inc. [AMD] Device 1471 0c:00.0 VGA compatible controller: Advanced Micro Devices, Inc. [AMD/ATI] Vega 10 XL/XT [Radeon RX Vega 56/64] (rev c3) 0c:00.1 Audio device: Advanced Micro Devices, Inc. [AMD/ATI] Vega 10 HDMI Audio [Radeon Vega 56/64] 0d:00.0 VGA compatible controller: NVIDIA Corporation GP106 [GeForce GTX 1060 6GB] (rev a1) 0d:00.1 Audio device: NVIDIA Corporation GP106 High Definition Audio Controller (rev a1) 0e:00.0 Non-Essential Instrumentation [1300]: Advanced Micro Devices, Inc. [AMD] Zeppelin/Raven/Raven2 PCIe Dummy Function 0e:00.2 Encryption controller: Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-0fh) Platform Security Processor 0e:00.3 USB controller: Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-0fh) USB 3.0 Host Controller 0f:00.0 Non-Essential Instrumentation [1300]: Advanced Micro Devices, Inc. [AMD] Zeppelin/Renoir PCIe Dummy Function 0f:00.2 SATA controller: Advanced Micro Devices, Inc. [AMD] FCH SATA Controller [AHCI mode] (rev 51) 0f:00.3 Audio device: Advanced Micro Devices, Inc. [AMD] Family 17h (Models 00h-0fh) HD Audio Controller Alright, clearly there\u0026rsquo;s a lot going on here, and on first glance it doesn\u0026rsquo;t even look all that useful. But let\u0026rsquo;s look deeper. From this output we can see some interesting things. Starting from the top you\u0026rsquo;ll see there\u0026rsquo;s a lot of internal AMD things that are just handling routing, really these probably don\u0026rsquo;t matter. the first interesting things to look at is 01:00.0 Non-Volatile memory controller: Phison Electronics Corporation E12 NVMe Controller (rev 01) which is telling me that my super speedy NVMe solid state drive is at the address 01:00.0 on the pci bus and despite being made by a consumer brand (I think mine\u0026rsquo;s a Silicon Power? though I have another that\u0026rsquo;s made by Samsung) the actual controller on the device is made by Phison, a reputable brand for NVMe controllers.\nnext thing of note is\n1 2 02:00.0 USB controller: Advanced Micro Devices, Inc. [AMD] X370 Series Chipset USB 3.1 xHCI Controller (rev 02) 02:00.1 SATA controller: Advanced Micro Devices, Inc. [AMD] X370 Series Chipset SATA Controller (rev 02) You can see here that I have a separate controller for my USB 3.1 ports and that it\u0026rsquo;s sharing pci lanes with my sata controller. In theory, this means If I\u0026rsquo;m working one or both of these really hard, the other may be slower.\nnext is:\n1 2 07:00.0 USB controller: ASMedia Technology Inc. ASM1143 USB 3.1 Host Controller 08:00.0 Ethernet controller: Intel Corporation I211 Gigabit Network Connection (rev 03) What\u0026rsquo;s interesting here is I have another 3.1 controller, on an entirely different set of lanes. Really, this is a fault of USB that it\u0026rsquo;s not very clear, this is actually a USB 3.1 gen 2 controller, so each port has a top speed of 10gb/s, compared to the 5gb/s of the other controller.\nYou\u0026rsquo;ll also see that my network interface is being handled by an Intel network controller, despite this system having an AMD CPU.\nmoving on:\n1 2 3 4 0c:00.0 VGA compatible controller: Advanced Micro Devices, Inc. [AMD/ATI] Vega 10 XL/XT [Radeon RX Vega 56/64] (rev c3) 0c:00.1 Audio device: Advanced Micro Devices, Inc. [AMD/ATI] Vega 10 HDMI Audio [Radeon Vega 56/64] 0d:00.0 VGA compatible controller: NVIDIA Corporation GP106 [GeForce GTX 1060 6GB] (rev a1) 0d:00.1 Audio device: NVIDIA Corporation GP106 High Definition Audio Controller (rev a1) Here you\u0026rsquo;ll see some devices can actually use multiple IDs for one physical device. both of the 0c:00.x \u0026lsquo;devices\u0026rsquo; are actually for the \u0026lsquo;Vega56\u0026rsquo; graphics card (Often called GPU for graphics processing unit) made by AMD Radeon, while the 0d:00.x devices are for the GTX1060 card made by Nvida that I have in this system as well. Of note, having both of these in one system is exceedingly uncommon, and my use case is strange; however, It is common to see systems which have a gpu integrated into the CPU (which will still appear in this list) and have a separate larger GPU in the system as well.\nIf you continue down this list you\u0026rsquo;ll see there\u0026rsquo;s yet another USB controller and a audio controller among other things.\nWhat\u0026rsquo;s cool is this information relates back to something we saw earlier when looking at the CPU:\nSee all those PCI ids on the right side, those directly correlate with a lot of the above.\nFinally, if you want a lot more information you can run sudo lspci -v to see even more info about anything, for example, here\u0026rsquo;s the output about my GTX1060 GPU:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 0d:00.0 VGA compatible controller: NVIDIA Corporation GP106 [GeForce GTX 1060 6GB] (rev a1) (prog-if 00 [VGA controller]) Subsystem: Micro-Star International Co., Ltd. [MSI] GP106 [GeForce GTX 1060 6GB] Flags: bus master, fast devsel, latency 0, IRQ 78 Memory at f6000000 (32-bit, non-prefetchable) [size=16M] Memory at c0000000 (64-bit, prefetchable) [size=256M] Memory at d0000000 (64-bit, prefetchable) [size=32M] I/O ports at c000 [size=128] Expansion ROM at f7000000 [disabled] [size=512K] Capabilities: [60] Power Management version 3 Capabilities: [68] MSI: Enable+ Count=1/1 Maskable- 64bit+ Capabilities: [78] Express Legacy Endpoint, MSI 00 Capabilities: [100] Virtual Channel Capabilities: [250] Latency Tolerance Reporting Capabilities: [128] Power Budgeting \u0026lt;?\u0026gt; Capabilities: [420] Advanced Error Reporting Capabilities: [600] Vendor Specific Information: ID=0001 Rev=1 Len=024 \u0026lt;?\u0026gt; Capabilities: [900] Secondary PCI Express \u0026lt;?\u0026gt; Kernel driver in use: nouveau Kernel modules: nouveau The most notable thing here is actually at the end:\n1 2 Kernel driver in use: nouveau Kernel modules: nouveau tells us I\u0026rsquo;m using the nouveau driver and kernel modules instead of one of the alternatives on the Nvida card in my system If I wanted to I could switch this over to the proprietary Nvidia driver to get a pretty nice speed boost in some applications.\nI\u0026rsquo;m not really worried about this because I\u0026rsquo;m mostly just using the Vega56 card. The nvidia card is there strictly for CUDA support in some workloads.\nMuch like lspci, there\u0026rsquo;s also lsusb, which as you can imagine, tells us information about the USB devices on the system. I have a LOT of usb devices on this system so I\u0026rsquo;ll just paste in a snippet:\n1 2 3 4 5 Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 003: ID 0c45:6340 Microdia Camera Bus 001 Device 008: ID 28de:1142 Valve Software Wireless Steam Controller Bus 001 Device 006: ID 258a:0013 Bus 001 Device 005: ID 05e3:0745 Genesys Logic, Inc. Logilink CR0012 You\u0026rsquo;ll see here that USB hubs, input devices, webcams, etc. all show up. Anything that\u0026rsquo;s hooked up through USB should appear here. The device with ID 258a:0013 isn\u0026rsquo;t really telling us anything though. What we do know is the first part is the USB Vendor ID. This is an ID that vendors of USB devices have to purchase to uniquely id their products.\nupon looking this id up online, it appears it\u0026rsquo;s used for a generic USB keyboard.\nFor completeness I\u0026rsquo;ll mention, the first part of the id, the x\u0026rsquo;s in xxxx:yyyy is the vendor id, while the y\u0026rsquo;s are the product id.\nFinally, I\u0026rsquo;d like to mention dmidecode. according to the manual page:\ndmidecode is a tool for dumping a computer\u0026rsquo;s DMI (some say SMBIOS) table contents in a human-readable format. This table contains a description of the system\u0026rsquo;s hardwarecomponents, as well as other useful pieces of information such as serial numbers and BIOS revision. Thanks to this table, you can retrieve this information without having to probe for the actual hardware. While this is a good point in terms of report speed and safeness, this also makes the presented information possibly unreliable.\nwe\u0026rsquo;ve already used this to get information about the system ram, but other things can be read as well. For example, going back to the pci slots from above running sudo dmidecode --type 9 will tell you what physical slots correspond to what bus address among other information, for a full list of available types simply look at the dmidecode man page with man dmidecode.\nChipset # The chipset is a chip usually located in the bottom right 1/4 of a motherboard underneath a heatsink. The chipset coordinates the data flow between the processor and most of everything else- excluding the few direct-CPU attached things like the Graphics card. Older systems had both a Northbridge and a SouthBridge as two separate chips, but everything modern has just the single chip, as the Northbridge, which had memory the memory controller, isn\u0026rsquo;t necessary on modern systems where the memory controller has been integrated into the CPU itself.\nFor the most part, the chipset on a motherboard will match a certain CPU socket, that is each generation of CPU will have it\u0026rsquo;s own chipset and socket; however, this is not always the case as sometimes one chipset may support multiple CPU generations or a CPU generation will work with multiple chipsets. This is the case with AMD\u0026rsquo;s ryzen line where a first generation Ryzen CPU such as the Ryzen 1700 will work in a motherboard with an x370, x470, or x570 chipset, and a third generation Ryzen CPU such as the Ryzen 3700 will work in any motherboard with one of those as well, albeit running a generation mis-match may result in degraded performance or missing features (such as lacking PCIe 4.0).\nFinally, it\u0026rsquo;s notable that the chipset typically acts as a PCIe lane \u0026lsquo;splitter\u0026rsquo; of sorts, turning (usually) 4 lanes into may more so that more devices may be attached. This can be particularly important when many high bandwidth devices are attached though, as even though these lanes are split, there\u0026rsquo;s still only that original 4 lanes of bandwidth to go around.\nImage Source Image Source Expansion slots # Two PCI-e 1x expansion cards, one for USB 3.0 and one for audio. Of note, most modern motherboards have both functions built in. Most modern expansion cards connect though the PCI Express or PCIe bus. This standard, much like DDR, has gone though multiple generations of bandwidth doubling. Currently consumer devices offer up to PCIe 3.0 but devices with both 4.0 and 5.0 should be on the market shortly.\nPCIe cards are used for just about anything you could imagine, form adding a more powerful graphics card, more usb ports, a higher end sound card, to some more esoteric things like specific task accelerators (encryption, compression) or even a software defined radio.\nNo matter what the device is you have to keep in mind its physical and electrical requirements. That is, do you have a slot long enough to accommodate the card and can you provide power to it.\nThis may seem odd, but unlike most connections (think USB or Ethernet) which may support varying speeds (usb2 vs 3) but are still physically the same size, the more bandwidth hungry a PCIe device, the larger the physical connection. The largest available is a 16x connection, while the smallest is a 1x. The most commonly used lane arrangements are 1x, 4x 8x, and 16x. The motherboard shown above has one 16x connector and three 1x connectors. If you have a card that is electrically wired for 4x it will definitly work in any slot physically designed for 4x or greater, and it will still work in a 1x slot of that slot is open ended- this means the \u0026lsquo;back\u0026rsquo; of the slot is open, allowing the card\u0026rsquo;s connector to go past the actual physical connection. Similarly, many 16x physical slots only have 8x actually wired. If you use a card which elecrically needs more connections it will almost certainly still work, but may have degraded performance. Similarly, if you have a card which expects a PCIe gen 3 16x connection but the best you have available is a PCIe gen 2 connection, it will run at half speed. To be extra clear:\nPCIe 1 @ 16x == PCIe 2 @ 8x == PCIe 3 @ 4x\nSimilarly, putting a card which only supports PCIe Gen 2 into a Gen 3 slot will not suddenly make the card faster, even if it was to compensate, that is, if the card is made for PCIe Gen 2 @ 16x and you put it in a PCIe Gen 3 @ 8x slot, it will still run at half speed because it\u0026rsquo;s the lowest gen number of the card or the slot that determines how many lanes are actually needed.\nUnfortunately, PCIe lanes, that is if you add together all the available 16x\u0026rsquo;s and 8x\u0026rsquo;s etc. on a given CPU are usually pretty limited. If the only extra card you plan on adding is a graphics card, you\u0026rsquo;ll be fine, but if you intend to add a graphics card, sound card, network card, etc. all at once you may find that you\u0026rsquo;ve either run out of physical slots or that a card is running with less than ideal bandwidth as a 16x slot may \u0026lsquo;give up\u0026rsquo; 8 of it\u0026rsquo;s lanes becoming an 8x slot so that another card can function at all.\nOf note, the number of physical lanes and slots the mother board has probably greatly exceeds the number of lanes actually going to the CPU, so even if it appears you have plenty of room to add cards you may end up accidentally starving one for bandwidth.\nFinally, from a power perspective most motherboards will supply up to 75 watts to a card through the motherboard, but power hungry cards like the Nvidia and AMD graphics cards in my system may require external power connections. Also, some server boards cap PCIe power delivery to only 25 watts without an external power supply, so just be careful with compatibility.\nThere are some other standards other than PCIe worth mentioning though.\nOlder standards such as PCI, AGP, and ISA were all used before the widespread adoption of PCIe and while their availability is declining, PCI cards are still often for sale, you need to be very careful to only get PCIe cards and not PCI cards if your system doesn\u0026rsquo;t support them.\nBoth AGP and ISA have been phased out a long time ago, but very old cards may poke up now and then. If you\u0026rsquo;re into vintage computers you may want to look the standards up to learn more.\nTop: a 16x pci-e graphics card and a 1x pcie networking card\nBottom: an ISA networking card and an AGP graphics card, not pictured is the PCI connector\nROM/BIOS/UEFI # Motherboards have to coordinate the communication of all the peripherals on the system and their own internal buses, furthermore, they have to have some sort of minimal configuration settings for setting things like which drive to boot off of or what speed the CPU or RAM should run at. These configuration settings are stored in some ROM or \u0026lsquo;Read Only Memory\u0026rsquo;, which is an independent chip on the motherboard. This configuration is read by the Binary Input Output System (BIOS) or the Unified Extensible Firmware Interface (UEFI). UEFI is essentially just the newer replacement for BIOS, and usually includes a compatibility mode for BIOS based hardware. When you first turn on the system you can typically mash either the delete or F12 key to enter this configuration page. It\u0026rsquo;s typically from this interface that you\u0026rsquo;d select your boot device, change your CPU or RAM clock speed, and set the system time. On that note, the system also likely has a battery on board which power\u0026rsquo;s the on-board real time clock, which allows the system to maintain the time even when disconnected from power. On some systems the ROM is actually volatile meaning if this battery dies and the system is disconnected from power you may loose the BIOS/UEFI settings.\nOf note, you may need to update the UEFI or BIOS of a system which is sometimes done via a special admin command within windows but more commonly done by downloading a file to flash drive, putting the drive in a specific usb port, and loading the update file. When this is done it\u0026rsquo;s common to lose all UEFI/BIOS settings as well, as it overwrites the ROM.\nFinally, it should be noted that it\u0026rsquo;s pretty easy to make your system not boot or boot-loop if you break things here. So, be careful. If you set your fan speeds slower to make the system quieter then everything overheats and dies, well, ヽ（´ー｀）┌\nBecause this varies per motherboard there\u0026rsquo;s no universal way to describe how it looks or works. Some boards will support a lot more configuration than others, with really the only nearly definite options you\u0026rsquo;ll find at the time of writing being a switch to enable virtualization extensions (for running virtual machines) and a switch to turn of Secure Boot, which you likely had to do to install Arch to begin with.\nFurther reading: How To Geek: What Is UEFI, and How Is It Different from BIOS? , UEFI and why I Hate it so Much (Cheapskate\u0026rsquo;s Guide)\nVRM # The VRM or \u0026lsquo;Voltage Regulation Module\u0026rsquo; serves a simple but important task of ensuring that the CPU (or processor in question) receives a constant voltage or voltage that makes sense for it\u0026rsquo;s current clock speed.\nEssentially the VRM may contain multiple stages of current and voltage regulation modules. The more of these stages the more stable the voltage and the more current can be delivered. For most cases, this can be left alone, but it\u0026rsquo;s incredibly important when over clocking, as to overclock a CPU or GPU it\u0026rsquo;s usually necessary to increase the voltage, which is typically done from within the BIOS/UEFI or from a configuration utility inside the OS in the case of the GPU.\nYou can typically tell how strong a particular uVRM is by counting the number of \u0026lsquo;chokes\u0026rsquo; on the board.\n[TODO, add pictures of chokes]\nTPM # [TODO]\nDIY your own TPM\n"},{"id":81,"href":"/engineering/linux/hardware/network/","title":"Network","section":"Hardware","content":" 6 - Network Interfaces # Pictured here are three Network Interface Cards (NICs). The three on the left are for Wi-Fi (though some of this form factor may include Bluetooth as well) while the one on the right has an Ethernet port for wired access. Most computer\u0026rsquo;s will not have a separate card for the wired interface, though, as most motherboard\u0026rsquo;s have a wired network interface built in.\nNICs also include the wireless chipset used for connecting to a cell tower and really any radio communication device in general.\nOlder NICs include those used for Dial-Up connections and some obscure wireless methods that predate Wi-Fi.\nEthernet # [TODO] rj45, Ethernet over infiniband, speed bases\nWi-Fi # [TODO]\nChannels 12, 13, 14. 2.4 v 5, Wi-Fi 6, weird authentication, etc\nHigh Bandwidth # [TODO], infiniband, DMA, 10GbE+, Multigig\nAt the end of the day, nothing is faster than a truck filled with drives. [TODO xkcd link]\nThe Future # [TODO]\nwifi6, 10gbe rj45 and beyond, cellular, SDR\nThe Past # [TODO]\ncoax network, infrared, sneakernet\n"},{"id":82,"href":"/engineering/linux/hardware/peripherals/","title":"Peripherals","section":"Hardware","content":" 9 - Peripherals # USB # The below two videos do a really good job of covering USB, but there\u0026rsquo;s one thing I want to add: Some cables lie! They don\u0026rsquo;t have data pins at all, and instead are only carry power. This can be a massive pain when you have a box of cables and need to know which ones are \u0026ldquo;real\u0026rdquo; cables.\nWhile there are testers available on Amazon, almost all of them are USB2. While https://github.com/alvarop/usb_c_cable_tester isn\u0026rsquo;t perfect - It won\u0026rsquo;t tell you if cables are crossed, though that\u0026rsquo;s really rare - it\u0026rsquo;s pretty good. Plus, ordering it will give you experience ordering a PCB with assembly service, which will be a good experience for when you want to design your own boards.\nBUT WAIT! THERE\u0026rsquo;S MORE! USB 4.0 is a thing now, butttt it\u0026rsquo;s actually based on Thunderbolt 3 and is only on USB-C. But what is Thunderbolt, then? Let\u0026rsquo;s move on\n… but for the really nerdy that want more, see USB3: why it\u0026rsquo;s a bit harder than USB2, How Does A USB Keyboard Work? (Ben Eater, YouTube), and How does USB device discovery work? (Ben Eater, YouTube) Thunderbolt, FireWire, PS-2? # Alright, so we\u0026rsquo;ll get to Thunderbolt in a second, but first, let\u0026rsquo;s look at how we got here:\nokay, so that\u0026rsquo;s the really legacy stuff, but you may also see some FireWire (IEEE 1394) devices lying around. FireWire was mostly found on gear made for Apple devices, but it can be found on generic hardware too. It\u0026rsquo;s a bit faster than USB 2.0 but still dramatically slower than 2.0. To use it today, you\u0026rsquo;ll probably need to add an expansion card to your computer, but because of that added cost, sometimes you can find good deals on FireWire accessories- just be aware that drivers with FireWire are often a massive pain in the ass.\nFinally, then, we can get to Thunderbolt!\n[TODO]\nKeyboards # HID or Human Interface Device, is the standard over which most mice, keyboards, and game controllers talk to the computer. Unfortunately, it\u0026rsquo;s also a pretty lame standard. You can\u0026rsquo;t just input arbitrary Unicode or send fancy data back to the keyboard to control fancy RGB lights, because of this it\u0026rsquo;s common to need extra drivers per device\n[TODO]\n5pin din, PS2, USB\nWhat Happens When (GitHub)\nby u/veggiedefender "},{"id":83,"href":"/engineering/linux/hardware/power/","title":"Power","section":"Hardware","content":" 7 - Power Supply # The Power Supply Unit or PSU does what you think. It takes power from the wall and turns it into power for the computer. This isn\u0026rsquo;t the chapter on voltage and current, so I\u0026rsquo;ll spare some of the details, but effectively you want a power supply that can deliver plenty of power and that has clean power. A given power supply usually has a rating like \u0026lsquo;500w\u0026rsquo; for 500 watts, but this is usually a bad indicator, as they could be referring to multiple things- you see a desktop power supply usually outputs multiple voltages (-12, +12, +5, +3.3) and each one of those lines will have a different maximum power output. Typically, the one that\u0026rsquo;s most relevant is the +12 rail, as both the GPU and CPU will likely run on that and they\u0026rsquo;re what draws the most power. So, you can actually check just this rail by taking the voltage (+12V) times the max current (amperage) on that line (let\u0026rsquo;s use 20A) to see the max power (so 12*20=240 watts)\nAlso note that the power supply itself may be of varying quality, with the voltage \u0026lsquo;ripple\u0026rsquo; and the efficiency being important as well. Voltage ripple occurs when the supposed-to-be 12V line instead outputs a signal that\u0026rsquo;s varying a little, so let\u0026rsquo;s say you measure the +12V line and it reads 12.2V now, then a minute later reads 11.8V, that\u0026rsquo;s quite a bit of ripple when you expect a constant +12V. Generally you can trust the power supply is decent about this though, so long as the power supply is also pretty efficient. Telling efficiency is easy too, as there\u0026rsquo;s a nifty specification that most PC PSU\u0026rsquo;s have called \u0026ldquo;80 plus\u0026rdquo; and it\u0026rsquo;s rated by a metal-value system, so an 80+ bronze power supply is already (typically) much better than one without the rating, and an 80+ Gold is even better, going on up to Platinum.\nMost PC PSU\u0026rsquo;s are in the ATX format, the same specification used to size motherboards, and the majority of desktops use a standard ATX power supply, though smaller systems may opt for one of the smaller standards such as SFX. Servers typically have their own power supplies which look a bit strange as they\u0026rsquo;re basically the shape of an elongated brick, but they\u0026rsquo;re like that so they can be easily swapped in and out. Often server power supplies are redundant so a new one could be put in while the system is still on in many cases.\nMain takeaway here, if someone is talking about an ATX PSU they\u0026rsquo;re talking about the power supply in a desktop. Often they\u0026rsquo;re (less than safely…) used in other applications, as they\u0026rsquo;re cheap and often easy to find used or salvaged from old systems.\n[TODO] add pictures, ATX 12VO, don\u0026rsquo;t use ATX for lab purposes, please. See battery/psu stuff from Linux, powertop, Power Managment on Arch Wiki\nUninterruptible Power Supplies # [TODO]\n"},{"id":84,"href":"/engineering/linux/hardware/ram/","title":"RAM","section":"Hardware","content":" 2 - RAM # Note, that some RAM sticks, especially the full size ones, have metal heat spreaders on top of them. In gaming computer especially it\u0026rsquo;s common for these to have RGB lights as well. This is RAM or Random Access Memory. The above two sticks are the normal-sized used in desktop PCs, this form factor is called a DIMM (Dual In-Line Memory Module) while the bottom two are from laptops and are called SO-DIMMS, the placement of the notch is an indicator of the generation of RAM, with nearly all modern ram being a consecutive generation of the DDR standard. At the time of writing (Q2,2019) DDR4 is common in new, medium to high-end devices, with many DDR3 devices still being used. Of note, many more compact devices solder the ram chips directly to the board, meaning there is no form factor to consider.\nJust like the CPU, RAM has a speed at which it operates as well, Typically it\u0026rsquo;s listed in MHz still, but speeds range from ~1.8Ghz to ~3.8Ghz at the time of writing, dependent DDR3 or 4. While DDR4 has faster clock speeds, it does typically have a higher overall latency, meaning there\u0026rsquo;s a longer delay between when data is requested to when it\u0026rsquo;s delivered, albeit at a much higher total throughput. This is a massive topic in of itself, yet is also pretty niche as outside some pretty specialized applications RAM speed and latency has a relatively minor impact, though faster is typically better.\nOkay, let\u0026rsquo;s move on to ram in Linux.\nWhile support for this will vary depending on your motherboard, you should be able to see information about your ram by running sudo dmidecode --type 17\nThe output will probably repeat multiple times, printing once for each physical stick of ram in your system. I actually have 4 sticks, but I\u0026rsquo;ll just be showing one:\nYou should note that many of the things mentioned above can be seen here, though I do want to look at some things here.\nFirst, size. This is an 8Gb or 8192Mb stick of ram. Obviously, the more ram the better, but you may find strange ram configurations where there\u0026rsquo;s a mix of ram sizes in a system. This can be bad for performance, though, because of memory channels.\nMost modern systems use 2 or 3 memory channels, to simplify a bit, it makes it so two sticks of ram can have their speed be used in parallel. Think about it like a parking lot, if you have a total of 4 parking lots you could, theoretically, hook them all up in a straight line with one entrance/exit shared among them. This would be pretty stupid, though, as it would severely bottleneck traffic going though. Instead, you may want to add a separate entrance and exit for each, but that quickly becomes expensive. Instead, most systems use a mix of the two, connecting a pair of sticks together, allowing for added capacity, but allowing for multiple pairs to be inserted independently. A lot of people don\u0026rsquo;t fully fill all the available memory slots on their motherboard though, so instead of having 4 lots with 2 entrances you should be able to have 2 and 2, unless you mistakenly put the sticks in wrong, leaving one \u0026rsquo;entrance\u0026rsquo; closed entirely while the other now has a ton of capacity. On my motherboard these \u0026rsquo;lots\u0026rsquo; are labeled A1, A2, B1, and B2. Looking above, you can see the stick we\u0026rsquo;re looking at here is the A1 lot. It\u0026rsquo;s because of this that you should ideally have a multiple of as many sticks of ram as you do memory channels. For example, if you have a two channel motherboard and CPU then you want either 2, 4, or 8 sticks of ram. Most motherboards top out at 4 sticks, though, with 2 channel and 2 sticks being the most common configuration.\nNext, I want to look at the line that says \u0026lsquo;Type Detail: Synchronous Unbuffered (Unregistered)\u0026rsquo; this is referencing another type of ram, which is buffered and error correcting (ECC) memory. I\u0026rsquo;ll come back to this.\nI also want to point out the voltage. Much like a CPU, the voltage a Ram module runs at is important, and needs to be kept very stable. However, it may need bumped up if the RAM is running at a particularly high speed or if it\u0026rsquo;s set higher than factory (overclocked).\nSome RAM actually includes a special memory profile, often called XMPP, which can be applied in the BIOS/UEFI settings to make sure you\u0026rsquo;re getting the absolute best performance out of your RAM before manual overclocking. This may actually overclock your CPU a bit as well as a bit of a side effect.\nThere\u0026rsquo;s a program on your system called free which can be used to see how much RAM you have, how much is in use, etc. Let\u0026rsquo;s run free with the -h flag so we can see the amounts with nice units.\n1 2 3 4 ╭─vega@lyrae ~ ╰─➤ free -h total used free shared buff/cache available Mem: 31Gi 4.5Gi 23Gi 488Mi 3.3Gi 26Gi You can see I have 32Gb of RAM total (it gets truncated to 31 because it\u0026rsquo;s actually like 31.99, units are weird), with only 4.5Gb used. Most people complain about Chrome eating all their RAM, but the truth is unused RAM is wasted RAM. The OS will manage RAM for you, and if you run out start using swap (that partition we made earlier).\nLet\u0026rsquo;s take a deeper dive, reading the man page for free with man free we can see it uses information from /proc/meminfo, so let\u0026rsquo;s look at that file ourselves using cat /proc/meminfo.\nOne of the most interesting things to point out here is the concept of Dirty memory.\n\u0026lsquo;Dirty\u0026rsquo; memory is the amount of information that has been modified in memory, but that has not been saved back onto the permanent storage (SSD/HDD). If you were to suddenly lose power, this information would be lost.\nPagefaults and misses are also important. Because these topics are a bit hard to summarize, I\u0026rsquo;m going to recommend you read the Wikipedia page on Pagefaults and on Cache Misses. It\u0026rsquo;s okay if you don\u0026rsquo;t understand everything you\u0026rsquo;re reading. Hopefully as you read more later and gain more experience, the terms you didn\u0026rsquo;t know will \u0026lsquo;click\u0026rsquo; and you\u0026rsquo;ll understand.\nGoing back to when cache was mentioned, though, RAM\u0026rsquo;s primary job is to hold bulk information that\u0026rsquo;s in use a bit closer to the CPU. For example, if you load a large image file it\u0026rsquo;ll first get copied to ram and then be processed though cache in chunks, this is because there just simply isn\u0026rsquo;t enough cache on the CPU to hold a large image.\nMemory Density # Virtual Memory \u0026amp; Swap # [TODO] see chapters 12-24 of https://pages.cs.wisc.edu/~remzi/OSTEP/\nSo, there\u0026rsquo;s a bit of complexity between how programs see memory and what is actually available going on that is really important to understand. You see, in ye olden days, computers were simple- you\u0026rsquo;d have a big ol\u0026rsquo; pool of available memory and each program would just be told \u0026ldquo;You get the memory between ADDRESS1 and ADDRESS2\u0026rdquo; but there wasn\u0026rsquo;t actually anything checking to make sure this was upheld. If one program wanted to maliciously read another\u0026rsquo;s memory values, it could! If a program decided \u0026ldquo;You know what, I think I need more memory than this!\u0026rdquo; it could just go right out of it\u0026rsquo;s allotted space and overwrite the memory of another process. Further, it was really awkward to handle the problem of a process, halfway though running, requesting more or less memory be allocated to it, as dealing with non-contiguous regions of memory would be awkward.\nEnter Virtual memory\nEach program is now given a virtual address and virtual pages of memory. These pages are mapped to physical memory by using the Memory Management Unit or MMU in the processor in conjunction with the OS coordinating what process gets what memory allocated to it. Put very basically, each process is essentially given what looks to it to be access to the real, physical memory, say, the process is told \u0026ldquo;You have access to address 0x000A to 0x000C\u0026rdquo; but the operating system and MMU know that, in reality, that the memory is actually, physically, in two segments, 0xF32C to 0xF32D and 0x3D2A and 0x3D2B. The program has no idea about this mapping, and no idea that the memory isn\u0026rsquo;t actually contiguous.\nThis has another benefit- we can actually allocate more memory than we really have. Say we\u0026rsquo;re working on a system with limited RAM, like the Raspberry Pi 3B+ with only 1GB to go around. The operating system is going to need some of that to do its duties, says 200Mb, and then say you open two programs- LibreOffice Writer (a word processor) and Firefox, each of which needs 500Mb of memory. That\u0026rsquo;s already 1200Mb of memory, more than the 1024Mb in the 1Gb of physical memory the Pi has! So, what happens? Well, the system will start Swapping memory to disk (in this case the SD card) this means that whatever the OS deems what you haven\u0026rsquo;t used in the longest or that you\u0026rsquo;re least likely to use again soon gets taken out of RAM and is instead written to your long term storage (SD card here, but normally an SSD or HDD in a bigger computer) this is good because it means you can run more programs than you really have the RAM for, but bad because this secondary storage is glacially slow compared to the speed of RAM, so when you do actually need that information, it will take a long time to work its way to the processor. If we continually end up swapping memory from disk and physical memory, this is called Thrashing, and it is extremely bad. Even when the system isn\u0026rsquo;t being thrashed, the hiccup from swapping is often very noticeable to the user, so you really don\u0026rsquo;t want to run out of RAM.\nFaults \u0026amp; The Dirty Bit # Alright, so,\nLocality # [TODO] Temporal \u0026amp; Spacial Locality\nPages # [TODO] What a page is, page faults. Not going into depth on Page replacement algos but at least enough to get the gist.\n[TODO] Huge Pages, ref this\nMemory issues, ECC, and Memtest86 # Memory can have quite a few issues, sometimes resulting in random Blue Screen of Death (BSoD) or Linux Kernel Panics, other times just occasionally corrupting data with no way to know.\nIf you\u0026rsquo;re working with super critical data, you can at least know that something has gone wrong by using Error Correction Code (ECC) memory. In an ideal world, ECC would just be standard on everything. Unfortunately, Intel is a bag of dicks and uses it for product segmentation and people are cheap: ECC is also more expensive because it requires an extra bit for every byte. This also means that instead of the normal 8 memory dies per stick of RAM, ECC memory actually has 9 dies (usually). The reason there are normally 8 dies is simple- there are 8 bits in a byte. Servers don\u0026rsquo;t work on some magic 9-bit in a byte system, instead, this extra bit per byte is used to ensure the data hasn\u0026rsquo;t been corrupted.\nThe math to do this is generally capable of detecting and fixing a single bit flip per byte, and at least detecting a double flip.\nThis video explains how that works if you\u0026rsquo;re interested:\nIt is worth noting that along with being more expensive, ECC is also usually a tad slower. There\u0026rsquo;s also such thing as Registered/Buffered memory, which you may see with ECC as well. Buffered memory is basically just adding an extra \u0026lsquo;buffer\u0026rsquo; between the read/write and again, it\u0026rsquo;s a server thing- you\u0026rsquo;re unlikely to ever see it on a consumer platform. Just know that if you\u0026rsquo;re buying RAM for a server, you may need to be careful to ensure you\u0026rsquo;re getting the right thing.\nWhen DDR5 comes along, ECC is built into the spec for all levels to some extent because as memory speeds have increased, the likelihood of an error has as well. It\u0026rsquo;s becoming necessary for basic functionality at DDR5 speeds.\nNow, ECC would be great and all, but the memory in the system you\u0026rsquo;re reading this on almost certainly isn\u0026rsquo;t using it, so what can you do?\nWell, for one, you need to get a feel for when something might be a memory error. Generally, if you see issues that you can\u0026rsquo;t attribute to anything in software, where there\u0026rsquo;s no obvious pattern, it\u0026rsquo;s a good bet that it\u0026rsquo;s memory. Assuming you\u0026rsquo;re on an x86(_64) system, like most laptops or desktops, you can check with Memtest86(+) (Wikipedia). It often needs to run for a few hours to find anything, but when it does you\u0026rsquo;ll get a big red error.\nUnfortunately, this probably means you need to buy new RAM. In the absolute worst case, maybe a new CPU if the memory controller has gotten damaged, but this is unlikely.\nImage by Андрей Крижановский on Wikipedia, Public Domain You\u0026rsquo;re far more likely to get RAM errors if you Overclock your RAM as well, so just be smart if you do OC your RAM- though I really don\u0026rsquo;t recommend doing so beyond applying the XMP profile (Tom\u0026rsquo;s Hardware) your RAM may have shipped with.\nThe Future of RAM # It may seem like RAM is simple enough as to not really have any opportunities for massive changes in the future. This is not the case. Currently, there are real, commercially available products implementing both Processing In Memory (PIM) and memory persistence (non-volatile main memory)\nThis article, In-Memory Processing by UPMEM, from AnandTech goes into the former, while the Intel Optane Persistent Memory article from StorageReview and this video from Linus Tech Tips cover the latter.\nIt\u0026rsquo;s also very likely we\u0026rsquo;ll see new form factors as we run into problems with signal integrity. We\u0026rsquo;re already seeing the start of this with laptop\u0026rsquo;s (CAMM Memory (Linus Tech Tips)) but given the signal integrity woes at hand and the rapid progress of stacking silicon in recent years, it\u0026rsquo;s not even out of the question we\u0026rsquo;ll see it be on a silicon interposer soon- RIP upgradability, but hello speed.\nRow Hammer # Row Hammer is vulnerability that arises due to the way memory is arranged physically and electrically on a memory stick. It lets you flip bits you shouldn\u0026rsquo;t be able to by \u0026lsquo;hammering\u0026rsquo; on the row above or below the target row, hoping that you can induce a bit flip in the target row. It\u0026rsquo;s also been \u0026ldquo;fixed\u0026rdquo; multiple times, and is still a problem …though it is supposed to be fixed for real this time in DDR5 Row Hammer\u0026rsquo;s Wikipedia Page has some a very good overview as well as some example assembly to explain the exploit\n"},{"id":85,"href":"/engineering/linux/hardware/storage/","title":"Storage","section":"Hardware","content":" 5 - Storage # Pictured here are 3 hard drives, 2 of which are \u0026lsquo;full size\u0026rsquo; at 3.5\u0026quot; and the other a \u0026rsquo;laptop drive\u0026rsquo; at 2.5\u0026quot;, the right most hard drive has been opened up, which has certainly ruined it as dust has gotten in. Below the smaller Hard drive is an NVMe SSD on a carrier card. Under the CD is a micro SD card and a flash drive. The micro SD, NVMe SSD, and flash drive all use \u0026ldquo;flash storage\u0026rdquo;. Permanent storage is rapidly evolving, but the old guard: hard drives and tape storage aren\u0026rsquo;t going anywhere either. But why use one over the other? How do you interact with them in Linux?\n[TODO] mention HDD, SSD, SATA, NVMe, usb-storage, SD, SCSI, u.2, m.2, tape, floppy, zip\nhdparm\nHDDs # Hard Disk Drives or \u0026lsquo;HDDs\u0026rsquo; are sometimes called \u0026ldquo;spinning rust\u0026rdquo; because unlike other modern storage devices, they\u0026rsquo;re fundamentally mechanical.\nLooking at the de-lidded hard drive, you\u0026rsquo;ll see they\u0026rsquo;re pretty simple in their basic construction: a magnetized needle(s) move across (a) platter(s) and flip bits accordingly. These platters typically spin at 5400 or 7200 RPM, with the faster meaning data can be read and written faster as well. Hard drives generally are not used for speed, though, as compared to other alternatives they\u0026rsquo;re extraordinarily slow. Often, you\u0026rsquo;ll hear them called \u0026ldquo;spinning rust\u0026rdquo; now, making fun of how antiquated the idea of mechanical storage seems in the first place.\nHDDs generally run at \u0026lsquo;good enough\u0026rsquo; speeds for most things- like storing video, music, etc. while being much less expensive than solid state options for a given amount of storage, and with a proven reliability and without suffering from data loss when left without power for long periods of time. That said, just like any storage medium, over time data can be corrupted, so backups are still a must.\nWhen a Hard drive is powered off, the head will typically \u0026lsquo;park\u0026rsquo; off the platter (this is part of why the delidded plater above died, as it parked incorrectly) and transportation should be pretty safe, however, when running and spinning quickly they\u0026rsquo;re pretty fragile, and this is why so many older laptops have dead drives: the gyroscopic effects of spinning something that fast make it resistant to a change in orientation, causing things to scrape, scratch, or otherwise go wrong. Thankfully, most 2.5\u0026quot; hard drives have been hardened against this now; however, it\u0026rsquo;s still a good idea to store and run hard drives with as much protection from vibration and shock as possible. In fact, yelling at a hard drive has been shown to hurt performance.\nAt the end of the day, for bulk media storage that you still want to be able to access quickly or for backups, hard drives are still one of the best options.\nMost hard drives connect though either SATA or SAS, with almost all consumer drives being SATA, and enterprise drives using a mix. SAS has some extra features and depending on the drive may be capable of writing and reading at the same time, a nifty trick SATA drives can\u0026rsquo;t do without alternating between the two rapidly.\nFor bulk storage servers, you can get insane capacities, and building one yourself isn\u0026rsquo;t all that hard. Here\u0026rsquo;s mine:\nA modified powervault MD1000 with a hard drive poking out and the computer - being used an archive server - it connects to. It currently is only housing three, 3Tb SAS hard drives.\nFor working with hard drives in Linux, your best friend is hdparm lets use it to look at some disks. First we need to pick a disk to look at, running lsblk you should be able to see all the disks on your system, and I\u0026rsquo;ll be looking at my main data drive which is a 3.7Tb drive on /dev/sdg\nThe first thing we should do is get an idea about the disk usage, to do that I\u0026rsquo;ll go to the mount point of the disk on my system ( it\u0026rsquo;s mounted at /run/media/vega/raid despite the fact it\u0026rsquo;s no longer in a raid array, we\u0026rsquo;ll come back to this)\nso first I\u0026rsquo;ll run df -h , that -h on most Linux commands means to make the output human-readable, printing things in terms of Gigabytes or Terabytes etc. instead of just a raw byte count.\n1 2 Filesystem Size Used Avail Use% Mounted on /dev/sdg2 3.7T 2.3T 1.5T 62% /run/media/vega/raid Alright, so I already have the disk 62% used, let\u0026rsquo;s give that a closer look by firing up ncdu at the mount point. This will take a little while to scan, the more files the longer it will take. After spending a few minutes to analyze the disk, I\u0026rsquo;m greeted with this:\nFrom this you should be able to plainly see that the majority of the hard drive is taken up by Archived files, Music, Games, Videos, and Pictures. Pretty Mundane, but I could easily dive into the Archives and see why they\u0026rsquo;re so big and save myself some space\nNone of this is really all that interesting, though, so what about speed? How fast or slow is the hard drive? Now is where hdparm comes in. Reading the man page you\u0026rsquo;ll find the -T and -t flags both perform disk read benchmarks, one cached reads, the other raw, so let\u0026rsquo;s run sudo hdparm -Tt /dev/sdg\nThis gives:\n1 2 3 /dev/sdg: Timing cached reads: 22946 MB in 2.00 seconds = 11492.36 MB/sec Timing buffered disk reads: 556 MB in 3.01 seconds = 184.91 MB/sec You should immediately notice that cached reads are absolutely insanely high compared to buffered, in reality it\u0026rsquo;s because it was using RAM for cache, and RAM really is that fast. The reads of bulk data on the other hand? A little under 200MB/sec is actually quite fast for a hard drive. Anything between 1-200 is normal. You\u0026rsquo;ll soon see that compared to SSDs, though, this is kind of disappointing.\nBut, moving on, another few interesting flags available in hdparm are -g which displays the \u0026ldquo;geometry\u0026rdquo; of the drive: cylinders, heads, sectors, etc., -H for temperature. This begs the obvious question: what are cylinders, heads, and sectors [TODO]\nAnother thing of note is S.M.A.R.T tests, while not exclusive to hard drives, they\u0026rsquo;re particularly useful for them as most hard drives give a lot of warning signs before failing out right. In order to get in-depth S.M.A.R.T info on your drive, you\u0026rsquo;ll likely need to run a test first, after which you can view the results. To do this on Linux, you can run\n1 2 yay -S smartmontools sudo smartctl -i path/to/disk Hard drives, being the last remaining mechanical part in a computer (aside from fans or liquid cooling pumps) are also pretty prone to failure. If you want to avoid this keep vibrations to a minimum (see Shouting in the Datacenter (YouTube)), look for disks that are rated for your use case (being on 24/7, being next to many other hard drives, etc.) and check the drive\u0026rsquo;s MTBF or Mean Time Between Failure. You want this number to be as high as possible, often something like 1,000,000 hours.\nFinally, a quick note about Western Digital Green drives: Linux eats them. Thankfully, you can use hdparm to fix this. From the man page:\n-J Get/set the Western Digital (WD) Green Drive\u0026rsquo;s \u0026ldquo;idle3\u0026rdquo; timeout value. This timeout controls how often the drive parks its heads and enters a low power consumption state. The factory default is eight (8) seconds, which is a very poor choice for use with Linux. Leaving it at the default will result in hundreds of thousands of head load/un‐ load cycles in a very short period of time. The drive mechanism is only rated for 300,000 to 1,000,000 cycles, so leaving it at the default could result in premature failure not to mention the performance impact of the drive often having to wake-up before doing routine I/O. WD supply a WDIDLE3.EXE DOS utility for tweaking this setting, and you should use that program instead of hdparm if at all possible. The reverse-engineered implementation in hdparm is not as complete as the original official program, even though it does seem to work on at a least a few drives. A full power cycle is required for any change in setting to take effect, regardless of which program is used to tweak things. A setting of 30 seconds is recommended for Linux use. Permitted values are from 8 to 12 seconds, and from 30 to 300 seconds in 30-second increments. Specify a value of zero (0) to disable the WD idle3 timer completely (NOT RECOMMENDED!).\nWestern Digital is trying to redefine the word “RPM” (arstechnica)\nWhat Is ZFS?: A Brief Primer (YouTube, Level1Linux)\nNon-Posix File Systems (Göran Weinholt\u0026rsquo;s Blog)\nSSD # Solid state drives, like HDDs, come in many capacities, speeds, and form factors; however, SSDs come in many, many more than HDDs. The primary two of note at the moment are SATA SSDs and NVMe SSDs. SATA SSDs are typically the same size and shape (though sometimes a bit thinner) as the normal 2.5\u0026quot; laptop hard drive; however, some other standards are used such as mSATA (about a half-credit card) and m.2 (a bit bigger than a stick of gum). Unfortunately, the m.2 spec is slightly confusing, with some drives being SATA based and some being NVMe based, and the m.2 slot itself supporting any mix (just SATA, just NVMe, or both), so when getting a drive you need to be careful that your motherboard\u0026rsquo;s m.2 slot and the drive are compatible.\nThe main reason you\u0026rsquo;d want to use NVMe is that it\u0026rsquo;s much, much faster. NVMe drives are often many times faster than their SATA equivalents (usually because SATA is limited to 600MB/s tops), and as of the time of writing, only slightly more expensive, albeit not supported on all systems. Do keep in mind though that NVMe drives will use some of your limited PCI-e lanes, so if you want to add a lot of expansion cards like a GPU, sound card, extra USB ports, etc. you\u0026rsquo;ll need to be careful about that.\nAll SSDs, regardless of type, consist of 3 main parts: The Controller, the NAND, and, if they\u0026rsquo;re not garbage, some RAM. (Seriously, don\u0026rsquo;t buy a DRAM-less SSD)\nAll three of these can make a difference to both performance and reliability, though honestly, this is one situation where just sticking name brand is probably the best way to ensure you don\u0026rsquo;t get boned. Samsung, Intel, Silicon Power, Kingston, Crucial, Western Digital, SanDisk, Micro, ADATA, and Toshiba should all be safe bets. It\u0026rsquo;s really not worth saving a buck on a no-name brand when your data is at stake.\nIf you do care about the nerdy nitty-gritty, you should read about Multi Level Cell Flash (Wikipedia), with the general takeaway that more levels means more space but worse speeds and durability.\nIt\u0026rsquo;s also worth mentioning that new flash types, controllers, and methods to make things even faster keep coming out. One of the most interesting is Intel\u0026rsquo;s Optane SSDs which use 3D XPoint, which, is fast, very low latency, and more durable than flash, but more expensive. It\u0026rsquo;s actually fast enough that in some exotic systems, it\u0026rsquo;s starting to be used as an alternative to RAM that can also keep its data though a reboot (unlike normal RAM).\nRecovering File Systems from NAND Flash (YouTube, Defcon 28)\nCloud Storage (Someone else\u0026rsquo;s drives) # This is an opinionated guide, so now that\u0026rsquo;s about to show: Don\u0026rsquo;t do it. All cloud storage is someone else\u0026rsquo;s disks. If you want to use it as a backup sure, but I don\u0026rsquo;t see why- it\u0026rsquo;s much less expensive to just back up the reallly important stuff to a hosted server continually and periodically (weekly, monthly, whatever) backup to some external disks that you keep somewhere else. Not to mention the privacy concerns. Like, really? You want to put allllll your family pictures under the all seeing eyes of Google or Microsoft. Nah. I\u0026rsquo;ll pass.\nIf you reallllly insist, then check out https://www.backblaze.com/cloud-backup.html (I\u0026rsquo;m not affiliated in any way, nor do I use the service) as it\u0026rsquo;s probably the safest option, and they have good recovery options, like sending you a physical hard drive with your data on it.\nBut, seriously, only use cloud for a backup if you have to and never ever ever ever ever use it as a primary storage medium.\nThe cloud is not your friend.\nPortable # Most fixed disk enclosures (Think your normal, off the shelf portable driver) suck, albeit they can be less expensive. I\u0026rsquo;d recommend getting a portable multi-drive enclosure that runs over whatever the fastest connection you have is (Thunderbolt, USB 3.1, etc.). You can even get USB-\u0026gt;NVMe adapters, albeit they have a nasty amount of bandwidth limiting.\nMost off-the-shelf flash drives have ass cooling and will over-heat themselves to death when you use them for things like installing operating systems regularly, so I recommend just getting a bulk pack of cheap, low capacity ones to toss when they finally kick the bucket and a few nice USB-\u0026gt;SATA or USB-\u0026gt;NVMe adapter for your main portable storage needs. Failing that, you can always use your phone if you\u0026rsquo;ve got a nice high capacity SD card in it or plenty of spare internal storage. The problem with that is MTP or \u0026lsquo;Media Transfer Protocol\u0026rsquo; is a buggy, slow mess, and there\u0026rsquo;s no other clean way to transfer things from a phone. So ¯\\(ツ)/¯\nOf course, one thing to remember is how hard it is to recover data from your portable media should something go wrong - don\u0026rsquo;t trust that SD card to never fail: Source: blog.acelab.eu.com You might also want to look into Hard Drive Shucking if you\u0026rsquo;re in need of as much storage as you can get your grubby lil\u0026rsquo; r/DataHoarder hands onto.\nThe Past # Floppy, Zip Disks, and Tape? Really? Yes. And yes, they\u0026rsquo;re still used, so you should probably know at least a little about them.\n[TODO]\nFloppy, Zip, tape\nRAID and Disk Pools # Adventures in Motherboard Raid (it\u0026rsquo;s bad) - (Level1Techs, YouTube)\n[TODO]\nZFS, hardware raid, software raid, emulated hardware (bios), etc.\nhttps://mazzo.li/posts/reed-solomon.html\n"},{"id":86,"href":"/engineering/linux/hardware/weird/","title":"Weird","section":"Hardware","content":" Weird Hardware # PCIe Ramdisk UAD DSP accelerator "},{"id":87,"href":"/engineering/linux/howwework/","title":"Howwework","section":"Engineering","content":" Chapter 5 - Working on how we work # The Terminal | # In the world of programming, embedded development, and electrical debugging you will inevitably need to understand how to use a terminal/command line at some point. While the text only interface can look intimidating, it has some clear advantages. Namely it\u0026rsquo;s significantly faster to use the cli or \u0026lsquo;command line interface\u0026rsquo; version of many tools. Because of the nature of this guide you will be using the terminal frequently, so for convince sake a large amount of information on using it effectively has been moved to Appendix A, I highly recommend you read though it after you finish this page.\nTake particular care to get used to the navigation shortcuts, such as ctrl+←/→ and tab completion.\nI can not recommend getting autojump (or something equivalent) setup early strongly enough, as it makes navigating around the terminal much faster.\nA bumpy road # With that out of the way, I want to preface this chapter with a big warning: Getting used to everything we\u0026rsquo;re about to do will be a pretty big leap. There\u0026rsquo;s a good chance you\u0026rsquo;ve never used a computer that works in a way like we\u0026rsquo;re going to be setting up.\nYou might, rightfully, be asking\nThen why would I do any of this? To which there\u0026rsquo;s only one answer:\nGOTTA GO FAST # While there\u0026rsquo;s about a billion skills that are relevant being good at using a computer, programming, etc. chief among them is being able to get what is in your head into the computer and get stuff from the computer into your head as quickly as possible. Because of this, you need to make the interface as fast as possible. Generally, this comes down to making your keyboard be the ultimate data input and navigation weapon. How can you do this?\nKnowing shortcuts Using tools with even more shortcuts Typing fast The enemy of input speed is your mouse. This may sound counter intuitive given how quickly and accurately you\u0026rsquo;re probably capable of whipping your mouse around your screen, but then think about just how much using on on screen keyboard with a mouse is!\nAlmost all of my suggestions about gaining this speed and improving the bandwidth between your brain and your computer come down to using your mouse as little as possible.\nA quick reminder for those following along with this guide, # How do I install packages on Arch again? If you\u0026rsquo;ve been following along with this guide, you should now have a functional Arch Linux setup; however, it may have been some time since you did those steps, so as quick reminder for how to install programs:\nyay followed by the name or description of a package you want will help you find most packages.\nFor example, running yay i3 wm will come up with multiple numbered results. Here I could type 2 followed by pressing enter to install i3-wm. Whenever possible, you should prefer packages in core, community, or extra. (or any other repositories you\u0026rsquo;ve added to your /etc/pacman.conf file) over the AUR, as packages in the AUR are maintained to a slightly lesser standard and are often a bit more annoying to update. The AUR is still much better than trying to download a package from some random webpage. Keep in mind yay is a wrapper for pacman and can download AUR packages (pacman itself can\u0026rsquo;t), but you can always still use pacman directly. yay will call sudo for you internally to request your password, pacman requires it up front, so to do most operations you\u0026rsquo;ll actually need to use sudo pacman. To update, just run yay\npacman -F name-of-program-here will let you know what package provides what program.\nFor example pacman -F lsblk will tell me that the lsblk command comes from the util-linux package. sudo pacman -R name-of-package will let you remove a package/program.\nFor more info, read the ArchWiki page on Pacman and the AUR.\nKeyboard driven applications # The most obvious thing to make more keyboard driven is your web browser. You can go all in on this with something like nyxt but unless you really want to have a bad time with compatibility, I wouldn\u0026rsquo;t actually advise that. Instead knowing normal browser shortcuts (ctrl+t to open a tab, ctrl+ shift+t to restore the last closed tab, ctrl+w to close a tab, etc.), using a browser with a command pallet (like Vivalid\u0026rsquo;s Quick command - but bind it to a good shortcut) and setting up vimium is a much better bet. Once you get used to it you\u0026rsquo;ll wonder how you lived without it.\nCode editors # People get defensive about the way they work, and frequently try to claim the way they work is the best way. I of course know that my way is the best 😉. Really though, it\u0026rsquo;s mostly a matter of settling down into a good workflow and getting very fast with it.\nI have three recommendations for code editors, as silly as that may seem.\nThe first two are terminal based nano and vim\nnano, is the most simplistic of all the editors I\u0026rsquo;ll list here. It\u0026rsquo;s stupid simple to use and for quick just opening a text file and changing one line, probably the fastest. It clearly prints it\u0026rsquo;s instructions at the bottom of the terminal:\nwhere ^ is the ctrl key, and M the alt key. However, you\u0026rsquo;ll quickly find nano rather limiting. You\u0026rsquo;ll still probably need to use it when you\u0026rsquo;re stuck with only having command line access though. That brings me to my second recommendation, vim (or ox). Unfortunately, vim is notoriously difficult to use, to the point that trying to exit vim is a bit of a joke (it\u0026rsquo;s esc→:wq) this tutorial is pretty good though, and if you want you can get some really nice extensions for vim, or full on plugin packs, like spcaevim.\nOf course, you probably don\u0026rsquo;t want to always use a terminal-based text editor (though you should be able to when you have to) so what\u0026rsquo;s good graphically?\nDespite it being a Microsoft thing, I really recommend Visual Studio Code. It\u0026rsquo;s slowly becoming the default for development for many languages and for good reason. It\u0026rsquo;s fast, extensible, and very configurable. Plus if you put in the time to learn the short cuts, nicely keyboard driven. If you\u0026rsquo;re not okay with Microsoft living in your editor, you can grab vscodium instead.\nWhile VSCode is nice, it\u0026rsquo;s still rather different from the Integrated Development Environments (IDE) that have been common for many years. I recommend you try out a few IDEs, especially if for some unholy reason you want to write in Java. It\u0026rsquo;s relatively common to be stuck in some specialty IDE for a given processor if you get into embedded development.\nThere are of course a ton of other options, Emacs, Eclipse, Clion, PyCharm, etc… If what I recommended doesn\u0026rsquo;t suit you, feel free to look into these. Regardless, a text editor should be pretty high up on your list of things to get setup, as it will make the latter steps much easier. I can\u0026rsquo;t stress enough how important it is that you learn your text editor well though, as mentioned in 10.4 - Getting to know our tools Alright, some disclosure. I don\u0026rsquo;t really use Vim. I only use nano and VSCode. This is because if I really need to edit something in a CLI (so on a remote server or when first getting a system running) it\u0026rsquo;s almost always the case that it\u0026rsquo;s either a quick n\u0026rsquo; dirty config file edit that nano is fine for or something complicated enough to justify the annoyance of bringing the file off the server, using VSCode, then uploading it again. Often, I don\u0026rsquo;t even need to do that though, as I\u0026rsquo;m able to edit the file in VSCode using VSCode\u0026rsquo;s Remote Development plugin or just connecting with sshfs. That said, I did still learn vim well enough that I can use it if it is the only editor available, and do still recommend learning it as in a lot of professional contexts the servers will not have these modern conveniences. The Desktop Environment # This is the biggest change, I\u0026rsquo;m going to recommend switching from KDE, which we installed when we setup arch, to i3-wm. i3 is a tiling window manager, this means it looks something like this:\nThis is a screenshot of i3-wm with 4 windows open: two instances of Typora (the program I\u0026rsquo;m writing this in), and a file manager (Thunar), a terminal (deepin-terminal-gtk) running ncmpcpp which is what I use for music. The Typora windows are being tabbed by i3 (it\u0026rsquo;s a bit hard to see, but there\u0026rsquo;s two big tabs at the top of the Window). What\u0026rsquo;s cool about i3 is how it will always use space as efficiently as possible by tiling the windows, and you can navigate between the windows (or multiple monitors) entirely by keyboard (mouse still works obviously) and open multiple virtual workspaces. When programming and using a computer for advanced things it\u0026rsquo;s not uncommon to have a dozen windows open and having things organized like this can be a life saver. Plus, as I showed with the typora tabs, programs can also be tabbed instead of tiled, so I could have one tab of firefox, one of typora, and one of a terminal, so they\u0026rsquo;re all still maximized but I can get between them quickly, and these tabs can be mixed with the tiles, as in that screenshot.\nAlright, so i3-wm is great, right? Well yes, but…\ni3, when first installed, is very, very minimal, it will greet you with a plain black bar and clicking with either mouse button anywhere will do nothing. You should, however, be able to open a terminal by using your modkey (probably the windows or alt key) and enter.\ni3 actually comes in a bunch of separate parts, the most important of which are the window manager itself, the status bar, and the task runner.\nThe window manager is the thing that actually manages the windows, this is the part most people are referring to when talking about i3 (assuming they\u0026rsquo;re not talking about an i3 Intel CPU) and is sometimes refereed to as i3wm. A very popular \u0026lsquo;fork\u0026rsquo; of i3 is i3-gaps which is available in the community repository. It just addes slight gaps at the edge of the screen and between tiled applications for visual clarity. You can customize these gaps to be how ever big or small you want.\nOn top of the raw window manager you\u0026rsquo;ll probably want a status bar of some kind. While the default i3bar which is included with the i3-gaps package is fine when paired with i3status, it does leave a bit to be desired. Many other options are available. I personally use polybar though I have friends that have used lemonbar or i3blocks.\nFinally you\u0026rsquo;ll want a runner/application launcher. While i3-demu is the default, I find it rather annoying to use, and much prefer rofi \u0026ndash; this is much better explained here than I can briefly: https://github.com/davatorium/rofi\nTo further make i3 reasonable to use you\u0026rsquo;ll want a few more things:\npicom is a composite manager. This is used to allow application to have some transparency, prevent screen tearing, and does slight effects, like a shadow behind windows. (You may also see this referred to as Compton, picom is the replacement for Compton)\nlxappearance-gtk3 can be used to set the theme used by various graphical applications. I use Sweet but there are nearly endless options\nFor setting the wallpaper (which you probably wont see much) you can use nitrogen or feh.\nif you have multiple monitors before setting the wallpaper though you\u0026rsquo;ll probably want to arrange your monitors correctly, for this you can use xrandr , read the man page for more information. You can add the command you use to set up your displays to your i3 config file to apply them at each reboot. If you\u0026rsquo;re having issuse with xrandr you may want to use arandr to make the initial config file.\nif you have a high resolution monitor and things are small, you may want to look here: https://wiki.archlinux.org/index.php/HiDPI , the best thing from this is to add the text on the right to your /etc/environment file. 1 2 3 4 QT_QPA_PLATFORMTHEME=qt5ct QT_AUTO_SCREEN_SCALE_FACTOR=1 GDK_SCALE=2 ELM_SCALE=1.5 You\u0026rsquo;ll be needing quite a few different utilities beyond this. for a terminal I highly recommend kitty, rxvt-unicode, or Alacritty, though I actually use deepin-terminal-gtk.\nFor fonts you\u0026rsquo;ll certainly have your own tastes, but I really like Droid Sans Mono, which is in ttf-droid, but ttf-hack and otf-fira-code are pretty cool too. I also recommend installing noto-fonts, noto-fonts-extra, and ttf-font-awesome. The noto packages will provide coverage for weird characters and font awesome is basically icons saved as a font, and many open source projects use it. You\u0026rsquo;ll also probably want nerd-fonts-complete which is in the AUR.\nActually configuring i3, polybar, etc. # Alright, so I just spit a lot of information at you, let\u0026rsquo;s put some of it to use.\nThe first thing we need to do is get everything installed. If you followed the install guide in Chapter 2, you should have either installed ssdm and kde or lightdm and mate. I had you start with those because they\u0026rsquo;re at least somewhat familiar to most people in how they work. Fortunately, display managers like ssdm and lightdm will let you choose the environment you log into, so for now we can leave everything in place, and just login to it later.\nI\u0026rsquo;m going to give the list of what I want when I get a system set up, you probably won\u0026rsquo;t use all of these right away, but you\u0026rsquo;ll likely need them at some point. Before you do this though, make sure you\u0026rsquo;ve enabled multilib in /etc/pacman.conf, and update (just run yay).\ni3-gaps, rofi, picom ,polybar(AUR), lxappearance-gtk3, kitty, deepin-terminal-gtk, polkit-gnome, thunar, nautilus, mpd, ncmpcpp, evince, vivaldi, vivaldi-ffmpeg-codecs, firefox, pavucontrol, krita, libreoffice-fresh, nomacs, feh, typora (AUR), gparted, deepin-screenshot, audacity, vlc, kicad, obs-studio, wine, firewall-d, zsh, tldr, autojump (AUR), bat, lsd, duf, htop, progress, youtube-dl, hexyl, fzf, optipng, jpegoptim, speedcrunch, caffeine-ng, redshift\nif you want to game, you\u0026rsquo;ll probably want steam too. I recommend using steam-native-runtime and installing steam-fonts. Steam also provides \u0026lsquo;proton\u0026rsquo; which is like wine on steroids. It makes a huge number of Windows games work with no added effort.\nWhat are all of these things??? Name Use i3-gaps The thing that tiles and tabs windows, draws the title bar on windows, handles window open/close events, resizes windows, etc. Literally the Window manager. rofi The \u0026lsquo;runner\u0026rsquo;, opens a window for you to type the name of a program you want to run into picom The \u0026lsquo;compositer\u0026rsquo; - prevents weird graphical bugs, lets you use transparency and shadows, etc. polybar provides the bar at the bottom of the screen lxappearance-gtk3 Lets you change the theme of graphical programs kitty Terminal emulator deepin-terminal-gtk Another Terminal emulator polkit-gnome allows graphical programs to request your password thunar file manager nautilus another file manager, a bit slower to use but handles remote connections well mpd the \u0026lsquo;sever\u0026rsquo; side of the music player I like ncmpcpp the \u0026lsquo;client\u0026rsquo; side of the music player I like evince pdf++ viewer vivaldi my web browser of choice vivaldi-ffmpeg-codecs lets you watch youtube videos without the browser shitting itself firefox spare web browser. Trust me. You want two. pavucontrol volume control krita art program libreoffice-fresh Word, Excel, etc. alternative. Can open word docs. nomacs good image viewer, with some editing capabilities feh minimal image viewer typora markdown document editor gparted storage manager (reformatting hard drives, etc.) deepin-screenshot Screenshot with some editing built in. audacity audio editor vlc media player (video++) kicad PCB design software obs-studio screen recording++ wine run windows programs on Linux. do not use this for driver software, bios updates, etc. firewall-d Firewall service and config program zsh shell, better than bash autojump make shell navigation faster bat better in-terminal file preview lsd better in-terminal file listing duf quick disk usage viewer ncdu disk usage analyzer, find what\u0026rsquo;s filling your entire disk htop like Task-manager on steroids progress view progress of a running terminal app youtube-dl download videos/gifs from basically any website hexyl hex-dump file fzf dependency for many other things, useful to make quick terminal menus optipng \u0026amp; jpegoptim lossless shrink of image file sizes speedcrunch fast to use calculator program caffeine-ng ability to turn off screensaver/suspend from tray redshift bluelight filter to prevent your eyes from bleeding This might work, but also might not, installing packages in bulk fails sometimes\n[TODO] one-liner install with \u0026ndash;needed\nFirst things first, lets get switched over to zsh and setup oh-my-zsh and autojump.\n[TODO]\nPop open your text editor to work on your ~/.config/i3/config file, and go ahead and open up the i3 User\u0026rsquo;s Guide in a browser for reference. We\u0026rsquo;re gonna get cookin\u0026rsquo;.\n[TODO]\ninside your i3 config file you may want to set specific actions to take place based on a window\u0026rsquo;s name (bind all social applications to a social workspace for example) to do this you\u0026rsquo;ll need to get the windows class using a tool like xprop\nCustomization Resources # If you\u0026rsquo;re looking for more ways to make your setup the best it can be or config files you can steal from check out r/unixporn.\n[TODO] https://github.com/mjswensen/themer\nThe Physical Environment \u0026amp; Hardware # Working on a laptop with a mushy membrane keyboard is totally fine for some people, but when you\u0026rsquo;re deep into some complicated work having the best possible setup can save a lot of time, frustration, and mental overhead.\nFurthermore, the work environment can change how long you can work for and how productive your work time really is. Be it for comfort or productivity, there are many reasons to take care in making sure you\u0026rsquo;re setup is right for you.\nIf you are on a laptop some of the following is still applicable, but consider how any of what I\u0026rsquo;m about to mention may be adapted to your own setup.\nDisplays\nThe way you use your monitor is more important the monitor itself. Don\u0026rsquo;t get me wrong, if you have an 11\u0026quot;, 4:3 aspect ratio monitor running though VGA there\u0026rsquo;s a limited amount you can do, but there\u0026rsquo;s still some things.\nFirst and foremost is positioning. I\u0026rsquo;ve helped many a office worker complaining about neck and back pain simply by raising their monitor closer to eye level. Ideally you want your eyes to naturally rest right on the on the top 3rd line of your screen, about the level where the left-most knob is on the wallpaper on my right-most monitor in the picture above.\nUnfortunately, there is no magic rule for how far away your monitor should be from your face, as this highly depends on your vision, monitor\u0026rsquo;s resolution, and size\non this note, you\u0026rsquo;ll often hear monitors described by their dots per inch, this is a measure of the number of pixels in a square inch on the screen, the higher this is the finer the details, but the smaller any given element on screen will be. Apple\u0026rsquo;s Retina displays for example have a high DPI rating, which is a large part of the reason they look so good\nI personally have my three, 4k (that\u0026rsquo;s 3840×2160, or 4 times the resolution of 1080p) monitors positioned approximately 30 inches from my eyes.\nBefore moving forward though, I think it would make sense to talk about some of this display terminology. With that, I present far too much information condensed into one box:\nAspect Ratio Aspect ratio is the ratio is the ratio of the width to the height of the screen, most modern screens are 16:9, or have 16 units of width for every 9 units of height. Most older displays, often now called square screens, are actually 4:3. Many people actually still prefer this for the extra vertical room it affords at a given size, and some laptops are actually moving back to a more \u0026lsquo;square\u0026rsquo; aspect ratio. On the other hand more exotic ultra-wide displays are also coming out\nSizing of displays is a bit odd. A 27\u0026quot; 16:9 display, is not the same size as a 27\u0026quot; 4:3 display as displays are measured diagonally.\nResolution Resolution of a display refers to the number of pixels, HD technically starts at 720p, or 720 pixels across, though this is generally rather low by modern standards, with acceptable usually considered 1080p, which is technically 1920×1080. You may also see 1080i, this is a strange concept, not actually related to resolution, but more to refresh rate. Interlaced Video (Wikipedia)\nQHD is 1440p and 4k (ignoring the mess of naming there) is usually 2160p. I recommenced against 1440p unless the system is mostly for gaming, as scaling from most content that is in 1080p to 1440p is awkward compared to the direct 2x scaling with 1080p to 2160p\nInterface The interface on your display matters greatly as well, the most common at the are HDMI, Display Port, DVI, and VGA\nVGA is the worst option here, as it\u0026rsquo;s an analog signal. This means the signal can do strange things, getting corrupted between your computer and the monitor. Typically this is a blue, screw in connection with many pins\nDVI is still pretty common and looks like an even larger VGA connection, with a typically white, screw in connector. This signal is normally digital, though there is a varient of DVI that can be adapted into VGA. Of note, DVI can also be adapted to HDMI though you will not have audio, as DVI does not carry sound\nHDMI, probably the most well known connector, has multiple revisions, the revision determines many things such as the maximum resolution, refresh rate, and weather or not more obscure things such as HDR are supported. HDMI is usually considered the best of these three options\nTaking the crown however, is Display Port (DP). Like HDMI display port does have multiple revisions which do differentiate similar things; however, Display Port will generally support high resolutions and more features at any given point. Assuming you\u0026rsquo;re running a bog-standard 60hz 1080p display however, you\u0026rsquo;ll find no difference between DVI, HDMI, and DP - unless you need sound.\nRefresh Rate Next, you\u0026rsquo;ll want to note the refresh rate of your monitor. This is how many times per second your monitor refreshes the screen. Typically monitors run at 60hz and TVs at 30 or 60. Because unlike a TV you\u0026rsquo;re causing things on screen to change though, 30hz is generally considered bad and can even cause motion sickness. While 60hz may be standard, going for something even higher, with many displays offering well above 120hz, is something you may want to consider, especially if you plan on gaming.\nNewer displays may support Freesync or Gsync, and both of these technologies require a supported graphics card in the system as well. These allow the display and computer to adaptively change the refresh rate so the monitor and computer both send and display frames in sync, which can make even a low refresh rate \u0026lsquo;feel\u0026rsquo; much higher. This is a feature typically marketed to gamers and only supported in video games, but this has been changing. Gsync monitors generally have a much better implementation of the technology but it requires an Nvidia graphics card. As of the time of writing both Freesync and GSync are supported on linux, but quite rough around the edges.\nLatency Related to refresh rate is latency. In general this can actually mean two things, one is how long it takes for an image sent to the screen to actually be displayed. The lower this time the better, with good screens being sub 10 millisecond. Unfortunately, there\u0026rsquo;s no standard among the industry to measure this and many get it wrong.\nAlso with latency there\u0026rsquo;s grey to grey times, this is a measure of how long it takes a pixel to go from one shade to another. The lower this is the less motion blur the screen will exhibit.\nColor Depth The color depth of the display determines how precisely a color may be displayed. The higher this is the better, but almost all modern displays will be the same, and unless you\u0026rsquo;re an artist or creative professional you\u0026rsquo;re unlikely to notice a difference\nOn the other hand, you are likely to notice the color gamut or what range of colors the display is actually capable of displaying.\nFor example, two displays may both be capable of displaying 255 levels of red, but if one display\u0026rsquo;s range is only from a dingy red to a dark-ish red, while the other is from a brilliant red to a deep dark red, there\u0026rsquo;s a massive difference in color availability. If this is important to you, notably as a creative professionally in photo or video, you may want to read more at https://en.wikipedia.org/wiki/Gamut\nDynamic Range The next obvious thing to mention is dynamic range, or how deep the blacks are and how vivid the whites are. Again, this is simple, the higher the better. Many display types (LCD, TN-Panel) will have similar specifications in all these areas, but particularly here. OLED is probably the best when it comes to dynamic range as it can display true black by actually turning the source of the light off, but unfortunately these are quite susceptible to burn in and image persistence.\nActually, display technology overall (OLED, LCD, TN, CRT, etc.) will have more of an impact than anything else. But, this is also getting really into the weeds, and I don\u0026rsquo;t want to recommend one technology over the other since depending on many other factors on each display theres no clear winner, as everything is a trade off - OLED is probably the best as it can display true black by actually turning the source of the light off, but it suffers from bad burn in, plus moving the image quickly can result in a \u0026lsquo;purple smear\u0026rsquo; - something you may have noticed when scrolling though images on your phone. You probably won\u0026rsquo;t find an OLED monitor for sale anyways because of this. Great for movies, but when you have un-changing elements on screen for hours at a time it\u0026rsquo;s not ideal.\nThere are some newer displays which feature HDR or High Dynamic Range, which allows the panel to selective change the brightness in an area of the screen, giving much better dynamic range in supported applications than a normal display\nBurn in burn in and image persistence are both negative effects on many displays where a pixel either permanently or temporarily resists change in color. This can lead to being able to read previously displayed bright white text on a now black image for example. More commonly you\u0026rsquo;ll find TVs which have a particular station\u0026rsquo;s logo \u0026lsquo;burnt in\u0026rsquo; to one corner of the screen, persisting even after changing channels Brightness Brightness is obvious, how bright or dim is the display. The big thing to note here is weather the brightness is PWM or DC controlled. Displays with PWM controlled brightness are much more common, however, it\u0026rsquo;s a bit of a cheat. Instead of actually changing the intensity of the back light directly, they\u0026rsquo;re simply strobing the light on and off to fast for the eye to see. This can cause eye strain over time though, and generally DC control, which actually does change the brightness directly is preferred. If you have a PWM display and don\u0026rsquo;t mind it at full brightness, this should help with eyes strain, as there is no longer a strobe effect as the display\u0026rsquo;s backlight is just constantly on. Subpixels Finally, if fonts look bad on a screen, it may be due to Sub-pixel rendering. Basically, while most screens pixels go R-G-B in order, not all do. To make text look sharper, most font renders will try to abuse this sub-pixel order to get sharper-than-pixel fonts. This is adjustable in lxappearence on Linux, and should be handled by setting up \u0026lsquo;ClearType text\u0026rsquo;. clearly there\u0026rsquo;s a lot to be considered here. A no compromise monitor can cost thousands of dollars, but nice 4k 27\u0026quot; monitors like mine can be found for \u0026lt;250 on sale, and I love them. Just figure out what you need and what would be the most beneficial for you and work from there.\nOne of the great things about i3 is how powerful it can be with multiple displays, though even if you\u0026rsquo;re not using i3 having a \u0026lsquo;multi head\u0026rsquo; setup can be a god send for productivity. Even if your monitors don\u0026rsquo;t match it\u0026rsquo;s worth it. If you have the budget to get two matching monitors, great, if not just getting a cheapo used monitor from a thrift store will be a massive improvement. I think 2 is the magic number for most people. 3 monitors take up a lot of room and unless you do some very multi-tasked things you won\u0026rsquo;t see much benefit that using something like i3\u0026rsquo;s workspaces wouldn\u0026rsquo;t provide anyways.\nAnother thing to mention is red-light filters. While I dont personally use one many people find that reducing the amount of blue light coming from their displays significant helps with eyestrain. If this interests you give redshift a shot. I use it every now and then if I have a headache.\nKeyboard\nProbably the most important thing you can do for your workspace is getting a nice keyboard. If you\u0026rsquo;re rocking a rubber dome or membrane keyboard, moving to a mechanical keyboard will make a massive difference.\nsource The membrane/rubber dome keyboard on the left doesn\u0026rsquo;t give much physical feedback to your fingers when you press a key, compared to the mechanical key switch on the right. A decent mechanical keyboard can be found on amazon for \u0026lt;50 USD, though as with anything in life the more you spend the better the product. One thing to keep in mind is the color of the switch used. Above you can see that keyboard has blue switches, blue switches have a noticeable \u0026lsquo;bump\u0026rsquo;, that is the switch has a spot of higher resistance before it actually bottoms out, and the key actually presses at this point, furthermore, blue keys are clicky - they are loud and some people find this annoying. Finally, they\u0026rsquo;re also pretty light, not taking too much force to push down. Generally, blues are considered the \u0026lsquo;gold standard\u0026rsquo; among typist, but games on the other hand may prefer a brown, red, or black switch.\nLinear Bump Bump + Click Light Red Brown Blue Heavy Black Clear Green these are the common colors and how they feel for Cherry MX switches. Most other mechanical switches are \u0026lsquo;clones\u0026rsquo; of MX switches- though sometimes these clones are actually superior- but these clones don\u0026rsquo;t always follow this chart\nreally it\u0026rsquo;s all a matter of preference, I\u0026rsquo;m actually using a switch not listed here on my keyboard, but generally finding what you like among the above first is a good place to start. If I\u0026rsquo;m not using my main keyboard I generally use Blues. If you\u0026rsquo;d like to try some out before pulling the trigger on a full keyboard you can find switch test boards for sale online.\nFurthermore, there are other types of switches like IBM\u0026rsquo;s old Model M line which use a buckling spring, which are quite stiff and have a very unique, heavy feeling. If you don\u0026rsquo;t want to use a 20 year old keyboard Unicomp makes clones that are quite nice.\nYou should also consider they layout of your keyboard. Some people absolutely need a number pad while others are happy to omit it and have the shorted hand travel to their mouse. Even still others want an extravagant number of keys or a weird split keyboard like mine:\nThis is a custom built ErgoDone keyboard, The Ergodox-ez can be purchased for ~300 USD, or you can build one like mine for a bit under 200\nr/Mechancial Keyboards is a good place to go for inspiration and more information\nBeyond the physical layout you may also consider the keymap or software layout. Not only does my keyboard look weird, but the keys aren\u0026rsquo;t arranged as you\u0026rsquo;d expect either. Instead of typing in QWERTY, I actually use Dvorak. That layout looks a like this on a normal keyboard: though obviously anything is possible. A lot of programmers like to disable their Caps key for example and put something more useful there, or you may just want to move around a letter or two. Using a standard layout like Dovark is a bit easier though as I can easily load my keymap pretty quickly on any computer. Plain old Qwerty is fine, but I personally like my \u0026lsquo;weird\u0026rsquo; keymap.\nIf you\u0026rsquo;re shelling out big bucks on a nice keyboard anyway, you may also want to get a keyboard which supports QMK, a completely open source firmware which gives you total control of your keyboard, allowing you do to cool things like type greek letters ( Ω , α, β) or type parentheses by tapping the shift keys. I find that particularly helpful as my keyboard doesn\u0026rsquo;t actually have enough keys to do have every key nicely available (note how I don\u0026rsquo;t have a function row) for more info check out https://docs.qmk.fm/#/ . You can actually buy an adapter to use a normal keyboard with QMK, but it\u0026rsquo;s a bit hack-y and I really recommend just saving up to get a full keyboard made for it.\nBack to ergonomics, you\u0026rsquo;ll want to make sure your keyboard is a t a comfortable height for you and that you can type in a way that isn\u0026rsquo;t putting your wrists at any weird angles\nFinally, one of the nice things about i3 is the ability to navigate everything entirely from the keyboard as well as bind as much as you want to as many keys as you\u0026rsquo;d like. Want a key combo to launch a file manager? easy. Want a key to navigate to open up a terminal and immediately run a command- no problem. Set things up as you like and enjoy being able to use your system at break neck speed while everyone else drags things around slowly.\nMouse and other input\nSpeaking of dragging things around slowly: The mouse\nSound\nNoise isolation both electrical and physical, headphone types (over, on, in), amplifiers, dacs, ASIO/ sound hardware, connection types\nThe Desk and Chair\nLighting\nAir Quality\nThis Is Your Brain On Stale Air (YouTube)\nVarious Programs: # Markdown\n[TODO]\nMarktext, Typora, colabrative editing, GitHub markup, etc\nTaskwarrior \u0026amp; Timewarrior\n[TODO]\nTaskweb\nFile Explorers \u0026amp; Storage Managment\n[TODO]\nRanger, Thunar, Nautilius, Baobab, Gparted\nif you use Nautilius, you may want to run\n1 dconf write /org/gnome/nautilus/preferences/always-use-location-entry true so that the file paths are displayed in full\nMedia (Music, Video, PDF,)\n[TODO]\nhttps://sioyek.info\nOffice \u0026amp; Creative Software\n[TODO]\nMasterplan\nhttps://github.com/climech/grit\nLibreoffice\nKrita\nAudacity\nDAW? QJackCTL?\nOBS\nKiCad\ndarktable\nEvince\nFeh, nomacs\nWine\nBoxes- vm\nasciiflow\nPackage managment\n[TODO]\nPamac, Steam, AppImg, itch.io, dpkg, snap.\nmaintaining an aur package, pacman conf stuff\nWeb and network protocols\n[TODO]\nVivaldi, Firefox, Syncthing, Beaker, IPFS, IRC - irssi, Telegram, Etherape, Wireshark, gufw,\nGoogle Images Restored\nhttps://nyxt.atlas.engineer\nShell Scripts\n[TODO]\nTools for accessibility # https://joshwcomeau.com/accessibility/hands-free-coding/\nLil\u0026rsquo; shoutout\nI\u0026rsquo;ve stolen a lot of config files from r/UnixPorn and other websites over the years, but I\u0026rsquo;d espically like to highlight https://twily.info as twilly actually helped me out a lot when I was a total noob and even helped me steal her website to make my own clone of it at one point\nPlatfromIO is for working with embedded hardware like Arduino or STM32, etc. Unfortunately, it opens an annoying screen at start up. This can be disabled, but at least in the past this has caused other issues for me. If you do work with embedded hardware though it's still by far the best option as the normal ArduinoIDE is absolute trash. Gaming? # https://github.com/AdelKS/LinuxGamingGuide\n"},{"id":88,"href":"/engineering/linux/linuxdirtree/","title":"Linuxdirtree","section":"Engineering","content":" Chapter 4 - Getting Rooted In Linux # We\u0026rsquo;ve been using file in /proc and /dev throughout this, but we never really looked to see what else is in there. Let\u0026rsquo;s do that.\ngo ahead and open up a terminal and run\n1 2 3 4 5 ╭─vega@lyrae ~ ╰─➤ cd /dev ╭─vega@lyrae /dev ╰─➤ ls [Very, Very Long Output here] Alright, I know what you\u0026rsquo;re thinking.\nWhat. The. Actual. Fuck.\nAnd honestly, yeah. But first, lets talk about what we just did.\nPermissions # if you run ls it normally shows you the all the folders, shortcuts, and files in a directory, except it excludes any hidden files. In linux you can make a file or folder hidden simply by naming the folder with a \u0026lsquo;.\u0026rsquo; at the beginning, so naming a folder .nsfw will mark it has hidden. Hidden doesn\u0026rsquo;t really mean much though as most file managers allow you to view hidden files/folders by checking a box, and in this case, we can see hidden items by using the -a flag for ls. running man ls you\u0026rsquo;ll see the -a flag just stands for \u0026lsquo;all\u0026rsquo; and does exactly what I\u0026rsquo;ve said.\nfurther down you\u0026rsquo;ll see the \u0026lsquo;-l\u0026rsquo; flag gives a \u0026ldquo;long listing format\u0026rdquo; which is an almost impressively bad description. This means that on each listing will be displayed like this:\n1 2 3 4 Permissions numOfLinks owner group size month date time name example: drwxr-xr-x 2 vega vega 4096 Jul 7 2018 Documents So let\u0026rsquo;s break that up further. Linux permissions are incredibly powerful, and are set up like this\nd rwx rwx rwx , the d, or lack there of, species weather a file is a directory (folder) or file.\nLess commonly you may see l, c, or b, as we do here in the /dev folder.\nl is the easiest to understand, it\u0026rsquo;s a link or shortcut. That\u0026rsquo;s why you\u0026rsquo;ll see an arrow pointing to where it leads at the end\nc is a character special file, b is a special block file.\nFinally, you may also see either p or | here for named pipes- more about that in a bit too.\nThere are other possibilities here two, of which you can learn about by running info ls\nThe vast majority of the time you will only see d for a director (folder) or - designating a file though.\nMoving on to the rwx blocks, these stand for read, write, and execute respectively and each block in order states the permission of the owner of the file, those that are in the same group as the owner, and everyone else, for this reason these permissions will almost exclusively be set such that permissions are lost with each level, for example a file with\n-rwxr--r-- , is a file (no d), which may be read, written, or if it is a program ran (executed), by the owner, but by anyone else in the same group as the owner or anyone else on the system may only be read.\nThat\u0026rsquo;s why it repeats 3 times, there\u0026rsquo;s three access levels- Owner, Group, and Everyone Else. This mostly harkens back to when Linux boxes were shared servers at a university or business that everyone would remote into. You might want a file to only be modify-able (rw-) by you, only be readable (r--) by people in a shared group (Say, other students of the same class at a University or other managers at a business, etc.), and not even readable by others (---), this would give that file a total permission string of -rw-r-----. There are other uses of groups on systems too, usually for assigning who has access to hardware, like you may find that your user is in group called \u0026lsquo;audio\u0026rsquo; if you run the groups command.\nSo if we changed the permissions on that python file we wrote back in Chapter 2 to be this then while anyone else could see the code, they couldn\u0026rsquo;t run it without making a copy.\nwith that let\u0026rsquo;s skip over the number of links, as I\u0026rsquo;ve never found it particularly useful and jump to the owner and group fields. The owner of a file is a single user, usually the one who created it. The root user is often the owner of important system files, which is why we have to temporarily use root account when we do many admin actions, such as updating or installing programs using sudo.\n(note, yay calls sudo automatically and you should NOT run yay with sudo)\nNext is size, this is pretty self explanatory, as its just the size of the file. Directories do take some space on the disk as they have to store the bit of their own permissions, name, and so on. On this note, directories are a bit strange in regards to the \u0026rsquo;execute\u0026rsquo; flag that was previously mentioned. On a directory, rather than stating if a user can execute a directory (this wouldn\u0026rsquo;t make any sense!) it says weather or not a user can see what\u0026rsquo;s in the directory at all, almost like a lock on a file cabinet.\nNext is the file modification time, finally followed by the items name, both of which are self explanatory.\nTo round this off we need to talk about how to change these permissions using chown and chmod\nchown, as the name implies, changes the owner, note, you need to also have permission to change the owner, so often times this require using sudo as well.\nFor example running\n1 2 ╭─vega@lyrae ~ ╰─➤ sudo chown vega:vega someFile would change both the owner and group to me, vega (assuming I exist on your system)\nbut what if you want to change every file in a directory?\n1 2 ╭─vega@lyrae ~ ╰─➤ sudo chown -R vega:vega someFolder the -R flag (Recursive) means to apply the change to every sub folder and directory\nUsing chmod is pretty easy too, though there are two ways to use it.\nThe first, which is easier to understand is with direct flags such as\n1 2 ╭─vega@lyrae ~ ╰─➤ chmod +x on a file to mark it as executable The other uses the octal system to set flags. Octal has 3 bits:\nOctal Octal Binary Permission 0 000 \u0026mdash; 1 001 \u0026ndash;x 2 010 -w- 3 011 -wx 4 100 r\u0026ndash; 5 101 r-x 6 110 rw- 7 111 rwx Now, you should notice some of those options are nonsenes? being able to write to a file you can\u0026rsquo;t read? being able to execute a file you can\u0026rsquo;t read? In practice this leads to only some of these being used, but I digress to use these in chmod simply run\n1 2 ╭─vega@lyrae ~ ╰─➤ chmod 764 someThing which would set permissions to -rwxrw-r\u0026ndash;\nFinally one last oddity. Using ls -la you\u0026rsquo;ll see two more files that are very strange one named \u0026lsquo;.\u0026rsquo; and another \u0026lsquo;..\u0026rsquo; ; \u0026lsquo;.\u0026rsquo; is actually the current folder, as bizzare as this sounds, effectively when you run a command with \u0026lsquo;.\u0026rsquo; as an argument it is replaced with the full path to the current folder. In practice this isn\u0026rsquo;t used much, but it means running something like cd . just takes you nowhere. I assure you are practical uses though. More relevant is \u0026lsquo;..\u0026rsquo; which is the previous directory. so if you\u0026rsquo;re currently in /a/b/c/d and you run cd .. you\u0026rsquo;ll be taken to /a/b/c\nTo round this conversation off , as previously mentioned, \u0026lsquo;~\u0026rsquo; represents your home directory. This usually means it expands out to /home/yourUsername which can be particualy helpful if you are say, in /dev and want to get to your documents folder you can use cd ~/Documents instead of cd /home/user/Documents\nWith all of that out of the way let\u0026rsquo;s finally look at /dev !\n/dev, the devices folder # Alrighty then, first, a heads up. My /dev folder will have some things yours wont. I\u0026rsquo;m on a desktop with a lot of hardware, drives, input devices, etc. And I\u0026rsquo;ve installed hundreds of programs, some of which interface with the system at a low enough level to necessitate extra files in here. For that reason some are going to be skipped over. I\u0026rsquo;ll be breaking up the output of ls /dev into a bunch of code blocks below because of how ludicrously large this output is.\n1 2 3 4 5 6 7 8 9 10 11 12 13 drwxr-xr-x 22 root root 4600 Feb 8 06:03 . drwxr-xr-x 18 root root 4096 Jan 26 22:05 .. crw-rw-rw- 1 root root 10, 56 Feb 8 06:03 ashmem crw-r--r-- 1 root root 10, 235 Feb 8 06:03 autofs crw-rw-rw- 1 root root 511, 0 Feb 8 06:03 binder drwxr-xr-x 2 root root 520 Feb 8 06:02 block drwxr-xr-x 2 root root 200 Feb 8 06:02 bsg crw------- 1 root root 10, 234 Feb 8 06:03 btrfs-control drwxr-xr-x 3 root root 60 Feb 8 06:02 bus lrwxrwxrwx 1 root root 3 Feb 8 06:03 cdrom -\u0026gt; sr0 drwxr-xr-x 2 root root 5700 Feb 8 06:03 char crw------- 1 root root 5, 1 Feb 8 06:03 console lrwxrwxrwx 1 root root 11 Feb 8 06:02 core -\u0026gt; /proc/kcore \u0026lsquo;ashmem\u0026rsquo; is something that is on my system as a part of a project with the end goal of running android apps natively on linux called \u0026lsquo;anbox\u0026rsquo; it\u0026rsquo;s still in early development, and is very difficult to run on arch\n\u0026lsquo;autofs\u0026rsquo; is a configurable system for mounting and unmounting storage as it is used\n\u0026lsquo;binder\u0026rsquo; is another component of \u0026lsquo;anbox\u0026rsquo;\n\u0026lsquo;block\u0026rsquo; is a directory which contains numbered links to the file system blocks used previously (such as sda)\n\u0026lsquo;bsg\u0026rsquo; is a directory with files that, again, represent your drives at a hardware level. You can open the bsg folder and run ls followed by lsscsi and compare the outputs to understand. This is practically just an artifact of older systems now.\n\u0026lsquo;btrfs-control\u0026rsquo; is used when you have drives on the system formatted with the btrfs file system, this is a file system that is still in heavy development primarily targeted at storage arrays that are resilient to drive failures\n\u0026lsquo;bus\u0026rsquo; is a folder which contains a folder \u0026lsquo;usb\u0026rsquo; which contains folders for each usb host controller on the system, and then their devices. This is probably the first really cool one we\u0026rsquo;re hitting as you should already be able to see how the system is letting us get data directly. To show this we\u0026rsquo;ll need to have the usbutils package installed so that we can run lsusb. If you do that you should get an output like this\n1 2 3 4 5 6 7 8 Bus 006 Device 003: ID 2109:0812 VIA Labs, Inc. VL812 Hub Bus 006 Device 002: ID 2109:0812 VIA Labs, Inc. VL812 Hub Bus 006 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 005 Device 005: ID 1235:007c Focusrite-Novation Launchkey MK2 49 Bus 005 Device 007: ID 0c45:6340 Microdia Camera ... Bus 005 Device 002: ID 1e7d:2e4a ROCCAT Tyon Black Mouse ... I\u0026rsquo;ve added ellipsis to the output to make it fit here, but you can see there that my mouse is device 002 on bus 005. If you poke around in here it should be pretty obvious how these correlate. Note, that this is just where the system puts info about the device (it\u0026rsquo;s name, etc) not where the communication with the device actually happens (usually*). That\u0026rsquo;s over in /sys which we\u0026rsquo;ll get to more in depth in a bit, but for example here I could go to /sys/bus/usb/devices/5-2 and run cat product for example to get the human readable name \u0026lsquo;ROCCAT Tyon Black\u0026rsquo;.\n\u0026lsquo;cdrom\u0026rsquo; is actually a link to the new location of cdroms- sr0 , but, still, it\u0026rsquo;s use it pretty duh\n\u0026lsquo;char\u0026rsquo; is a folder which contains links to a lot of other things in /dev for use with legacy things\n\u0026lsquo;console\u0026rsquo; is again a legacy component and is effectively the same as tty, which is always the current terminal. to be explained more when we get to the tty\u0026rsquo;s\n\u0026lsquo;core\u0026rsquo; a link to /proc/kcore is a direct way to read memory, used mostly for debugging\n1 2 3 4 5 6 7 8 9 10 11 drwxr-xr-x 2 root root 60 Feb 8 06:02 cpu crw-rw---- 1 root realtime 10, 60 Feb 8 06:03 cpu_dma_latency crw------- 1 root root 10, 203 Feb 8 06:03 cuse drwxr-xr-x 8 root root 160 Feb 8 06:02 disk crw-rw----+ 1 root audio 14, 73 Feb 8 06:03 dmmidi4 ... crw-rw----+ 1 root audio 14, 121 Feb 8 06:03 dmmidi7 drwxr-xr-x 3 root root 140 Feb 8 06:03 dri crw------- 1 root root 242, 0 Feb 8 06:03 drm_dp_aux0 ... crw------- 1 root root 242, 4 Feb 8 06:03 drm_dp_aux4 \u0026lsquo;cpu\u0026rsquo; is a folder which contains a character file named mircocode. If you enable msr it can also allow you to r/w model specific registers. I don\u0026rsquo;t even know what this means. You\u0026rsquo;ll never work on this directly, moving on.\n\u0026lsquo;cpu_dma_latency\u0026rsquo; is something to do with making sure changing between power states (sleep) doesn\u0026rsquo;t take to long, otherwise the system will just refuse to do. Not used directly by anyone really\n\u0026lsquo;cuse\u0026rsquo; is fuse for character devices, ref fuse below\n\u0026lsquo;disk\u0026rsquo; is the way most modern things access the disk, with separate folders for by id, label, path, or uuid\n\u0026lsquo;dmmidi\u0026rsquo; is for MIDI or Musical Instrument Digital Interface devices. I have multiple on this system.\n\u0026lsquo;dri\u0026rsquo; contains links to your graphics cards, this is part of the direct rendering manager for video things (3D, games, etc)\n\u0026lsquo;drm_dp_aux\u0026rsquo; each represent an output from the GPU, so think of these as the actual cables between the monitor and the computer\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 crw-rw---- 1 root video 29, 0 Feb 8 06:03 fb0 lrwxrwxrwx 1 root root 13 Feb 8 06:02 fd -\u0026gt; /proc/self/fd crw-rw-rw- 1 root root 1, 7 Feb 8 06:03 full crw-rw-rw- 1 root root 10, 229 Feb 8 06:03 fuse crw------- 1 root root 254, 0 Feb 8 06:03 gpiochip0 crw------- 1 root root 254, 1 Feb 8 06:03 gpiochip1 crw------- 1 root root 240, 0 Feb 8 06:03 hidraw0 ------------------------------------------------------------------------------------ to make this output shorter I stripped out hidraw 1-5,10-12 ------------------------------------------------------------------------------------ crw-rw----+ 1 root root 240, 6 Feb 8 06:03 hidraw6 ------------------------------------------------------------------------------------ to make this output shorter I stripped out hidraw 7-9 ------------------------------------------------------------------------------------ \u0026lsquo;fb0\u0026rsquo; is your framebuffer - I can\u0026rsquo;t do this justice https://www.kernel.org/doc/Documentation/fb/framebuffer.txt, in practice you\u0026rsquo;re unlikely to ever use this, but it\u0026rsquo;s very good to know\n\u0026lsquo;fd\u0026rsquo; is for file descriptors, which are now in /proc this is part of how the system internally handles file reads and writes\n\u0026lsquo;full\u0026rsquo; literally just returns no space left when accessed, used to test how a program responds to a disk full error\n\u0026lsquo;fuse\u0026rsquo; Filesystems in User Space is a system which allows for interesting virtual drives (think things like GoogleDrive) to be accessible to the native system among other things. This is a very heavily used part of the system and worth a deeper look if you\u0026rsquo;re interested\n\u0026lsquo;gpiochip\u0026rsquo; is for general purpose input/output like with exposed pins that can be used on development board such as the raspberry pi\n\u0026lsquo;hidraw\u0026rsquo; is for raw communication with Human Interface Devices (mouse, keyboard, gamepad) and allows for custom drivers, like those necessary for RGB backlit keyboards\n1 2 3 4 5 6 7 8 9 10 11 crw-rw---- 1 root realtime 10, 228 Feb 8 06:03 hpet drwxr-xr-x 3 root root 0 Feb 8 06:03 hugepages crw------- 1 root root 10, 183 Feb 8 06:03 hwrng lrwxrwxrwx 1 root root 12 Feb 8 06:03 initctl -\u0026gt; /run/initctl drwxr-xr-x 4 root root 880 Feb 8 06:03 input crw-rw-rw- 1 root render 241, 0 Feb 8 06:03 kfd crw-r--r-- 1 root root 1, 11 Feb 8 06:03 kmsg crw-rw-rw- 1 root kvm 10, 232 Feb 8 06:03 kvm drwxr-xr-x 2 root root 60 Feb 8 06:02 lightnvm lrwxrwxrwx 1 root root 28 Feb 8 06:03 log -\u0026gt; /run/systemd/journal/dev-log crw-rw---- 1 root disk 10, 237 Feb 8 06:03 loop-control \u0026lsquo;hpet\u0026rsquo; \u0026ldquo;High Precession Event Timer\u0026rdquo; is for internal timer-y things\n\u0026lsquo;hugepages\u0026rsquo; - read this https://wiki.debian.org/Hugepages , these are actually pretty important as they can make a large impact on performance, especially with virtual machines\n\u0026lsquo;hwrng\u0026rsquo; hardware random number generator, rarely used directly, often not trusted due to known faults, typically used though the soon to be mentioned \u0026lsquo;urandom\u0026rsquo; interface - https://main.lv/writeup/kernel_dev_hwrng.md\n\u0026lsquo;initctl\u0026rsquo; part of the init system, just dont touch it\n\u0026lsquo;input\u0026rsquo; is a directory which contains links to all input devices, going to /dev/input/by-id can explicitly tell you how some devices are connected, and can be a way to extract input form devices for input in your own programs\n\u0026lsquo;kfd\u0026rsquo; has little documentation- appears to be for AMD GPU accelerated compute\n\u0026lsquo;kmsg\u0026rsquo; is the i/o of dmesg which itself is the main system log\n\u0026lsquo;kvm\u0026rsquo; is the kernel virtual machine, used for running virtual machines. We\u0026rsquo;ll talk about this more much later.\n\u0026rsquo;lightnvm\u0026rsquo; use for NVMe drives\n\u0026rsquo;log\u0026rsquo; no shit, access using sudo journalctl\n\u0026rsquo;loop-contol\u0026rsquo; - http://man7.org/linux/man-pages/man4/loop.4.html, effectively used to mount images or other file systems to be read as a separate block device\n1 2 3 4 5 6 7 8 9 10 11 12 drwxr-xr-x 2 root root 60 Feb 8 06:03 mapper crw-rw---- 1 root video 239, 0 Feb 8 06:03 media0 crw-r----- 1 root kmem 1, 1 Feb 8 06:03 mem crw------- 1 root root 10, 57 Feb 8 06:03 memory_bandwidth crw-rw----+ 1 root audio 14, 66 Feb 8 06:03 midi4 crw-rw----+ 1 root audio 14, 82 Feb 8 06:03 midi5 crw-rw----+ 1 root audio 14, 98 Feb 8 06:03 midi6 crw-rw----+ 1 root audio 14, 114 Feb 8 06:03 midi7 drwxrwxrwt 2 root root 40 Feb 8 06:02 mqueue drwxr-xr-x 2 root root 60 Feb 8 06:03 net crw------- 1 root root 10, 59 Feb 8 06:03 network_latency crw------- 1 root root 10, 58 Feb 8 06:03 network_throughput \u0026lsquo;mapper\u0026rsquo; is primarily used for LVM systems, https://wiki.archlinux.org/index.php/LVM, which is used for more advance disk management but comes with disadvantages in complexity and inter-OS compatibility\n\u0026lsquo;media0\u0026rsquo; is the i/o file for a webcam\n\u0026lsquo;mem\u0026rsquo; is direct access to the system\u0026rsquo;s physical memory. This is dangerous. There\u0026rsquo;s almost no reason to do this directly, unless you\u0026rsquo;re writing a low level driver\n\u0026lsquo;memory_bandwidth\u0026rsquo; - as the name implies. Rarely used\n\u0026lsquo;midi\u0026rsquo; direct access to midi devices. Documentation on dmmidi vs midi unclear\n\u0026lsquo;mqueue\u0026rsquo; used for interprocess comunnication\n\u0026rsquo;net\u0026rsquo; contains virtual network adapters, will likely contain \u0026rsquo;tun\u0026rsquo; by default, used for interprocess communication in weird ways.\n\u0026rsquo;network_latency\u0026rsquo; and \u0026rsquo;network_thoughput\u0026rsquo; is primary used to specify current minimum necessary requirements for the network, used for power saving on wireless adapters\n1 2 3 4 5 6 7 8 9 10 11 12 crw-rw-rw- 1 root root 1, 3 Feb 8 06:03 null crw------- 1 root root 243, 0 Feb 8 06:03 nvme0 brw-rw---- 1 root disk 259, 0 Feb 8 06:03 nvme0n1 brw-rw---- 1 root disk 259, 1 Feb 8 06:03 nvme0n1p1 brw-rw---- 1 root disk 259, 2 Feb 8 06:03 nvme0n1p2 crw-r----- 1 root kmem 1, 4 Feb 8 06:03 port crw------- 1 root root 108, 0 Feb 8 06:03 ppp crw------- 1 root root 248, 0 Feb 8 06:03 pps0 crw------- 1 root root 10, 1 Feb 8 06:03 psaux crw-rw-rw- 1 root tty 5, 2 Feb 8 16:37 ptmx crw------- 1 root root 247, 0 Feb 8 06:03 ptp0 drwxr-xr-x 2 root root 0 Feb 8 06:03 pts \u0026rsquo;null\u0026rsquo; literally just discards anything it receives. Useful when a command outputs junk when doing things, and getting rid of the junk. \u0026lsquo;/dev/null\u0026rsquo; is referred to regularly in jokes in technical circles\n\u0026rsquo;nvmexxxx\u0026rsquo; the system NVMe storage device(s), will only exist if you have an NVMe solid sate drive\n\u0026lsquo;port\u0026rsquo; used for direct access to i/o ports. Dangerous\n\u0026lsquo;ppp\u0026rsquo; point-to-point protocol. Similar to /net/tun - https://stackoverflow.com/questions/15845087/what-is-difference-between-dev-ppp-and-dev-net-tun\n\u0026lsquo;pps0\u0026rsquo; pule per second provides a pulse once per second\n\u0026lsquo;psaux\u0026rsquo; , ps provides a snapshot of currently running system processes, ps aux, where aux: \u0026lsquo;a\u0026rsquo; is all user processes, \u0026lsquo;u\u0026rsquo; is show user/owner, and \u0026lsquo;x\u0026rsquo; processes not attached to a terminal\n\u0026lsquo;ptmx\u0026rsquo;, pseudo terminal master/slave, used for virtual terminals, like the one\u0026rsquo;s you\u0026rsquo;ve been opening in KDE\n\u0026lsquo;ptp0\u0026rsquo; precession time protocol, links to realtime clock\n\u0026lsquo;pts\u0026rsquo; interval virtual filesystem, used for things like docker. Works closely with \u0026lsquo;ptmx\u0026rsquo;\n1 2 3 4 5 6 7 8 9 10 crw-rw-rw- 1 root root 1, 8 Feb 8 06:03 random crw-rw-r--+ 1 root rfkill 10, 55 Feb 8 06:03 rfkill lrwxrwxrwx 1 root root 4 Feb 8 06:03 rtc -\u0026gt; rtc0 crw-rw---- 1 root realtime 250, 0 Feb 8 06:03 rtc0 brw-rw---- 1 root disk 8, 0 Feb 8 06:03 sda brw-rw---- 1 root disk 8, 1 Feb 8 06:03 sda1 ... brw-rw---- 1 root disk 8, 96 Feb 8 06:03 sdg brw-rw---- 1 root disk 8, 97 Feb 8 06:03 sdg1 brw-rw---- 1 root disk 8, 98 Feb 8 16:37 sdg2 \u0026lsquo;random\u0026rsquo; waits for true randomness and will block things from finishing until enough entropy is generated\n\u0026lsquo;rfkill\u0026rsquo; kills all radio transmission on system\n\u0026lsquo;rtc\u0026rsquo; real time clock, direct access - we\u0026rsquo;ll talk more about real time clocks and time in networking.\n\u0026lsquo;sdxn\u0026rsquo; the \u0026rsquo;normal\u0026rsquo; representation of block devices like HDDs, SSDs, and flash drives to the system. Each number is a partition\n1 2 3 4 5 6 7 8 9 10 11 12 drwxr-xr-x 4 root root 80 Feb 8 06:03 serial crw-rw----+ 1 root optical 21, 0 Feb 8 06:03 sg0 crw-rw---- 1 root disk 21, 1 Feb 8 06:03 sg1 ... crw-rw---- 1 root disk 21, 7 Feb 8 06:03 sg7 drwxrwxrwt 2 root root 80 Feb 8 16:37 shm crw------- 1 root root 10, 231 Feb 8 06:03 snapshot drwxr-xr-x 4 root root 760 Feb 8 06:03 snd brw-rw----+ 1 root optical 11, 0 Feb 8 06:03 sr0 lrwxrwxrwx 1 root root 15 Feb 8 06:02 stderr -\u0026gt; /proc/self/fd/2 lrwxrwxrwx 1 root root 15 Feb 8 06:02 stdin -\u0026gt; /proc/self/fd/0 lrwxrwxrwx 1 root root 15 Feb 8 06:02 stdout -\u0026gt; /proc/self/fd/1 \u0026lsquo;serial\u0026rsquo; contains references to serial devices by id or path\n\u0026lsquo;sgx\u0026rsquo; are mostly just remaps of other devices for legacy support\n\u0026lsquo;shm\u0026rsquo; is for shared memory, to be passed between programs\n\u0026lsquo;snapshot\u0026rsquo; is used for hirenation\n\u0026lsquo;snd\u0026rsquo; sound devices raw access, legacy and probably will not work\n\u0026lsquo;sr0\u0026rsquo; used for optical media\n\u0026lsquo;stderr\u0026rsquo; is the standard error interface, try echo 1 \u0026gt; /dev/stderr - you should see an error return code depending on your terminal setup\n\u0026lsquo;stdin\u0026rsquo; is the standard input interface, try echo hello | cp /dev/stdin /dev/stdout\n\u0026lsquo;stdout interface, try echo hello \u0026gt; /dev/stdout\n1 2 3 4 5 6 7 8 9 crw-rw-rw- 1 root tty 5, 0 Feb 8 15:49 tty crw--w---- 1 root tty 4, 0 Feb 8 06:03 tty0 ... crw--w---- 1 root tty 4, 63 Feb 8 06:03 tty63 crw-rw-rw- 1 root uucp 166, 0 Feb 8 06:03 ttyACM0 crw-rw----+ 1 root tty 4, 64 Feb 8 06:03 ttyS0 crw-rw----+ 1 root uucp 4, 65 Feb 8 06:03 ttyS1 crw-rw----+ 1 root uucp 4, 66 Feb 8 06:03 ttyS2 crw-rw----+ 1 root uucp 4, 67 Feb 8 06:03 ttyS3 TTY\u0026rsquo;s, these are important: # \u0026rsquo;tty\u0026rsquo; the currently active terminal, try echo 1 \u0026gt; /dev/tty\n\u0026rsquo;ttyx\u0026rsquo; are virtual consoles accessible though ctrl+alt+fx, where fx is a function key. You should ben on tty7 by default (maybe? if not you might have to use ctrl+alt+fx on each number until you find your graphical environment again), go ahead and try it now. Note you may need to hold the \u0026lsquo;fn\u0026rsquo; key as well depending on your keyboard.\n\u0026rsquo;ttyACMx\u0026rsquo; or \u0026rsquo;ttyUSBx\u0026rsquo; are attached USB devices that can be accessed as a virtual terminal. This is mostly used for development boards, and we\u0026rsquo;ll be using this later\n\u0026rsquo;ttySx\u0026rsquo; are serial port terminals, rarely used outside of scientific or server gear. The physical connector usually looks similar to VGA cable. Your motherboard may well have a serial port header for adding this even if you don\u0026rsquo;t physically see one available on the outside of the case\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 crw------- 1 root root 10, 61 Feb 8 06:03 udmabuf crw------- 1 root root 10, 239 Feb 8 06:03 uhid crw-rw-rw-+ 1 root root 10, 223 Feb 8 06:03 uinput crw-rw-rw- 1 root root 1, 9 Feb 8 06:03 urandom drwxr-xr-x 2 root root 200 Feb 8 06:03 usb crw------- 1 root root 10, 240 Feb 8 06:03 userio drwxr-xr-x 4 root root 80 Feb 8 06:03 v4l crw-rw---- 1 root tty 7, 0 Feb 8 06:03 vcs crw-rw---- 1 root tty 7, 1 Feb 8 06:03 vcs1 ... crw-rw---- 1 root tty 7, 7 Feb 8 06:03 vcs7 crw-rw---- 1 root tty 7, 128 Feb 8 06:03 vcsa crw-rw---- 1 root tty 7, 129 Feb 8 06:03 vcsa1 ... crw-rw---- 1 root tty 7, 135 Feb 8 06:03 vcsa7 crw-rw---- 1 root tty 7, 64 Feb 8 06:03 vcsu ... crw-rw---- 1 root tty 7, 71 Feb 8 06:03 vcsu7 \u0026lsquo;udmabuf\u0026rsquo; Uniform Direct Memory Access Buffer https://github.com/ikwzm/udmabuf, you probably don\u0026rsquo;t care\n\u0026lsquo;uhid\u0026rsquo; for Human Interface Device stuff on the system side, you shouldn\u0026rsquo;t mess with this\n\u0026lsquo;uinput\u0026rsquo; https://www.kernel.org/doc/html/v4.12/input/uinput.html, basically you can fake a keyboard or mouse in your program\n\u0026lsquo;urandom\u0026rsquo;, the main source of random numbers. give it a shot but running head -5 /dev/urandom\n\u0026lsquo;usb\u0026rsquo; folder which contains character devices to the HID inputs, used by the system\n\u0026lsquo;userio\u0026rsquo; mostly used for laptop touchpad drivers\n\u0026lsquo;v41\u0026rsquo; part of the video subsystem\n\u0026lsquo;vcsx\u0026rsquo; virtual console memory, used when running a terminal emulator\n\u0026lsquo;vcax\u0026rsquo; virtual console stuff\n\u0026lsquo;vcsux\u0026rsquo; virtual console stuff\n1 2 3 4 5 6 7 8 drwxr-xr-x 2 root root 60 Feb 8 06:03 vfio crw------- 1 root root 10, 63 Feb 8 06:03 vga_arbiter crw------- 1 root root 10, 137 Feb 8 06:03 vhci crw-rw----+ 1 root kvm 10, 238 Feb 8 06:03 vhost-net crw------- 1 root root 10, 241 Feb 8 06:03 vhost-vsock crw-rw----+ 1 root video 81, 0 Feb 8 06:03 video0 crw-rw----+ 1 root video 81, 1 Feb 8 06:03 video1 crw-rw-rw- 1 root root 1, 5 Feb 8 06:03 zero \u0026lsquo;vfio\u0026rsquo; is used for passing hardware directly to virtual machines, often massively improving performanec\n\u0026lsquo;vga_arbiter\u0026rsquo; if you still have a computer that uses vga I\u0026rsquo;m sorry. This almost certainly doesn\u0026rsquo;t matter to you even if you do: https://www.kernel.org/doc/html/v4.16/gpu/vgaarbiter.html\n\u0026lsquo;vhci\u0026rsquo; used for passing though usb devices to virtual machines\n\u0026lsquo;vhost-net\u0026rsquo; \u0026amp; \u0026lsquo;vhost-vsock\u0026rsquo; used for virtual machine networking\n\u0026lsquo;videox\u0026rsquo; the graphics adapter in the system. Most systems will have only one, some will have two, very, very rarely you may have more.\n\u0026lsquo;zero\u0026rsquo; generates an infinite stream of zeros. Used for generating test files of arbitrary size, among other things.\nAnd That\u0026rsquo;s it, congrats. Now lets go to /proc\n/proc, the fake file system # /proc doesn\u0026rsquo;t really exist, it\u0026rsquo;s a memory only system used primarily for information about processes, hence the name.\nhttps://www.tldp.org/LDP/sag/html/proc-fs.html \u0026amp; https://linux.die.net/man/5/proc\nLet\u0026rsquo;s dig in by hand a bit though, lets start by opening a terminal and running cd /proc\nif you run ls you\u0026rsquo;ll see a bunch of numbers followed by some strange things, like uptime\nlet\u0026rsquo;s start with the not-number things. We\u0026rsquo;ve already seen cpuinfo and meminfo, but there\u0026rsquo;s other stuff in here too. Running cat uptime will tell us how many seconds the system has been powered on for, for example. A lot of things in here are bit hard to understand, but things like \u0026lsquo;uptime\u0026rsquo; and \u0026rsquo;loadavg\u0026rsquo; can be legitimately useful in our own programs. running cat loadavg you\u0026rsquo;ll see some numbers that represent how much load the system is under. You can use the above links to learn more, but now we\u0026rsquo;re going to dive into the juicy bits!\nBefore we do so though, let\u0026rsquo;s grab a program that will make our lives a bit easier called \u0026lsquo;htop\u0026rsquo;, just use yay to install it.\nonce it installs go ahead and open it up\nyou should see something like this:\nThis is a super powerful equivalent to task manager from windows. You can see the load on all 16 of my cpu threads, the memory usage on the system, uptime, loadavg, and number of tasks running here, but best of all we can see a nice tree of all the processes, and how each one of them is impacting the system. (you may need to press f5 to put it in tree mode) From here you can also see the Process\u0026rsquo;s ID known as the PID, these numbers should directly corolate with those visable in /proc\nLeaving that windows open lets open up two more terminals, in one navigate to /proc and in the other start up python:\nfrom here go back to the window running htop and use f3 to search for python if there are multiple processes that come up just keep pressing i3 until you find one that has a tree that looks like:\n(note your terminal will probably be named either konsole or xterm, not deepin-terminal)\nand look to the left to find the pid of the running python process, in my case it\u0026rsquo;s 754.\nGo over to the terminal where you navigated to /proc and now navigate to the folder with the id of your process, in my case i\u0026rsquo;d run cd 754 then run \u0026rsquo;ls\u0026rsquo; and look at everything in this folder:\nnow, we\u0026rsquo;re gonna run one more thing before we leave, and we\u0026rsquo;ll come back to it later, but I want to show you now, so you can appreciate how cool it is later: go ahead and run sudo cat stack\nyou should see something like:\nbut when we run this in the python terminal:\n1 2 while(1): 1+1 and read the stack again we\u0026rsquo;ll see:\nWhich while may not look overly interesting, I assure you will be something of interest later.\nOne interesting processed to note in here is the process numbered \u0026lsquo;1\u0026rsquo; which, if you look back in htop, you\u0026rsquo;ll see is the init process. This means it\u0026rsquo;s actually possible to look at a mountain of deails about the init process, which we\u0026rsquo;ll talk about in a bit.\nBefore we leave /proc, look back up at all the file that each process has and take note, also notice how some of these relate to what we saw in /dev\nTake a breather,\nAs you can see, Linux gives us a lot of raw access to the system. There are no training wheels here. While you can use Linux the exact same way you used windows: watch YouTube videos, open a graphical file manager, etc, you can also get down to the nitty gritty of the OS.\n/bin, /sbin, /lib, /lib64 # [TODO]\nsymbolic links to usr explanation\n/sys # echoing to change settings, probabaly focus on device\n/usr # [TODO]\nShare, man, local, var\n/boot # [TODO]\nboot loaders, init, initrd fs?\n/etc # \u0026hellip; and etc.\nLiterally. the etc folder contains system configuarion files mostly. Remember back when we installed and you used nano /etc/fstab that was editing the list of file systems that the system loads at boot, a configuration file. When we configure SSH later, it\u0026rsquo;s config files are stored here too. Basically, most of the admin level system config files and default config files (lower priority than the config by the user) files are here. As you learn about your system and tweak things you\u0026rsquo;ll find yourself in this folder rather often. [TODO, add chapter links]\nSome of the more interesting things in /etc are:\n/ca-certificates/ \u0026ndash; we\u0026rsquo;ll talk about these more in networking [TODO] /conf.d/ \u0026ndash; various system default config files for system services /cron.d/,/cron.daily/,/cron.hourly/, etc. are all form the cronie package which can be installed then enabled with systemd. Note, systemd timers are a built in way to do the same thing. cron is the \u0026lsquo;old\u0026rsquo; way of doing thing, but is super simple to use /crypttab is the similar to /fstab but for encrypted partitions /cups is a folder used by cups, which is the backend used for printers in linux /dbus-1/ is used by dbus which is a backend for interprocess communication in linux /dconf/ is a folder used by dconf wich is used to store config settings. dconf is a cli tool for changing these settings /gconf/ \u0026ndash; gconf is very similar to dconf but outdated. Still used by somethings though. /dnsmasq.conf is used by dnsmasq, which will be discussed in networking [TODO] /default/ stores default configuration files, typically these get overriden elsewhere by the user /dhcp_fingerprint.conf,/dhcpcd.conf,/dhcpd.conf, and /ducpd6.conf are all part of dhcpcd and dhcp, used for reciveing DHCP information. This is dicussed further in the networking chapter [TODO] /dkms/framework.conf is used to configure dkms or Dynamic Kernel Module Support which is used to load modules for the kernel without building the kernel from source. In practice this means drivers for various hardware can be loaded even if it\u0026rsquo;s not in the linux source tree. Read more here: https://www.linuxjournal.com/article/6896 /envrioment is a configarating file for pam_env files. Basically, enviroment variables that you want to be loaded at boot can be put here. For example to change the defalut editor used by command line programs you can set EDITOR=vim or EDITOR=nano or whatever you like here. /ethertypes is a file listing various ethernet protolcols, we\u0026rsquo;ll come back to this in the networking chapter [TODO] /exports is used to setup NFS shares, again, in networking [TODO] /firewall.d/,/gufw/ are where firewall settings are stored, dependant on the firewall progarm used /fonts/ holds your fonts, go figgure. You\u0026rsquo;ll need to update the font database if you install things manually: https://wiki.archlinux.org/index.php/Fonts#Manual_installation /foremost.conf is used by the foremost package, it contains information about file headers, footers, and data structures for file recovery purposeses. For example, if you have a backup .img file of a failing hdd and need to scan for .jpg file headers to recover images /freeipmi/ contains config files for Intelligent Platform Managment Inferface Modules. We\u0026rsquo;ll talk about this more in servers [TODO], but essentially it\u0026rsquo;s a way to, using server hardware, set BIOS settings, monitor hardware, and turn the system on/off remotely. /freetds/,/mysql/,/sqlmap.conf,/odbc.ini,ODBCDataSources,and odbcinst.ini all have to do with databases and database connectivity. [TODO_Ch17] /fstab/ short for file system table contains a table of file systems to be mounted at startup and options they should have. Settings here can dramatically effect fs performance or cause your system not to boot, so make sure you know what you\u0026rsquo;re doing. Even if your system doesn\u0026rsquo;t boot because of something here, you should land in an emrgancy shell where you can edit /etc/fstab and fix the mistake /fuse.conf is the config file for fuse, which is dicussed below in file systems. /gdb/gdbinit \u0026ndash; you probably want to put the global gdb config file at ~/.gdbinit not here in /etc. gdb is discussed more in debugging [TODO_Ch18] /group is where linux user groups are defined. You probably want to use the groups,groupadd,groupdel,groupmems, and groupmod commands. /grub.d/ contains config files and boot loader entries for the grub bootloader. Not relevent if you\u0026rsquo;re using systemd boot on a UEFI system /gshadow contains encrypted passwords for each group. !! and ! both indicated no password, though !! is no password has been set before /healthd.conf used to notify if hardware has an issue (temp, fan, etc) \u0026ndash; provided by lmsensors /host.conf \u0026amp; /resolv.conf are used for resolver configuration. More in networking [TODO] /hosts local host configuration file. Very useful, in networking again [TODO] /httpd/, and specifically /httpd/conf/httpd.conf is used to conigure a local web server like Apache. Refrenced in Networking [TODO] and Servers [TODO] /home, /mnt, /run # [TODO]\ndiscuss systemd taking over home soon\n/tmp # Users and Groups # [TODO]\npermissions discussed eariler, recap here\nDrivers \u0026amp; Kernel Modules # [TODO] Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum sit amet lacus convallis, finibus neque sit amet, iaculis neque. Nulla consectetur nulla at magna condimentum, sed bibendum risus finibus. Nulla cursus felis vitae odio porttitor ultricies. Aenean mollis est non lorem facilisis, vitae blandit purus accumsan. Sed vitae neque pharetra libero elementum maximus. Quisque vel euismod sem. Nullam eget bibendum arcu. Nulla facilisi. Vestibulum vulputate libero lorem, nec blandit nibh suscipit vitae. Suspendisse laoreet vitae arcu non ornare. Nam aliquet lorem vitae mollis facilisis. Aliquam non accumsan libero, nec consequat ex. Duis dolor urna, facilisis non iaculis vitae, sagittis ut justo. Nulla porta turpis bibendum posuere elementum. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Art by @monoxromatik, made for @Freixfox https://github.com/orhun/kmon\n[TODO]\nudev rules\nFile systems # [TODO]\nInodes, Raid, fuse, ext4, ntfs, zfs, tmpfs, fat/fat32/exfat, \u0026hellip;\ninclude bit about named pipes\nmknod\nhttps://wiki.maemo.org/Modifying_the_root_image\nProcesses and Memory # [TODO]\nloading libs, forks, env variables, process ownership\nlsof, strace, ltrace, nice levels - sysdig\nSystem Calls # [TODO]\nhttps://github.com/microsoft/ProcMon-for-Linux\nstart with a syscall table\nKernel Parameters # [TODO]\nmodprobe\nSystemD and alternatives # [TODO]\ninit system: https://www.lifewire.com/how-to-use-the-init-command-in-linux-4066930\nSchedulers # [TODO]\n+real time kernel/preemption\nDbus # [TODO]\nhttps://github.com/KnowNo/How-Linux-Works-2nd-Edition/blob/master/How.Linux.Works.What.Every.Superuser.Should.Know.2nd.Edition.PDF.pdf\nWe\u0026rsquo;ll explore more of the OS later, but for now I think the information overload is a bit much anyway, so lets move away from screens and into the world of hardware\nhttps://littleosbook.github.io\n"},{"id":89,"href":"/engineering/linux/linuxshell/","title":"Linuxshell","section":"Engineering","content":" Appendix 1 - Using the Linux Shell # ./missing-semester - The Shell\n./missing-semester - Shell Tools and Scripting\n./missing-semester - Data Wrangling\nLinux Productivity Tools Presentation PDF (Ketan M.)\nWhat The Shell? # Okay, first question you probably have after I\u0026rsquo;ve been using them interchangebly \u0026lsquo;What is a Shell and is it different from a terminal?\u0026rsquo;\nYes, they\u0026rsquo;re different, but before I talk about the shell it\u0026rsquo;s easier to talk about the Terminal.\nThe Terminal is a piece of hardware, or, rather was a piece of hardware. For example, here\u0026rsquo;s an old IBM 3151:\nNow, don\u0026rsquo;t mistake this for a CRT monitor like everyone was using in the early 2000\u0026rsquo;s, this is a terminal it has a serial connection in the back that only reciveves messages of text from the computer it\u0026rsquo;s attached to, and it can only display text on it\u0026rsquo;s dim green screen. Before the days of graphical computing everything was though a text only interface that you\u0026rsquo;d usually read on one of these. Fortunately, technology has gotten much, much better.\nSo in the exact same way that you can emulate an old video game console to play retro games on your computer, the terminal itself is emulated on Linux. If you really wanted to you could hook up an old terminal like the above, but it\u0026rsquo;s much easier to open a terminal emulator. Of course, just as there are multiple different emulators for some old consoles, there are multiple options for terminal emulation. A few different terminals are shown on the right in that picture (Cool Retro Terminal, Terminus α, and Kitty), and just as hardware may have different features, different terminals can as well.\nIf you\u0026rsquo;re curious about how this emulation works, see Anatomy of a Terminal Emulator (Aram Drevekein). Then, you may want to read up on the actual character sequences, see everything you ever wanted to know about terminals (Lexi Summer Hale) and XTerm Control Sequences (Edward Moy). Just like the hardware however, the terminals don\u0026rsquo;t do anything on their own, that is where the shell comes in. The shell is the program your terminal is usually running when it opens. By default on most Linux Systems it\u0026rsquo;s Bash and on Windows it\u0026rsquo;s CMD or Powershell, but there\u0026rsquo;s many, many alternative shells. These shells all serve a few main functions\nWork as a sort of dispatcher for other commands. For example, when you run ls the shell let\u0026rsquo;s ls print to the terminal before taking back control) Provide content redirection facilities. For example, when you runls \u0026gt; somefile the shell is handling the \u0026gt; which tells it to take the output from the running program (ls) and put it into the file (some file). Provide scripting capability. Allowing for programming by chaining other commands. We\u0026rsquo;ll look at this more in a bit. Provide basic niceities (history, tab completion, automatic suggestions, etc.) But others may include some weirder things, for example, xonsh is a shell that will let you mix python and other commands. (note, it tends to act weird for somethings. I like having it as a secondary shell that\u0026rsquo;s available, but use ZSH as my primary shell.)\nIn the above picture, all of the text prompts on the emulated terminals are being generated by ZSH, the difference in color and font is due to the settings for the terminal emulator - again restating how the terminal handles \u0026lsquo;hardware\u0026rsquo; things while the Shell only sends text.\nYou may also here terminals called a TTY or Teletype, both are for historical reasons. On that note, you can change your active tty in Linux by using CTRL+ALT+F[n] where F[n] is any of the function keys. Interestingly, the graphical \u0026lsquo;shell\u0026rsquo; actually runs in one of these TTYs, usually TTY7. You can actually interact with these TTYs by sending text to /dev/tty[n] without switching to it directly, similarly /dev/tty is always your current terminal, so for example echo hello \u0026gt; /dev/tty will echo hello normally, but echo hello \u0026gt; /dev/tty2 will send hello to the terminal you could get to with CTRL+ALT+F2\nAs a very brief aside, you may see pictures in some terminals. This is possible with some neat hackery both on part of the shell and terminal emulator. I\u0026rsquo;ve even seen some that can render 3D graphics. This isn\u0026rsquo;t your grandpa\u0026rsquo;s terminal anymore.\nThe Basic Commands # Of note, while the majority of these commands should be available on nearly any unix system you may use, many of the alternate recommendations may not be.\nman \u0026ldquo;man [command/topic]\u0026rdquo;, ex, \u0026ldquo;man ascii\u0026rdquo;, bring up an in depth manual page for a given command/topic.\nAlternative recommendation: tldr actually digestible and much faster when it gives enough info\npwd - Print working directory - literally just a command to tell you the file path to where you are\nls - list - list the files/folders in the current directory, lots of flags available\nAlternative recommendation: exa or lsd cd - change directory, if you can\u0026rsquo;t use this may god have mercy\nAlternative recommendation: j (for autojump) note that cd .. will move back by one folder. mv - move (or rename) a file to a new location (or name)\nAlternative recommendation: rsync rm - remove a file\ntouch - create an empty file, or change last accessed time of existing file\nmkdir \u0026amp; rmdir - make or remove an empty directory (folder)\ncat - output the contents of a file\nAlternative recommendation: bat, less, more, fltrdr, or an editor like vim or nano date - output current date and time\nchmod \u0026amp; chown - change a file or folders permissions or owner\nln - make a symbolic / hard link (shortcut)\ndu \u0026amp; df - Disk usage and disk free, df will show you how much room you have left per disk, du serves to help find what\u0026rsquo;s using up your disk\nAlternative recommendation: ncdu and duf clear - clear the screen of text- (only use in scripts)\nAlternative recommendation: ctrl + l , much faster passwd - change a users password\nsudo \u0026amp; su - run a command as another user, typically root\nhead \u0026amp; tail - print a number of lines from the top or bottom of a file\ntee - mostly used with pipes to print output to terminal as well as put it into a file\ngrep, sed, awk, tr - the \u0026lsquo;big four\u0026rsquo; commands used for text processing in a terminal. grep (and egrep) are used for search, for example running ls | grep myfile to confirm a file is indeed in a folder. sed is used for text/character replacement. awk is a programming language in it\u0026rsquo;s own right, used primarily for selecting text fields by separator, for example only printing the permissions column in the output of ls -l\nAlternative recommendations: choose, sd, ripgrep w - show who is currently logged in and what they\u0026rsquo;re running, epically applicable on shared servers if you need to see if there\u0026rsquo;s an active ssh connection to your system\ntar, gzip, bzip, zip - all used for making compressed folders (like .zip files)\nssh , scp, ftp - used for doing remote access, letting you run commands on one system from another\ndiff - show the differences between two files\nsort - sort input by a number of criteria\nuniq - remove duplicate entries\nfdupes is recommended if the goal is to identify duplicate files export - used to set environment variables, these for example use export EDITOR=nano to use nano as your terminal text viewer by default.\nsystemctl - literally system control, wayyy to big to cover quickly, used for everything from setting services to run on boot, shutting down/restarting the system, to viewing logs. Look up Systemd for more information. This is probably the least-universal of the tools listed here, but most linux systems have switched to Systemd now for better or worse.\nsysz provides a decent UI to systemd functions, check it out ip, ping, \u0026amp; dig - ip is used to view as well as modify aspects of network configuration at the more hardware-level, such as turning on/off a networking interface. ping allows you to see if you\u0026rsquo;re able to reach a site/ip address, and dig allows you to check if you\u0026rsquo;re able to turn a domain name to an ip, such as checking the ip address that archlinux.org points to with dig archlinux.org along with other DNS query tasks\nAlternative recommendation: dog is a nice user friendly alternative to dig See How to use dig (Julia Evans) ps - process management: listing processing, finding the parent of a particular process, etc.\nAlternative recommendation: procs (GitHub) free - display information about system RAM usage\ntop - a graphical-ish view of the running processes, ram, and CPU usage\nAlternative recommendation: htop or btop++\nAlso be aware of task-specific \u0026rsquo;top\u0026rsquo; programs like iotop, irqtop, powertop, radeontop (or nvtop if you have an Nvidia card)\nbtop screenshoot kill, murder a process in various ways\nif you\u0026rsquo;re running an xsession and want to kill a graphical terminal, xkill is useful too whereis - find the location of an executable, ex whereis ls will tell you it\u0026rsquo;s in /usr/bin/ls\nwget, curl - retrieve a web page\nAlternative recommendation: lynx, w3m, brow.sh, or xh\nHeads up, you may ocassionly see installation instructions for things on GitHub that ask you to use curl www.example.com/script.sh | bash - DON\u0026rsquo;T. It\u0026rsquo;s not safe. Instead, you can curl the script, check that it\u0026rsquo;s something you want to run with cat script.sh, and then run it with ./script.sh. Parsing HTML with w3m and awk (Joe Ferner\u0026rsquo;s Blog)\nlynx + fltrdr can be paired together to read web pages super fast\nlynx -dump http://www.example.com | fltrdr w/ shell script below in /bin named \u0026#39;q\u0026#39; (or whatever you want) you can just run \u0026#39;q example.com\u0026#39; #!/bin/bash lynx -dump $1 | fltrdr ldd - see what dynamically linked libraries an executable uses\nAlternative recomendation: libtree, provides a tree output, with color Tab Completion and faster navigation # Probably the most useful shortcut for using the shell is tab completion. This is used when you need to type a really long command or chain of commands, say I want to run ncmpcpp, a name that is both long and hard to remember, instead of just typing the full name I can type ncm and press tab, and ta-da suddenly the full name is inserted. If you happen to have another package that has multiple possible endings say you want to run lstopo but you have ls, lsusb, lstopo all on your system, most shells will display a menu underneath with all the possible options. This is nice for commands, but the true power comes in file names, say I want to run cat /etc/pacman.d/mirrorlist while that\u0026rsquo;s not too awful to type out, you could easily type cat /e press tab, get cat /etc/ add pac to get cat /etc/pac press tab, get cat /etc/pacman.d/ type mir and tab and get the full command, while that sounds complicated it actually speeds using the command line up rather significantly and prevents spelling mistakes\nNext up for navigation is directory shortcuts, these can be massive time savers, the most obvious is ~ which is just short hand for the location of the current shell users home directory, so in my case ~ is the exact same as typing out /home/vega. The next two have already been touched on which are . for the current directory and .. for the previous directory. Depending on the shell and arbitrary number of dots may take you back and arbitrary number of directories. Give it a shot! If nothing else you can always use ../../.. to navigate back as necessary. Finally, - represents the last directory you were in so if your in ~/Downloads and then cd /etc/pacman.d/, running cd - will bring you back to downloads.\nThe most advanced form of built in linux navigation comes in the form of pushd and popd, which as their names imply push and pop directories to a stack (a special kind of list) of directories. Like a stack of any item you can put or \u0026lsquo;push\u0026rsquo; an item on top, and take or \u0026lsquo;pop\u0026rsquo; an item off. Running dirs -v will show you a numbered list of the stack, you can navigate to the top item with popd or and arbitrary item with cd ~# where # is the number as shown by dirs -v.\nFinally, there\u0026rsquo;s one more super handy way to get around your file system but it\u0026rsquo;s a non-standard tool so most systems or servers you use other than your own will not have it installed, and that\u0026rsquo;s autojump. Put simply it takes a good guess about where you want to go by only typing part of the name of a folder you\u0026rsquo;ve navigated to before, so say you have a long file path /mnt/data/archived/january2000/pictures/family/vacation/ you can get back to it again by simply running j vac which is obviously much simpler. It works the vast majority of the time in practice, only having issues if you don\u0026rsquo;t include enough letters leading to ambiguity.\nI/O redirection # for the hard core, you can read good documentation here: https://www.tldp.org/LDP/abs/html/io-redirection.html\nstdin (\u0026lt;) (\u0026laquo;) [TODO]\nstdout (\u0026gt;) (\u0026raquo;) [TODO]\nstderr (2\u0026gt;) (2\u0026raquo;) [TODO]\nNote, \u0026amp;\u0026gt; redirects both stderr and stdout\npipes ( | ) and nammed pipes pv - Pipe Viewer\nFinally, the weirdest and rarely used \u0026lt;\u0026gt; operator can be used to directly attch file descriptions and read/write files dirctly, this is rearely used as it\u0026rsquo;s kind of a pita, but if you need to script something advanced it\u0026rsquo;s available. Stollen from the above advanced link:\n[j]\u0026lt;\u0026gt;filename\nOpen file \u0026ldquo;filename\u0026rdquo; for reading and writing, and assign file descriptor \u0026ldquo;j\u0026rdquo; to it. If \u0026ldquo;filename\u0026rdquo; does not exist, create it. If file descriptor \u0026ldquo;j\u0026rdquo; is not specified, default to fd 0, stdin.\nAn application of this is writing at a specified place in a file.\necho 1234567890 \u0026gt; File # Write string to \u0026ldquo;File\u0026rdquo;. exec 3\u0026lt;\u0026gt; File # Open \u0026ldquo;File\u0026rdquo; and assign fd 3 to it. read -n 4 \u0026lt;\u0026amp;3 # Read only 4 characters. echo -n . \u0026gt;\u0026amp;3 # Write a decimal point there. exec 3\u0026gt;\u0026amp;- # Close fd 3. cat File # ==\u0026gt; 1234.67890\nRandom access, by golly.\nWild Cards \u0026amp; Regex # Regular Expressions or \u0026lsquo;Regex\u0026rsquo; are an incredibly powerful tool used to match strings in a logical way. For example, say you wanted to find all the phone numbers on page that started with the area code 555, the next three digits were any number, and the last four digits could be represented as either numbers or letters, and \u0026lsquo;-\u0026rsquo; separating each group. With regex that\u0026rsquo;s easy, the regular expression for this looks like:\n5{3}-[0-9]{3}-[a-zA-Z0-9]{4}\nWhich while I could explain, I think just staring at that a little while should make it obvious and ideally the mental effort will lead to a better understanding. Regex can do a lot more than this though. Go ahead and checkout https://regex101.com and give it a shot.\nregex can be used with a bunch of common tools like awk, sed, and grep. This means you can do fancy things like chain ls and grep together with a pipe to find any file matching a pattern or chain commands to rename any file containing characters which may be invalid in NTFS ( The file system used by Windows) to be valid before doing a transfer.\nAlso, you may find The Regular Expression Visualizer, Simulator \u0026amp; Cross-Compiler Tool useful.\nIf you\u0026rsquo;re really lazy, Grex is \u0026ldquo;[automatically generates] a single regular expression from user-provided test cases. The resulting expression is guaranteed to match the test cases which it was generated from.\u0026rdquo;\nNote that not all things that seem like a good fit are a good fit for regex, for example, email.\n[TODO] https://www.debuggex.com\nRegular Expressions - Enough to be Dangerous (YouTube, Engineer man)\nCrex (Octobanana git repo) - \u0026ldquo;Explore, test, and check regular expressions in the terminal.\u0026rdquo;\nAlso see https://pomsky-lang.org as an alternative to regex.\nJob Control # [TODO]\nfg: brings a specified suspended job from the background to foreground.\nbg: send a specified job to the background or lists background jobs if no jobs are specified\njobs: list all running jobs\n\u0026amp; operator: when added after a command, it runs the job in the background and outputs its PID.\nShortcuts # Jobs # Ctrl+z: suspend a job to the background. Ctrl+c: sends a SIGNINT to the current running job and kills it; if sent before entering a command, it clears the current line in the prompt Ctrl+d: sends a quit signal - can be used to exit certain applications or exit a terminal jobs -l or ps -a: see jobs Screen # Ctrl+l: clear screen except current line Ctrl+u: clear current prompt line Command History # Ctrl+r: search through command history in reverse Directory Navigation # cd -: to last dir\ncd: go to home if entered without arguments\nreptyr to move\nhistory, and !№ to run that cmd\nctrl-left/right to nav args\nexpansion with mv /path/meh.{md,txt}\nPerformance Analysis # Aliases and customization # Aliases # Aliases are custom names assigned to commands. The command alias will display the current aliases set in your shell. An alias maps to a specific command which is run when the alias in entered. Aliases are useful if you have long commands that are used often. Entering alias suinstall='sudo apt-get install' will temporarily allow you to use suinstall instead of typing sudo apt-get install. Any switches and arguments the command takes can be used with the alias. The alias is lost when the current terminal session is closed.\nTo make aliases permanent, add them to your shell\u0026rsquo;s configuration file (.bashrc or .zshrc).\nCustomization # Aliases are one way to customize your shell. Most shell customization occurs in the shells configuration file, usually stored as a hidden file in the home directory. .bashrc and .zshrc are the configuration files for bash and zsh. The files are loaded every time a terminal is started up and can set up its environment by loading aliases and custom functions and setting terminal colors and variables like PATH and EDITOR.\nhttps://github.com/zsh-users/zsh-autosuggestions\n[TODO]\nShell Scripting # [TODO] xargs, sed, awk, fzf, grep,\nhttps://shellmagic.xyz/\nhttps://wiki.bash-hackers.org/\n[TODO] text on what shell scripting is source: b0rk on Twitter, check out https://wizardzines.com for more Minimal Safe Bash Script Template (Maciej Radzikowski)\n1 2 3 4 for file in * do whatever command on $file done 1 2 3 4 for file in *.png do waifu2x-ncnn-vulkan -n 1 -s 2 -i $file -o $file done You may also be interested in Funky or Direnv for having scripts that load/unload when you enter and leave a folder in the terminal\nAlternative Shells # When we installed arch we actually changed the default shell from bash to zsh, but there are other options such as fish, csh, and xonsh among others\n[TODO]\nAlternative commands # bat alternative to cat, capable of syntax highlighting and line numbering exa, lsd alternatives to ls, eaiser on the eyes You could also use ranger or nnn two fully featured terminal file browsers fd altertnative to find, doesn\u0026rsquo;t suck htop, gtop alternatives to top, doesn\u0026rsquo;t suck prettyping alternative to ping, pretty Also see cnping which is not CLI. diff-so-fancy, icdiff, Delta, Difftastic, pdf-diff alternatives to diff, but with more features (or different target files). Difftastic is particularly nice for having an understanding of what Syntax actually means. ncdu and dust while much slower than du it\u0026rsquo;s great for finding out what\u0026rsquo;s eating storage space choose user friendly, simple alternative to awk/cut ripgrep \u0026ldquo;ripgrep is a line-oriented search tool that recursively searches your current directory for a regex pattern. By default, ripgrep will respect your .gitignore and automatically skip hidden files/directories and binary files. ripgrep has first class support on Windows, macOS and Linux, with binary downloads available for every release. ripgrep is similar to other popular search tools like The Silver Searcher, ack and grep.\u0026rdquo; TLDR: Search into your text files really fast with regex support. RGA is like ripgrep on steroids- seaches though PDFs, ebooks, office docs, compressed files, etc. Semgrep may be a better fit for doing code stuff echowo alternative to echo, but significantly furrier broot alternative to tree, but optimizes for available screen space, and navigate the tree and cd to it mosh alternative to ssh, but better for unstable connections, shows local typing without the input-loop (and so is more responsive) and is just genearlly a lot better\u0026hellip; just not standard. You can make it work with only ssh though, no root needed. Useful Non-Stock CLI Tools # tldr\ntldr, \u0026lsquo;for too long didn\u0026rsquo;t read\u0026rsquo; provides a quick, easy to read version of the man page for many common linux commands. Forget how to use tar ? just run tldr tar autojump\nrefrence above description in faster navigation mpd + ncmpcpp\n\u0026lsquo;music player daemon\u0026rsquo; and \u0026rsquo;ncurses music player client plus plus\u0026rsquo; are two cli tools that work in tandem to provide an experiance that I presonally find superiour to any graphical music player irssi\nfull featured IRC client, chat right from your terminal screenfetch\nget some nift stats about your terminal, add to your shell\u0026rsquo;s RC file to be one of the cool kids moreutils\n\u0026ldquo;moreutils is a growing collection of the unix tools that nobody thought to write long ago when unix was young.\u0026rdquo; hr\nNeed some way to visually seperate things, this literally just makes a horizontal line in the terminal fltrdr\nWanna read at 1000wpm, this is the tool for you. crex\ntest regular expressions in the terminal lynx, w3m, browsh\nBrowse the web from a terminal (not a joke and actually useful) entr\nmonitor file system for changes noti\nsend a graphical system notification when a command finishes ntfy.sh\nSend push notifications to your phone or desktop via PUT/POST progress\nstart a command and have no way to see what its doing (rsync, cp, etc)? This is your tool figlet, toilet, banner\nmakes big text, run figlet Your Text Here and see your text in big, ascii letters no more secrets\nreveal text in a martix effect.. I\u0026rsquo;m streching the meaning of useful here stress-ng\nstresstest your system in pretty much any super specific way you can think of, or hammer your cpu to test an overclock pandoc\nconvert between damn near any text format to any other format also see pdfsandwich for OCR on PDFS taskwarrior\nkeep track of To-Do\u0026rsquo;s and tasks, can also be paired with timewarrior for timetracking waifu2x (many forks available)\nUpscale and de-noise images zoom-and-enhance style but for real- this ones\u0026rsquo; a bit GPU intensive because it uses AI youtube-dl\ndespite the name this tool can download videos or audio from almost any page on the internet, even supporting playlists in many cases too. gallery-dl is good for grabbing albums from photo hosting websites\nrat\n\u0026ldquo;Compose shell commands to build terminal applications\u0026rdquo; magic-wormhole\ntool for getting a file between two systems easily and secure, just run wormhole send and wormhole recive on the respective systems Ix, Gist\nPaste tools, like pastebin DMIDecode\nget info from BIOS hexyl\npretty terminal based hex viewer UXY\n\u0026ldquo;UXY tool also wraps some common UNIX tools and exports their output in UXY format.\u0026rdquo;\n\u0026ldquo;UXY is a tool to manipulate UXY format, which is a basically a two-dimenstional table that\u0026rsquo;s both human- and machine-readable.\u0026rdquo;\nThis gives a nice format for manipulation of commands though pipes for super complex shell scripting\nlsof\nlist what files a runnig process has open glow or mdcat\ndisplay markdown files in the terminal nethogs\nsee what applications are using your network bandwidth exodus\n\u0026ldquo;Exodus is a tool that makes it easy to successfully relocate Linux ELF binaries from one system to another. This is useful in situations where you don\u0026rsquo;t have root access on a machine or where a package simply isn\u0026rsquo;t available for a given Linux distribution.\u0026rdquo; [\u0026hellip;]\nWith exodus, transferring a piece of software that\u0026rsquo;s working on one computer to another is as simple as this.\nexodus [binary name] | ssh [server ip] usbtop - show usb device bandwidth usage, requires sudo modprobe usbmon first.\nWhile some of these may be included, they\u0026rsquo;re some of the OG addons or tools to make included things better:\ntmux\nmultiplex your termianal, open multiple terminals in your terminal, usefull in non-graphicas ttys espically vim + extensions (neovim, spacevim, etc)\nthe old school text editor meets new school GDB + gef\nGDB, the original debugger, has it\u0026rsquo;s faults. GEF, a config file for GDB on steroids, fixes many of them. While originally made for exploit developers, many people use it for everyday debugging also see rr for recording a program execution so it can be replayed resh\nreplacement for ctrl+r history seach optipng, jpegoptim\nEach works with it\u0026rsquo;s respective image format and does some trial-and-error magic to re-compress the file no-lossy-er than it was to save space. No info loss but often a large file size reduction! pup\n\u0026ldquo;pup is a command line tool for processing HTML. It reads from stdin, prints to stdout, and allows the user to filter parts of the page using CSS selectors.\u0026rdquo; Displaying Data in the terminal # [TODO] info about various librarier and tools that show data using text based graphics or via terminals that can render SVGs/images 💡FAQ about displaying stuff in a terminal pic.twitter.com/XQBOezyJAx\n\u0026mdash; Kate (but with plastic reindeer antlers on) (@thingskatedid) October 13, 2020 Archive of embedded Tweet available here graphviz provides dot among other tools, this thread also mentions libsixel, plot.awk, KGT (Kate\u0026rsquo;s Grammer Tools), libFSM for turning regex into FSMs.\nA note on Graphical-ish terminal programs # like brow.sh [TODO]\nNcurses? # [TODO] why Ncurses is bad\nhttps://github.com/dankamongmen/notcurses\nHow might the terminal evolve? # CLUI: Building a Graphical Command Line (Repelit)\nCommon Graphical Linux Utils # [TODO]\nMostly taken from https://wiki.archlinux.org/index.php/List_of_applications and https://github.com/Kickball/awesome-selfhosted\nGraphical Environments++ # Gnome, KDE, Pantheon,\nRofi, Polybar, j4,\nCompton\nNitrogen, pywal, (feh),\nFree Graphical Utilities # Office \u0026amp; Daily # Libreoffice, Xournal++,\nthunar + bulk rename, nautilus, Filezilla, Deluge, qBitTorrent,\nFirefox, Min, Vivalidi,\nMarktext, Typora, Notable\nGeogebra\nEvolution\nEvince\nA/V # Feh, Nomacs\nRawtherepee, Krita, Gimp, Darktable\nInkscape,\nBlender, Pencil2D, OpenToonz\nGoxel,\nPithos, Gnome-Music,\nCadence (jack2)\nAudacity, Ardour, LMMS, non, Radium\nGiada\nVCV Rack\nGuitarix\nPureData, SonicPi, ORCA\nProcessing, VVVV,\nVLC\nDaVinci Resolve\nCheese, Motion, OBS\nSocial # Thunderbird\nLBRY\nDiscord, Telegram, qTox, HexChat, SRain, Riot/Fractal ,\nProgramming # Okteta\nGitkraken\nCode, Atom, Sublime, Code::Blocks, Eclipse, Netbeans, IntelliJ, Sublime\nPyCharm, Spyder\nCutter, Node-Red\nEtherape/cap, Wireshark\nEngineering # FreeCAD, LibreCAD, KiCad, CircuitSim, Fritzing\nPulseView, Arduino, PlatformIO\nSystem # Alacritty, urxvt, Deepin-Terminal, Hyper,\nBaobab, Filelight, GParted, VeraCrypt\nSyncthing\nEtcher\nlsusb, lshw, lstopo, usbview,\nFirewall frontend?\nClamAV\ndeepin-screesshot, scrot\nIRL # Gnome-Maps\nGnome-Weather\nCelestia\nStellarium\nOther # GnuRadio, SDRAngel\nPaid Graphical Utilities # Renoise, Bitwig\nSelf hosted / Services # Netdata\nVPN (Wiregaurd)\nSnort, Suritica\nGitea, Gitlab\nMathics\nLAMP stack\nCouchpotato, headphones\nmpd, ampache\nOwncloud, NextClound\nSamba\nDAT, IPFS\nConvos.by\nIx , 0bin (pastebin)\nMathics\nTaskWeb (TaskWarrior)\nOther Linux Distros that are neat # Gobo Linux\nGoboLinux is an alternative Linux distribution which redefines the entire filesystem hierarchy.\nIn GoboLinux you don\u0026rsquo;t need a package database because the filesystem is the database: each program resides in its own directory, such as /Programs/LibX11/1.6.9 and /Programs/GCC/9.2.0.\nBedrock Linux\nBedrock Linux is a meta Linux distribution which allows users to mix-and-match components from other, typically incompatible distributions. Bedrock integrates these components into one largely cohesive system.\nFor example, one could have:\nDebian\u0026rsquo;s stable coreutils Arch\u0026rsquo;s cutting edge kernel Void\u0026rsquo;s runit init system A pdf reader with custom patches automatically maintained by Gentoo\u0026rsquo;s portage A font from Arch\u0026rsquo;s AUR Games running against Ubuntu\u0026rsquo;s libraries Business software running against CentOS\u0026rsquo;s libraries All at the same time and working together mostly as though they were packaged for the same distribution.\nNixOS\nNix builds packages in isolation from each other. This ensures that they are reproducible and don\u0026rsquo;t have undeclared dependencies, so if a package works on one machine, it will also work on another.\nQubes OS\nsee https://www.qubes-os.org/intro/ - basically everything gets it\u0026rsquo;s own VM for security sake\nTails Linux\nTails is a portable operating system that protects against surveillance and censorship.\nDebian Dog\nThis is the only distro I could find that will actually work somewhat well on systems with ancient x86 CPUs (586,686-pae)\n"},{"id":90,"href":"/engineering/linux/otheross/","title":"Other Oss","section":"Engineering","content":" A3 - Other Operating Systems # BSD macOS Serenity Redox React TempleOS Haiku https://awesomekling.github.io/pledge-and-unveil-in-SerenityOS/\n"},{"id":91,"href":"/engineering/linux/windows/","title":"Windows","section":"Engineering","content":" Appendix 2 - Ugh. Windows. # Windows? In a Linux Chapter?\nOkay, so, I hate Windows for many, many reasons. Beyond the Candy Crush being bundled and privacy concerns, it\u0026rsquo;s generally just a pain in the ass- and as a Linux user, that\u0026rsquo;s saying something. That said, you\u0026rsquo;ll probably need to do some stuff with it from time to time regardless. So, in this page I want to do three things:\nMake it suck less. Help you understand how to fix issues Let you know how to make programming not suck Character owned by Vega, art by Shade 1. Making Windows Suck Less # X.x Update your BIOS # While not Windows specific, I recommend updating your UEFI/BIOS anyway, as occasionally it will fix random issues down the line. The process for this varies, but generally you just need to go to either the page for your specific model of computer or, if a custom system, the page for the motherboard. Download the BIOS from there and follow the update instructions provided. It\u0026rsquo;ll be a little sketchy, but it should be fine. Sometimes, you can do this from within Windows Update via an \u0026lsquo;optional update\u0026rsquo;. Don\u0026rsquo;t. This has a tendency to break shit.\nWhile for some computer updating the UEFI/BIOS just requires running a file from within Windows, on others you\u0026rsquo;ll need to actually reboot into the UEFI/BIOS interface. If the system is anything newer than ancient, you should be able to do this by going into settings and finding \u0026ldquo;Advanced Startup\u0026rdquo;. In 10, this is under Update→Recovery, on 11, just search for it (it will probably show up as \u0026ldquo;change advanced start up options\u0026rdquo;) and then \u0026ldquo;Restart now\u0026rdquo;. After the reboot, you should see a bright blue screen with the options of \u0026ldquo;Continue\u0026rdquo;, \u0026ldquo;Troubleshoot\u0026rdquo;, or \u0026ldquo;Turn off your PC\u0026rdquo;. Select Troubleshoot → Advanced Options → UEFI Firmware Settings. This will bring you into a different settings menu that, unfortunately, looks different on every system. Just arrow-key, tab, and enter around to see what options are there. With luck, you\u0026rsquo;ll stumble into something named \u0026ldquo;UEFI BIOS Update\u0026rdquo; or similar, and the process should be fairly straight forward from there. Some systems will even download the update over the internet from within this menu directly. If you plan to run Linux, you might want to come back to this menu and turn off Secure Boot as well.\n1.1 Removing the shit # I\u0026rsquo;ll be honest with you, even if you run a VPN -\u0026gt; Tor -\u0026gt; Freenet -\u0026gt; IPFS chain that hits every country twice or you manage to set up firewalls so high china wants your phone number, you won\u0026rsquo;t be able to stop windows from knowing more about you than you know about you.\nHistorically, I\u0026rsquo;d recommend setting up Windows with a local account for a whole mess of reasons as well. Unfortuantely, Microsoft is making this more of a pain in the ass with each update, and basically removing the ability outright in Windows 11. If you haven\u0026rsquo;t yet set up your computer and your coming back to this guide as a \u0026ldquo;Did I miss anything\u0026rdquo;, this is something you may want to consider trying still. Just realize you\u0026rsquo;ll be fighting Windows every step of the way. That\u0026rsquo;s just the way it is. But, It\u0026rsquo;s still good to give it a shot, so, here we go:\nFirst, the easy one. Just run Shut up 10. Read through each option, do what you want. This can change a bunch of settings to be much more reasonable too, like fixing the start menu search to not search the web.\nIf some not-up-to-the-times guide says to use CCleaner, don\u0026rsquo;t. It\u0026rsquo;s basically a virus now! Then, you\u0026rsquo;ll want to go through everything and just rip the crap out. Don\u0026rsquo;t forget, Candy Crush is installed with 10 by default. And there\u0026rsquo;s more… so, so much more. If it\u0026rsquo;s an HP, just search the start menu for \u0026ldquo;hp\u0026rdquo;, Dell, \u0026ldquo;Dell\u0026rdquo;, and so on. That will help you find a lot of the garbage. I also recommend opening up task manager (Ctrl+Shift+Esc), selecting more details, clicking the Startup tab, and seeing if there\u0026rsquo;s anything you don\u0026rsquo;t use that you can uninstall or at least disable. From there, just go digging though add/remove programs and start mashing remove until you\u0026rsquo;re satisfied. If you haven\u0026rsquo;t run updates yet, it\u0026rsquo;s possible Windows will install yet more crap, so you might need to double check.\n1.2 Installing System Stuff # Update the OS before drivers - Windows likes to replace new drivers with old sometimes! Drivers # Okay, first up, drivers. Ideally, Windows wouldn\u0026rsquo;t go grab ancient driver to begin with, but here we are. To start with, you\u0026rsquo;ll want to grab the drivers for your graphics card, CPU, and chipset. Should you not know what CPU you have, just open task manager and go to the performance tab. It should say in the top right corner. There\u0026rsquo;s (with some weird exceptions) four possibilities\nAMD CPU with integrated graphics AMD CPU without integrated graphics Intel CPU with integrated graphics Intel CPU without integrated graphics Now, with any of the four options, you might also have a dedicated graphics card, which will need its own drivers. This (currently) will either be an AMD or Nvidia card, and you should be able to see it listed under GPU as the last entry in the performance tab in task manager. If you see two graphics cards (GPU0 and GPU1) one of them is probably the integrated graphics. You can confirm if it\u0026rsquo;s a dedicated or integrated card by looking if there\u0026rsquo;s a \u0026ldquo;Dedicated GPU memory\u0026rdquo; field under the graphs. If there is, it\u0026rsquo;s a dedicated card. If there\u0026rsquo;s not (so only \u0026ldquo;Shared GPU memory\u0026rdquo;) then it\u0026rsquo;s an integrated card. This now means there\u0026rsquo;s really 12 basic system driver options, the above four, plus a variant of each with either a dedicated AMD card or dedicated Nvidia card.\nFortunately, we can group these up pretty easily:\nIf you\u0026rsquo;re on an all AMD system (no Intel or Nvidia), just go to the AMD support page, hit the big download button, run it, and set everything up. You should be good to go.\nIf you\u0026rsquo;re on an all Intel system, head to the Intel Driver Support page and download, install, and run the driver assistant. It will open a web browser page with links to the drivers for you to download and install.\nIf you\u0026rsquo;re on an AMD CPU + Nvidia GPU system, congrats on having a cool computer that you probably built yourself. This might be a bit tricky if you have an AMD CPU with integrated graphics, as sometimes the big Nvidia card and Integrated AMD graphics drivers don\u0026rsquo;t get along. Ideally, you\u0026rsquo;d just turn off the integrated graphics in the BIOS. Regardless, your best bet is to do things a bit more manually, on the the AMD support page go down a bit and select your particular CPU, grab its driver. Then, you\u0026rsquo;ll need to know what chipset you have. On AMD systems this can be quite a few different options, so go ahead and download and install CPU-Z. Open it up, and you\u0026rsquo;ll need two pieces of information. First, your CPU socket. On the man tab this should be under \u0026ldquo;Package\u0026rdquo;, on any modern system this should be \u0026ldquo;AM4\u0026rdquo;, then click the mainboard tab, and look for the \u0026ldquo;Southbridge\u0026rdquo; line. This will probably be AMD x370 or x470, etc. Now, you can head back to the driver page, and find the matching entry, for example, Chipsets→AMD Socket AM4→x370. Then just pick the latest one. You probably don\u0026rsquo;t need the ones with \u0026ldquo;RAID\u0026rdquo; in the name. Now you\u0026rsquo;ve got the AMD part done, go grab Nvidia\u0026rsquo;s GeForce Experiance software, set it up and make an account (signing over your first born), and you can then update the Nvidia driver. Done.\nIf you\u0026rsquo;re one an Intel CPU + AMD GPU system, you should be good to head to the Intel Driver Support page and download, install, and run the driver assistant, then head over to the AMD support page, hit the big download button, run it, and set everything up. This is a relatively uncommon setup though, so you might want to double check this is actually what you have.\nFinally, if you\u0026rsquo;re on an Intel + Nvidia system, you should be good to head to the Intel Driver Support page and download, install, and run the driver assistant and then grab Nvidia\u0026rsquo;s GeForce Experiance software, set it up and make an account (signing over your first born), and you can then update the Nvidia driver. Done.\nOkay, that\u0026rsquo;s the big uns\u0026rsquo;. You may still want to go grab up to date drivers for some other things like networking, but, frankly, most of it is in \u0026ldquo;If it works, don\u0026rsquo;t fuck with it\u0026rdquo; territory. Now, of course, that\u0026rsquo;s assuming it works. This would be a good time to make sure the system actually does what you think it should. If something is weird (slow disks, networking dropping out, flakey USB, etc.) adjust accordingly. You\u0026rsquo;ll also need to grab drivers for any peripheral drivers you want to take advantage of. Razer, Roccat, Logitech, Corsair, etc. all have their own drivers for their mice, keyboards, webcams, and what not.\nSystem Utilities # Task manager and Windows Settings are great and all, but they\u0026rsquo;re a bit limited. Before we go getting more utilities though, you should know what you have available.\nIf you have a dedicated graphics card, if you right click your desktop (with nothing open) you\u0026rsquo;ll probably see that you have either an option for \u0026ldquo;AMD Radeon Software\u0026rdquo; or \u0026ldquo;Nvidia Control Panel\u0026rdquo;.\nNote, on Windows 11, these may be behind \u0026ldquo;Show more options\u0026rdquo;!\nBoth of these let you change settings for your graphics card. The AMD version has the driver update check built in as well, while for Nvidia that\u0026rsquo;s over in GeForce Experience. You might want to poke around options here and see what\u0026rsquo;s available. There\u0026rsquo;s some advanced settings lurking in here, but even touching familiarity will be useful.\nAs for other hardware utilities, you may want to just type \u0026ldquo;AMD\u0026rdquo; or \u0026ldquo;Intel\u0026rdquo; into the start menu search as well and see what utilities pop up.\nWindows also has a few application specific tools you should be aware exist, like the disk managment tool, device manager, and task scheduler, and services manager. While we\u0026rsquo;re on the subject, now tould be a good time to go check each and make sure everything is sane.\nLet\u0026rsquo;s start by opening up \u0026ldquo;device manager\u0026rdquo;, you should see a bunch of different categories ranging from \u0026ldquo;Audio Inputs and Outputs\u0026rdquo; to \u0026ldquo;Universal Serial Bus Controllers\u0026rdquo;. What you shoud be looking for is a any thing showing up as \u0026ldquo;⚠ Unknown Device\u0026rdquo; as this is a sign that you have something that\u0026rsquo;s unhappy about drivers. The exact method for figuring out which device this is varies, but a good portion of the time this will be a USB device. If that\u0026rsquo;s the case, a good place to start is to right click the device, select properties then the Details tab, then select the \u0026ldquo;Hardware IDs\u0026rdquo; property. You should see something like \u0026ldquo;USB\\VID_258A\u0026amp;PID_0013\u0026amp;REV_0100\u0026amp;MI_00\u0026rdquo; what we actually need from that is the Vendor ID (VID) and Product ID (PID), in this case that\u0026rsquo;s 258A and 0013. If you search the web for these together as VendorID:DeviceID (so, 258A:0013), you\u0026rsquo;ll often be able to figure out what the offending device is. For example, Googling this example \u0026ldquo;258A:0013\u0026rdquo; the first result is for a gaming keyboard, which is correct.\nNow, let\u0026rsquo;s head over to Disk managment. Here the big thing we should be looking for is any large blocks of unallocated space or partitions you don\u0026rsquo;t recognize (if you\u0026rsquo;ve installed Linux, Windows will see these partitions, but have no idea what they are!) - on a normal, single disk, Windows system there will probably be a ~300Mb EFI System Partition, a very large (the majority of the disk in size) \u0026ldquo;Windows C:/\u0026rdquo; partition, and one or two recovery partitions, totalling less than 30Gb.\nHeads up, the graphical disk managment utility may not let you do some things! In this case you may need to run diskpart in cmd. Things can get weird if you\u0026rsquo;re using Bitlocker for encryption or if your BIOS is set to RAID mode (even if there\u0026rsquo;s only one disk) in either case, it will be really tough to access data from Linux. This may not seem like a big deal to you if you don\u0026rsquo;t intend to dual boot, but it can make data recovery or virus removal a massive pain in the ass later. If you\u0026rsquo;re here, you might also be in need of a quick way to make a clone of a disk from within Windows, in that case, I\u0026rsquo;ve had luck with RawDiskCopier (GitHub)\nIf you\u0026rsquo;re feeling really adventureous, you can actually get Windows to run on BTRFS. Just know that here be dragons. Next up, lets make sure HP/Dell/Acer/etc. didn\u0026rsquo;t put any dumb things into the task scheduler or services. Open the start menu, search for \u0026ldquo;Task Scheduler\u0026rdquo; and open it. Click \u0026ldquo;Task Scheduler Library\u0026rdquo; and look through the entries, don\u0026rsquo;t be afraid to web search if you don\u0026rsquo;t know what some are. If there\u0026rsquo;s some you know you don\u0026rsquo;t need, just right click and disable them.\nThen, into services. While you can into services by opening the start menu and searching for it, I want to show you the Run dialog, because occasionally the start menu will break on windows and using the run dialog can be a good way to force your way into thing anyway. So, go ahead and hold the windows key and press \u0026lsquo;r\u0026rsquo;, a run dialog box should show up where you\u0026rsquo;d expect the start menu. Type \u0026ldquo;services.msc\u0026rdquo;. This will bring up the service managment window. Most of these are nammed fairly well and have good descriptions. If there\u0026rsquo;s something that absolutely doesn\u0026rsquo;t need to run (like the Xbox services on an office computer) it\u0026rsquo;s not a bad idea to just disable it.\nFor your sanity later, I\u0026rsquo;m going to recommend a whole host of deeper utilities \u0026amp; basic system improvments\nProcess Explorer (or Process Hacker) can actually let you see what\u0026rsquo;s going on when a particular program is misbehaving\nEarTrumpet unfucks the audio menu. On 11, it will mean you\u0026rsquo;re stuck with 2 sound buttons, but it\u0026rsquo;s worth it.\nWSL Arch [TODO]\n1.3 Noodling with settings # Now, I recommend you go through literally all of your settings. Both in the old school control panel and the newer setting nightmare. There\u0026rsquo;s some settings I do want to point out though:\nFirst, is assigining programs to use a dedicated GPU. If you\u0026rsquo;re on a laptop (or desktop, though it\u0026rsquo;d be rare) with both integrated and dedicated graphics, the laptop probably switches between the two to save power. Unfortunately, it might get this wrong sometimes resulting in some programs running like ass. Games are usually fine, but for art tools like Krita, PCB design tools like KiCad, or really any other creative tool with a resonably interactive graphical interface Windows often gets it wrong. On 10 [TODO], on 11 this if you just search \u0026ldquo;GPU\u0026rdquo; it will bring you to the graphics settings page for this. In either case, just add the program (might need to be done by file path to the .exe) and then set it to use the \u0026ldquo;High performance\u0026rdquo; card.\nNext, Windows defaults to saving power - even on desktops. In the start menu, search for \u0026ldquo;choose a power plan\u0026rdquo;, select that, and switch to whatever the highest performance is called on your system (\u0026ldquo;Ultimate Performance\u0026rdquo; or whatever). On laptops this will eat more battery though. While you\u0026rsquo;re here, you should see an option on the left for \u0026ldquo;Choose what the power buttons do\u0026rdquo;. Click that, click \u0026ldquo;Change settings that are currently unavailable\u0026rdquo;, and **un-**tick \u0026ldquo;Turn on fast startup\u0026rdquo;.\nNow, onto networking. First of all, go into networking settings and dig around for \u0026ldquo;Random hardware addresses\u0026rdquo; and turn that off. It doesn\u0026rsquo;t do jack shit for secutiy or privacy, and it just makes a lot of networks kick you off repeatedly. It\u0026rsquo;s super annoying.\nWhile we\u0026rsquo;re playing with networking, you might want to use a different DNS provider. No matter who you go with, they\u0026rsquo;ll track you, so it may as well be a better one than the stock one. ╮(─▽─)╭ Go to the old control panel → Network \u0026amp; Internet → Network \u0026amp; Sharing Center, then, on the left, click \u0026ldquo;Change Adapter Settings\u0026rdquo;. Your active connection should be pretty obvious- right click whatever it is, select properties. You should be in the networking tab, click (But do not un-check!) the \u0026ldquo;Internet Protocol Version 4 (TCP/IPv4)\u0026rdquo; option and click properies. Now, at the bottom, \u0026ldquo;Obtain DNS server address automatically\u0026rdquo; is probably checked. Select \u0026ldquo;Use the following DNS server addresses\u0026rdquo; and enter 1.1.1.1 and 8.8.8.8 as the Preferred and Alternate respectively.\nNext up, let\u0026rsquo;s fix the stupid file explorer settings. In the start menu, search for and open \u0026ldquo;File Explorer Options\u0026rdquo;. Click the \u0026ldquo;View tab\u0026rdquo;, turn on \u0026ldquo;Display the full path in the title bar\u0026rdquo;, \u0026ldquo;Show hidden files, folders, and drives\u0026rdquo;. Now, you can close that window and open literally any folder to view files. In the file explorer, go to the top ribbon and select View→Show, and turn on \u0026ldquo;File Name Extensions\u0026rdquo;\nNow onto the display. First things first, open the start menu and run \u0026ldquo;Adjust ClearType Text\u0026rdquo;, go through it and do what looks best to you. Then, let\u0026rsquo;s go make sure you\u0026rsquo;re display settings are sane. You should be able to right click in the desktop (with no window) and select \u0026ldquo;Display Settings\u0026rdquo;. What you\u0026rsquo;ll want to check is that the resolution is set to the displays maximum (with a few rare exceptions), and unless you need it that the scale is set to 100%. Then, go into the advanced options and make sure the refresh rate is set to the maximum supported by the display. Probably 60hz on most, but commonly 120 or 144hz on gaming laptops.\nNext up, lets make it so that when a Blue Screen of Death (BSoD) does happen, we can actually figure out why. In the start menu, search for and open \u0026ldquo;Adavced System Settings\u0026rdquo;, click \u0026ldquo;startup and recovery\u0026rdquo; and make sure \u0026ldquo;Automatic memory dump\u0026rdquo; is selected in the Write debugging information menu. Close out of the start up and recovery window, but not the system properties window - while we\u0026rsquo;re here we can tweak some visual effects to make things feel snappier. Still on the advanced tab, click the performance button, and then under visual effects. Turn off all the \u0026ldquo;Fade\u0026rdquo;, \u0026ldquo;Slide\u0026rdquo; animations, as well as Animate Windows when minimizing and maximizing.\nWindows really doesn\u0026rsquo;t like to tell you what\u0026rsquo;s going on during updates, with messages like \u0026ldquo;Getting things ready\u0026rdquo;. Fuck that. Fix this by opening an admin command prompt and running reg add \u0026quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\u0026quot; /v verbosestatus /d 1 /t REG_DWORD /f The messages often happen to quickly to read (especially if you have a fast computer and SSD) but it\u0026rsquo;s better than what it was.\nIf you\u0026rsquo;re on Windows 11, the new right click menus really, really suck. Follow this to fix that.\nOne of my bigger gripes with Windows is that many of these settings that you\u0026rsquo;d want to change do exist, it\u0026rsquo;s just you have to go edit the registry to change them - which means you have to know they exist and what key to add. Basically, this turns into a game of trying to web search the right term to fix the annoyance. Finally, for the command line lovers, I think that just by having the newer, less shit Windows Terminal installed you\u0026rsquo;ll get a \u0026ldquo;Open In Windows Terminal\u0026rdquo; context menu added to the file browser.\n1.4 Installing User Stuff # You probably have your own prefneces in Software. Statistically, you\u0026rsquo;re probably a Chrome user. That\u0026rsquo;s cool, you do you. (I\u0026rsquo;m a Vivaldi guy) Regadless, I recommend installing all of the software that you can via winget, as it makes it much less likely that you\u0026rsquo;ll download shit, and it\u0026rsquo;s just generally easier and faster.\n[TODO]\nAutohot key WSL VLC 7-zip Windows Terminal VS Code Audacity Typora Speed crunch Clink 1.5 Security \u0026amp; Backups # Just use Windows Defender (built in). If you have Norton or McAffee please just unistall them, they do more harm than good. If you need more, I really just recommend you have a linux live disk with clamtk on it as It\u0026rsquo;s amazing how well some viruses protect themselves, but if you boot into a different OS, they\u0026rsquo;re not even able to run.\nOn top of that, just have backups. If somehow you do manage to get a cryptolocker, it wont matter if you have regular backups.\nReally though, the best protection is not being a dumbass. Don\u0026rsquo;t go to weird pron websites, use an adblocker,\nIf you want to protect your files there\u0026rsquo;s VeraCrypt, just know that encryption comes with a disk overhead, so, if your on an HDD, windows 10 will be slower than bearable in my experience.\nIf you want to be one of the cool kids, use KeePassXC for password managment. It can generate good passwords for you.\n[TODO] Security\n2. Understanding Windows \u0026amp; Fixing issues # One of the most annoying things about Windows is that it\u0026rsquo;s an absolute pain in the ass to figure out what is going wrong when something goes wrong. Still, there\u0026rsquo;s a few things that even knowing about will make fixing issues less awful. Some of identifying issues on Windows is, frankly, blind intuition. It comes from years of experiance and repeatedly cursing Microsoft\u0026rsquo;s shitty forums and help sections.\nSo, let\u0026rsquo;s dig into some core window\u0026rsquo;s stuff for just a moment. The very TL;DR version:\nWindows, since Vista, is based on the NT kernel\nThis means most low-level fixes and articles you read since then should be reasonably accurate Window\u0026rsquo;s disks are formatted as NTFS. NTFS is awful. [TODO] BTRFS\nWindows file permissions are way weirder than linux\u0026rsquo;s *rwxrwxrwx structure. Permissions can and will fuck you.\nIf the user has a Microsoft account associated, the username isn\u0026rsquo;t always the username. If you encounter this issue, I wish you luck in figuring out what the correct name actually is. Drivers for windows tend to be a mess. Keeping them up to date is awful. Windows update will often install very old (or even incorrect) driver by default.\nWindows programs install themselves all over the fucking place. Yes, there\u0026rsquo;s program files and program files x86, but sometimes things wind up in %appdata% or ProgramData or put themselves somewhere else entirely.\nYou may not be able to see these if you don\u0026rsquo;t turn on show hidden files Some programs are \u0026ldquo;apps\u0026rdquo; and these are sort of their own thing too\nWindows is sort of a mess for the sake of retaining backwards compatability\nA lot of windows programs have at least a few dependencies, like Java or Visual C++ 20xx-20xx Redistributable\nThat said, there are some nuggets of wisdom I can provide, in no particular order:\nTry rebooting\nBy default in Windows if you shutdown and then hit the power button to turn your system back on it doesn\u0026rsquo;t actually power off! It only hibernates (stores system state to RAM). If you press reboot it will do an actual restart, which tends to fix things. Check uptime in task manager. Window\u0026rsquo;s has weird power settings by default. Shutdown does not mean shutdown. Shutdown and restart actually means update-reboot-update-shutdown. Window\u0026rsquo;s power plans can cause weird behavior, sometimes slowing the system down to a crawl- making \u0026ldquo;high performance\u0026rdquo; actually run horribly. Try changing this if you notice your CPU is at 100% but doesn\u0026rsquo;t appear to be doing anything.\nIf a setting isn\u0026rsquo;t showing up, or you\u0026rsquo;re getting permission denied, check the related setting in the Group Policy Editor (gpedit)- rarely, turning the setting off-on-off will fix things too.\nAs a quick sanity check, you can always run sfc /scannow and DISM /Online /Cleanup-Image /RestoreHealth and sigh is exasperation as that finds and corrects errors\nIf this did find errors, double check the system disk isn\u0026rsquo;t fucked/running like ass/throwing SMART errors Windows can and will randomly revert setting on updates. Including registry tweaks.\nIf you keep blue-screening, use windbg and run !analyze -v on a system dump, with luck you might just find it\u0026rsquo;s one driver being weird.\nEvent Viewer will almost never say anything useful. If you keep freezing and nothing shows up in event viwer after rebooting and you aren\u0026rsquo;t getting dump files, you might try leaving audio playing. If you still have audio playback on the next freeze, it\u0026rsquo;s a graphics problem - either your graphics driver or hardware.\nIf networking is hecked up:\nTurn off random hardware addresses. It doesn\u0026rsquo;t do shit for security and it makes a lot of networks freak the fuck out. Try checing local connection first (go to your router\u0026rsquo;s page, probably at 192.168.1.1) and if that works, it\u0026rsquo;s not Windows … probably…. It might be DNS. Even with correct DNS settings, windows sometimes just… fucks off? Usually, the built in \u0026ldquo;diagnose and fix problems with my network\u0026rdquo; will actually fix this, just by resetting things. Try a different network adapter- if you\u0026rsquo;re on WiFi, try an Ethernet connection or vis-versa. This is a good reason to have a spare USB networking adapter laying around. Run ipconfig /all, see if all the settings make sense. Do you have an IP assigned to you? Is the gateway correct? If your printer isn\u0026rsquo;t working:\nIf you\u0026rsquo;re trying to print to a printer connected via WiFi, assume it\u0026rsquo;s the printer first. Try connecting the printer via USB Place a floppy disk, PS2 keyboard, ball mouse, Intel 8086, and a copy of System BIOS for IBM® PC/XT™/AT® computers and compatibles into a pentagram with lines drawn from DB-25 cables. Gather two friends, ideally wearing pagers, but not required. Next, all together, softly begin chanting \u0026ldquo;C colon backslash, C colon backslash\u0026rdquo;. If done correctly, you should begin to hear the SYN-ACK portion of the dialup handshake. This is your cue to sacrifice which ever of your two friends takes longer to enter a valid tar command. With the blood of this friend being absorbed by the copy of System BIOS for IBM® PC/XT™/AT® computers and compatibles you should now have a five minute window in which you can successfully print. Take care to ensure you have first filled the printer with full ink cartridges, as anything less than completely full will result in a \u0026ldquo;low on ink\u0026rdquo; error which may only be resolved by repeating the incantation with fresh supplies. Give up and buy a dot matrix printer. Can\u0026rsquo;t rename a file with a really weird name? → Boot into Linux and rename it\nWindows Update not working? Try the update assistant\nBoth ctrl+alt+delete and win+shift+escape to bring up task manager should always work, even if explorer.exe isn\u0026rsquo;t responding. This means you can use task manager to restart explorer.exe if necessary.\nIf everything is super-duper fucked- random crashing, corrupted files, etc. run a mem test.\nRunning out of space? → run \u0026ldquo;Disk Cleanup → Clean up System Files\u0026rdquo;, and then use windirstat to find the offending files\nCan\u0026rsquo;t get a program to install? → Try extracting it with 7Zip or UniExtract2 and running the executable directly. It works\n2.5 For The Dual Booters # Windows likes to think it\u0026rsquo;s the only OS on your system even if it\u0026rsquo;s not. Sometimes this means it\u0026rsquo;ll just eat your bootloader (so keep a live linux disk around to fix that). Other times it\u0026rsquo;s a comical yet annoying tendancy to have update-and-shutdown actually update-and-reboot-into-Linux making it so the next time you boot Windows it just immediately shuts off. Fun stuff. On top of that, Windows only supporting NTFS [TODO, BTRFS] means if you want to share data between the two, you\u0026rsquo;re pretty much stuck having your data be on an NTFS partition. Finally, Windows is weird and uses a different time standard than everyone else, so if you want Windows to not fuck up your clock every reboot, open an admin command prompt and run reg add \u0026quot;HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\TimeZoneInformation\u0026quot; /v RealTimeIsUniversal /d 1 /t REG_DWORD /f\n3. For The programmers # Windows tends to want programmers to do things in a certain way. Visual Studio has a certain workflow, and it\u0026rsquo;s more-or-less expected that you\u0026rsquo;re using it and have fully drank Microsoft\u0026rsquo;s koolaid. If you try to do things your way, it absolutely will be a massive pain in the ass. I don\u0026rsquo;t think this should be a massive revelation, it\u0026rsquo;s sort of the standard across windows. Linux lets you pick your desktop environment, Windows gives you explorer.exe. It\u0026rsquo;s just how it is.\nThat said, if you have drank the koolaid, it\u0026rsquo;s actually pretty awesome. Visual Studio is probably the best all rounder\u0026rsquo; IDE. It\u0026rsquo;s got great integrated tools, the debugger wraps into it well, it has good support for developing for in a lot of languages and for quite a few platforms (Android, Windows win32, windows apps, etc.)\nStill, in my opinion It\u0026rsquo;s corporate, sterile, and just sucks. MSVC sucks. CMD sucks. PowerShell sucks. All the tools are shit, give awful error messages, and distract from getting work done. You\u0026rsquo;ll be in a software with infinite drop downs, constantly-reaching-for-your-mouse hell. Worse, most good development tools are Linux only, so, you\u0026rsquo;ll either be running WSL or a VM to do some things anyway.\nAt the end of the day, to me, it comes down to this: If you want to make yet another generic web app with dotnet and get a code slinging job making software the world really doesn\u0026rsquo;t need, sure, Windows might be the best bet. If you want to actually enjoy writing code, don\u0026rsquo;t fucking use Windows\nOkay, I do have to put one more exception in here: Game development. While you can do Unity or Unreal dev in Linux, you\u0026rsquo;ll be shooting yourself in the foot doing so. That said, if you\u0026rsquo;re going for something open like Godot anyway, Linux will be fine. Okay, so what do you need to know?\nWindows is NOT POSIX: Windows has weird line endings Being a different OS, it also has diffeernt system calls NTFS the filesystem is case sensative; however, Windows artifically makes it not case sensative- don\u0026rsquo;t put myasm.S and myasm.s in the same folder! Also, there\u0026rsquo;s a bunch of annoying reserved words, file names can only be 255 characters, and some characters are not allowed. Fun, right? You\u0026rsquo;ll probably have to fight compilers a bit Welcome to editing environment variable hell … see the win32 api … and a different executable format [TODO] exe vs MSI All of that said, WSL on Windows is acutally pretty great and solves the vast majority of this. There\u0026rsquo;s a few exceptions if you need pedal-to-the-metal performance or access to /dev for not stupid device access (like developing embedded systems) then clearly WSL isn\u0026rsquo;t going to cut it. Furthermore, you\u0026rsquo;ll still need to install a ton of tools to make the windows-y operations less awful, like clink to make cmd slightly more tollerable, tools like groupy and fancyzones can make the actual window managment in Windows less bad… you get the idea.\nUsing Visual Studio # Setting up Windows compilers, debuggers, git, shells, etc. # ​\n"},{"id":92,"href":"/engineering/making/3dprint/","title":"3dprint","section":"Engineering","content":" Chapter 42 - 3D printing, CNC, and making things # 31.1 - Basic making # Wood working # Safety # Cool projects # Lichtenberg Figure Table (Imgur)\nEpoxy Inlay and Rustic Compass Butcher Block Countertops (Imgur) (YouTube)\nWood Tables Embedded with Photoluminescent Resin (Mike Warren)\nCAD Up Some Shoes But Don\u0026rsquo;t Start From Scratch (Hackaday, DaveMakesStuff) + 3D Printed Shoes Make Bigfoot tracks (Hackaday, Stephan Henrich)\n3D Printing Diffraction Gratings (iridescent/rainbow surfaces)\nMetal Working # Safety # 41.2 - CNC, 3D, Lasers, \u0026amp; Plotting # Plotting # Laser cutting \u0026amp; Milling # lasercut openscad library\n3D Printing # From personal experience, I can tell you the really cheap, like sub $200 printers, are mostly shit. I\u0026rsquo;m currently rocking an Ender 3 V2, which is around $300.\nSo far I\u0026rsquo;ve had pretty good luck with it. It\u0026rsquo;s not perfect, and if you do get the base kit, you\u0026rsquo;ll still probably need to put some money into it to upgrade it to fix some of it\u0026rsquo;s more glaring issues, but that can be done iteratively and it will still work \u0026lsquo;stock\u0026rsquo;.\nIt\u0026rsquo;s also a pretty popular printer, which means there are a lot of videos on upgrading it and printable upgrade parts on Thingiverse.\nObviously still do your own research, but at least as of the time of writing (Mar of 2021) this seems like the best option at an entry-level price point. If you can\u0026rsquo;t do at least this printer, I\u0026rsquo;d really advise just saving your money, because anything cheaper is really going to be questionable, to the point it may not ever really work.\n[TODO]\nCalibration @ https://teachingtechyt.github.io/calibration.html\n[TODO] Autoleveling\nModeling # [TODO] look into https://libfive.com/studio/ instead of OpenSCad as OpenSCad is full of problems\n[TODO] compliant design, see 3D Printed Joystick Using Spherical Flexure Joint (Hackaday)\nOpenSCad # https://github.com/davidson16807/relativity.scad\nhttps://github.com/revarbat/BOSL2\nhttps://github.com/JustinSDK/dotSCAD\nisogrid2020 (GitHub)\nVpype (GitHub) - \u0026ldquo;The Swiss-Army-knife command-line tool for plotter vector graphics.\u0026rdquo;\nLaser Etching Stainless Steel with Mustard (Hackaday)\nAchieve true 3D printing with non-planar slicing (YouTube, Teaching Tech)\n3D Printing 90 degree overhangs with non-planar Slicing (Hackaday)\nGiant Mechanical Iris! Cut on a CNC Router (YouTube)\nTopology Optimization makes for some cool shelves (YouTube)\nCleaner Laser Cutting With a 3D-Printed Nozzle (Hackaday) ,Links to article by Jesse @Nervous Systems\nElksmaker modifications (YouTube)\nSome neat 3D printable things # https://www.prusaprinters.org/prints/7876-rotating-rings-toy\nVGA USB cover (Thingiverse)\nFuckofftopus 2.0 (Thingiverse)\nMotorized Scaly Gauntlet (Hackaday)\nFractal Vise Holds Odd-Shaped Objects Tight (Hackaday)\n3D PRINTING SEX TOYS: a quick, easy and safe method! (Billie Ruben)\n3D Printing Materials # PLA, ABS, PETG, etc. # https://www.3dnatives.com/en/plastics-used-3d-printing110420174/\nThe Weird Stuff # Started working on 3d printed foam again. This piece printed in about 7 hours (parallel printers). I have a lot to learn about actually finishing a head so I\u0026#39;ve been printing out 1/4 and 1/2 heads for practice. Failing fast and often pic.twitter.com/9Q5XP4Cjhw\n\u0026mdash; Rev (@RevitFur) July 12, 2021 https://hackaday.com/2022/08/18/put-3d-metal-printing-services-to-the-test-by-making-a-watch/\n41.3 - Aluminum Extrusion # Getting started with Aluminum Extrusions (Hackaday)\n"},{"id":93,"href":"/engineering/making/hamradio/","title":"Hamradio","section":"Engineering","content":" Chapter 43 - Ham Radio # \u0026lsquo;137Mhz\u0026rsquo; by u/CashewHut LORA\n2.4Ghz patch antenna\nelectronically tunable filters\nNational Radio Quiet Zone (Wikipedia)\nhttps://newhams.info/2017/02/17/rf-connector-types/\nquestion of the day:\nAnalog TV is shut down in the US, right? so all the over-the-air TV is digital. And existing analog OTA frequencies are getting repurposed to other uses... so what am I seeing on UHF channel 60? it\u0026#39;s got way more structure than the noise everywhere else. pic.twitter.com/Jm9W9JsjgF\n\u0026mdash; foone (@Foone) March 17, 2020 Archive.org backup of the above tweet Waveguides Explained (YouTube)\nHow a Crystal Radio Works (YouTube)\nSo You Got an SDR (Twitch, DefCon28) (Youtube, Defcon28)\nRadi-uhoh : What is this SDR thing and how do I use it?: Josh Conway (Youtube)\n2200-meter band (Wikipedia)\nPassive Radio with SDR (Stephan Cass, IEEE)\nChattervox (GitHub)\nMonitor Airplane Traffic with a Raspberry Pi and SDR\nSDR: Digital Adventures in Shortwave Radio (Justus.ws Blog)\nIRC over LORA for when things go really south(Tom Nardi, Hackaday)\nA Cleverly Concealed Magnetic Loop Antenna (Jenny List, Hackaday)\nVideo courtesy of OH6BPL Here OH6BPL is using the Computer Craft Minecraft mod to mirror the settings of his radio! From u/irresponsible_owl on Reddit, in response to a picture of a USB cable with a dozen ferrite cores on it:\nAre you sure the cable is shielded? One quick way to tell is to put a continuity tester on the outside metal parts of each end. If it beeps, the cable is likely shielded. I\u0026rsquo;ve seen tons of cables that aren\u0026rsquo;t, where there\u0026rsquo;s no connection between the jack covers - even though the USB specification says there must be. If there\u0026rsquo;s continuity it doesn\u0026rsquo;t guarantee it\u0026rsquo;s shielded, but lack of continuity is a sure sign it\u0026rsquo;s not.\nIf the cable is shielded, you shouldn\u0026rsquo;t need more than 2 ferrites, one at each end.\nSource: I\u0026rsquo;ve been down this road before…\nEdit: Here are some fun articles to read:\nhttps://www.yoctopuce.com/EN/article/usb-cables-shielding-matters-as-well\nhttps://www.totalphase.com/blog/2020/05/what-are-the-guidelines-for-testing-ground-and-shield-resistance-of-usb-cables/\nYou can get a lot more in depth with the testing if you want… or just buy a higher quality cable :D\n?\u0026gt; I\u0026rsquo;ve actually set this up using a HackRF and Rock64. It\u0026rsquo;s pretty neat. Just be aware the ADS-b, the radio signals you\u0026rsquo;ll be picking up to do this, are very line-of-sight so you might need to plop the antenna on your roof or something.\n"},{"id":94,"href":"/engineering/making/history/","title":"History","section":"Engineering","content":" Chapter 44 - History # BBS and Tildie Sites # tilde.town: A social network over SSH\nTilde.club\nOther Tilde Services?\nhttps://en.wikipedia.org/wiki/The_Mother_of_All_Demos\nAdam Savage\u0026rsquo;s Computer History Collection! (YouTube)\nPreserving data # https://media.ccc.de/v/31c3_-_6373_-_en_-_saal_6_-_201412291600_-_the_only_thing_we_know_about_cyberspace_is_that_its_640x480_-_olia_lialina#t=3641\nPreserving hardware # https://en.wikipedia.org/wiki/Delay_line_memory\nhttp://www.vcfed.org/forum/forum.php\nhttps://skilldrick.github.io/easy6502/\n"},{"id":95,"href":"/engineering/making/mechanical/","title":"Mechanical","section":"Engineering","content":" 45 - Mechanical Bits # Through all the Engineering pages I\u0026rsquo;ve focused on electrical and programming solutions, because those are what I know, but they are not always the right answer. For example, in this Reddit post the author asks \u0026ldquo;What kind of motor can I use for this? I need a lightweight pole to go from 0 to 90 degrees [as fast as possible]?\u0026rdquo; and the answer really stuck out to me\nIf you really want fast. Go stored kinetic energy with sudden release.\nYou can use a motor or other energy source to build up the kinetic energy in some elastic material.\nA simple catapult, if you will. If you don\u0026rsquo;t want old school, you can store your energy in a pneumatic system. A valve controlling how much can go into the cylinder at once would control your speed.\nFailing that, electromagnetic (like a solenoid) will probably be fastest.\n- u/olderaccount Now, if you\u0026rsquo;ve actually read through these guides in order, you\u0026rsquo;d know there\u0026rsquo;s a lot of complexity hidden in that answer. You might need a PID (see Control Systems ) to compensate the system to behave as you want still, but the point remains- you shouldn\u0026rsquo;t look to solve problems solely with fancier electrical parts: use everything you\u0026rsquo;ve got. While code on a microcontroller can do a lot, at the end of the day, you\u0026rsquo;ll still need to interface back to reality - and that means hacking away at real materials, using tension in springs, moving gears, etc.\nI absolutely do not have the expertise to teach about these things, so instead I\u0026rsquo;ll do my best to link to resources I find\nGears # Openscad Gears Library (or This one)\nhttps://woodgears.ca/gear_cutting/index.html (or the better, standalone version)\nSprings/Dampening # Belts # Thermals # Materials # Metals # Corrorision, weldability, etc.\nElasticity # Vibration # Hydraulics \u0026amp; Pneumatics # Pumps # Valves # Viscosity # Fuels # Lubrication # Thinking Outside the box # Big LED Matrix Becomes Tiny LED matrix Thanks to Fiber Optics (Hackaday, Elliotmade)\n"},{"id":96,"href":"/engineering/math/algebra/","title":"Algebra","section":"Engineering","content":" 1 - Algebra # This section is a tad bit misnamed, as instead of covering just Algebra I\u0026rsquo;ll be covering most things you\u0026rsquo;d learn in a high school Algebra class along side it, plus probably a bit extra. Number Systems # To get started, let\u0026rsquo;s look at \u0026lsquo;Number Systems\u0026rsquo;. Essentially, there are a variety of \u0026rsquo;types\u0026rsquo; of numbers, rather than get all philosophical let\u0026rsquo;s just dive in and I think you\u0026rsquo;ll get the gist.\nℕ - Natural Numbers # Natural Numbers are the dead basic set of numbers, 1, 2, 3, 4, 5, etc. note, this doesn\u0026rsquo;t include fractions, decimals, etc. or the number 0. Whole Numbers is the set of natural numbers and the number 0, so 0, 1, 2, 3…\nℤ - Integers # Alright, Natural and Whole numbers are great and all, but what if we want to represent a deficit or debt? Negative numbers would definitely be nice- introducing Integers, this is just the set of Whole numbers and the their inverses, so -3, -2, -1, 0, 1, 2, 3 …\nIf you come from a programming background, do note that what programming languages call integers is ever so slightly different. Namely, mathematically integers include arbitrarily large numbers, but in programming most int types are bounded by how many bits they can store, for example, an 8 bit signed integer can only hold values ranging from -128 to 127. ℚ - Rational Numbers # Rational numbers are any numbers which can be written as an interger over another integer.\nOf note, these can be written as mixed numbers too, that is \\( \\frac{4}{3} = 1\\frac{1}{3} \\) , as \\( \\frac{3}{3} = 1 \\text{ so the remaining } \\frac{1}{3} \\) is just written next to it.\nNote, that rational numbers do include numbers with an infinite repeating decimal, that is while \\( \\frac{1}{2} \\text{ can be written as } .5 \\) , \\( \\frac{1}{3} \\text{ has a repeating decimal, } \\frac{1}{3} = .333333... = .\\overline{33} \\) , where the line over the 3\u0026rsquo;s implies that the 3\u0026rsquo;s repeat infinitely. This is still a rational number.\n- Irrational Numbers # Alright then, what\u0026rsquo;s an irrational number?\nWell, this is easier to answer with a few examples, the most well know of which is \\( \\pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499... \\) … I think you get the idea.\nIrrational numbers are numbers where the decimal doesn\u0026rsquo;t repeat and as such can not be written as an integer over another integer. Because pi is a geometrically defined constant, it may be easier to look at something a bit more tangible.\nThe square root of a number is just the number that when multiplied with itself gives the number in question, so the square root of 4 is 2 because 2*2 is 4, the square root of 9 is 3 because 3*3 is 9, etc.\nBut what about the square root of 2? well \\( \\sqrt{2} = 1.414213562373.... \\) you get the idea. Like with pi, it\u0026rsquo;s a number that goes on forever, with no repeating pattern.\nLater on you\u0026rsquo;ll see other irrational constants like \\( e = 2.718281828459.... \\) and The Golden Ratio \\( \\frac{1\u0026#43;\\sqrt{5}}{2} = 1.618033988749.... \\) ℝ - Real Numbers # Finally, we\u0026rsquo;re up to the normal number line, that is, we now have the set of all numbers on the number line, all the way from -∞ to +∞, (often written as ±∞) pick any number, with as many random numbers before or after the decimal point as you want, and that\u0026rsquo;s a real number.\n\\( i \\) - Imaginary Numbers # Yep, that\u0026rsquo;s pretty much everyone\u0026rsquo;s first reaction. What in the hell is an imaginary number?\nWell, okay, remember before how I said a square root was just whatever number you need to multiply with itself to get the number, so \\( \\sqrt{4} = 2 \\) ? This has a problem, a negative number times a negative number is always positive, so \\( 3 * 3 = 9, -3 * 3 = -9, \\text{ but } -3 * -3 = 9 \\) So, what would the square root of a negative number be? There are no two numbers that can multiply to give us -1, so, we made one up! \\( \\sqrt{-1} = i \\) furthermore, \\( \\sqrt{-4} = 2i \\) i being equal to \\(\\sqrt{-1}\\) has some interesting properties with exponents. Naturally exponentiation is the inverse of a root, that is \\( 3^2 = 9, \\text{ as } \\sqrt{9} = 3 \\text{ implies that } \\sqrt{9}^2=9\\) ,\nWhen taken to negative numbers, we can see this effect, so \\( \\sqrt{-1}^2=-1 \\text{ implies } \\sqrt{-1}^2 = i^2 = i* i = -1\\) So what if we keep taking i to higher powers?\n\\( i * i = i^2 = -1 \\text{ and } i * i * i = i^3 = -i \\text{ and } i * i * i *i = i^4 = 1\\) then this pattern repeats, so \\( i^5 = i^4 * i = 1 * i = i \\text{ and } i^6 = i^4 * i^2 = -1 \\text{ and so on, } i^7 = -i, i^8 = 1, i^9 = i \\) and so on.\nNote, you may also see \u0026lsquo;j\u0026rsquo; used instead \u0026lsquo;i\u0026rsquo; to represent imaginary numbers. While your initial reaction may be \u0026ldquo;Who cares?\u0026rdquo;, I assure you you\u0026rsquo;ll see the value of this in a bit.\nℂ - Complex Numbers # Complex numbers then, the end of this adventure for most sane people, are just Real numbers with imaginary numbers, written together, so this is numbers like \\( 32 \u0026#43; 4i \\text{ or } 420.69 - 2i\\) . This brings about something called the complex plane, as now if we want to plot these numbers we can no longer use a simple number line, but instead need an axis for each part, one for the Real (ℝ) part, and one for the imaginary part.\nHere\u0026rsquo;s a video to help you understand imaginary and complex numbers, albeit it does assume you\u0026rsquo;ve at least seen both a little bit before.\nHypercomplex numbers are also a thing, this term includes Quaternions which are used in some very high level physics, but otherwise you\u0026rsquo;ll most likely never work with these.\nInfinity # Diving into the weeds for a bit, let\u0026rsquo;s poke the concept of Infinity:\nNotation # +, -, *, ÷, mod # If you don\u0026rsquo;t know that addition, subtraction, multiplication, and division are, I think you\u0026rsquo;re in the wrong place\u0026hellip;\nThat said, there are some things you may not be used to. For starters, multiplication can be written in a variety of ways. of course there\u0026rsquo;s the classic \\( 2 \\times 2 = 4 \\) but you may also see \\( 2 \\cdot 2 = 4 \\) or \\( 2 * 2 = 4 \\) or just \\( 2(2) = 4 \\) , where parentheses with no operation in between imply multiplication.\nTypically, the \\( 2 \\cdot 2 = 4 \\) and parentheses methods are used on paper, while the \\( 2 * 2 = 4 \\) is used on computer screens as it\u0026rsquo;s easy to type. \\( 2 \\times 2 = 4 \\) is generally not preferred as it can be confused with other operations you\u0026rsquo;ll see later.\nSomething to keep in mind is that addition and multiplication are both commutative and associative, while subtraction and division are not. What this means is that while \\( 2 \u0026#43; 3 = 3 \u0026#43; 2 \\text{ but, } 2 - 3 \\neq 3 - 2 \\) (The Commutative Property) similarly, \\( 2 * 3 = 3 * 2 \\text{ but, } 2 \\div 3 \\neq 3 \\div 2 \\) Furthermore, \\( (2 \u0026#43; 3) \u0026#43; 4 = 3 \u0026#43; (2 \u0026#43; 4) \\text{ but, } (2 - 3) - 4 \\neq 2 - (3 - 4) \\) and \\( (2 * 3) * 4 = 3 * (2 * 4) \\text{ but, } (2 \\div 3) \\div 4 \\neq 2 \\div (3 \\div 4) \\) , by the Associative Property.\nFinally, for multiplication, you should keep in mind how to do multiplication on grouped items\n[TODO] $a*(x+y)$ and $(a+b)(x+y)$ - FOIL\nFor division, there\u0026rsquo;s some terminology you should know. First of all, in \\( \\frac{a}{b} \\) , a is the numerator and b is the denominator. The reciprocal of \\( \\frac{a}{b} \\) is \\( \\frac{b}{a} \\) . This is actually pretty useful, for example, given \\( \\frac{a}{\\frac{b}{c}} \\) you can write this as, \\( a * \\frac{c}{b} \\) Modulo is something you\u0026rsquo;ll see in programming a lot, in programming it\u0026rsquo;s usually represented with the percent sign.\nModulo is just the reminder after division, so 7%3 is 1, because 3 goes into 7 twice, with 1 left over.\n^, √, !, log() # exponents, written as either \\( a^x \\text{ or } \\) a^x or exp(x) if the base is \u0026rsquo;e\u0026rsquo;, that is \\( e^x \\) , are pretty simple to understand, they\u0026rsquo;re just repeated multiplication, so \\( a^3 = a * a * a \\) This results in a few \u0026lsquo;rules\u0026rsquo; for exponents which are fairly easy to understand, with the exception of the not at all intuitive \\( a^0 = 1 \\) Exponent Rule Assume a≠0 and b≠0 Product Rule \\( a^x * a^y = a^{x\u0026#43;y} \\) Quotient Rule \\( a^x / a^y = a^{x-y} \\) Power Rule \\( (a^x) ^y = a^{x*y}\\) Power of a Product Rule \\( (a*b)^x = a^x*b^x \\) Power of a Fraction Rule \\( (\\frac{a}{b})^x = (\\frac{a^x}{b^x}) \\) Fractional Exponent \\( a^{\\frac{x}{y}} = \\sqrt[y]{a^x} \\) Negative Exponent \\( a^{-x} = \\frac{1}{a^x} \\) Zero Exponent ¡easy to forget! \\( a^0 = 1 \\) alright, so why do I say these are intuitive? Let\u0026rsquo;s take the product rule for example. Let\u0026rsquo;s look at \\( 2^2 * 2^3 = 2^5 \\) this is true because \\( 2^2 = 2*2 , 2^3 = 2 * 2 * 2 \\text{, so multiplied together they\u0026#39;re }(2 * 2) * (2 * 2 * 2) \\text{ and as multiplication is associative that is } 2*2*2*2*2 = 2^5 \\) , generally, any of these rules can be figured out by just writing out examples like these, expanding the exponent out like this, and seeing what happens.\nAlright, so now we can look at roots. The most common root you\u0026rsquo;ll work with is the square root, which is what is implied when seeing a root symbol with no number in the crevice, though can be written explicitly as \\( \\sqrt[2]{n} \\) , though as you should\u0026rsquo;ve notice in the exponent rules other roots are possible, for example the cube root, which is \\( \\sqrt[3]{n} \\) is just whatever number you need to multiply with itself 3 times to get n, so for example \\( \\sqrt[3]{8} = 2 \\text{ as } 2 * 2 * 2 = 8 \\) As implied by the Fractional exponent rule, roots can be written as fractional exponents, that is \\( \\sqrt[2]{n} = n^{1/2} \\) often it\u0026rsquo;s actually more convenient to enter this notation into a calculator or programming language anyway. It can even just be nice for working on paper as when writing something like \\( \\frac{1}{\\sqrt{ \\text{some really long equation here}}} \\) it can be easy to miss the top bar and forget it\u0026rsquo;s there, compared to \\( \\frac{1}{( \\text{some really long equation here})^{\\frac{1}{2}}} \\) where the power sticks out more.\nNext, there\u0026rsquo;s factorial, written with the !, it just means to multiply the number with the number prior down to 1, so \\( 4! = 4 * 3 *2 * 1 \\) Finally, let\u0026rsquo;s look at Logarithms:\nScientific Notation # Say you have a really big number like 2,340,000,000,000,000,000 or a really small number 0.000000567 in either case, writing out and counting the zeros is very cumbersome and easy to mess up. For this reason, scientific notation is common. In scientific notation, those numbers would be written as \\( 2.34 \\times 10^{18} \\) and \\( 5.67 \\times 10^{-7} \\) respectively. In each case, it\u0026rsquo;s just a matter of moving the numbers so that there\u0026rsquo;s only one digit before the decimal, then listing to what power of 10 you need to multiply this number by to get the original number- meaning the power will be the same as the number of 0\u0026rsquo;s in the original number. You may see calculators show this with a big \u0026lsquo;E\u0026rsquo; instead of writing the \\( x.xxxx \\times 10^{y} \\) , for example \\( 5.67 \\times 10^{-7} \\) is often shown as 5.67E-7\n[TODO] beyond scientific notation for REALLY big numbers video\u0026hellip; numberphile?\n=, \u0026lt;, \u0026gt;, ≤, ≥, ≠, \u0026laquo;, \u0026raquo;, ≈, ∝ # The equal sign is pretty obvious, it just means that what ever is on each side is equal. The implications of this will lead us deeper into algebra though as we actually solve equations. There\u0026rsquo;s some really obvious equalities, those that lack variables, so things like \\( 1 \u0026#43; 2 = 3 \\) or any of the equalities shown to this point really. Where equality gets a bit more interesting is when there\u0026rsquo;s an unknown (variable, same thing). For example, \\( 1 \u0026#43; x = 3 \\) here it\u0026rsquo;s pretty obvious that x must be 2. We\u0026rsquo;ll go into how to actually solve for these unknowns with non-obvious equations in a bit.\nLess Than and Greater Than are similarly simple, they just state that one side has a bigger number than the other. The \u0026lsquo;\u0026gt;\u0026rsquo; or \u0026lsquo;\u0026lt;\u0026rsquo; symbols should always \u0026rsquo;eat\u0026rsquo; the bigger number, that is the open side faces the bigger number, and the pointy side points to the smaller. \\( 2 \u0026lt; 3 \\) and \\( 4 \u0026gt; 3 \\) are examples of this. When variable are involved, it usually means there are multiple solutions. \\( x \u0026gt; 3 \\) for example, is satisfied for any x greater than 3, right down to 3.0000000000\u0026hellip;00001 all the way up to ∞. Similarly, there are \u0026lsquo;or equal to\u0026rsquo; variants of less than and greater than, which are written with a bar underneath so \\( x \\geq 3 \\) is satisfied for x equal to 3 to ∞, so the 3 is included with the \u0026lsquo;or equal to part.\u0026rsquo;\n≠ means \u0026lsquo;Not Equal To\u0026rsquo;, and as the name implies it\u0026rsquo;s just saying the two sides can\u0026rsquo;t be equal so with \\( x \\neq 0 \\) , x can be any value, except for 0.\nNext are MUCH greater and less than, written with a double less than or greater than sign, so \\( \\gg \\text{ or } \\ll \\) these are weird for people new to the idea, because they\u0026rsquo;re sort of fluid and depend on the situation. Generally they\u0026rsquo;re used to say \u0026ldquo;This number is so small that it doesn\u0026rsquo;t affect the outcome\u0026rdquo; or \u0026ldquo;This number is large that it dominates the outcome\u0026rdquo;\nNext up, is ≈ or \u0026ldquo;Approximately Equal To\u0026rdquo;. This is for when you know your answer is off by some amount, due to imprecision in computation but it\u0026rsquo;s still close enough for whatever you need to use it for. For example \\( \\pi \\approx 3.1416 \\) Finally, there\u0026rsquo;s ∝ for \u0026lsquo;proportional to\u0026rsquo;. This just means the two equations are only different by a multiplied constant. For example, say \\( y = kx \\) , where k is a constant (some number that can\u0026rsquo;t change) then \\( y \\propto x \\) . This is useful for when two equations are representing something massively different in scale, but we want to indicate that they have the same behavior.\n|x|, ∆, ⌊x⌋, ⌈x⌉, ± # The \\( |x| \\) symbol means \u0026ldquo;Absolute Value\u0026rdquo;, which, is really just a fancy way of saying \u0026ldquo;Make it positive.\u0026rdquo;, so \\( |3| = 3 \\) , no change, but \\( |-3| = 3 \\) .\nLater on you\u0026rsquo;ll also see something called the \u0026lsquo;Determinate\u0026rsquo;, this uses the same notation, two vertical bars, but is totally different. Thankfully it\u0026rsquo;s not hard to tell apart, as the determinate is a matrix operation, meaning there will be a grid of numbers between the bars instead of a single expression. Delta, \\( \\Delta \\) , is the change between two things, so from 10 to 20 degrees is a delta of 10 degrees. It is usually used with real units like this, giving us the difference between the final and inital values in an experiment. So really it\u0026rsquo;s just Final Value - Initial Value. You may also see \\( \\Delta t \\) or \\( \\Delta x \\) , this would be change in time and change in position (usually) respectively. Note that Δ can be negative.\n\\( \\left \\lfloor{x}\\right \\rfloor \\) is the \u0026lsquo;floor\u0026rsquo; of x. Similarly, \\( \\left \\lceil{x}\\right \\rceil \\) is the \u0026lsquo;ceiling\u0026rsquo; of x. Very basically, for floor this just means to drop everything after the decmial right off, so \\( \\left \\lfloor{1.534}\\right \\rfloor = 1 \\) . For ceiling, it means to go up 1 and take the decimal off. \\( \\left \\lceil{1.001}\\right \\rceil = 1\\) Finally, for lack of a better place to put it, let\u0026rsquo;s look at ±. This is \u0026lsquo;Plus or Minus\u0026rsquo; and it just means to do both, for example 3±2 gives us 1 and 5 as answers. Usually when this symbol is used, one of the two answers ends up being thrown out as invalid, but not always.\nf (x), (f ∘ g) # [TODO]\n(a,b), [a, b] # [TODO]\n∑, Π # [TODO]\nhttps://www.rapidtables.com/math/symbols/Basic_Math_Symbols.html\nOrder of Operations # Yes, I did make my own stupid math meme just for this. Fite me. We\u0026rsquo;ve all seen these incredibly stupid memes going around social media at one point (Reason №876 to quit FaceBook), but why do people argue over the answer? The real answer is because it\u0026rsquo;s a really stupid problem. It has ambiguity baked into it, because of a lack of parentheses the solution is truly a bit ambiguous. That said, the \u0026lsquo;accepted\u0026rsquo; correct answers will either be 2/3 or 6 because of PEMDAS, which is, in itself a crappy acronym, and sholud probably be written as (PE)(MD)(AS), let me explain. PEMDAS stands for Parentheses, Exponents, Multiplication, Division, Addition, Subtraction, and is in general the correct order to do math operations. so given a mess like \\( \\frac{4*(1 \u0026#43; 2)^3}{2\u0026#43;1} \u0026#43; 1 \\) we can solve it in order. Here though, I have to point out the first failing in the PEMDAS acronym, division with a bar implies parentheses, as you\u0026rsquo;ll have to do the 2+1 on the bottom before you can do the divison anyway. That said, let\u0026rsquo;s look at this step by step\n\\[\\frac{4*(1 \u0026#43; 2)^3}{2\u0026#43;1} \u0026#43; 1 = \\frac{4*(3)^3}{2\u0026#43;1} \u0026#43; 1= \\frac{4*(3)^3}{3} \u0026#43; 1 = \\frac{4*27}{3} \u0026#43; 1= \\frac{108}{3} \u0026#43;1 = 36\u0026#43;1 = 37\\] In step 1 and 2 I did perenthes in top and the implied perenthes on the bottom, then in step 3 I did the exponent, followed by the multipliation and divison in steps 4 and 5, finally in the last step I did the +1 that was hanging off the entire time.\nThe P for Perenthes in PEMDAS can mean really any grouping symbol, so brackets [] or braces {}, whatever. So, what\u0026rsquo;s the problem with the math equation in the start and why do people disagree? Well, Divison and Multiplication don\u0026rsquo;t have to be done in that order, same for addition and substraction, instead they should be done all together, but going from left to right, so \\( 1 \u0026#43; 2 \u0026#43; 3 - 4 \u0026#43; 1 - 2 \\) for example can be done in order left to right giving us 1, not doing this: \\( (1 \u0026#43; 2 \u0026#43; 3) - (4 \u0026#43; 1) - 2 \\) which gives -1. Just to be crystal clear, 1 not -1 is correct here. So, applying this to the above social media meme, it\u0026rsquo;s the same problem but with multiplication, implied with the 3(3) after doing the addition, and the divison. Some people interpret PEMDAS literally, meaning multiplication is done before division always. These people are wrong. So, with the meme the problem looks like this:\n\\[\\frac{6}{3(1\u0026#43;2)} = \\frac{6}{3(3)} = \\frac{6}{9} = \\frac{2}{3}\\] But see what I did there? I wrote the fraction as a bar, not as ÷, and here, because this problem is written crappily, that actually changes the solution! And I know what you\u0026rsquo;re thinking- Division is divison, how could that matter?? And you\u0026rsquo;re right, it is. It matters because the bar implies that order, but if I go back to using a division sign look what happens:\n\\[6\\div3(1\u0026#43;2) = 6\\div3(3) = 2(3) = 6​\\] And there\u0026rsquo;s the problem. Now, you\u0026rsquo;re probably thinking \u0026ldquo;What fucking dipshit let math be ambiguous?\u0026rdquo; and the answer is really that this problem is just stupid. In any real problem the ambiguity here should be fixed by whoever is writing it in the first place, and since other than in textbooks math doesn\u0026rsquo;t just appear from thin air, the true order of the operations should be specified clearly with parentheses, either as:\n\\[6\\div(3(1\u0026#43;2))) \\text{ -OR- } (6\\div3)(1\u0026#43;2)) \\text{ -OR- } \\frac{6}{3(1\u0026#43;2)}​\\] where in the last option the bar implies the parentheses.\nSimplification # [TODO] redo with https://github.com/airladon/FigureOne\nBefore we can get to doing useful things with these operations, it helps to be proficient at simplifying an equation. For example say we have:\n\\[ 3x^2\u0026#43;3\u0026#43;(2-x)(4-x)\u0026#43;2=12\u0026#43;(3\u0026#43;(x*2))\u0026#43;2\\] Before we ever solve for x, we\u0026rsquo;ll want to turn this into something much easier to work with. When doing this, we need to make sure to keep the equality the same, that is if we had \\(3\u0026#43;x=4\\) we need to not accidentally change it into \\(3\u0026#43;x=5\\) , changing the answer.\nThis generally means that we can only either do basic operations to get an equivalent value or do the same operation to both sides. Ironically, often simplification actually requires expansion first, that is doing math like the \\((2-x)(4-x)\\) to get \\(8-2x-4x\u0026#43;x^2\\) which can then be reduced back down to \\(x^2-6x\u0026#43;8\\) .\nFor the example equation, the most obvious thing to start with is the +2 that\u0026rsquo;s common to both sides. This is our first example of using the same operation on both sides- the idea being as long as we apply the same operation on both sides of the equality the meaning won\u0026rsquo;t change. That is, the solution to \\(x\u0026#43;3=2\\) is the same as the solution to \\(x\u0026#43;3\u0026#43;2=2\u0026#43;2\\) , but we can take advantage of this to get rid of terms too. For example, with \\(x\u0026#43;3=2\\) we can subtract 3 from both sides to get \\(x=-1\\) (seeing how this might lead to solving the equation?) In our example equation, both end in a +2 so we can \u0026ldquo;cancel this out\u0026rdquo; by subtracting 2 from both sides.\n\\[\\begin{aligned} 3x^2\u0026#43;3\u0026#43;(2-x)(4-x)\u0026#43;2\u0026amp;=12\u0026#43;(3\u0026#43;(x*2))\u0026#43;2​ \\\\ 3x^2\u0026#43;3\u0026#43;(2-x)(4-x)\u0026amp;=12\u0026#43;(3\u0026#43;(x*2))​ \\end{aligned} \\] but because we did the same operation to both sides of the equality, the answer didn\u0026rsquo;t change\n☠☠☠ The following is an easy place to screw up ☠☠☠ Keep in mind, whatever you do you need to do to both sides and the entirety of both sides, not just one term. For example, If you were to only divide one term on each side by 2 this is not keeping equivalence. You can divide both sides in full by two, sure, but you can\u0026rsquo;t just pick one term from each side and selectively divide that term by two. That is \\(4\u0026#43;2x=8\\) can become \\(2-x=4\\) but not \\(\\frac{4}{2}\u0026#43;2x=\\frac{8}{2}\\) which is \\(2\u0026#43;2x=4\\) . You can see this as the solution to \\(4\u0026#43;2x=8\\) is \\(x=2\\) but the solution to \\(2\u0026#43;2x=4\\) is \\(x=1\\) . So, just be sure if you do some arbitrary operation you do it to both sides and the entirety of the side, not just one term.\nBack to our big equation: next, let\u0026rsquo;s FOIL out that \\((2-x)(4-x)\\) \u0026hellip;\n\\[\\begin{aligned} 3x^2\u0026#43;3\u0026#43;(8-2x-4x\u0026#43;x^2)\u0026amp;=12\u0026#43;(3\u0026#43;(x*2))​\\\\ 3x^2\u0026#43;3\u0026#43;(x^2-6x\u0026#43;8)\u0026amp;=12\u0026#43;(3\u0026#43;(x*2))​ \\end{aligned} \\] with that done, we can get rid of some of those parentheses\n\\[3x^2\u0026#43;3\u0026#43;x^2-6x\u0026#43;8=12\u0026#43;3\u0026#43;2x\\] then, we can combine like terms,\n\\[4x^2-6x\u0026#43;11=15\u0026#43;2x\\] and subtract \\(2x\\) from both sides\n\\[\\begin{aligned} 4x^2-6x-2x\u0026#43;11\u0026amp;=15\u0026#43;2x-2x​\\\\ 4x^2-8x\u0026#43;11\u0026amp;=15​ \\end{aligned} \\] then subtract 15 from both sides\n\\[\\begin{aligned} 4x^2-8x\u0026#43;11-15\u0026amp;=15-15​\\\\ 4x^2-8x-4\u0026amp;=0​ \\end{aligned} \\] And now we\u0026rsquo;re fully simplified. You can\u0026rsquo;t combine the \\(x^2\\) and x terms.\nThis general process applies to any equation. It\u0026rsquo;s like a little puzzle, you just want to take the complex equation you have, do the same thing to both sides or do the math that\u0026rsquo;s internal to one side. Sometimes it\u0026rsquo;s more complicated to do this. For example, you might need to square root both sides to \u0026ldquo;cancel out\u0026rdquo; both sides being squared, for example \\(x^2=25\\) to \\(\\sqrt{x^2} = \\sqrt{25}\\) to \\(x=5\\) , but here this only works because we\u0026rsquo;re square rooting everything on both sides.\nPlotting functions # [TODO]\n\u0026lsquo;Plotting\u0026rsquo; on Algorithm Archive\nLooking at some equations # Linear # [TODO] replaces these desmos graphs with something custom using https://jsxgraph.uni-bayreuth.de/wp/index.html\nit\u0026rsquo;ll be uglier, but I don\u0026rsquo;t like loading something this large, and jsxgraph will be more flexible anyway. Since I literally never write js this is proving to be a bit rough. Working on getting something that will show the slope and intercept values as two arbitrary points on the line are moved on a graph.\n1 2 3 4 5 6 7 8 9 10 var b = JXG.JSXGraph.initBoard(\u0026#39;jxgbox\u0026#39;, { boundingbox: [-5, 5, 5, -5], axis:true }); var p1 = b.create(\u0026#39;point\u0026#39;,[-1,1], {name:\u0026#39;A\u0026#39;,size:4}); var p2 = b.create(\u0026#39;point\u0026#39;,[2,-1], {name:\u0026#39;B\u0026#39;,size:4}); var li = b.create(\u0026#39;line\u0026#39;,[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;], {strokeColor:\u0026#39;#00ff00\u0026#39;,strokeWidth:2}); var p3 = b.create(\u0026#39;point\u0026#39;,[p1.X, p2.Y], {name:\u0026#39;S\u0026#39;,size:4}); var li2 = b.create(\u0026#39;line\u0026#39;,[\u0026#34;A\u0026#34;,\u0026#34;S\u0026#34;], {strokeColor:\u0026#39;#00ff00\u0026#39;,strokeWidth:2}); var i = -1; setInterval(function(){p3.moveTo(p1.X,p2.Y); i++; },1000); is what I have so far, but it appears the .X and .Y getters are not working as I expect. This should give me an \u0026lsquo;S\u0026rsquo; point that I can then line segment to A and B to get the right angle \u0026lsquo;stair\u0026rsquo; step slope.\nPolynomials # Parabolas # Systems of Equations # Nobody should do these by hand unless they\u0026rsquo;re dead simple\nImaginary numbers, systems of equations\n1¼ - Accuracy and Precision # For lack of a better place to put it and not wanting to wait until the much latter section on probability, I\u0026rsquo;d like to briefly mention the difference between Accuracy and Precision. Typically, this is represented as\n1½ - Coordinate Systems # So, up until now you\u0026rsquo;ve only seen the XY \u0026lsquo;Cartesian\u0026rsquo; coordinate system, but I did gloss over some details. For starters, when refering to points in the Cartesian plane, you may hear the term quadrants, these are the 4 infinite corners of the plane, coming out from the \u0026lsquo;+\u0026rsquo; shape at (0,0). Slightly counter intuitively, they\u0026rsquo;re numbered from starting in the top right and going counter clockwise.\n[TODO] picture here\nThe Cartesian coordinate system can be expanded into high dimensions as well, but you\u0026rsquo;re unlike to work with more than 3, to form space defined with XYZ\n[TODO] picture here\nThere are a few other coordinate systems you\u0026rsquo;ll likely come across though: Polar, Cylindrical, and Spherical.\n[TODO] all 3 of those\n1¾ - Primes \u0026amp; Factors # Alright, so maybe not something you\u0026rsquo;ll use everday, but you still should know the basics of primes, especially if you want to understand Public-key cryptography. So, what\u0026rsquo;s a prime?\nA prime is a number where the only two whole numbers that you can multiply to get to that number are 1 and itself.\n2? Prime. 1*2 is the only option.\n3? Prime. 1*3 is the only option.\n4? Not Prime. 2*2 = 4, as does 1*4\n103801? Prime. only two numbers that can multiplied together to get it are 1 and 103801.\nI think you get the gist. One of the neat applications of primes is that multiplying two prime numbers together makes for a number that\u0026rsquo;s not quite prime, but whose only other factors are two numbers that you multiplied together, so say we take 103801 * 7 to get 726607, the only two whole numbers other than 1 and itself that can be multiplied to get 726607 are 103801 and 7.\nThere are also \u0026lsquo;antiprimes\u0026rsquo; (or \u0026lsquo;highly composite numbers\u0026rsquo;), from Wikipedia:\n\u0026hellip; an antiprime number, is a positive integer with more divisors than any smaller positive integer has\nso, technically 1, 2, 4, and 6 are all antiprime. But where it gets interesting is with larger numbers. For example, 360 is anti prime as you get to it with \\( 2*2*2*2*3*3*5​\\) , which is 7 primes multiplied together, more than it takes to get to any number prior. These numbers are really easy to work with because of this, and it makes it really convenient for the number of degrees in a circle as it can be divided so easily.\n1⅘ - Number Bases # Number Bases Strech the Mind (Hackaday)\n"},{"id":97,"href":"/engineering/math/calc/","title":"Calc","section":"Engineering","content":" 4 - Calculus # Introduction To Calculus With Derivatives (adit.io)\nCalculus Made Easy by Silvanus P. Thompson\n[TODO] limits before video\nBelow is a 12 video series that totals about 3.25 hours. [The Exponential Function is a Miracle (Mark Dominus)](\n"},{"id":98,"href":"/engineering/math/diffeq/","title":"Diffeq","section":"Engineering","content":" 5 - Differential Equations # Below is a 5 video series that totals about 1.5 hours. "},{"id":99,"href":"/engineering/math/geometry/","title":"Geometry","section":"Engineering","content":" 3 - Geometry and Trigonometry # Geometry # Notation # ∥, ⊥,\nTrigonometry # Learning Trig playlist on YouTube by \u0026lsquo;The Organic Chemistry Tutor\u0026rsquo;\nNotation # 3½ - Topology # But, this is supposed to be about engineering, so why do we need it?\n[TODO] topology optimization and generative design\n3¾ - Non-Euclidian Spaces # Fractals # https://www.fractal.garden\n"},{"id":100,"href":"/engineering/math/linalg/","title":"Linalg","section":"Engineering","content":" 6 - Matrix Theory / Linear Algebra # Below is a 15 video series that totals a bit under 3 hours. Interactive Linear Algebra, text book that actually uses the web Linear Algebra Done Wrong - Sergei Treil @ Brown University\nMatrices, Diagrammatically\nLinear Algebra - Jim Hefferson\nLinear Algebra and Applications: An Inquiry-Based Approach\n"},{"id":101,"href":"/engineering/math/logic/","title":"Logic","section":"Engineering","content":" 2 - Discrete Math \u0026amp; Logic # http://discrete.openmathbooks.org/dmoi3/\nMath For Programmers (PDF) Notation # https://en.wikipedia.org/wiki/List_of_mathematic_operators\nLogic # Many Valued Logic # Fuzzy Logic # "},{"id":102,"href":"/engineering/math/math/","title":"Math","section":"Engineering","content":" Chapter 6 - Math # This section of OpGuides is divided into subsections for easier reading! Just click the little arrow next to the heading to see the full list of chapters\nAs with all of OpGuides, please skip around as necessary. I suspect the start of this math chapter will be stuff many readers already know, especially those currently in college.\nMath 6.1 Algebra 6.2 Logic 6.3 Geometry \u0026 Trig 6.4 Calculus 6.5 Diff Eq 6.6 Linear Algebra 6.7 Numerical Analysis 6.8 Set Theory 6.9 Probability 6.10 New Math The next few chapters are, regrettably, necessary for developing your knack. Math, Physics, and Chemistry and fundamental to all engineering fields, and while something about each of the three subjects finds a way to make the 16-year-old high schooler in us release a long, exasperated groan. I think this is mostly due to each of these things being taught in a way that takes the fun and interesting parts out and replaces them with trying to learn skills that have largely been outdated by the advent of calculators, computers, and the internet. I\u0026rsquo;ll do my best to keep this chapter interesting by showing some of the fun parts of math and linking to the most entertaining videos and \u0026lsquo;hands on\u0026rsquo; resources that I can. So, let\u0026rsquo;s get mathy!\nThis video on How to Read Math (YouTube, Dominic Walliman) and the cheat sheet from it, How To Read Math, Cheat Sheet (Flickr, Dominic Walliman) may help you get your brain juices flowing.\nIf you\u0026rsquo;re reading this as someone that\u0026rsquo;s trying to refresh on what they learned in high school, I do still recommend going through these pages, but Professor Leonard\u0026rsquo;s College Algebra and Trigonometry course on YouTube is probably your best bet for getting back up to speed, though it is long enough to take a week of full time watching to get through.\nTweet From @ZillionRoss "},{"id":103,"href":"/engineering/math/newmath/","title":"Newmath","section":"Engineering","content":" 10 - It\u0026rsquo;s NEW math! # Math, as I\u0026rsquo;ve tried to convey though these chapters, is more about problem-solving than actual mechanical operations. Part of solving really hard problems is having even weirder intuitions and tools.\n/+ Hilbert curves (and the IP map)\n/+ https://www.youtube.com/watch?v=a-767WnbaCQ\n/+ Markov Chains\n/+ EGG, https://egraphs-good.github.io \u0026amp; DAGs\n/+ Annealing + related: https://en.wikipedia.org/wiki/Simulated_annealing\n/+ Marching squares\n/+ Slime mold\n/+ Chaos/attractors\n"},{"id":104,"href":"/engineering/math/numanalysis/","title":"Numanalysis","section":"Engineering","content":" 7 - Numerical Analysis # Bisection Method\nNewton\u0026rsquo;s Method\nSecant Method\nLagrange Polynomial\nDivided Differences\nLinear Interpolation, Bilinear Interpolation, Bicubic Interpolation, Spatial Interpolation\nCubic Spline\nNumerical Differentiation\nTrapezoidal Rule\nSimpson\u0026rsquo;s Rule\nRomberg Integration\nMonte Carlo Method - Algorithm Archive\nCondition Number\nLeast Squares\nThe Bernstein Basis (Mutual Information, YouTube)\n"},{"id":105,"href":"/engineering/math/probability/","title":"Probability","section":"Engineering","content":" 9 - Probability/Stats # Seeing Theory: A visual Introduction to probability and statistics Why, where are these used, etc.\nbring up music things, part failure rates, tolerances, etc.\nBasics # For the following, I\u0026rsquo;ll be using a die roll example, where the events are the total of two die. The Sample Space of this is\n\\(S = \\{2,3,4,5,6,7,8,9,10,11,12\\}\\) Note, that 1 isn\u0026rsquo;t possible as the lowest is both die being \u0026lsquo;1\u0026rsquo;.\nLet\u0026rsquo;s look at the probability of these outcomes,\ndie2↓, die1→ 1 2 3 4 5 6 1 2 3 4 5 6 7 2 3 4 5 6 7 8 3 4 5 6 7 8 9 4 5 6 7 8 9 10 5 6 7 8 9 10 11 6 7 8 9 10 11 12 While there are 11 (2-12) unique outcomes, there are 36 possible outcomes from the two die, which are shown in the table above.\nIf you follow the diagonal you can see that there is only one way to get 2 or 12, two ways to get 3 or 11, and so on, this gives this table:\nTotal of two die 2 3 4 5 6 7 8 9 10 11 12 Probability 1/36 2/36 3/36 4/36 5/36 6/36 5/36 4/36 3/36 2/36 1/36 Now, let\u0026rsquo;s say we want the probability that we roll an even total (2,4,6,8,10,12) we can just sum their respective probabilities, so \\(\\frac{1}{36}\u0026#43;\\frac{3}{36}\u0026#43;\\frac{5}{36}\u0026#43;\\frac{5}{36}\u0026#43;\\frac{3}{36}\u0026#43;\\frac{1}{36} = \\frac{18}{36} = \\frac{1}{2}\\) Let\u0026rsquo;s go ahead and call this event A, so P[A] = 1/2\nSimilarly, we can define a new rule, Event B, such that the roll total is greater than 9, that comes out to be 1/6, so P[B]=1/6\nStatistical Independence # Event A and event B are statistically independent if and only if (iff) \\( P[AB] = P[A]P[B]\\) So, here, P[AB], that is the probability that a number is both greater than 9 and the number is even, that would be 1/9. The probability of each event multiplied together, \\(P[A]P[B] = \\frac{1}{2} * \\frac{1}{6} = \\frac{1}{54}\\) and, hopefully obviously, that\u0026rsquo;s not the same as 1/9. Therefore, these events are not statistically independent. This makes logical sense, if you know that the total count of the two die is greater than 9, then you also know that there\u0026rsquo;s a higher chance that the result is even - of 10,11, and 12, 2/3 of the totals are even. That is dependence.\nIf instead, we asked, what is the probability that 1 die is a 6 and the other a 2, both of those would have a probability of 1/6, that is \\(P[A]=P[B]=\\frac{1}{6} \\) , so now think, in the combined scenario, P[AB] would be the probability of die 1 being a 6, and die 2 being a 2, well, there are 36 different ways the die can land, and they\u0026rsquo;re all unique (assuming the die are labeled somehow) so \\(P[AB]=\\frac{1}{36} = P[A]P[B] \\) - these events are statistically independent.\nIt\u0026rsquo;s worth noting, the physical relationship is not always this clear. In a lot of situations, you\u0026rsquo;ll just need to do the math and determine if \\(P[AB] = P[A]P[B]\\) to check.\nConditional Probability # Sometimes, knowing something about one event tells us something about the probability of another event. This can be expressed mathematically. When written down, it looks a bit gross, but it\u0026rsquo;s actually really easy to understand:\n\\(P[A|B]P[B]=P[AB]=P[B|A]P[A]\\) This also provides another equation, just by moving things around: \\(P[A|B]=\\frac{P[AB]}{P[B]} \\) Here, P[A|B] means, the probability of event A happening given event B has already happened.\nNOTE: This means that P[A|B] ≠ P[B|A] (well, not usually). I like to think of it this way: Losing your keys may make you late for work, and being late for work may be from losing your keys; however, the probability that you\u0026rsquo;re late for work GIVEN you\u0026rsquo;ve lost your keys may be higher or lower than the probability that you lost your keys GIVEN that you\u0026rsquo;re late to work. So, looking at just one side of the above equation, we have \\(P[A|B]P[B]=P[AB]\\) , this reads as \u0026ldquo;The Probability of A given that B has happened times the Probability of B is equal to the probability of an event that is in both A and B\u0026rdquo;\nThe other side of this equation, is just swapping the roles of A and B.\nSo, let\u0026rsquo;s go off the above example and assume that you\u0026rsquo;re really bad at showing up for work:\nLate For Work P[A] Lost keys P[B] Both P[AB] .25 .15 .05 So shoving these values in to the above, we can determine that\n\\[\\begin{aligned} P[A|B]\\times P[B]\u0026amp;=P[AB]\\\\ P[A|B]\\times .15\u0026amp;=.05\\\\ p[A|B] \u0026amp;= .33 \\end{aligned} \\] So, if you lose your keys, you\u0026rsquo;ll be late to work 1/3rd of the time.\nAlright, but what about a more complicated situation, one where you have to make multiple decisions! Let\u0026rsquo;s\nBox Box 1 Box 2 Red Ball 90 30 Blue Ball 10 70 Keeping the numbers simple here, let\u0026rsquo;s say you want to know the probability that the ball you picked was from box1, given that you\u0026rsquo;ve already drawn a blue ball. This is where a Tree diagram comes in handy:\nThis diagram first helps us expose an assumption in the problem: that the initial choice is a 50/50, split chance between which box we start with. So our first choice is really which box are we picking from. Both have a probability of 1/2. Only then do we pick our ball. This stacking of situations gives us the term \u0026lsquo;sub experiment\u0026rsquo; where you perform each sub experiment in order: so our first sub experiment is picking the box, the second is picking the ball. This lets us figure out the conditional probabilities super easily, as all that\u0026rsquo;s needed is to look at the respective branch. For example, in the above, we can see P[Red|Box1] is 9/10. Another nice thing is by multiplying across the branches we can get the probability of the entire \u0026lsquo;system\u0026rsquo; easily. Note the \u0026lsquo;,\u0026rsquo; instead of a \u0026lsquo;|\u0026rsquo; in the diagram below. This is saying that these have both happened, not implying conditional probability. That\u0026rsquo;s why adding all of these up will add up to 1 (100%) as it\u0026rsquo;s a look at all the possible events.\nSo now we know the probability of a blue ball overall: 0.4 (.05 + .35 )(1), the probability of a blue ball in box 1 (.1), what is the probability that we actually picked from box 1? We know P[Blue|Box1], but what is P[Box1|Blue] ? Well, naturally, there\u0026rsquo;s a handy formula, known as \u0026ldquo;Bayes Rule\u0026rdquo; for this situation:\n[TODO] Why Bayes Rule is nicer with odds (YouTube, 3b1b)\n\\(P[A|B]=\\frac{P[B|A]P[A]}{P[B]}\\) Applying this, we can see that we get\n\\[\\begin{aligned} 0.1\u0026amp;=\\frac{P[B|A]0.4}{0.5}\\\\ (0.1/0.4)*.5\u0026amp;=P[B|A]\\\\ P[B|A]\u0026amp;=.125 \\end{aligned}\\] so, there\u0026rsquo;s a 12.5% chance that the box we picked the blue ball from was Box1.\nJust to check ourselves, what\u0026rsquo;s the chance that the box was Box2?\n\\[\\begin{aligned} 0.7\u0026amp;=\\frac{P[B|A]0.4}{0.5}\\\\ (0.7/0.4)*.5\u0026amp;=P[B|A]\\\\ P[B|A]\u0026amp;=.875 \\end{aligned}\\] And this works out, adding to 100%.\nThere are a few more things to note regarding conditional probability:\nif P[A|B] is 0, the two events are mutually exclusive. This happens in dumb situations like \u0026ldquo;Given you\u0026rsquo;ve rolled a 2, what is the probability you rolled a 3\u0026rdquo; but also more complex events may mean that this is less obvious, so it\u0026rsquo;s nice to be able to math it out. [TODO]\nTree diagram with more branches, some \u0026lsquo;incomplete branches\u0026rsquo;\nfair/unfair coin:\n/C1-H-H-H \\C2-H-H-H\nSub experiments \u0026amp; Tree diagrams\nCounting methods\ncombinations and permutations\nLooking at binary, arrangements of bits\nwith or without replacement\nRandom Variables # Probability Mass Function (PMF)\nTypes of RV\u0026rsquo;s\n[TODO] http://www.math.wm.edu/~leemis/chart/UDR/UDR.html\nBernoulli # \\(\\begin{cases} q=1-p \u0026amp; \\text{if }k=0 \\\\ p \u0026amp; \\text{if }k=1 \\end{cases}\\) Tossing a coin- if the coin is fair, p and q both equal 1/2. This is literally just a true/false question and the probability of a given answer. Geometric # Original Image by Skbkekas - Own work, CC BY 3.0, link\nIn probability theory and statistics, the geometric distribution is either one of two discrete probability distributions:\nThe probability distribution of the number X of Bernoulli trials needed to get one success, supported on the set { 1, 2, 3, \u0026hellip; }\nThe probability distribution of the number Y = X − 1 of failures before the first success, supported on the set { 0, 1, 2, 3, \u0026hellip; }\nWhich of these one calls \u0026ldquo;the\u0026rdquo; geometric distribution is a matter of convention and convenience.\n- Wikipedia Binomial # Original Image by Tayste - Own work, Public Domain, link\nSum of n, independent Bernoulli trials Pascal (Negative Binomial) # From Introduction to Probability by Hossein Pishro-Nik, CC BY-NC-ND 3.0 … technically I’m abusing the license a bit, but the ‘derivative’ here is just a CSS invert, you can open the image in a new tab to see the ‘original’\nNumber of trials until k\u0026rsquo;th success. While technically the Pascal distribution is just a specific subset of Negative Binomial distributions, you\u0026rsquo;ll probably only ever use the Pascal distribution. Be aware the more general case exists, though, as someday it may pop up. Discrete Uniform # Original Image by IkamusumeFan - Own work, CC BY-SA 3.0, link\nIt\u0026rsquo;s a uniform distribution. Rolling a fair dice? Great, you have 1/6 chance to get a 1,2,3,4,5, or 6. So your \u0026lsquo;a\u0026rsquo; and \u0026lsquo;b\u0026rsquo; are 1 and 6, \u0026rsquo;n\u0026rsquo; is the number of points, so b-a+1 Poisson # Original Image by Skbkekas - Own work, CC BY 3.0, link\nProbability of a number of events occurring in a fixed amount of time (or space, or whatever) provided the events happen with a constant average rate and the events are independent. Cumulative Distribution Function (CDF)\nfunctions of Random Variables\nFamilies of continuous RVs\nConditional Probability Mass Fn \u0026amp; Conditional Expected Value\nGaussian Random Variables / Normal RVs (same thing)\nCheatsheet and another one\n[TODO] Gaussian Processes From Scratch (Peter Rlnts)\n[TODO] https://mc-stan.org/users/documentation/\n[TODO] The Fisher Information (YouTube - Mutual Information)\nChaos # Technically, this is the \"Law Of Total Probability\". Don't overthink this. It just means that by adding up all the conditional probalities of a certain event, you get the total probability. Here, we're adding up the probability of a blue ball given we picked box1 AND the probability of a blue ball given we picked box 2. It's sorta obvious this would give us the total probability of a blue ball. "},{"id":106,"href":"/engineering/math/settheory/","title":"Settheory","section":"Engineering","content":" 8 - Set Theory # The, uh, study of sets. It\u0026rsquo;s not as boring as it sounds, I swear. Set theory is pretty boring. Yes, it brings about ideas of infinity, Sets of numbers (integers, complex numbers, etc.) but frankly, unless you\u0026rsquo;re really into math\u0026rsquo;s nerdy bits and trying to understand the nature of mathematics and all that jazz, there\u0026rsquo;s really only a few bits you need to understand:\nThe parts that matter: # This is the basic way we\u0026rsquo;ll visualize set theory. You\u0026rsquo;ve got a domain (the box) and sets (the circles). The domain is everything relevant to the problem. Maybe it all numbers, maybe it\u0026rsquo;s just the integers, maybe it\u0026rsquo;s the different species of fish in the ocean. Whatever.\nSets are just collections of objects. Maybe you\u0026rsquo;d have a set of \u0026lsquo;all even numbers\u0026rsquo; maybe you\u0026rsquo;d have \u0026lsquo;fish with blue scales\u0026rsquo;. Some sets may overlap, some may not.\nThere\u0026rsquo;s also a special set called the empty set, written with ∅, which is the set that contains nothing. We\u0026rsquo;ll come back to this.\n[TODO]\nFor those that have an itch for math: # "},{"id":107,"href":"/engineering/math/units/","title":"Units","section":"Engineering","content":" Chapter 6½ - Units # By 42CrMo4 and Christoph Päper English units of Length, CC BY-SA 4.0 Scaling, Logarithms and Scientific Notation # Before we get into units, we need to get into scale. That is, the idea of how big or how small something is, usually relative to something else.\nIn elementary school, you were taught to write the powers of 10 like this:\n1 10 100 1000 That is good for regular numbers, but it works against us when we are dealing with numbers that are similar, and all of them are either very large or very small.\nTo avoid this problem, it is better to use scientific notation. With this, you normalize your digits so there is exactly one before the decimal point, and then use \u0026ldquo;E\u0026rdquo; as an exponent marker on a power of ten. The number of digits indicate significance, but that is a separate section.\nScientific Notation Value 1E0 1 1E1 10 1E2 100 1E3 1000 3E0 3 2.2E2 220 1.88E4 1880 Each power of ten also has a prefix in the SI system. For example, with meters:\nQuantity Value 1E0 m One Meter 2E1 m Two Decameters 3E2 m Three Hectometers 4E3 m Four Kilometers Most likely, you had a science teacher in high school or college make you do this at some point. But they probably didn\u0026rsquo;t explain how useful this is an aid to intuition, not just calculation.\nReading Graphs # Here is an example of a graph in linear scale: worldwide COVID cases through late 2021.\nWith linear scaling, the units on the vertical access become smaller the bigger the range of the data becomes. For a high-level trend, this in fine. But what if you wanted to examine the first year? With exponential growth processes like disease, that is important.\nConsider the logarithmic view instead:\nIn a logarithmic view, a straight line indicates the slope of an exponential growth curve. This graph shows the base of the curve changing over time.\nThis makes it easier to identify the path and the pace of the spread. From cases 1 to 50,000 was just as fast as cases 100,000 to 1 million, as one would expect from an exponential process that is rampant and unchecked. Once mitigations and later vaccines became common place, it slowed down, and stopped being exponential, being much closer to linear in behavior.\nYou can see this \u0026ldquo;square root\u0026rdquo; curve tail, which means that its speed is indeed slowing down based on the size of the numbers \u0026ndash; in other words, linear growth.\nThis should help to illustrate why logarithms are useful: just like scientific notation, they are \u0026ldquo;scale free\u0026rdquo;. Big numbers and little numbers take up the same amount of space, and it is the ratios and relative rates of change that are the most significant features of the shape.\nFor problems with wide ranges in scale, they are an excellent tool to examine details where scale does not matter.\nUnit Prefixes # If you live in a metric country, you know how long a meter is from your regular life. Unless you have done a lot of EE work, you have no idea \u0026ldquo;how big\u0026rdquo; an Ampere is.\nBut with this system of units and powers, you don\u0026rsquo;t have to. You only need to know the prefixes, and use whatever numbers you are given in your calculations. You can then compare things with ratios to something you do understand.\nThe most common prefixes are not multiples of ten, but multiples of one thousand \u0026ndash; and with EE, usually in the smaller direction:\nQuantity Prefix (meters) 1E0 Meter 1E-3 Millimeter 1E-6 Micrometer 1E-9 Nanometer 1E-12 Picometer 1E-15 Femptometer Millimeters are the smallest one can possibly use in day-to-day life without special equipment. But to a nuclear physicist, the Nanometer is the moon\u0026rsquo;s orbital distance compared to our own height.\nAs a result, math becomes a convenient abstraction in order to hide the complexity, while guaranteeing good results. After all, if you have two numbers in scientific notation, you simply multiply the base numbers (e.g. 2.5) and then the exponents (e.g. 10^3, and in algebra, that means add their exponents).\nWhatever you get, you get, and it will be the correct answer.\nAn example problem # Imagine that you are creating an embedded device that will be powered by USB. You decide to use an Arduino to start, because it\u0026rsquo;s easy to program, but also it\u0026rsquo;s relatively low power.\nStill, you know it\u0026rsquo;s low power because it does not have a very fast CPU. Perhaps a bigger board would be better. How does the power it draws compare to the power you have available?\nYou measure the amperage flowing down the USB cable and discover it is 18 mililamps. How much power is it using?\nAccording to Ohm\u0026rsquo;s Law, the power being dissipated by an electronic device is its voltage drawn multiplied by the current measured passing through it. The USB bus is normally 5V, and for the back-of-an-envelope calculation, we can just assume that.\nIn scientific notation, the calculation becomes:\n= 5E0 * 18E-3 = (5 * 18) * (10^0 * 10^-3) = 90 * 10^-3 = 9E-2 = 0.09 Watts = 90 milliwats How much power is that? What does that number even mean?\nTo make sense of it, consider something we have a sense of: the amount of power that can come out of a US wall socket before it overloads and a breaker trips. They are rated at 120 Vac and 15 Amperes.\nUsing Ohm\u0026rsquo;s Law:\n= 120 * 15 = 1800 Watts = 1.8E3 = 1.8 Kilowatts Assume there are no losses in conversion, a wall circuit could power 20,000 of your boards before tripping a breaker. So that suggests it\u0026rsquo;s pretty small.\nBut what about a USB port? That can\u0026rsquo;t produce nearly as much power. But if you look it up, a single USB port is supposed to be able to generate 2.5 Watts of power. So if someone were to use an unpowered hub, then they could plug in 27 of your boards before the USB was overloaded.\nIn other words, an Arduino is very low power for this application. If you need more CPU cycles, you can use a bigger board.\n[TODO] - weird units coming up: moles, ferads, light years, pascals, radians+, electron mass, big/small metric units, flops, decades, etc.\nReferences # More fun problems of intuition, including probabilities, can be found in Innumeracy: Mathematical Illiteracy and Its Consequences\n"},{"id":108,"href":"/engineering/networking/cloud/","title":"Cloud","section":"Engineering","content":" Chapter 39½ - \u0026ldquo;The Cloud\u0026rdquo; # Some people will tell you the cloud is the future, that someday everybody will rent computational power from a handful of services like AWS.\nThese people are nuts.\nThe cloud is just someone eles\u0026rsquo;s computer. Unless your business is going through a period of extreme growth, it makes no sense to use a cloud provider like AWS or Azure. It does make plenty of sense to buy a VPS (Virtual Private Server) for hosting a website or game server or a personal website like this one, but at scale? No.\nCharacter owned by Vega, art by Talon Creations and Vega I have read dozens of article like How we reduced our annual server costs by 80% — from $1M to $200k — by moving away from AWS or As AWS Use Soars, Companies Surprised by Cloud Bills.\nFor personal stuff, well, posts like My forgotten account has a $20,000 bill, how screwed am I? or I lost $55k from hackers [getting into my AWS account], or, this:\nHey friends,\nI have a panicked student in my DMs who’s accidentally racked up an $8k AWS bill. My suggestion of “talk to Support” is no good—apparently they won’t issue a billing adjustment. Anybody got better ideas, or know someone at AWS who can help them out?\nRT for reach?\n\u0026mdash; Alex Chan (@alexwlchan) May 30, 2021 Archive.org backup of the above tweet None of this is to say AWS is bad. Their security is great, the API easy to use, etc. etc., it\u0026rsquo;s just that economically it\u0026rsquo;s not as if \u0026ldquo;The Cloud\u0026rdquo; is a magic solution to all your problems. If anything, it\u0026rsquo;s making things worse.\nAll of that said, \u0026ldquo;The Cloud\u0026rdquo; isn\u0026rsquo;t going anywhere. AWS, Azure, and Google Cloud probably host the vast majority of websites you visit and the backends for apps you use. So we may as well understand it\u0026hellip; if for no other reason than to be able to hold educated arguments against it.\nSo, my opinion out of the way, let\u0026rsquo;s look at what the cloud is. Generally, there are a few kinds of cloud services, here they\u0026rsquo;re listed in increasing level of abstraction:\nIaaS - Infrastructure as a Service Hardware servers, virtual machines, storage, networking, etc. The depth of services provided varies, but generally this is just getting a bare system, with no PaaS - Platform as a Service Generally PaaS adds another layer of abstraction, as the client (you) don\u0026rsquo;t need to worry about the underlying hardware, but instead can use provider specific programming languages and development tools to set up what you need. SaaS - Software as a Service SaaS goes up yet another layer, here the client (you) are not buying something on which you can host your own software and tools, but are buying the (usually monthly) access and support for existing tools. Adobe\u0026rsquo;s CreativeCloud and Office365 are good (albeit evil) examples. FaaS / Serverless - Function as a Service The provider starts up or shuts down virtual machines and otherwise allocates resources on demand as they are called upon. It\u0026rsquo;s not that there is no sever, it\u0026rsquo;s just that the computation is done on demand and then the results saved to disk, such that they can be called upon later. See Serverless Computing on Wikipedia for more information, as well as a list of advantages and disadvantages. To put this in a nice lil\u0026rsquo; table, the stuff in blue is done for you, while you need to handle the things shown in gray.\nTraditional: Infrastructure as a Service Platform as a Service Software as a Service Applications Applications Applications Applications Data Data Data Data Runtime Runtime Runtime Runtime Middleware Middleware Middleware Middleware OS OS OS OS Virtualization Virtualization Virtualization Virtualization Servers Servers Servers Servers Storage Storage Storage Storage Networking Networking Networking Networking Obviously, for each thing done for you, you\u0026rsquo;ve giving up more control, abstracting away that complexity to the provider.\nGCP Outpaces Azure, AWS in the 2021 Cloud Report (Cockroarch Labs)\nDropbox saved almost $75 million over two years by building its own tech infrastructure (GeekWire)\n[TODO] Service Level Agreements, reallly cheap VPS,\n[TODO] Multicloud setups\nComparison of Vendors # [TODO] Add Google Cloud to list, mention they\u0026rsquo;re all sorta evil.\nNote, I\u0026rsquo;m not going to directly compare pricing between these services because that\u0026rsquo;s both rather variable and because the cost is often in terms of resource usage, which can be calculated in so many different way that the only real way to compare is to actually run something. Similarly, comparing uptime is also mostly useless as there are different metrics used and because of service contracts any provider will do everything in its power to appear to have umpteen 9\u0026rsquo;s of uptime.\nCompute # CPU # For x86-64 CPU compute both offer a range of speed tier both for GPU and CPU, making direct comparison difficult.\nAWS EC2-C5 offers Intel Skylake CPUs that support AVX-512, nice if you have a highly vectorized workload. Azure does offer some of the same CPU, with AVX-512, but many of their CPUs are AMD\u0026rsquo;s EPYC line which while EPYC should give Azure the lead in efficiency that should lead to reduced costs for the consumer, no AMD CPUs have AVX-512 and the EPYCs in particular sometimes have a hard time distributing compute over their internal CCX complexes.\nAlso interesting, AWS offers EC2 A1, which lets you deploy to 64 bit arm cores instead of x86, which for workloads that work well on it can lead to cost savings or security benefits given the mess that was Meltdown and Spectre.\nGPU # AWS appears to only offer Nvidia GPUs, buying into the Nvidia CUDA ecosystem while Azure offers a mix of GPUs from AMD and Nvidia, covering both CUDA and OpenCL workloads well.\nStorage # AWS-S3, EBS, EFS, Glacier,… There\u0026rsquo;s a lot here. There\u0026rsquo;s flexibility among offerings that suit various needs, from \u0026lsquo;object storage\u0026rsquo;, network file systems, and long term backups on cheap, bulk storage.\nAzure offers similar (and much better named) flexibility, with options like Azure Disks for bulk storage attached to a VM, \u0026lsquo;Azure Blobs\u0026rsquo; for an S3 equivalent, and \u0026ldquo;Azure Files\u0026rdquo; for a network file system.\nGenerally, it seems there\u0026rsquo;s a pretty 1-to-1 match between Microsoft\u0026rsquo;s and Amazon\u0026rsquo;s offerings. The differences start to show a bit more when it comes to dev tools and libraries available to work with them, though.\nDatabases # So that I can talk about this all without trying to name everything, so just go look at This list of database products offered from AWS and This page from Azure\nAs you can see, both offer products covering all the normal database options. Azure, rather strangely, offers hosting of multiple SQL back ends, while AWS has multiple instance types for RDS, while Azure seems to just offer flexible options that automatically scale. This means less control, but also less management overhead and concerns for needing to upgrade or downgrade the instance latter. That said, for very large projects the industry is starting to move to non-relational anyway for it\u0026rsquo;s lower overhead and ease in making it distributed and Cosmos DB, is, uh, lacking. The first chat I included from Azures\u0026rsquo; docs shows that Azure dos have some Redis cache options, but AWS has Dynamo, Memcached, and Redis.\nOn top of all of that, AWS offers a graphDB, which I can\u0026rsquo;t find Azure even competing with at all.\nThe only advantage that I can really find in Azure\u0026rsquo;s database offerings is the options for SQL being varied enough to support multiple SQL implementations.\nSecurity # The number of open AWS S3 buckets that can be found on GitHub shows right off the bat that security is more down to the developer than the ecosystem. Anything I can write here is going to be largely marketing fluff from each company, that said, there are some security offerings:\nAWS offers \u0026lsquo;Inspector\u0026rsquo; which \u0026quot; automatically assesses resources for vulnerabilities or deviations from best practices, and then produces a detailed list of security findings prioritized by level of severity\u0026quot; - so in plain English, it tries to find anywhere your code or deployed app is vulnerable to a known CVE. Azure offers \u0026ldquo;Azure Security Center\u0026rdquo; which is similar.\nFurther, though all of 2020 AWS has had 3 CVEs and two other notices (source) but Microsoft has made even finding a list of vulnerabilities difficult, but I think going here setting the date range to all of 2020 and searching for azure is as close as I\u0026rsquo;ll get. That turns up 26 CVEs, of which 25 are really on them, 9 of them are elevation of privilege and one of them is an RCE. Given Azure is the significantly smaller of the two, so will have less attention on it, that\u0026rsquo;s especially not great.\nDev Tools # AWS powers enough of the internet that when it goes down, it seems the entire internet follows suit. Anadectodely this popularity seems to be from AWS\u0026rsquo;s extensive dev tools and documentation. Further, AWS\u0026rsquo;s larger popularity means many 3rd party libraries for various languages and frameworks exist to make development even easier.\nFurther, separating things, while Microsoft has tried to make their development more platform-agnostic recently with the whole \u0026ldquo;MS \u0026lt;3 Linux\u0026rdquo; thing, from personal experience I can tell you their stuff is rather annoying to work with if you don\u0026rsquo;t buy in to the platform as a whole, while AWS has been pretty OS and development environment agnostic from the start.\nSo, while Azure effectively has the single bullet point of Visual Studio, AWS has all of this\nAs a very lazy metric, just searching GitHub (Which is owned by MS and hosted on Azure), we find this:\nI\u0026rsquo;m not going to pretend that having double the repos means AWS is twice as good, but what it does mean is that developers are choosing it. That could be because it\u0026rsquo;s cheaper or some other unrelated factor, but it could well be because it has much better documentation (something extremely evident in trying to do find this information in the first place) and because it has better tools developed by Amazon and the community.\n"},{"id":109,"href":"/engineering/networking/databases/","title":"Databases","section":"Engineering","content":" Chapter 40 - Databases # [TODO] Start with comparison to spreadsheet, explaining \u0026lsquo;NoSQL\u0026rsquo; Vs \u0026lsquo;SQL\u0026rsquo; and that this is Relational vs Non-Relational\n[TODO] explain CRUD\nCRUD # Create, Read, Update, Delete\nSQL # This is Opinionated Guides, so let me be clear, I really, really hate SQL. I don\u0026rsquo;t like OOP in general, and SQL is sorta like object orientation taken further. Add onto this a mostly shit syntax, like, JOINs are objectively weird to read, write, and understand. I\u0026rsquo;m not saying SQL doesn\u0026rsquo;t have its place: It\u0026rsquo;s reasonably good for ensuring data fits a strict structure and does make sense in cases where using OOP also makes sense. It\u0026rsquo;s just that OOP itself is over-used, leading to SQL being overused. This is probably in part due to education mostly teaching SQL and it being the only type of database many students ever learn. This might make some sense if it were honestly better, but I suspect that it\u0026rsquo;s in large part taught for the same reason Java is: Sun Microsystem paid a fuck ton of money to push it- hence the \u0026ldquo;3 Billion Devices Run Java\u0026rdquo; Thing. Then, Oracle bought Java from Sun Microsystems and made the first commercially available implementation of SQL. I\u0026rsquo;m hopeful (albeit probably naively) that Oracle making Java a mess of licensing as the \u0026lsquo;main\u0026rsquo; Java Virtual Machine goes paid (Read on Wikipedia) and suing Google will be the nail in the coffin for education using it- and that SQL will be demoted to being taught alongside other options along with that. Regardless of the reasons, though, you should still learn it because everything uses it. [TODO] SQL, full CRUD, joins, the works\n[TODO, like, all of it. Need SQL vs Non-Relational too]\nGenerating SQL Code with Blocks - Scratch Like Programming for SQL\nhttps://pql.dev\nSQL Servers (MySQL) # Sanitizing Inputs # [TODO] need image source Key-Value (Memcached, Redis) # Graph Databases (Neo4j, GraphQL?) # Why not use GraphQL?\nDocument-Oriented Database (Couchbase) # Other Resources # List of Some Open Source Database Options\n"},{"id":110,"href":"/engineering/networking/howyougothere/","title":"Howyougothere","section":"Engineering","content":" Chapter 37.1 - How you got here # So that we have some context through this chapter, lets look at what happens when you visit https://opguides.info (assuming you have a normal network)\nYou\u0026rsquo;ve already connected to your home network. Let\u0026rsquo;s make some assumptions about your setup:\nThis is over twisted pair wire (Ethernet), just to keep things simple for now. (Not using Wi-Fi)\nLet\u0026rsquo;s also assume IPv4, since IPv6 still isn\u0026rsquo;t used everywhere.\nYour router, at 192.168.1.1, has used DHCP to assign your device a local ip address of 192.168.1.123\nYour router is connected to the internet on it\u0026rsquo;s WAN port, probably though a modem of some sort that takes care of the \u0026ldquo;translation\u0026rdquo; to whatever analog signaling carries your data to your ISP. If you\u0026rsquo;re in a city, this is probably a fiber connection, so the modem translates the electrical signals in twisted pair cable to light to go down a fiber line.\nYou enter the URL (Uniform Resource Locator) into your browser\u0026rsquo;s address bar and press enter\nYour browser attempts to look up this domain name to turn it into an IP address using DNS\nOption 1: Having been to the website recently, your computer has cached the DNS request\nOption 2: Having not been to the website recently (or ever before) your computer has to ask a DNS Server where to go\nThis is done over UDP, using a source port over 1023, to connect to a DNS server running on port 53\nIf the DNS request is not cached by your router, this will need to go out to a DNS caching sever ran by your ISP or even higher, and that requires Network Address Translation - more about this in step 4.\nYour computer needs to find the IP that https://opguides.info points to, and it\u0026rsquo;s not in any cache. It\u0026rsquo;ll look it up by asking whatever Domain Name Service (DNS) servers your network is configured to use. If you haven\u0026rsquo;t set these manually, these are probably set by your Internet Service Provider (ISP). For example, Google runs a DNS server on the memorable IP 8.8.8.8. If you\u0026rsquo;re on Linux, you can run dig opguides.info to see the IP.\n╭─vega@lyrae ~ ╰─➤ dig opguides.info ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.18.9 \u0026lt;\u0026lt;\u0026gt;\u0026gt; opguides.info ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 32966 ;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1232 ;; QUESTION SECTION: ;opguides.info.\tIN\tA ;; ANSWER SECTION: opguides.info.\t30\tIN\tA\t185.199.110.153 opguides.info.\t30\tIN\tA\t185.199.108.153 opguides.info.\t30\tIN\tA\t185.199.109.153 opguides.info.\t30\tIN\tA\t185.199.111.153 ;; Query time: 283 msec ;; SERVER: 192.168.1.6#53(192.168.1.6) (UDP) ;; WHEN: Sun Dec 11 11:58:05 CST 2022 ;; MSG SIZE rcvd: 106 Of note, these IPs are not just for opguides. OpGuides is hosted through GitHub Pages, which hosts many other websites on the same IPs. Speaking of, there are multiple IPs for backup servers, distributing the sver load, and optimizing for different regions.\nYou should note, if you just went to 185.199.110.153 you would not get to opguides.info though. This is remedied by the part of the HTTP request itself, which has a host header to specify which site you want to go to in particular - That then ultimately gets you to this website.\nIf you entered http://opguides.info, I have DNS set up to redirect you to the https varient of the site. Even if I didn\u0026rsquo;t, most modern browsers will check to see if https:// is available and redirect you automatically.\nYour computer tries to find a vaild way to get to this address with ARP (Address Resolution Protocol)\nThis is also cached, so if it\u0026rsquo;s been done recently, it doesn\u0026rsquo;t need to be done again The routing table is looked up, to see if the Target IP address is on any of the subnets on the local route table. This isn\u0026rsquo;t a local IP, so you have to go to the INTERNET. THE INFORMATION SUPER HIGHWAY. Your \u0026ldquo;Router\u0026rdquo; probably has an internal switch, probably with some other devices wired in, so: The switch will check its local CAM/MAC table to see which connection has the MAC address we are looking for. If the switch has no entry for the MAC address it will rebroadcast the ARP request to all other ports. Assuming this is the switch built into the router, one of the MAC addresses will be the MAC address of the router - so this is used: the switch sends the ARP request to the connection that has the correct MAC address. Note, that this connection is internal, but acts the same as having a separate real-router and real-switch (not the combo unit) wired together. Being a website with https your browser requests your operating system to open a socket on port 443\nThis request is first passed to the Transport Layer where a TCP segment is crafted. The destination port is added to the header, and a source port is chosen at random from within the kernel\u0026rsquo;s dynamic port range (ip_local_port_range in Linux). This segment is sent to the Network Layer, which wraps an additional IPv4 header. The IPv4 address of the destination server as well as that of the current machine is inserted to form a packet. The packet next arrives at the Link Layer. A frame header is added that includes the MAC address of the machine\u0026rsquo;s Network Interface Card (NIC) as well as the MAC address of the gateway (your home router). If the kernel does not know the MAC address of the gateway, it must broadcast an ARP query to find it. The connection from 192.168.1.123 (your computer) to [OpGuide\u0026rsquo;s IP] requires network address translation.\nYour computer sees the path for this as needing to use your home router\nWhen the router (192.168.1.1) gets the TCP SYN out, it records the destination ip, source port, and destination port triplet and uses that to route the incoming responses back to your computer\nand starts a TCP connection(s) to start pulling each file - all the HTML, CSS, images, JavaScript, etc.\nIf you\u0026rsquo;ve been here recently, the Browser\u0026rsquo;s cache still has some of this content from a previous visit, and assumes this content is still valid The TCP connection goes though the SYN, ACK, SEQ, FIN process as is typical - more about this later In reality, a lot of TCP connections are made simultaneously. Note, we\u0026rsquo;re assuming all of the data is being sent over Ethernet. which means at any point any data is moving from one computer/switch/router to another, all of the complexity of ethernet\u0026rsquo;s packetiziation applies too. The TCP packets of the main connection and UDP packets of the DNS request are all wrapped up in these Ethernet data packets (frames), which include the MAC destination, MAC Source, and some error checking.\nThis means it\u0026rsquo;s a sort of nesting doll of protocols, where the Ethernet frame holds the IP packet, which holds the UDP or TCP segment, which finally holds the data in question.\nBeing an https, The browser does a TLS handshake to encrypt the transfer.\nThis looks at the certificate of the website - for OpGuides this is issued by Let\u0026rsquo;s Encrypt. Click the lock icon next to the URL in the address bar to see it.\nThe certificate is checked to be valid both in that it hasn\u0026rsquo;t expired and that the certificate is issued by a source the browser has trusted. We can see this ourselves. First, you can see the certificate for this site. On most browsers you can do this by clicking the little lock icon in the address bar, clicking \u0026ldquo;Connection is secure\u0026rdquo; →\u0026ldquo;Certificate is valid\u0026rdquo;. This will bring up the sites certificate. You should see it was issued by \u0026ldquo;Let\u0026rsquo;s Encrypt\u0026rdquo;.\nAlternatively, if you\u0026rsquo;re on Linux, you should be able to run\nopenssl s_client -showcerts -connect opguides.info:443\nBrowser starts rendering content from all the files\nIf you play a YouTube video or load a twitter embed, etc. - that content is established via a new connection, which repeats all of these steps. "},{"id":111,"href":"/engineering/networking/networking/","title":"Networking","section":"Engineering","content":" Chapter 38 - Networking # Quick links\nBlip - Check latency Speedtest.net - Speed test myexternalip.com - See your external IP portchecker.co - Check if a port is open crt.sh - Certificate search The Basics # To get started, let\u0026rsquo;s just get some basic terminology down and take a look at the bigger picture:\nNodes # These are all the points in the network. There are terminal nodes and intermediate nodes.\nTerminal nodes are things like your phone, laptop, desktop, and other user-facing devices, as well as servers, like would be used for hosting games or websites.\nIntermediate nodes, are things that are internal to the network: Things like modems, hubs, switches, routers, etc.\nLinks # Links are the interconnects between two nodes. Generally these fall into two categories: Guided and Unguided\nGuided Links are those that only connect a few nodes (usually only two) and are typically physical, hard-wire links, often copper or fiber optic.\nUnguided Links are those that propagate to multiple devices, usually though the air, like WiFi.\nNot all Links can support the same bandwidth or throughput. In general, Coaxial is worse than Twisted Pair which is in turn worse than fiber.\nApplications # These are the things that you want to do: Talk to someone via voice, text, or video; browse the web; download files; etc.\nIt can also refer to the specific program used to do these things, so like Chrome as your web browser or Zoom for video calling.\nan API (Wikipedia) or \u0026lsquo;Application Programming Interface\u0026rsquo; is what defines how two programs talk to each other. This doesn\u0026rsquo;t have to be over the network, but often is.\nEnd Systems - Hosts/Server \u0026amp; Clients # Not everything fits the host/server and client terminology, but generally the host/server is the one that is sending data, and the client is the one receiving. Or, another way to look at it, the client is the one making requests and the host/server the one fulfilling them.\nPeer to Peer # In a Peer-to-Peer (P2P) network, the idea of server and client break down a little, as typically all of the users (peers) are helping to share the content around. The most obvious example is torrenting.\nPackets # While we could just send a continual stream of data down a wire, that has a lot of issues. For one, it makes it hard to share the wire with multiple people. Of course you could split the wire so each person gets a split amount of time on the wire (Time Division Multiplexing (TDM)) or, if the wire can carry a range of frequencies give each user a small portion of those (Frequency Division Multiplexing (FDM), which limits the throughput similarly), but both of these sorta suck as they assume a user will always be using their provided channel. Instead, we do a sort of Time Division, but by packet-izing everything. Basically, each stream of data you want to send get\u0026rsquo;s broken up into manageable chunks called packets, and then these packets can be sent though the network. Now, if someone isn\u0026rsquo;t using the network, it\u0026rsquo;s free for others.\nIt\u0026rsquo;s worth noting, these packets typically have a header which carries some information about it, like what version of a protocol is being used, where it should go, and who it is from. Here, for example, is the full packet layout of an IPv4 packet, with the header being in the first 20 bytes. Image by Michel Bakni, CC BY-SA 4.0 Routers and Switches # Heads up! This is a bit confusing, as the consumer \u0026ldquo;WiFi routers\u0026rdquo; you can buy typically have both a router and switch in them internally, as well as act as a WiFi access point - all, technically, three different roles. Alright, so what are these routers and switches?\nRouters # A router is the device that can\nDetermine where data should go by use of a routing table.\nNote: This includes differentiating between other, local machines and going out to the Internet\nDo Network Address Translation (NAT) (see NAT traversal (Wikipedia))\nNote: This is how networks can have a bunch of internal IPv4 IPs (usually 192.168.1.xxx) all be served by one external ip. This isn\u0026rsquo;t necessary for IPv6, where each device can have its own external IP.\n\u0026hellip; and, technically, you could have enough IPv4 addresses to not need NAT too, but that would be very expensive \u0026hellip; also, sometimes you\u0026rsquo;ll be behind two NAT\u0026rsquo;s because of CGNAT (Wikipedia) Deal with congestion (if to much data is being sent to the router, how should it be handled?)\n\u0026hellip; the answer is often just drop packets though. Provide Quality-Of-Service (QoS) to prioritize certain applications\n\u0026hellip; This sometimes breaks things Act as a Dynamic Host Configuration Protocol (DHCP) server to assign ip addresses to devices\nSwitches # A switch lets you connect multiple devices together, but does so a bit intelligently as the switch itself figures out what destination port an incoming packet should go to. In a typical setup the switch will have one \u0026ldquo;upper level\u0026rdquo; connection going up the network (so, in a home network, to the router that goes to the internet) and many connected devices (potentially including other switches). Except for in some weird scenarios, a connection between two devices connected to the same switch will only need to pass through the switch, not go to the router and back.\nOften, switches will have one or two high bandwidth ports (10Gbe, for example) along side many slower ports under the assumption that a server or the internet will be handling most requests. Sometimes, these ports may look different than the others, as they may be for SFP modules instead of the typical RJ-45 jacks seen with most ethernet cables.\nIf you\u0026rsquo;re looking at getting a network switch, you\u0026rsquo;ll see they come in two flavors: Managed and Unmanaged.\nThe majority of the cheap \u0026ldquo;I just need something to connect multiple devices\u0026rdquo; switches are unmanaged. The don\u0026rsquo;t have any settings. You just plug your devices in and call it a day.\nThen there are managed switches. These typically have some added features, like rate limiting some ports, allowing for VLAN setups. It\u0026rsquo;s very uncommon to need these outside of business use.\nYou may also see the option to get a switch with Power Over Ethernet (PoE) which is a collection clusterfuck of standards for powering a connected device via the same line that provides network connectivity - useful for security cameras, office phones, etc.\nNote, technically there are also Ethernet Hubs, the key difference being the lack of a forwarding table, and (mostly) just blindly merge data: \u0026ldquo;It has multiple input/output (I/O) ports, in which a signal introduced at the input of any port appears at the output of every port except the original incoming.\u0026rdquo;(Wikipedia) (see IEEE 802.3). I\u0026rsquo;ve never seen one in use.\nPacket Loss # Sometimes packets in the network don\u0026rsquo;t reach their destination. This can be for a variety of reasons. Maybe a switch along the line was overloaded and it\u0026rsquo;s buffer was full, maybe it took a bad route, maybe you have crappy wifi. ╮(─▽─)╭. It happens. The percent of dropped packets vs total packets is called your packet loss.\nBandwidth, Throughput, \u0026amp; Latency # One thing a lot of people confuse is bandwidth and throughput. The two are related, but they\u0026rsquo;re not the same.\nThroughput is how many bits of useful information you\u0026rsquo;re actually getting out per second. This is the number you probably actually want. Bandwidth (quite literally how much of a frequency range you\u0026rsquo;re using) is how much information the connection can theoretically transmit.\nThe easiest example of the difference here is a bad WiFi connection. You might have a good amount of bandwidth if you\u0026rsquo;re using a nice silce of spectrum up near 5GHz, but if you\u0026rsquo;re far away from the transmitter, near a running microwave, and your neighbor is using the same specturm for their Wi-Fi, you\u0026rsquo;ll obviously have a lower throughput.\nWhat about bit rate and baud rate? There\u0026rsquo;s also the idea of \u0026ldquo;bits per second\u0026rdquo; and \u0026ldquo;baud rate\u0026rdquo;. The difference is bits is the true number of 1\u0026rsquo;s and 0\u0026rsquo;s you\u0026rsquo;re receiving while baud is the number of symbols you\u0026rsquo;re receiving.\nFor example, say you want to send the message \u0026ldquo;Hello\u0026rdquo; in ASCII, which is 01001000 01100101 01101100 01101100 01101111 And you\u0026rsquo;re able to send that entire message in 5 seconds. As there are 40 bits in the message, your able to send 8 bits per second.\nHowever, let\u0026rsquo;s say you\u0026rsquo;re transmitting that signal over radio, and the wave you send looks something like this:\nThis does show the same binary, we\u0026rsquo;ve just taken groups of two bits at a time and represented each as a different level in the wave. If you want to think of it another way, say we take that binary and make a little look up table:\n00 = ░, 01 = ▒, 10 = ▓, 11 = █,\nWe can now convert it into ▒░▓░ ▒▓▒▒ ▒▓█░ \u0026hellip;\nAssuming the message still takes 5 seconds, we\u0026rsquo;re getting 20 baud, because we\u0026rsquo;re able to send 20 symbols a second.\nThe point being, we\u0026rsquo;re literally able to represent the same message with less symbols. We could of course make a special encoding where each character itself is it\u0026rsquo;s own symbol to be transmitted, if we had that - if our symbols were the letters themselves, we\u0026rsquo;d be getting 1 baud - 1 symbol a second.\nThe number of symbols per second is the baud rate. Basically, this means if you\u0026rsquo;re told two devices have the same baud rate that doesn\u0026rsquo;t necessarily mean they both have the same bit rate (bits per second), which is probably the number you actually care about. The reason the baud rate is even important is because there\u0026rsquo;s a bunch of fancy things we can do when transmitting signals where we can pack more information into less radio spectrum by using different numbers of symbols that are encoded as different frequencies, amplitudes, and phases. This is really into the weeds and not typically relevant to someone just trying to make a network out of existing equipment.\nOf course, in reality, it\u0026rsquo;s not like we can just keep packing more bits into a given symbol to get faster rates. Typically, the trade off between how many bits are in a symbol and the rate you can transmit symbols works out to make things pretty even. Typically, if you see baud it\u0026rsquo;s talking about serial communication, but it\u0026rsquo;s still usually actually provided in bits/second because there is often only 1 symbol used per bit, so, it\u0026rsquo;s confusing. Regardless, bit/s = baud rate * number of bits per symbol, but number of bits per symbol can be 1.\nYou should also note that while you\u0026rsquo;re internet provider may sell you 1000Mbit/s you probably won\u0026rsquo;t actually be able to connect to very many severs at that speed, as they simply can\u0026rsquo;t serve everyone at those rates. In my experience, the only servers I\u0026rsquo;ve seen handle very fast connections are YouTube for uploads and Steam for downloads. While it\u0026rsquo;s not 100% right, it\u0026rsquo;s not to far off to say that when you pay for a 1000Mbit/s plan, you\u0026rsquo;re telling all the sites you connect to \u0026ldquo;You can send me 1000M bits a second\u0026rdquo;, it\u0026rsquo;s just that many sites will respond with \u0026ldquo;Cool. I can\u0026rsquo;t actually go that fast though. Here\u0026rsquo;s 20M bits a second\u0026rdquo;.\nFinally, with any connection you\u0026rsquo;ll also have to deal with latency. In networking, this is typically called \u0026ldquo;ping time\u0026rdquo;, which is simply how long it takes for a round trip - hence the more formal RTT for Round Trip Time. This time will vary depending on the distance from you to the target server/device and how many devices are between. A good sanity check is to ping a local device such as your router with ping 192.168.1.1 (typically) where the result should be well under 1ms. Following this, you can try to ping a few websites, like ping google.com for example. For google.com, I get ~12ms, and for archlinux.org I get ~130ms. Note that some websites may not respond to ping.\nLater I\u0026rsquo;ll show you traceroute and derivative software (mtr, visual traceroute, etc.) that will help you see why a particular path may have a high latency.\nLAN Vs WAN # Local Area Network and Wide Area Network- on most home connections your LAN is the network in your house while the WAN is the internet at large, so the WAN port on your router is where you connect the cable from your Internet Service Provider (ISP)\nNote WAN doesn\u0026rsquo;t have to be the internet. It can really just be any network that\u0026rsquo;s broader than the LAN, that usually has multiple smaller, LANs attached.\nProtocol # Usually a network is dependent on a stack of protocols. Each protocol is just a standard for the way too things communicate. As we keep going you\u0026rsquo;ll see more about IP (Internet Protocol), TCP (Transmission Control Protocol), among many others.\nMost protocols are determined by standardization bodies such as the Internet Engineering Task Force (IETF) or IEEE Standards Association (IEEE-SA)\nStandards and Governance: IEEE, IETF, ICANN, W3C, \u0026hellip;? # I\u0026rsquo;m going to be throwing a lot of acronyms in here. Don\u0026rsquo;t try to look up each now- I\u0026rsquo;ll cover them as we go. Okay, yeah, so, you\u0026rsquo;ll see these acronyms - among others - a lot. These can be a bit overwhelming, but the gist is there\u0026rsquo;s a fair amount of bureaucracy in how communications standards are defined.\nGenerally the IEEE (Institute of Electrical and Electronics Engineers) standards are more on the hardware and signaling side of things, so you\u0026rsquo;ll mostly see these in the physical layer, such as IEEE 802.11 for Wi-Fi\nMeanwhile, the IETF (Internet Engineering Task Force) often publishes technical documents as RFCs (Request for Comments) such as the ASCII standard, DNS, UTF-8, SMTP, SSH, POP, NTP, NFS, Kerberos, IRC, IPv4, IPv6, among many, many others. These each have a designated RFC number, and often multiple, such as the many associated with DNS. There\u0026rsquo;s also the IRTF (Internet Research Task Force) which \u0026ldquo;focuses on longer term research issues related to the Internet while the parallel organization, the IETF\u0026rdquo;. The IRTF is made up of 14 research groups ranging from cryptography to quantum computing and even human rights.\nThe IANA (Internet Assigned Numbers Authority), a sub group of ICANN (Internet Corporation for Assigned Names and Numbers) assigns blocks of IP addresses, runs the root DNS servers, and runs the main time zone database. There are regional organizations (RIR - Regional Internet registry) that the IANA delegates responsibilities to. These are the American Registry for Internet Numbers (ARIN), Réseaux IP Européens Network Coordination Centre (RIPE NCC), Asia-Pacific Network Information Centre (APNIC), African Network Information Center (AFRINIC), and Latin America and Caribbean Network Information Centre (LACNIC).\nThen there\u0026rsquo;s the W3C (World Wide Web Consortium) which is probably most notable for defining the standards for HTML, CSS, SVG, WebAssembly, and, more recently, ActivityPub. Of note, the W3C has faced backlash recently for adding DRM-specific Encrypted Media Extensions (EME) to HTML5, a move that really really pissed of the EFF\u0026hellip;\nSpeaking of, the EFF (Electronic Frontier Foundation) is a bit of an odd-one-out on this list, but is effectively to the internet what the ACLU is to the broader public. They regularly provide legal council to high profile cases regarding online rights and digital privacy. They\u0026rsquo;ve regularly stood up for the right to encrypt your shit, are anti-DRM, and are basically all-around the good guys. Seriously, please donate to them or buy some of their actually awesome merch. They\u0026rsquo;re the bad asses protecting your rights online.\nFinally, getting even more tangential, you\u0026rsquo;ll also probably see a fair amount of stuff from DEFCON and related computer security conference influence the web at large - I\u0026rsquo;ll talk more about that in the Security chapter though.\n"},{"id":112,"href":"/engineering/networking/osi/","title":"OSI","section":"Engineering","content":" Chapter 37.2 - The OSI Model # The OSI model of networking is the model of networking most classes will cover. It is slightly different from the one used by the internet, which is the TCP/IP model, but it\u0026rsquo;s a bit more regularly used when talking about networking, so it\u0026rsquo;s the one I\u0026rsquo;ll cover here. Note, the big difference is really just that In the TCP/IP model, the Physical and Data Link Layers are viewed as a unified \u0026lsquo;Network Acces Layer\u0026rsquo;, the Network Layer is called the Internet Layer, The Transport Layer stays the same, and the and The Session, Presentation, and Application layer are all part of a larger Application Layer.\nSeriously though, don\u0026rsquo;t think about this to much. It usually doesn\u0026rsquo;t matter and the OSI Model is fine.\n1 - The physical Layer # The series of tubes, wireless media, etc. that you shove your information into\nWe\u0026rsquo;ve already talked about Routers, Switches, Hubs, Nodes, and Links - all of these are part of the physical layer. Let\u0026rsquo;s look at some of the details though:\nEthernet is not on the physical layer # First, let\u0026rsquo;s get a point of confusion out of the way, Ethernet is not the connection standard. The rectangular-ish plug with 8 wires often carries Ethernet, but the plug you\u0026rsquo;re thinking of is, just 4 pairs of wires with two RJ45 connectors usually connected via Cat rated cables.\nThe wire itself often has a rating such as Cat5, Cat5e, Cat6, Cat7, etc. Generally, bigger number (or +e/A) means you can get it to go further or carry higher bandwidth signals (for example, 2.5, 5, or 10 gigabit Ethernet) before the noise in the wires kills everything. See cablek.com\u0026rsquo;s handy, based on their HTML probably stolen, tables.\nBut, again, not all Ethernet signals are carried over those wires. Historically, it was often carried over Coax (same wires as you\u0026rsquo;d use for connecting a TV antenna), and in modern times you\u0026rsquo;re likely to see SFP cables used for the really high throughput stuff (100GbE+, for example.). Those may use copper, or they may be direct fiber connections - because - again - Ethernet is a layer up. We\u0026rsquo;re still at the physical layer.\nAll of that said, please still call it an Ethernet cable.\nWhat about PoE? Power over Ethernet, or PoE, allows network cables to carry electrical power. This means that network devices such as routers and switches can be powered through or provide power via the same cables that are used for data transmission. This can be convenient because it eliminates the need for separate power cables, which can be difficult to install. PoE is commonly used in applications where it is not practical or possible to provide power to network devices through a traditional wall outlet, such as for security cameras. The technology is also often used to power IP cameras and other networked devices that require a power source.\nThe standard is a bit of a fustercluck. There\u0026rsquo;s a decent char on the Wikipedia page detailing the voltages, currents, cable requirements, max power, etc.\nWi-Fi # Wi-Fi is a part of the IEEE 802.11 standard and normally uses 2.4GHz and 5GHz. Very recent developments are pushing it into 6Ghz for most uses. There are some less common variants of WiFi that use 60Ghz (WiGig, CMMW) and sub 1Ghz (Wi-Fi HaLow, White-Fi).\nWiFi, like ethernet, is really a mix of being at the Physical Layer and the Data Link layer. On the physical layer, the main thing we should think about is the frequency it\u0026rsquo;s running at. So, we normally call WiFi either 2.4Ghz or 5Ghz. So, it must run at those frequencies, right?\nSorta. There\u0026rsquo;s two gotcha\u0026rsquo;s. First, no, it\u0026rsquo;s actually 2.401-2.495GHz and 5.030-5.990GHz, but more importantly, you won\u0026rsquo;t be using those full ranges anyway. For 2.4, that range is split up into 14 different channels (Wikipedia), not all of which can be used everywhere. Generally, on 2.4, you\u0026rsquo;ll want to be using 1, 6, or 11 as otherwise the channels will overlapp.\nImage from Wikimedia, CC-BY-SA by Michael Gauthier \u0026amp; KelleyCook On 5Ghz, the channel situation is dramatically more complicated. There\u0026rsquo;s a who fuckload of channels (which you\u0026rsquo;d\u0026rsquo;ve seen on the Wikipedia channel page) but only a subset are used. Let\u0026rsquo;s go grab a picture.\nImage stolen from https://wlanprofessionals.com/updated-unlicensed-spectrum-charts/ with love ❤️, Seriously, I can\u0026rsquo;t even imagine how much of a pain in the ass this was to make. If you look at the smallest channel blocks available, you\u0026rsquo;ll see they start at 36 and go up by 4. Each of those channels is 20MHz wide. Then, below 36 and 40 there\u0026rsquo;s channel 38. That\u0026rsquo;s a combined channel. Basically, it glues the two together to allow for more bandwidth (hence the name, it\u0026rsquo;s a wider band) thus more data throughput, at the cost of slightly worse range and more likely to be bothered by interference. Then there\u0026rsquo;s the 80Mhz band which is two of the 40Mhz bands glued together, and finally the big-boy 160Mhz which glues 8(!!!) regular channels together, yielding amazing throughput.\nOf course, each band has it\u0026rsquo;s own power and licensing concerns, which are shown in that image as well.\nActually, the same is true of 2.4GHz - I already mentioned that you can use all the channels in every country, but you also are limited in power depending on region too. Yay! Regulations!\nAs if this wasn\u0026rsquo;t already complicated enough, the WiFi standard itself is evolving, supporting more physical layer features as well. Notably, these include MU-MIMO and OFDMA which are both black magic essentially boil down to making WiFi capable of handling more clients on a network with better speeds. Fun stuff.\nOh, and Wi-Fi 6E is slowly rolling out, which adds yet another frequency band for us to get confused by. Still, it\u0026rsquo;s more speed for our devices, so it\u0026rsquo;s a win.\nGeneration Name / IEEE Standard Year Frequency Range** Max Rate Note Wi-Fi 6E (802.11ax) 2020 2.401-2.495+5.030-5.990+\u0026ldquo;6Ghz\u0026rdquo;(5.925-7.125Ghz) 9608 Mbit/s The \u0026ldquo;E\u0026rdquo; is to denote this extra spectrum Wi-Fi 6 (802.11ax) 2019 2.401-2.495+5.030-5.990GHz 9608 Mbit/s dramatic under-the-hood changes: notably OFDMA, more spatial streams, and uplink MU-MIMO Wi-Fi 5 (802.11ac) 2014 5.030-5.990GHz 6933 Mbit/s Allows for wider channels, MU-MIMO, Beamforming Wi-Fi 4* (802.11n) 2008 2.401-2.495+5.030-5.990GHz 600 Mbit/s Adds basic MIMO, Spatial Division Multiplexing, frame aggregation, and possibility for 40Mhz channels Wi-Fi 3* (802.11g) 2003 2.401-2.495GHz 54 Mbit/s Basically a speed bump from Wi-Fi 2. Runs slower if there are any Wifi 1 devices on the network. Wi-Fi 2* (802.11a) 1999 5.030-5.990GHz 54 Mbit/s Basically just defines the addition of the 5GHz band Wi-Fi 1* (802.11b) 1999 2.401-2.495GHz 11 Mbit/s Yes, b is worse than a, but was short lived- you\u0026rsquo;ll mostly see b/g/n support on low end devices. Wi-Fi 0* (802.11) 1997 2.401-2.495GHz 2 Mbit/s Initial spec, Extremely rare * Wi-Fi 0-4 are unoffical names If all of this feels really abstract, go grab the WiFi Analyzer app and checkout all the signals around you. You can see what\u0026rsquo;s operating on what channel and maybe move to another one so that you and your neighbor\u0026rsquo;s signals aren\u0026rsquo;t trying to scream over each other.\nMore about those weird standards: Generally, transmitting at higher the frequency will yield worse range but higher data throughput. This isn\u0026rsquo;t strictly true, but it\u0026rsquo;s mostly true.\nGeneration Name / IEEE Standard Year Frequency Range** Max Rate**** Note (802.11y-2008) 2008 3.65-3.7Ghz ??? A spectrum licenseing shit storm, can run at higher power (802.11j) 2004 5Ghz only ??? Mostly Japanese. Might(?) be used in the US by Law Enforcment? WiMax (802.16) 2005(802.16e) 2-11Ghz ~40 Mbit/s normally, 1Gbit/s for fixed stations Spectrum used may require license. Hardware is actually available. White-Fi (802.11af)*** 2014 755-928Mhz 35.6 Mbit/s, 426.7 Mbit/s with channel bonding \u0026ndash;extremely variable Also known as \u0026ldquo;White-Fi\u0026rdquo;. Uses Licenced Spectrum. Also see 802.22 Wi-Fi HaLow (802.11ah)*** 2017 900Mhz 150Kbit/s to 78Mbit/s \u0026ndash; extremely variable Also known an Wi-Fi HaLow. Some consumer products available, dubious legality CMMW (802.11aj) 2018 45Ghz ~15Gbit/s Mostly used in China, CMMW = Chinna Milimeter Wave WiGig (802.11ay) 2021 57.24 to 70.20Ghz 277(?)Gbit/s - (When running with basically all of the spectrum dedicated to one link) Extension of ad WiGig (802.11ad) 2012 57.24 to 70.20Ghz ~7Gbit/s Used by Dell and Lenovo for a bit, hardware compatability \u0026amp; drivers may be rough *** Also see LoRa, Zigbee, BLE, and Z-Wave**** Max Rate is a bit hard to research here, so take these numbers with a grain of salt Also note, WiFi generally uses the same 2.4Ghz spectrum as Bluetooth (IEEE 802.15.1) and Bluetooth Low Energy (BLE, not from an IEEE standard).\nThis is not all of the 802.11 standards. There\u0026rsquo;s a bunch of extensions/application specific cases like 802.11p for use in moving vechicals\nSSIDs - Service Set Identifier # A WiFi SSID is the name of a wireless network. It is essentially a unique identifier that allows devices to connect to the network. When you set up a wireless network, you will typically be asked to choose a name for the network, which will become the WiFi SSID. This name is then broadcast by the router so that nearby devices can detect and connect to the network. The name can only be up to 32 bytes long. You may be able to set it to use Unicode, but you proably shouldn\u0026rsquo;t as it can really fuck shit up.\nIt is possible to have a hidden network with no SSID.\nMultiple Acccess Points, Repeaters, # Security # WEP, WPA(v2), EAP, TKIP, RADIUS, PEAP, LEAP \u0026mdash;\u0026gt; Maybe redirect to security chapter\nNot Using Wi-Fi # Ethernet over power, wired tethering (USB)\nOther Wireless Systems # Satelite, geostationary \u0026amp; LEO\nEnd to End Delay # d_ECE = 2 (L/R)\nwhere L = bits per packet, R = tx rate of link\nQueuing Delay # Hubs, Repeaters, Taps # Carrier Pidgeon, Can, etc. # + Sneakernet, Infiniband, Multigig\nModems? # [TODO] http://www.whence.com/minimodem/\n2 - Data Link # Organize the information in the meduium into a packet, control who get\u0026rsquo;s that packet\nMAC and LLC\nEthernet # PPP - Point-to-Point Protocol # Switch # Bridge # Frames # VLAN - Virtual LAN # 3 - Network Layer/IP Layer # Find paths though the mesh of links and forward the packets though it\nService Models # Not guaranteed delivery, bounded delay, or throughput. Sorta sucks, but it\u0026rsquo;s cheap\nPackets # IPV4, IPV6 # IPV6 is a total nightmare \u0026amp; Hacker News comments on this blog post (note, I don\u0026rsquo;t agree with everything here, just providing it as another person\u0026rsquo;s comments)\nIPV4-\u0026gt;6 Tunneling\nLogical: [6] \u0026lt;-\u0026gt; [6] \u0026lt;- \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;- -\u0026gt; [6] \u0026lt;-\u0026gt; [6]\nPhysical: [6] \u0026lt;-\u0026gt; [6] \u0026lt;-\u0026gt; [4] \u0026lt;-\u0026gt; [4] \u0026lt;-\u0026gt; [6] \u0026lt;-\u0026gt; [6]\n[TODO] ipv4 exhastion It\u0026rsquo;s very reasonably to scan literally every IPv4 address. See A Census of Minecraft Servers or Harder Drive for examples of this being done.\nMAC # ICMP - Internet Control Message Protocol # https://xkln.net/blog/icmp-ping-and-traceroute--what-i-wish-i-was-taught/\nIGMP - Internet Group Management Protocol # traceroute\nSubnets # https://www.aelius.com/njh/subnet_sheet.html\nhttps://en.wikipedia.org/wiki/Subnetwork\nStatic and Dynamic Routes # BGP - Boarder Gateway Protocol # BGP is one of those things that you should basically never have to worry about, and if you do, it\u0026rsquo;s almost certainly because somebody else fucked up. That said, it does still matter. In 2021, a BGP mis-configuration took FaceBook down globally and in 2008 Pakistan used a BGP hijack to take down YouTube. But, uh, what is it.\nWell, if you\u0026rsquo;ll allow me to follow the lead of the late Alaskan Senator Ted Stevens\u0026rsquo; less-than-ideal analogy: \u0026ldquo;The Internet is a series of tubes!\u0026rdquo; and BGP is the logic that dictates where things get routed to go from one tube to the next, and tries to adapt to find the fastest, most efficient route when there are multiple available paths, but, while I could try to explain it, This article from Cloudflare will do a much better job than I ever could, so just, read that and come back here.\nHai, welcome back - so, okay, BGP is only something for the ISPs and big players, right? Well, no.\nFirst of all, you might, occasionally want to check something isn\u0026rsquo;t taking a very stupid route, which means digging into BPG yourself. Julia Evans wrote a great blog post \u0026ldquo;Tools to explore BGP\u0026rdquo; that does a good job of showing how to poke around things. If you actually want to get hands on, you can use GNS3 to simulate a network, or join https://dn42.eu/ to try something more tangible.\nThere\u0026rsquo;s some fantastic other pages I recommend reading too. Most notably, EVE Online internet from https://blog.benjojo.co.uk is a really neat look at BGP and just a fun read!\nBTW, Ben Cox blog has a ton of other really neat posts, like The Speed of BGP network propagation, BGP Stuck Routes, and Hacking Ethernet out of Fibre Channel cards To finish things up, the Wikipedia article for BGP is quite nice as well, and does a really good job of explaining the more technical operation in plain english.\n4 - Transport Layer # Better reliability of the network by keeping packets in order, retransmitting lost packets, etc.\nMultiplexing, Demultiplexing\nReliable data tx/rx - checksums\nflow and congestion control\nTCP - Transmission Control Protocol # https://research.swtch.com/tcpviz\ntcp header diagram\nMultipath TCP\nhttps://github.com/appneta/tcpreplay\nUDP - User Datagram Protocol # QUIC - Quick UDP Internet Connections # + https://multipath-quic.org\nRaw # A brief dive into FSMs # Go-Back-N # Selective Repeat # Timeout and Retransmission from Estimated RTT # 5 - Session Layer # Authentication # Sockets # API - Application Programming Interface # NetBios - Network Basic Input/Output System # PAP - # RPC - Remote Procedure Call # SMB - Server Message Block # SOCKS - Socket Secure # 6 - Presentation Layer # SSL - Secure Sockets Layer (Deprecated) \u0026amp; TLS - Transport Layer Security # SSL and TLS are cryptographic protocols that are used to secure communications over the internet. SSL, which stands for Secure Sockets Layer, was the first widely-used security protocol, but it has since been replaced by TLS, or Transport Layer Security. Both SSL and TLS encrypt data that is transmitted over the internet. They are commonly used to secure web traffic. In order to use SSL or TLS, a web server must have an SSL/TLS certificate, which is used to authenticate the server and establish a secure connection.\nIMAP - Internet Message Access Protocol # IMAP is a protocol used for accessing email messages on a remote server. It allows users to retrieve email messages from a server and manipulate them as if they were stored locally, without actually having to download the messages to the user\u0026rsquo;s computer. IMAP is usually used in conjunction with a mail client, like Outlook or Thunderbird.\n7 - Application Layer # HTTP(s) - Hypertext Transfer Protocol # https://fasterthanli.me/articles/the-http-crash-course-nobody-asked-for\nhttp://bright28677.tripod.com/proj2/httpformat.htm (both images)\nresponse codes - 200, 300\u0026rsquo;s, 400\u0026rsquo;s, etc.\nIn header lines\nHost, user agent, accept-language, connection (keep-alive), …?\nGET, POST, HEAD, PUT, DELETE\nhttps://www.monkeyuser.com/2017/http-status-codes/ http1 vs 2 v 3\ncookies because stateless\nin-band\nFTP - File Transfer Protocol # still TCP, out-of-band, maintains state, passive v active mode\nDNS - Domain Name Service # Not All TLDs Are Created Equal (Matt Palmer)\nTTL?\nDNS TTL, or Time to Live, is a value in DNS records that determines how long a DNS resolver is supposed to cache the DNS record before it expires and a new query is made to the DNS server to refresh the record. This value is set by the owner of the domain and is specified in seconds. A low DNS TTL value means that the DNS resolver will refresh the record more frequently, while a high DNS TTL value means that the record will be cached for a longer period of time before it is refreshed. This can be useful for managing the load on DNS servers and ensuring that users always have access to the most up-to-date information about a domain.\nStop Using Rediculously Low DNS TTLs (Frank Denis)\nrecord types\nYou Smart TV is probably ignoring your PiHole (LabZilla)\n72% of Smart TVs, 46% of Consoles hardcode DNS Settings, (Hacker News Comments on article)\nBonjour / Zeroconf # Occassionally, you may find things that want a name given to them by the local system. If two systems are running Bonjour / Zeroconf, then you can have a local name that should always point to the device. This is particularly handy for setting up devices like the Raspberry Pi Zero as a USB gadget and letting it show up as a network device on the system it\u0026rsquo;s plugged into- now it\u0026rsquo;ll have a local name. See Bonjour (Zeroconf) Networking for Windows and Linux (Adafruit).\nDHCP - Dynamic Host Configuration Protocol # Some texts will put this in Data or Network layer or Link Layer, it\u0026rsquo;s a bit ambiguous. It\u0026rsquo;s not -technically- necessary, much like DNS, but it\u0026rsquo;s used as a core part of the network in most networks. It does appear the RFC 2131 says it\u0026rsquo;s Link Layer, but it seems most people think it belongs in Application Layer.\nSSH - Secure Shell # SSH is mostly used to remotely access and manage servers, as it provides a secure way to connect to the server and work via a command line. It is also often used to securely tunnel other network protocols, such as FTP, Telnet, and VNC, over an unsecured network.\nIRC - Internet Relay Chat # EMail (SMTP, IMAP, POP) # mail servers and useragents\nUPNP - Universal Plug and Play # NTP - Network Time Protocol # NTP is a protocol used to synchronize the clocks of computers over a network. It allows devices on a network to maintain accurate time by periodically synchronizing their clocks with a reference time source - there\u0026rsquo;s plenty of free NTP servers, such as those run by NIST.\nHaving correct time is important because many network protocols and applications require accurate time in order to function properly. For example, the correct time is needed for generating log files and for ensuring that cryptographic signatures are valid.\nTelnet # NFS - Network File System # Torrents # Distributed Hash Tables\nTime # Real time clocks, timezones, utc, etc.\nNo Good Place In The Model: # VPNs # OpenVPN # Wireguard # Wireguard Quickstart page\nWireguard entry on the (Arch Wiki)\nTailscale # "},{"id":113,"href":"/engineering/networking/privacy/","title":"Privacy","section":"Engineering","content":" Chapter 41½ - Your Guide to Privacy # \" Arguing that you don\u0026rsquo;t care about the right to privacy because you have nothing to hide is no different from saying you don\u0026rsquo;t care about free speech because you have nothing to say. \" - Edward Snowden, in his Reddit AMA Privacy online is a joke. No matter what you do, you\u0026rsquo;re still going to be tracked so much that advertisers and the big tech companies (Facebook, Google, Microsoft, etc.) all know way more about you than you\u0026rsquo;d like. Data brokers will find out more about you than you can imagine. Technically, most of these companies will provide various opt-outs. Realistically, you shouldn\u0026rsquo;t expect these to stop anyone. You can be 110% your data is being sold. So, what can you do?\nAcknowledge you can not win, but you can still fight back.\nDon\u0026rsquo;t buy smart-XYZ devices. No smart bulbs, toasters, fridges, ovens, thermostats, TVs, or doorbells. And, look, I get it. Each offers a pretty legitimate convenience. But between the ability for companies to change a one time payment into a subscription after purchase, devices phoning home even if you don\u0026rsquo;t connect them to your Wi-Fi, and IOT cameras letting police in without a warrant I think it\u0026rsquo;s pretty clear they don\u0026rsquo;t respect you as a user. Where you draw the line is a personal choice. Obviously, it\u0026rsquo;s hard to function without having a Internet connected camera, microphone, and GPS smartphone in your pocket. But what about a smartwatch? Do advertisers need to know your heart rate, how hard you\u0026rsquo;ve been trying to work out, or how many steps you got in each day? What can be derived from all this data combined? Can they see if you\u0026rsquo;re on your period or currently sick to advertise pads or drugs directly at you?\nFor the love of fuck, don\u0026rsquo;t buy a smart speaker or anything Alexa enabled. I honestly can not believe I have to say this.\nBlock as much shit as you can. Ads and trackers and cookies may not all be malicious, but enough are that the ad industry dug its own grave: block their dumb asses. You won\u0026rsquo;t ever get full coverage, some things will slip though, BUT setting up a Pi-hole, using uBlock Origin (or adnauseam), and DuckDuckGo (until you need Google, but defaulting to DDG helps) makes for a good start. You can also prevent your ISP from collecting your traffic by using a VPN or TOR, though that may result in some sites not working and you\u0026rsquo;re really only adding yet another middle man. Do make sure everything uses HTTPS though, and, if you\u0026rsquo;re feeling extra nerdy, consider setting up DNSCrypt too.\nDelete, Opt-Out, or Lie - Much like reduce, reuse, recycle, this order matters. Delete anything you don\u0026rsquo;t need, don\u0026rsquo;t use, or don\u0026rsquo;t trust. If you don\u0026rsquo;t use Facebook for anything other than talking to people you don\u0026rsquo;t like and seeing when someone you haven\u0026rsquo;t talked to in a decade has a kid, delete it. If you trust a service\u0026rsquo;s Opt-out functionality, do so! Yeah, it\u0026rsquo;s bullshit that you have to opt-out instead of opt-in in the first place, but for now that is what it is. Dig through settings on everything you can and turn off all that tracking, spying, bullshit. Go into your browser settings and turn on \u0026lsquo;Do Not Track\u0026rsquo; for the approximately 0% of site\u0026rsquo;s that respect it. Go into your Google settings and turn off and clear location history. Do all of this about once a year, as this shit will re-enable itself. It\u0026rsquo;s really only about an hour of diving into settings to stop like 75% of the bullshit.\nFrom here, the \u0026ldquo;This is a pain in the ass\u0026rdquo; levels starts to surpass what most people will deal with. This is by design. But, if you really care about your privacy, this will make a significant improvement and might result in you getting less spam calls and physical junk mail as a side effect.\nUnfortunately, Opting out requires both that you know who your data is being collected in the first place and that the offending asshats even offer an opt-out in the first place.\nA great example of the latter being Clearview.ai, which from Wikipedia is \u0026ldquo;an American facial recognition company, providing software to companies, law enforcement, universities, and individuals. The company\u0026rsquo;s algorithm matches faces to a database of more than three billion images indexed from the Internet, including social media applications\u0026rdquo;- Basically, they stole your face from Facebook, Twitter, and everywhere else, and sell the ability to have a computer recognize you to law enforcement. They\u0026rsquo;re assholes, selling to a huge list of other assholes. Want to opt out? Hah, no. Not unless you live in Illinois or California, the only states to pass legislation telling them to fuck off.\nSo… What can you do? Well, if you\u0026rsquo;re serious about it, you can plow though this \u0026ldquo;Big Ass Data Broker Opt-Out List\u0026rdquo;, and This list, and this opt-out tool, try to Opt-Out of as much as you can. Or you could pay out the ass for a service like DeleteMe or PrivacyDuck to do this shit for you, not that I really trust them to be all that through, and there\u0026rsquo;s some they can\u0026rsquo;t really remove you from in the first place. But ultimately, you really can\u0026rsquo;t stop it and you\u0026rsquo;ll just be opt\u0026rsquo;d back in when these companies change hands or restructure or just feel like it. If you want to use the internet as normal- using YouTube and Twitter and Reddit - you\u0026rsquo;ll just have to acknowledge to some extent you\u0026rsquo;re stuck with it.\nSome of the optouts are also a massive pain in the ass, for example, to opt out of letting Google use your Wi-Fi name for determining location, you have to change your Wi-Fi\u0026rsquo;s name to end in _nomap, and to make matters worse, you need to put _optout in the name to get out of Microsoft\u0026rsquo;s Wi-Fi tracking garbage, but, _nomap needs to be at the end, so that means your SSID has to be something like MyCoolWiFiName_optout_nomap which means that making the choice to opt-out means you don\u0026rsquo;t get to choose your Wi-Fi name.🤦‍♂️\nThat brings us to Lie. If you can\u0026rsquo;t Delete and you can\u0026rsquo;t opt-out then you can still lie. To lie, you must first try to delete the truth. Search how to reset your advertising ID on as much as you can(1), log out of everything, delete all your cookies, then use tools like \u0026lsquo;Track This.\u0026rsquo; to \u0026lsquo;seed\u0026rsquo; your new identity, and add something like Noiszy (or this python based web crawler) on top to keep the history polluted. Unfortunately, this still isn\u0026rsquo;t enough because as soon as you log back into Facebook, Twitter, Google, YouTube, etc. your identity will be re-associated. The best way around this is to use a separate browser strictly for social media. Firefox works particularly well, as you can throw Facebook into its own little jail.\nKeep in mind, you\u0026rsquo;re probably used to a pretty tailored experience from The Almighty Algorithm such that most YouTube, Google News, etc. recommendations are probably things you\u0026rsquo;ll be interested in and agree with (or strongly disagree with, as hate still gets you to read things). If you pollute this ID, you\u0026rsquo;ll likely get complete shit, as it\u0026rsquo;s kinda creepy how much the algorithm can figure out the things you like and who you are. If not complete random shit, The Algorithm might just see you as something else entirely, and this can seriously impact what you get exposed to- check out TheirTube for an idea of how bad it gets.\nOne of my favorite lies you can do is change your browser\u0026rsquo;s user agent string to hide a little bit. This doesn\u0026rsquo;t really stop tracking, as identifiers like your screen resolution, JavaScript interpreter, active graphics card, etc. (see Visual Browser Fingerprinting) can all be used in conjunction to pretty accurately identify you. Still, changing the user agent string can help you hide, and making it the same as Googlebot\u0026rsquo;s will often let you bypass paywalls. You can use browser extensions to do this too, just be careful to make sure you trust the extension.\nThere are a lot of things I didn\u0026rsquo;t mention here, such as globally disabling JavaScript(2), because they\u0026rsquo;re really the nuclear option and end up being significantly inconvenient to even technical users. Being online is a trade of convenience versus privacy by nature, the problem is that many users are either unaware of the trade at all, ignorant of the depth to which they\u0026rsquo;re being mined and exposed, or apathetic. At the same time, advertisers and conglomerates have sought to wring from us every drop of data that can be found and paid off governments to prevent the passage of any consumer protecting legislation. This has resulted in the situation we have now where the only ones that fight back are those with enough of a technical background to do so, and so the tools assume a certain level of technical prowess and ability to make your own replacement. Don\u0026rsquo;t want a ring doorbell? \u0026ldquo;Just use a Raspberry Pi and a camera module and host your own server for it!\u0026rdquo; my fellow hackers will say, as if the average user is capable of setting up a pi, let alone the server, forwarded network connection, firewall, and security shit that is necessary for it.\nThere\u0026rsquo;s also an ironic point where going to overkill with privacy makes you stand out more. If you don\u0026rsquo;t get 100% anonymization, you\u0026rsquo;re going to stand out as one hell of a weird data point. If you don\u0026rsquo;t get banned from the service for looking weird, you\u0026rsquo;ll sure as hell be flagged and watched. If you go from Russia to Canada to Mexico in the three page visits, your reported OS and screen resolution change on each, and you block all trackers and ads you can be sure as shit you show up as a red flag. See \u0026ldquo;The Fantasy of Opting Out\u0026rdquo; from The MIT Press Reader.\nOr just make a new account dedicated to this false identity. Just make sure to log out of everything first (or use a different browser) otherwise the old account and new account will still be linked, defeating the purpose. Or using TOR, a DIY VPN, DNSCrypt, E2E chats, etc. I deemed these a bit to technical for this page for now. I might make a 'for the nerds' section latter, feel free to submit a PR if you think otherwise. There\u0026rsquo;s also the point of not being spied on by the government, but at least for now there\u0026rsquo;s really jack shit you can do about that outside of what\u0026rsquo;s listed above if you still want to even exist on the internet and not join the Amish in how you use technology.\nThe Awesome Privacy list on GitHub may prove useful to find alternative tools that aren\u0026rsquo;t creepy, unlike M$ Office which is starting to detect \u0026ldquo;employees colluding\u0026rdquo; even.\n"},{"id":114,"href":"/engineering/networking/security/","title":"Security","section":"Engineering","content":" Chapter 41 - Security \u0026amp; Exploitation # I\u0026rsquo;m going to assume at least some prior knowledge here, if you want a quick intro, I recommend going through ./missing-semester-Security so that we can all be on the same page. Often when we think about Exploitation, better known as hacking, we conjure images of a more-punk-than-cyber cyberpunk person clicking away wildly on a keyboard as code flies by, like the 1995 movie, Hackers, and to some extent this isn\u0026rsquo;t wrong, as one look around the floor at DefCon, will show you. And honestly, that\u0026rsquo;s not by accident. While there are strictly professional security experts, those that work at corporations and banks, a large number do it for the lolz and to bring a little fun back into computing. Calling exploitation \u0026lsquo;hacking\u0026rsquo; is almost a misnomer, as hacking encompass a lot more than exploitation, and exploitation a lot more than hacking. For that reason, before we start, I recommend you watch this video, on speed running Super Mario 64, this is a prime example of hacking in a non-harmful manner done for fun. xkcd #2166 Most books on hacking or security start out either painfully formal talking about how to secure a system or jump straight into breaking into a system.\nNeither of these are probably your biggest concern.\nInstead, you should be thinking \u0026ldquo;How do I write code that isn\u0026rsquo;t horribly fucked for security?\u0026rdquo; then wrap back around to getting a deeper understanding so that you can know how to actually know how to make some of the more complex decisions, and why they matter.\nLet\u0026rsquo;s start with an example:\n1 2 3 4 5 6 7 8 #include \u0026lt;stdio.h\u0026gt; void main(int argc, char **argv){ int i = 0; printf(argv[1], \u0026amp;i); if(i == 1){ printf(\u0026#34;OWO\\n\u0026#34;); } } Save as ploit1.c, compile and run with gcc ploit1.c -o ploit\nHere, we\u0026rsquo;ve got 8 lines of code, if run it normally, it just echos the input.\n1 2 3 ╭─vega@lyrae ~ ╰─➤ ./ploit \u0026#34;test\u0026#34; test% But hang on, the printf isn\u0026rsquo;t doing any checking on the input, what if we put an interger substitution character in there?\n1 2 3 ╭─vega@lyrae ~ ╰─➤ ./ploit \u0026#34;%d\u0026#34; 1875151412% hmmm, alright, can we print a stack pointer?\n1 2 3 ╭─vega@lyrae ~ ╰─➤ ./ploit \u0026#34;%p\u0026#34; 0x7ffdaa912034% neat, alright, well there\u0026rsquo;s an interesting printf sequence, %n, which ouputs the number of characters in the string\n1 2 ╭─vega@lyrae ~ ╰─➤ ./ploit \u0026#34;%n\u0026#34; There\u0026rsquo;s no output… but that should tip you off to what\u0026rsquo;s about to happen\n1 2 3 ╭─vega@lyrae ~ ╰─➤ ./ploit \u0026#34;a%n\u0026#34; aOWO Got it. By making the string one character (not including the %n itself) %n\u0026rsquo;s character count output is stored into the interger i, and we trigger the if, printing the string.\nHopefully you see that this is a big problem. The user was able to change code flow on a print statement. With a little more work the input could be crafted to access arbitary memory of the program, potentially getting the print to divuldge something in memory you\u0026rsquo;d really rather keep private- maybe a password?\nThis video from Live Overflow explains this much more in depth in just 10 minutes. Give it a watch.\nSee These Lecture notes on Format String Vulnerabilities from Syracuse University and Intoduction to Format String Exploits from Code Arcana for even more.\nThe main thing I want you to take away from this example is this:\nSANITIZE YOUR FUCKING INPUTS Seriously, it\u0026rsquo;s nuts how many exploits are caused by inputs not being checked, allowing for injection attacks. SQL injection letting somebody either read or delete your database? Yep. Cross Site Scripting (XSS). Yep. File Upload attacks? You Bet. Input isn\u0026rsquo;t just text either. It\u0026rsquo;s anything a user can, well, input. Don\u0026rsquo;t be stupid.\nAlso note, input includes anything the program reads. There\u0026rsquo;s nothing stopping a user from diving into the programs files and changing some config file or loading in a different .dll/.so library file. Of course, this technically extends all the way to modifying the binary of the executable itself, but at that point the threat modeling is entirely different.\nAlong with sanitizing inputs, you should also sanitize output where applicable. If the program shouldn\u0026rsquo;t be able to do something, not only should they not be able to force that command in, but that state should be checked for and prevented. See Don’t try to sanitize input. Escape output. from Ben Hoyt. DO NOT # DO NOT use random crypto libraries or write your own # I would hope I don\u0026rsquo;t have to justify this. If the library isn\u0026rsquo;t common, hasn\u0026rsquo;t been audited, and you\u0026rsquo;re not super confident that it\u0026rsquo;s safe: DO NOT use it.\nSimilarly, crypto is hard, unless you want to go into it (which is cool, go for it, just be prepared for a lot of math) and understand what you\u0026rsquo;re getting yourself into, don\u0026rsquo;t try to write crypto code yourself.\nHell, even just using random() without knowing better is a good way to screw up: see How to Predict Random Numbers (PwnFunction, YouTube)\nDO NOT use algorithms that are broken # I would seriously hope this is a \u0026lsquo;No Shit\u0026rsquo;. Unfortunately, it seems it\u0026rsquo;s not. So, allow me:\nDO NOT USE: MD5, DES (Including Tripple DES), SHA-1*, AES-EBC, AES-CBC without a MAC\nAlright, so what should you use? Well, the answer is obviously \u0026ldquo;It depends on what you want\u0026rdquo;, but in general the recommendations from Cryptographic Right Answers are probably a good place to start.\n[TODO]\nhttps://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/\nBuilding a Curve25519 Hardware Accelerator (BunnieStudios)\nDO NOT think encryption is a magic bullet # Our mysterious hero ran from the evil forces, carrying his trusty cyberdeck with all the information the resistance needed to win, but if it fell into the wrong hands it would all be over. Unfortunately, there were to many- He was surrounded! He feared not though, for his disk was encrypted by AES-4096! While the resistance may not get the data, the evil forces wouldn\u0026rsquo;t have it either! He taunted his captors, \u0026ldquo;You\u0026rsquo;ll never get that data!\u0026rdquo;\nThey took his cyberdeck from his bag, and wiggled the mouse to find it had only been asleep, the disks still accessible.\nFull disk encryption probably doesn\u0026rsquo;t do you any good. - https://sockpuppet.org/blog/2014/04/30/you-dont-want-xts/\nDO NOT assume the crypto algo \u0026lsquo;Just Works\u0026rsquo; # YOU have to know how to apply it\n[TODO]\nhttps://soatok.blog/2021/01/20/please-stop-encrypting-with-rsa-directly/\nDO NOT assume the hardware is secure # This is one of many side channel attacks on hardware directly. My point here is simple: it\u0026rsquo;s turtles compromised all the way down.\nAlong with this, you also shouldn\u0026rsquo;t make to many assumptions that your code is running in a \u0026lsquo;real\u0026rsquo; environment. The code may well be running in a virtual machine or in a container.\nSimilarly, don\u0026rsquo;t assume the hardware or gadgets your connecting themselves aren\u0026rsquo;t malicious. We all know not to plug in random flash drives, but what about USB Plasma globes?\nDO NOT assume that things won\u0026rsquo;t break # Overflow # Stack Smashing # Active Tampering # DO NOT manage your own memory # Okay, so, this is weird advice. Obviously, sometimes, you literally have to play around with pointers, there\u0026rsquo;s nothing you can do about it. The thing is 70 percent of all security bugs are memory safety issues. So, this is a big fucking problem.\nTo some extent, you can mitigate this by using a higher level language, but that then requires you actually know what you\u0026rsquo;re doing anyway, and the abstraction can actually bite you in the ass even harder. To prove this point, let\u0026rsquo;s look at python.\n1 2 3 4 5 6 7 8 \u0026gt;\u0026gt;\u0026gt; x = 1 \u0026gt;\u0026gt;\u0026gt; y = 1 \u0026gt;\u0026gt;\u0026gt; x is y True \u0026gt;\u0026gt;\u0026gt; x = 257 \u0026gt;\u0026gt;\u0026gt; y = 257 \u0026gt;\u0026gt;\u0026gt; x is y False so 1 is 1, but 1001 is not 1001? Well, yes and no\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026gt;\u0026gt;\u0026gt; x = 1 \u0026gt;\u0026gt;\u0026gt; y = 1 \u0026gt;\u0026gt;\u0026gt; id(x) 140514241382704 \u0026gt;\u0026gt;\u0026gt; id(y) 140514241382704 \u0026gt;\u0026gt;\u0026gt; x = 257 \u0026gt;\u0026gt;\u0026gt; y = 257 \u0026gt;\u0026gt;\u0026gt; id(x) 140514228628624 \u0026gt;\u0026gt;\u0026gt; id(y) 140514228628496 The reference (pointer) for values below 256 are the same, in the documentation\nThe current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you actually just get back a reference to the existing object.\nSo, the problem her is that instead of x is y this comparison should have been x == y\n1 2 3 4 \u0026gt;\u0026gt;\u0026gt; x = 257 \u0026gt;\u0026gt;\u0026gt; y = 257 \u0026gt;\u0026gt;\u0026gt; x == y True The point being, memory management is really, really fucking hard to get right and full of gotcha\u0026rsquo;s, even in something as high level as Python.\nThere is no silver bullet here. What can help is, first of all, not using C if you can. Rust, C++, whatever. While I\u0026rsquo;m not a huge fan of object orientation, It does at least, when used correctly, help avoid some of these fuckups. Rust\u0026rsquo;s forced compile-time check\u0026rsquo;s do a great job of ensuring safety too. You should also put your program though valgrind and probably some sort of source code analysis tools like splint (C), flawfinder, bandit (Py), or CPPcheck. Still, don\u0026rsquo;t expect the tools to catch everything. Memory leaks may still sneak by, you may somehow still manage to do a use-after-free, or have some corner case that can segfault.\nAssert statements help too, forcing things to break when conditions aren\u0026rsquo;t met.\n1 2 3 4 5 \u0026gt;\u0026gt;\u0026gt; x = 2 \u0026gt;\u0026gt;\u0026gt; assert x == 1, \u0026#34;x should be 1\u0026#34; Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; AssertionError: x should be 1 DO NOT assume that you know who is on the other side # I\u0026rsquo;m not trying to be ᏕᎮᎧᎧᏦᎩ, I mean that the server, human, client, whatever that you think you\u0026rsquo;re talking to, may not actually be who you are talking to. By this I generally mean one of two things:\nEither you have a Man In The Middle (MITM) or somebody is being a sneaky douchebag and pretending to be someone else.\nFor MITM, it\u0026rsquo;s more or less what it sounds like. If Alice (A) is trying to talk to Bob (B), it would normally look like A⇄B, but for a MITM, there\u0026rsquo;s someone (let\u0026rsquo;s call them Mallory (M)) receiving and forwarding all the traffic bidirectionally, that is A⇄M⇄B, yet to both Alice and Bob, this is transparent, that is both Alice and Bob only see A⇄B despite it actually being A⇄M⇄B. M could only be eavesdropping, not changing the content at all, could be changing only the data necessary to see the conversation (hijacking the key exchange and message signatures), or change the messages outright.\nIt could also be the case that M is just a sneaky douchebag (that\u0026rsquo;s a technical term), and is just pretending to be B outright, B isn\u0026rsquo;t even part of the connection.\nSome things you should consider:\nNeither side needs to be a machine. It\u0026rsquo;s very possible that the deceit is that somebody is simply lying about who they are on a call. It\u0026rsquo;s not just that you need to trust the other side is who they say they are, you need to know they wont listen to someone that pretends to be you. This exact problem leads to people being able to carry out a SIM swap scam (Wikipedia) While verification of identity is important, so is looking up that identity in the first place. If you always call the wrong number, always connect to the wrong URL, etc. You\u0026rsquo;re asking for someone to come along and fill that role. There\u0026rsquo;s also just a point about not assuming an adress will always point to the same place, like when a bunch of news websites found that they were suddenly showing pron videos (The Verge).\nDO NOT claim \u0026lsquo;unhackability\u0026rsquo; # If you do, and you get hacked, it goes from being tragic to funny, and it\u0026rsquo;s a huge welcome sign to bored hackers that will find a way in.\nExamples of \u0026lsquo;unhackable\u0026rsquo; systems: ‘Unhackable’ encrypted flash drive eyeDisk is, as it happens, hackable (TechCrunch)\nDO NOT think that code=binary # The code you write is not the code that will run.\n1 2 3 4 5 6 7 int main(){ int result = 0; for(int i=0; i \u0026lt; 999; i++){ result = result + i; } return(result%255); } When this code is compiled with even basic optimization (-O), this is the assembly output:\nmain: # @main mov eax, 231 ret Notice it\u0026rsquo;s not actually doing any math? It\u0026rsquo;s just storing the result as a constant in the program. The compiler did some magic, realized the programmer was being lazy and not doing math ahead of time, so did the math once. This is normal. Don\u0026rsquo;t make the assumption that the code you write will necessarily be the code the machine runs.\nDO NOT assume that your users give a half a shit about security… # They don\u0026rsquo;t. Maybe a small fraction do. Maybe a few will even have fancy USB authentication keys, be generating random 64 character long passwords filled with symbols. The majority though? The majority will be using some standard password they use everywhere else that has already been compromised, which they\u0026rsquo;d know if they bothered to check https://haveibeenpwned.com\nAlso don\u0026rsquo;t think that even halfway decent password requirements will stop users from using shit passwords or just frustrate the hell out of them. Instead, let them know there\u0026rsquo;s a minimum length, that passphrases like CorrectHorseBatteryStaple work well, and that any password that\u0026rsquo;s common will be denied - check if the hash of their password matches the hash of any of the passwords in some common password dictionary like this list of the top 10 million passwords.\nSimilarly, unless you know you\u0026rsquo;re audience is already technical, don\u0026rsquo;t assume that your users will have the even the slightest clue about what an HTTPS certificate is, how to use a public/private key pair, or anything else related to crypto.\nThere\u0026rsquo;s a reason torrent clients verify the hash automatically, that browsers show a little lock, and that telegram lets users check their keys with emoji.\nAlso don\u0026rsquo;t make your users change passwords on a schedule. We all hate it, It\u0026rsquo;s not even recomended anymore, and it\u0026rsquo;s just a royal PITA.\n…Or that they have a single clue about privacy # [TODO]\nhttps://0l.wtf/blog/4_visual_browser_fingerprinting.html\nFrom @MalwareJake on Twitter [TODO] The Hitchhiker\u0026rsquo;s Guide to Online Anonymity\nAre the top websites using WebGL for fingerprinting?\nWhat about on the job or at school? # DO NOT think that Old ≠ Good \u0026amp; New ≠ Good # … Middleaged doesn\u0026rsquo;t mean good either I guess.\nBasically, just because something is new and shiny and claims to be 200% as fast and 4x as secure, doesn\u0026rsquo;t mean it\u0026rsquo;s safe. Similarly, just because something is old and well vetted, doesn\u0026rsquo;t mean it is perfect either. Code that\u0026rsquo;s been living in the Linux Kernel for decades or even in the sudo binary can have bugs.\nBasically, what I\u0026rsquo;m saying is you should be careful when choosing what to use, patch shit when vulnerabilities are found, and despite how handy using some new kid on the block library looks, you might wanna avoid it if you\u0026rsquo;re handling sensitive data.\nDO NOT get over confident # You should expect something to fail. Data will leak. You will have an \u0026lsquo;oh shit\u0026rsquo; moment. The shit will, in fact, hit the fan, splatter all over the room, and seep into the carpet.\nThe best you can do is have a plan for when this happens and do your best to make sure that when it does the damage- both short and long term- is minimal.\nBasically this comes down to two things: Backups and maintaining uptime. For backups:\nThe 3-2-1 rule can aid in the backup process. It states that there should be at least 3 copies of the data, stored on 2 different types of storage media, and one copy should be kept offsite, in a remote location\nFor uptime, well, that\u0026rsquo;s more complicated. If you\u0026rsquo;re trying to keep 99.99%+ uptime, you\u0026rsquo;ll have to get creative with automatic failovers, software defined networking/storage, etc.\nThat said, trying to get umpteen 9\u0026rsquo;s of uptime is a bit crazy for most things anyway.\nDO NOT trust humans # Customer support exists to bypass security. Users exist to find bugs you wouldn\u0026rsquo;t think possible. Hackers exist to show you that you suck at programming. humans in general exist to do things that to other humans seems totally illogical.\nDon\u0026rsquo;t trust humans. They\u0026rsquo;re Made Out of Meat.\n\u0026lsquo;SMS is just the worst, but I\u0026rsquo;m having trouble convincing people to adopt my preferred system, TLS IRC with a local server and a patched DOSBox gateway running in my mobile browser.\u0026rsquo;\nxkcd #2365 Before we go any further, I want to get something out of the way:\nSecurity is important, and should be taken seriously. But it\u0026rsquo;s also a field of people who are tired of your shit, Karen. We don\u0026rsquo;t wear suits and we won\u0026rsquo;t do something just to look \u0026lsquo;professional\u0026rsquo;.\nIf I want to curse, if I want to put furry art on these pages, I will do as I fucking please.\nReal \u0026lsquo;Security Professionals\u0026rsquo; own the word hacker, and real hackers don\u0026rsquo;t give a shit about what society tells them to do. Hacking is about finding how systems can do something far outside of what the original desigener ever even considered, about finding solutions so elegant they\u0026rsquo;re art, about breaking boundries. If you want to keep with professionalism or tradition you\u0026rsquo;re in the wrong place.\nAs Soatok put it:\nIf people who are sharing great content–be it on Twitter or on their personal blog–do something that prevents you from sharing their content with your coworkers, the problem isn’t us.\nNo, the real problem is your coworkers and bosses, and the unquestioned culture of anal-retentive diversity-choking bullshit that pervades business everywhere.\n[TODO] https://paragonie.com/blog/2015/08/gentle-introduction-application-security\nAuthentication \u0026amp; Authorization # Authentication != Identity\nhttps://permission.site\nhttps://www.osohq.com/post/why-authorization-is-hard\nhttps://alexolivier.me/posts/the-never-ending-product-requirements-of-user-authorization\nhttps://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html\nhttps://github.com/kdeldycke/awesome-iam\nCryptography # How To Learn Cryptography as a Programmer (Soatok)\nA furry writes about Cryptography but trust me you should actually read this (Soatok)\nHashing # Note there\u0026rsquo;s general two \u0026lsquo;classes\u0026rsquo; of hashing- hashing for cryptographic security (Passwords) and for just general usage, the cryptographic ones typically are significantly more computationally intensive to make it harder to brute force all possible keys. Also most cryptographic hashing algorithms go to much greater lengths to avoid collisions. Also, salting is relevant here: Salting (Wikipedia)\nIf you want to dive into the math of hashing, going through this repo to make SHA-256 yourself will teach you a lot. Of course, don\u0026rsquo;t ever use one you wrote yourself. Just like encryption, leave it to the battle tested libraries.\nNote, that some hashing algorithms are known to be broken at this point, like MD5 and SHA1. Don\u0026rsquo;t use them.\nThe GitHub page for xxHash has a nice table showing the speed of quite a few common algorithms.\nSecurity Policies # Metadata can bite you in the ass\nThreat Modeling # Network Security # Email sucks\nPGP really sucks\nFirewalls, intrusion detection, DNS blackholes, Fail2Ban, etc.\nDoS/DDoS\nMitM\nXXS\nHow The Self-Retweeting Tweet Worked: Cross-Site Scripting (XSS) and Twitter (Youtube - Tom Scott)\nMAC/IP spoofing\nsniffing\nDNS: idn-phishing\nWifi Cactus\nSource, Artist (used with permission from Phyxius) Types of exploits # [TODO] - where to put return oriented programming, super old hardware/software - \u0026rsquo;the home router\u0026rsquo;,\nOtherwise known as hacking, exploitation of software is always alluring, though in reality like many things it is much less glamorous than the news or tv make it out to be. Before I get into it I want to plug \u0026lsquo;The Art of Exploitation\u0026rsquo; by Jon Erickson again, as it truly is a masterpiece that describes exploiting in a way that just makes sense\n[TODO]\npassive V active attacks - monitoriring/obtaining contents of message V Tampering, Dos, Replay, Faking ID\nSoftware # strings\nInjection - SQL\nbreaking hashes\nHeap/buffer overflow\ndangling pointers\ncode-injection\nplaces you don\u0026rsquo;t expect to have code like PDFs\nclock attacks\nRace conditions\nPath traversal\nformat string\npseudo-random\nFuzzing\nHardware # Intro to Hardware Reversing: Finding a UART and getting a shell (YouTube)\nTalk about CPU bugs\nPower side channel\nTiming attacks\npseudo-random (hardware side)\nHardware trust (HID injection)\nreplay attacks\nradio, rfid, etc\nrowhammer, Heartbleed\nhttps://github.com/ggerganov/kbd-audio/discussions/31\nSocial Engineering # Phishing\nspoofing (email, phone)\nUTF-8 v ASCII\nclick jacking\nexpired certificate\ndefault passwords\nhoney pots\nstalkerware (Should this be moved?)\nLooking up documents - see Coke Freestyle Manual\nPhysical security # Lock picking as a last resort\nLaw School for Lockpickers [YouTube, DEF CON 28]\ndata destruction\nMalware # Section here about not being a dick\nViruses\npolymorphic\nboot-record/rootkit\ntrojan\nlogic/compression bomb\nlogic/time bombs\nransomware\nadware/spyware\nTools of the trade # Many tools in common with debugging (gdb - gef, hex editors, logic analzer)\nand testing (fuzzing)\ndecompilers, dissassembly, analysis\nhttps://github.com/plasma-disassembler/plasma\nWireshark\nCheatengine\ndynamic linking\nSandboxing\nResponsible Disclosure # https://adamcaudill.com/2015/11/19/responsible-disclosure-is-wrong/\nIOT # Infrastructure # Elections # Game Hacking # https://gamehacking.academy/GameHackingAcademy.pdf\nGetting some practice # https://gtfobins.github.io\nA 64 bit bind shell ELF binary in 172 bytes. (GitHub Gist)\nCTF-Time # PWNie Island # Let\u0026rsquo;s Play/Hack - Pwn Adventure 3: Pwnie Island (YouTube, LiveOverflow) (Here he\u0026rsquo;s playing a game where you have to exploit it to win)\nHow To Learn Something New? - Game Devlog #1 (YouTube, LiveOverflow) (Here he\u0026rsquo;s making a game where you\u0026rsquo;re supposed to exploit it)\nWhere to learn even more: # Live Overflow, Youtube: https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w/playlists\nPhrack : http://www.phrack.org/\nDefcon Media Server : https://media.defcon.org/\nAs mentioned above in Chapter 17- Compilers and Assemblers At this point I highly recommend \u0026lsquo;The Art of Exploitation\u0026rsquo; by Jon Erickson\nhttps://microcorruption.com/ , https://ctftime.org/ ,\nCTF time,\nhttps://nagarrosecurity.com/blog/interactive-buffer-overflow-exploitation\nWritehat (GitHub) - \u0026ldquo;A pentest reporting tool written in Python. Free yourself from Microsoft Word.\u0026rdquo;\nhttps://opensecuritytraining.info\nModern Binary Exploitation from Rensselaer Polytechnic Institute in Spring 2015\nSome Hacking Community Fun # Bash injection without letters or numbers (YouTube, LiveOverflow)\nPwned By The Owner: What Happens When You Steal A Hacker\u0026rsquo;s Computer (YouTube, Defcon)\nHow a Hacker Convinced Motorola to Send Him Source Code\nDiabetics Are Hacking Their Own Insulin Pumps\nBeg Bounties (Troy Hunt from haveibeenpwned)\nhttps://learn.sparkfun.com/tutorials/gas-pump-skimmers\nDoes register selection matter to performance on x86 CPUs? Leap Day Bugs\nDEF CON 18 - Zoz - Pwned By The Owner: What Happens When You Steal A Hacker\u0026rsquo;s Computer (YouTube)\nDiabetics Are Hacking Their Own Insulin Pumps (YouTube)\nBig List of Naughty Strings (GitHub)\nWidevine L3 Decryptor\nαcτµαlly pδrταblε εxεcµταblε\nSacred texts of hacking: # From https://wiki.xxiivv.com/#development:\nThe Four Essential Freedoms: The freedom to run the program as you wish, for any purpose. The freedom to study how the program works, and change it. The freedom to redistribute copies so you can help others. The freedom to distribute copies of your modified versions to others.\nThe hacker and information freedom community has multiple \u0026lsquo;sacred texts\u0026rsquo; if you will, which I think do a good job of outlining some of the ideologies of the communities. Probably the most famous is the Guerrilla Open Access Manifesto written by Aaron Swartz, an amazing man that, according to Wikipedia \u0026ldquo;was involved in the development of the web feed format RSS and the Markdown publishing format, the organization Creative Commons, and the website framework web.py, and was a co-founder of the social news site Reddit\u0026rdquo;. Due to his extensive work in online politics his Wikipedia page almost acts like a hub of sorts for relevant information: https://en.wikipedia.org/wiki/Aaron_Swartz. His most famous text though is probably the Guerrilla Open Access Manifesto.\n\u0026lsquo;Guerrilla Open Access Manifesto: Information is power. But like all power, there are those who want to keep it for themselves. The world\u0026rsquo;s entire scientific and cultural heritage, published over centuries in books and journals, is increasingly being digitized and locked up by a handful of private corporations. Want to read the papers featuring the most famous results of the sciences? You\u0026rsquo;ll need to send enormous amounts to publishers like Reed Elsevier.\nThere are those struggling to change this. The Open Access Movement has fought valiantly to ensure that scientists do not sign their copyrights away but instead ensure their work is published on the Internet, under terms that allow anyone to access it. But even under the best scenarios, their work will only apply to things published in the future. Everything up until now will have been lost.\nThat is too high a price to pay. Forcing academics to pay money to read the work of their colleagues? Scanning entire libraries but only allowing the folks at Google to read them? Providing scientific articles to those at elite universities in the First World, but not to children in the Global South? It\u0026rsquo;s outrageous and unacceptable.\n\u0026ldquo;I agree,\u0026rdquo; many say, \u0026ldquo;but what can we do? The companies hold the copyrights, they make enormous amounts of money by charging for access, and it\u0026rsquo;s perfectly legal — there\u0026rsquo;s nothing we can do to stop them.\u0026rdquo; But there is something we can, something that\u0026rsquo;s already being done: we can fight back.\nThose with access to these resources — students, librarians, scientists — you have been given a privilege. You get to feed at this banquet of knowledge while the rest of the world is locked out. But you need not — indeed, morally, you cannot — keep this privilege for yourselves. You have a duty to share it with the world. And you have: trading passwords with colleagues, filling download requests for friends.\nMeanwhile, those who have been locked out are not standing idly by. You have been sneaking through holes and climbing over fences, liberating the information locked up by publishers and sharing them with your friends.\nBut all of this action goes on in the dark, hidden underground. It\u0026rsquo;s called stealing or piracy, as if sharing a wealth of knowledge were the moral equivalent of plundering a ship and murdering its crew. But sharing isn\u0026rsquo;t immoral — it\u0026rsquo;s a moral imperative. Only those blinded by greed would refuse to let a friend make a copy.\nLarge corporations, of course, are blinded by greed. The laws under which they operate require it — their shareholders would revolt at anything less. And the politicians they have bought off back them, passing laws giving them the exclusive power to decide who can make copies.\nThere is no justice in following unjust laws. It\u0026rsquo;s time to come into the light and, in the grand tradition of civil disobedience, declare our opposition to this private theft of public culture.\nWe need to take information, wherever it is stored, make our copies and share them with the world. We need to take stuff that\u0026rsquo;s out of copyright and add it to the archive. We need to buy secret databases and put them on the Web. We need to download scientific journals and upload them to file sharing networks. We need to fight for Guerilla Open Access.\nWith enough of us, around the world, we\u0026rsquo;ll not just send a strong message opposing the privatization of knowledge — we\u0026rsquo;ll make it a thing of the past. Will you join us?\nAaron Swartz\nJuly 2008, Eremo, Italy\nIf you\u0026rsquo;d like more information on Swartz\u0026rsquo;s infulence you can watch a documentry on him here\nAnother one that you should read is The Conscience of a Hacker written by \u0026lsquo;The Mentor\u0026rsquo; in \u0026lsquo;86:\nThe Conscience of a Hacker Another one got caught today, It\u0026rsquo;s all over the papers. \u0026ldquo;Teenager Arrested in Computer Crime Scandal\u0026rdquo;, \u0026ldquo;Hacker arrested after Bank Tampering\u0026rdquo;\u0026hellip;\nDamn kids. They\u0026rsquo;re all alike.\nBut did you, in your three-piece psychology and 1950\u0026rsquo;s technobrain, ever take a look behind the eyes of a hacker? did you ever wonder what made him tick, what forces shaped him, what may have molded him?\nI am a hacker. Enter my world.\nMine is a world that begins with school\u0026hellip; I\u0026rsquo;m smarter than most of the other kids, this crap they teach us bores me\u0026hellip; Come on\u0026hellip; Ain\u0026rsquo;t Got All Day!! Damn underachiever. They\u0026rsquo;re all alike.\nI\u0026rsquo;m in junior high or high school. I\u0026rsquo;ve listened to the teachers explain for the fifteenth time how to reduce a fraction. I understand it. \u0026ldquo;No Ms. Smith, I didn\u0026rsquo;t show my work. I did it in my head\u0026hellip;\u0026rdquo;\nDamn kid. Probably copied it. They\u0026rsquo;re all alike.\nI made a discovery today. I found a computer. Wait a xecond, this is cool. It does what I want it to. if it makes a mistake, it\u0026rsquo;s because I screwed it up. Not Because it doesn\u0026rsquo;t like me\u0026hellip; Or feels threatend by me\u0026hellip; Or thinks I\u0026rsquo;m a smart ass\u0026hellip; Or doesn\u0026rsquo;t like teaching and shouldn\u0026rsquo;t be here\u0026hellip;\nDamn kid. All he does is play games. They\u0026rsquo;re all alike.\nAnd then it happened\u0026hellip; a door opened to a world\u0026hellip; rushing through the phone line like junk through an addict\u0026rsquo;s veins, an electronic impulse is sent out, a refuge from the day-to-day incompetencies is sought\u0026hellip; a board is found.\n\u0026ldquo;this is it\u0026hellip; this is wwhere I belong\u0026hellip;\u0026rdquo;\nI know everyone herre\u0026hellip; even if I\u0026rsquo;ve never met them, never talked to them, may never hear from them again\u0026hellip; I know you all\u0026hellip;\nDamn kid. tying up the phone line again. They\u0026rsquo;re all alike\u0026hellip; Come on\u0026hellip; Ain\u0026rsquo;t Got All Day!! You bet your ass we\u0026rsquo;re all alike\u0026hellip; we\u0026rsquo;ve been spoon-fed baby food at school when we hungered for steak\u0026hellip; the bits of meat that you did let slip through were prechewed and tasteless. We\u0026rsquo;ve been dominated by sadist, or ignored by the apathetic. The few that had something to teach us found us willing pupils, but those few are like drops of water in the desert.\nThis is our world now\u0026hellip; the world of the electron and the switch, the beauty of the baud. We make use of a service already existing without paying for what could be dirt-cheap if it wasn\u0026rsquo;t run by profiteering gluttons, and you call us criminals. we explore\u0026hellip; and you call us criminals. We seek after knoledge\u0026hellip; and you call us criminals. We exist without skin color, without nationality, without religous bias\u0026hellip; and you call us criminals. You build atomic bombs, you wage wars, you murder, cheat, and lie to us and try to make us believe it\u0026rsquo;s for our own good, yet we\u0026rsquo;re the criminals.\nYes, I am a criminal. My crime is that of curiosity. My crime is that of judging people by what they say and think, not what they look like. My crime is that of outsmarting you, something that you will never forgive me for.\nCome on\u0026hellip; Ain\u0026rsquo;t Got All Day!!\nI am a hacker, and this is my manifesto. You may stop this individual, but you can\u0026rsquo;t stop us all\u0026hellip; after all, we\u0026rsquo;re all alike.\n+++The Mentor+++ Racketeers\n"},{"id":115,"href":"/engineering/networking/servers/","title":"Servers","section":"Engineering","content":" Chapter 39 - Servers! # First of all, let\u0026rsquo;s demystify the servers, they are not something to be afraid of \u0026hellip; they are just normal computers that execute processes, the main difference is that these computers do not have a direct interface, that is: there is no need for them to have peripherals (most of the time) since they only SERVE resources for other needs.\nA good example of a server is this one, in which you are reading this, the only function of the server where this content is hosted is to provide it, nothing more and nothing less.\nThe DIY Home lab # A home lab is basically a \u0026ldquo;sandbox\u0026rdquo; where we can practice our Server-Fu (and sometimes do something useful), a home lab can be as basic or as complex as we want, the only thing we need to start with is a couple of virtual (or physical) machines.\nWhy? # Let\u0026rsquo;s imagine that you decided to start working in a huge company, you applied for the vacancy and got the job!\nor\nMaybe you want to self-host a cloud backup for all that important files.\nIt would be bad for all of us to start pasting commands copied from StackOverflow to perform actions on a productive or \u0026ldquo;real\u0026rdquo; server, right?\nThis is where our small (or large) Home Lab comes in, where we can paste googled commands and learn the functionality of those commands and the worst that can happen is that we spend a day of a weekend formatting one of our servers but \u0026hellip; in exchange for acquiring this ability is a good exchange right?\nFirewalls # First of all a firewall is simply a system with a set of rules that dict whatever or not a network communication should be permitted, let\u0026rsquo;s think of it as the \u0026ldquo;bar security\u0026rdquo; of our network or server.\nThere are some commercial firewalls but let\u0026rsquo;s be honest, we are not willing to pay ~500 USD for a commercial grade firewall only to practice right?\nSo there are some interesting Open Source projects that can me implemented, my preferred one is called \u0026ldquo;PfSense\u0026rdquo; the project is much more than a firewall (And we will be looking at in other sections) but it comes with a pretty nice firewall capabilities.\nRouting # The router in a network setup is like \u0026ldquo;a set of traffic signs\u0026rdquo; to redirect some network communications through a certain path, with routers we are stepping in a rabbit hole of network protocols, VLANs and other tings but for our purpose lest keep it simple.\nHere as well my defecto choice for a Low cost and easy to implement solution for a Home Lab will be PfSense as It can work in a single machine as Router, Firewall, DHCP server, etc\u0026hellip;\nVPN services # The self-hosted experience (or hassle) # Server Types (in a nutshell) # Web Servers # Before we get to business, there\u0026rsquo;s some necessary viewing: http://motherfuckingwebsite.com/\nFile Servers and NAS # Some people would ask: why use a NAS? Don\u0026rsquo;t all of my computers have hard disks in them?\nThis is a question of optimization versus cost. To illustrate, let\u0026rsquo;s compare four options to store a large collection of movies and music that is 300 GB.\nOption 1: A Plain Old Disk # Whether internal or external, this is the cheapest option. If your PC already has storage with 300 GB available, this option is \u0026ldquo;free.\u0026rdquo; Just make a partition, set some permissions, and call it a day.\nWhile that is good enough for a lot of people, you\u0026rsquo;re probably reading this section for a reason. Consider the questions a large data set raises:\nHow will you share with or stream to devices besides the PC itself? How will you recover lost data if something goes wrong? What level of redundancy do you want against hardware failures? What degree of uptime do you expect? What level of data security do you expect? How much performance do you expect, e.g. concurrent access? The standard hardware configuration for desktop PCs and laptops is not thinking about these questions. It is thinking about productivity not data preservation and management.\nSimilarly, common Linux distros has software support for these, but there is significant assembly required.\nFor reasons of performance, integrity and optimization, data storage is a problem that often benefits from a dedicated device. Let\u0026rsquo;s see what that looks like.\nOption 2: A Turn-Key Desktop NAS # These devices are marketed to solve the above issues to people who consider themselves \u0026ldquo;non-technical\u0026rdquo; or otherwise don\u0026rsquo;t want the hassle. An example is the QNAP TS-128A.(1)\nReading through their marketing, their dedicated box handles the storage and their software handles most of the common problems. They even have extra features for movies and music specifically: a playlist manager for music, and a Plex \u0026ldquo;app\u0026rdquo; you can install for movies.\nHowever, all of this is proprietary. Sure, you can configure it to be a file sharing server and nothing else, but then you\u0026rsquo;re still taking on most of the problems yourself.\nAfter reading “I’m totally screwed.” WD My Book Live users wake up to find their data deleted and New wave of data-destroying ransomware attacks hits QNAP NAS devices I\u0026rsquo;m less than enthusiastic to recommend this route. Option 3: Buy the Hardware, Install the Software # There is quite a bit of software that is designed to be focused on a data storage appliance, VM host, or certain other dedicated problems. Such software includes unRAID, Synology, and TrueNAS.\nSome are proprietary, some are open source, but all are optimized for the problem of storing, managing, sharing, and backing up large data sets.\nA lot of these are offered by companies who want to sell you the hardware, but building your own likely makes more sense for a 300 GB dataset instead of a 300 TB dataset. With this approach, you would buy a high-end, storage-focused PC and make it a dedicated device using software.\nEven that might seem much for 300 GB, though, even if it had only 16 TB of disks in it. Aside from growth in the data set, the main advantage this has is hardware redundancy. A lot of these servers will use multiple disk configurations and provide redundancy in hardware or software. That\u0026rsquo;s in addition to the better performance you will likely get.\nOption 4: Build it Yourself # If you have the skill and interest in option 1, but want the better performance, data security, and redundancy of option 3, then this is the answer. Just set up a Linux machine exactly how you want, and then put something like the Open ZFS filesystem on it.\nYou will learn a lot, and you will get exactly what you want. But it\u0026rsquo;s a lot of effort, 80% of which would be saved by simply installing the open source TrueNAS Core OS instead.\nApplication servers # [TODO]\nVirtual machines # Depending on what you want to do in your Home Lab, you may not need any VMs. They have their uses:\nSecurity: if you are playing around with suspicious software you don\u0026rsquo;t trust Legacy support: if you need to emulate ancient hardware to run old software Experimentation: you want to build a network but don\u0026rsquo;t want to risk real money yet While it is possible to use a recipe tool like Hashicorp Vagrant, VirtualBox from Oracle will get you started much faster if all you want are a couple machines and don\u0026rsquo;t mind that it is open core rather than open source.\nContainers # While containers provide similar benefits of a VM, they have become much more engrained in the open source ecosystem.\nThere are better in-depth overviews than this one, but a container is best thought of as a way to package up not only a program, but the entire environment around it when it runs.\nWhile different container hypervisors have different options, usually containers get \u0026ldquo;virtual\u0026rdquo; versions of:\nThe file system. A container will have an isolated directory structure with what appears to be a root directory, but is separate from the rest of the system. It is similar to what chroot provides, but it is not even a subtree of anywhere else on the host. The network stack. This can be anything from a full NAT, to port forwarding, to creating a Linux network namespace and virtual packet routing. The goal here is to let software send and receive packets (usually TCP) with standardized networks, and let the hypervisor handle the weird cases. Users, groups, and permissions. Most often containers run as root, but they can also be run as specific users \u0026ndash; including users that don\u0026rsquo;t exist on the host system. Environment variables. The process has a UNIX environment when it runs, and it is possible to add to this before it starts. This idea of packaging not just a binary but an environment allows all sorts of software to be shipped in containers. For open source projects, they are good not only for deployment, but CI/CD. They allow creating \u0026ldquo;Linux dev environments\u0026rdquo; to test your builds without \u0026ldquo;ruining\u0026rdquo; your machine. I have more on that in the CI/CD section once you get done with this one.\nAn Example Container in Docker # As a concrete illustration, let\u0026rsquo;s use the most common container system: docker. While there have been \u0026ldquo;desktop editions\u0026rdquo; that are non-commercial software (meaning not open-source), the original daemon (now called Moby) that ships on Linux remains open source.\nThere are plenty of getting started with docker articles out there, and they do a better job than this. This is just an example to demo the concepts.\nAs an example container, we\u0026rsquo;ll use an open-source S3 bucket server called minio. As noted in the project\u0026rsquo;s README, doing a standalone deployment for development (rather than production use) is as simple as downloading the container and running it. So let\u0026rsquo;s do that.\nWith docker, the first step is to download an image from the public docker repository, DockerHub:\ndocker pull quay.io/minio/minio This will go out and get a list of \u0026ldquo;layers.\u0026rdquo; These are created by the instructions in the recipe file called a Dockerfile which define the environment.\nOnce the image is downloaded, you can run it, i.e. create the process and put it into a new container (in docker\u0026rsquo;s terminology).\nHere is a simple way to do that. (Don\u0026rsquo;t worry about the details of the command line yet.)\ndocker run --name my_minio -p 9000:9000 -p 9001:9001 \\ quay.io/minio/minio server /data --console-address \u0026#34;:9001\u0026#34; This will generate startup output (take note of the default admin credentials for later!) ending with a link to documentation on my version, and then hang in the terminal.\nThat\u0026rsquo;s because the process is a server, and it\u0026rsquo;s in the foreground. Not helpful, so press Control-C to interrupt it, and it will terminate.\nSo what happens to the container when the process dies? The process is killed \u0026ndash; but the \u0026ldquo;husk\u0026rdquo; of the container is still left behind. If you try to run the exact same command line again, you get an error:\ndocker: Error response from daemon: Conflict. The container name \u0026quot;/my_minio\u0026quot; is already in use by container \u0026lt;hash string\u0026gt;. You have to remove (or rename) that container to be able to reuse that name.\nIf you type docker ps -a you can see it.\nWhile the process is gone, the environment is not. It would be possible, for example, to use docker cp to copy files out of the filesystem. Even more powerfully, you could copy a file in and then docker restart the container.\nThe key understanding here is that the \u0026ldquo;environment\u0026rdquo; of a container is persistent. Any time you create a new container, on the other hand, it starts with the image that was downloaded. Building and managing images I leave to the official documentation.\nNow let\u0026rsquo;s docker rm my_minio in order to make the error go away and create a new one. But this time, add a -d right after docker run (argument order matters!) when you run it again to put it in the background.\nNow go to a browser and visit http://127.0.0.1:9001. You\u0026rsquo;ll get the Minio admin console!\nBut wait a minute, how come the browser can talk to it? Wasn\u0026rsquo;t networking supposed to be isolated?\nBecause specifically the -p arguments said to perform listener port forwarding for TCP on those two ports behind a lightweight NAT setup (the default). If you change the number before the colon in the -p argument, you will change the port your browser can connect to.\nTo conclude, let\u0026rsquo;s see where the bucket storage is. Log into the UI (default credentials should be in the output from earlier), create a bucket called \u0026ldquo;test-bucket\u0026rdquo;, and upload a file into it.\nThat file has to get stored somewhere on the filesystem, which in this case is defined by a command-line argument the server was called with. I put that line-break in for a reason. It turns out that everything before the container name is arguments to docker and everything after is arguments to the process itself: its command line.\nSo the process being run is: /container/path/minio server /data --console-address \u0026quot;:9001\u0026quot;\nAs noted in the minio project\u0026rsquo;s docs, the first argument is the path to storage: /data. But of course, that\u0026rsquo;s within the \u0026ldquo;chroot\u0026rdquo; of the container itself, not the host.\nIf we want to actually see what\u0026rsquo;s there, we need to run a command inside the container\u0026rsquo;s \u0026ldquo;context\u0026rdquo;:\ndocker exec my_minio ls /data/test-bucket It does indeed print the uploaded file.\nYou can use either volumes or bind mounts to share parts of the filesystem between containers and/or the host, but that\u0026rsquo;s more advanced. Hopefully the concepts and pointers are good enough.\nAnd once again, if you need a practical example of the power of containers, take a look at the CI/CD section where I discuss an example.\nWhy don’t have it physical? # [TODO]\nLocal VMs # [TODO]\nCloud VMs # [TODO]\nThe voodoo magic of… serverless? # [TODO]\nWhy build a server # [TODO]\nDIY Networking: Routing, firewall, etc. # [TODO]\nWeb hosting # [TODO]\nFile Storage, Sharing, Backups # [TODO]\nRemote Access # [TODO]\nGit, Games, and Glory # [TODO]\nVirtual Machines # [TODO]\nContainerization # [TODO]\nFault tolerance # [TODO]\nServerless? # [TODO]\nInteresting Related Articles: # Why All My Servers Have an 8GB Empty File (Brian Schrader) (It\u0026rsquo;s to buy time in case of a full disk)\nSaving Energy: Home Server that Automatically Suspends to RAM and Wakes Up Again (Maximillian Golla)\nThis device is dated, and intentionally so. It is an illustration, not a recommendation. "},{"id":116,"href":"/engineering/networking/tools/","title":"Tools","section":"Engineering","content":" Chapter 37.3 - Networking Tools # Etherape # Wireshark # https://github.com/Ignitetechnologies/Mindmap/tree/main/Wireshark\nhttps://wiki.wireshark.org/CaptureFilters\nEnable Packet Diagram View\nNmap # Scapy / Kamene # Kamene\n(G)NS # HTTPie # HTTPie (GitHub) - human-friendly CLI HTTP client for the API era\nTunnels \u0026amp; VPN # bore (GitHub) - a simple CLI tool for making tunnels to localhost\nFurther Reading # What happens when\u0026hellip; [GitHub] - An attempt to answer the age old interview question \u0026ldquo;What happens when you type google.com into your browser and press enter?\u0026rdquo;\nBen Eater\u0026rsquo;s Networking Tutorial Series is pretty good:\nChapter 37.1 - Weird Networking, because why not! # Weird URL Protocols (YouTube, ThioJoe)\ncjdns + hyperboria\nipfs\ndat\nNetsukuku\nBeaker Browser\nBombadillo is a non-web browser, designed for a growing list of protocols operating outside of the web.\nSoftware Defined Networking, ActivityPub\nGreenTunnel - \u0026ldquo;GreenTunnel bypasses DPI (Deep Packet Inspection) systems found in many ISPs (Internet Service Providers) which block access to certain websites.\u0026rdquo;\nFile transfer via DNS\nAlternative Internet (GitHub list)\nAwesome Mesh (GitHub list)\nList of tools in the BlackArch repo, meant mostly for security research, though obviously many of these are network related and so might give some inspiration or lead to interesting rabbit holes\nDefcon channel (YouTube), DefCon is a security confrence, and naturally that means a lot of network security, including Including some on hacking sex toys\nWhy do we use the Linux Kernel\u0026rsquo;s TCP Stack (Julia Evans Blog)\nA smol tcp stack (GitHub)\nThe Cost of CPU Networking on a Host (David Ahern\u0026rsquo;s Blog)\nEncapsulation of TCP over UDP\nWORST POSSIBLE quality on YouTube? (YouTube, FlyTech Videos)\n\u0026lsquo;Nerfnet\u0026rsquo; tunnells TCP/IP over cheap NRF24L01 Radios (Hackaday, Tom Nardi) RFC for 700 HTTP Status Codes (GitHub, Joho)\nFun with IP address parsing (David Anderson\u0026rsquo;s Blog)\nhttp-wtf\nYggdrasil\nhttps://github.com/ValdikSS/GoodbyeDPI\nI may be the only evil (bit) user on the internet (Ben Cox)\n[TODO] Add follow along making a network stack\n[TODO] https://iximiuz.com/en/posts/computer-networking-101/\n[TODO] https://blog.benjojo.co.uk/post/scan-ping-the-internet-hilbert-curve\nNetcat - All you need to know\n"},{"id":117,"href":"/engineering/prereq/chem/","title":"Chem","section":"Engineering","content":" Chapter 8 - Chemistry # Super handy periodic table with visualization, atomic mass, melting/boiling points, specific heat, isotopes, etc. (ptable)\nThis chapter is more or less on hold while I prioritize adding the content I\u0026rsquo;m more familiar with, if you\u0026rsquo;d like, feel free to submit a PR to flesh this section out. Unfortunately, my chemistry education was pretty \u0026lsquo;meh\u0026rsquo;, and I never actually made it to Organic Chem. I have CrashCourse\u0026rsquo;s Chemistry and Organic Chemistry videos on YouTube on my \u0026lsquo;To Watch\u0026rsquo; list, though. Obviously, I don\u0026rsquo;t know if they\u0026rsquo;re any good, but maybe they\u0026rsquo;d be a decent place to start. NileRed, Cody\u0026rsquo;s Lab, and Thought Emporium on YouTube all have good chemistry content as well.\nThis series from Crash Course series has 46 videos, each about 10 minutes, so about 7.6 hours of content. 8.1 - Atomic Structure, Basics of the Table, Bonding # 8.2 - Acid/base, Electrochem, Thermochem, Photochem # 8.3 - Organic Chemistry # This series from Crash Course series is in progress at the time of writing, but when done will consist of 50 videos, each about 12 minutes, so about 10 hours of content. Yeast that produce PENICILLIN - Whose Gene is it Anyway (YouTube)\n8.4 - Making Chemistry Fun # https://www.homebrewtalk.com\n[TODO] add nile red, cody\u0026rsquo;s lab, and thought emporium specific links\nThe man who tried to fake an element (BobbyBroccoli, YouTube)\n"},{"id":118,"href":"/engineering/prereq/othersubjects/","title":"Othersubjects","section":"Engineering","content":" Chapter 9 - \u0026lsquo;The Rest\u0026rsquo; # Finance # [TODO] because making and engineering are expensive, and you probably want to make money, and spend less money.\nMusic # Music? In a chapter on Engineering? Well, yeah. Hear me out, music is a combination of math and signals.\n1 2 3 4 5 EUCLID(m, k): if k = 0: return m else: return EUCLID(k,m mod k) The Euclidean Algorithm Generates Traditional Musical Rhythms (Godfried Toussaint) (PDF) As another example, the Euclidean Algorithm can be used to distribute drum hits to algorithmically make drum beats\nAs a really cool example, there\u0026rsquo;s also ORCΛ by 100 rabbits, which you can see in action in this video from EZBOT on YouTube:\nIf you get into Modular music systems, like eurorack, it\u0026rsquo;s really similar to programming too- as you connect modules as if they\u0026rsquo;re functions and operations- to make a complex musical system. Here\u0026rsquo;s an example of a Eurorack setup in action from Lightbath on YouTube:\nHealth # [TODO] Mental \u0026amp; Physical, because nerds typically suck at this. Character owned by Vega, art by Talon Creations World Studies # [TODO] To help with tolerance and looking at things from new perspectives.\nHistory # [TODO] inspiration from history and remembering past mistakes\nArt, Design, UI \u0026amp; UX # I know what you\u0026rsquo;re thinking, \u0026ldquo;Vega, this guide is about engineering- why should I give a damn about art?\u0026rdquo;\nBecause you\u0026rsquo;ll still probably need to design enclosures, make easy to read documentation, and probably make a user interface or two, and bad design usually leads to both users not being interested in the first place and a poor user experience.\nSo, even if you\u0026rsquo;re not super into it, give the Design Chapters a quick skim and look at the parts that seem relevant to you, you\u0026rsquo;ll want to look at Section 4 - UI/UX for sure.\nIf you\u0026rsquo;d like a good laugh, check out this video from Tantacrul roasting the poor design of Sibelius, a popular program for music notation\nThere\u0026rsquo;s also this gallery of bad volume controls:\n"},{"id":119,"href":"/engineering/prereq/physics/","title":"Physics","section":"Engineering","content":" Chapter 7 - Physics # This is still a dumping ground for things I want to write about later, nothing of substance is here yet, sorry about that [TODO] speed vs Velocity vs Acceleration, classical vs relative\nRadiocarbon dating (Wikipedia)\nCosmic Microwave Background (Wikipedia)\nNatural nuclear fission reactor (Wikipedia)\nHow Kodak Exposed The Atomic Bomb (YouTube, Veritasium)\nSeeing the invisible: Event displays in particle physics\nBuilding a Vortex Tube (This Old Tony, YouTube)\nmade with paint from r/physicsmemes The Chernobyl Dice: A quantum random number generator with a nixie tube display 1 - Newtonian (assume a spherical cow) # 2 - Electromagnetism # @qualia The Electromagnetic Radiation Spectrum (Anthony Tekatch @ Unihedron.com)\n3 - Relativity and the Quantum # Planck frequency, time, length\n"},{"id":120,"href":"/engineering/programming/algorithms/","title":"Algorithms","section":"Engineering","content":" Chapter 15 - Discrete Math, Algorithms, Data Structures, and Not Sucking at Programming ™* # Brute Force Algorithms # Backtracking # [TODO] Directed Acyclic Graphs\n[TODO] Finite State Machines\n[TODO] e-graphs? https://egraphs-good.github.io\n[TODO] http://courses.csail.mit.edu/6.851/\n[TODO] \u0026lsquo;Tree Traversal\u0026rsquo; on Algorithm Archive\nDivide and Conquer # Master Theorem # Decrease and Conquer # Branch and Bound # Kernelization # Caching # *With some complexity analysis too.\n[TODO]\nhttps://www.mattkeeter.com/blog/2021-03-01-happen/\n[TODO] I also have discrete math in the chapter 11, math\u0026hellip; not sure what do about this\u0026hellip;\nTruth tables, binary, logical equivalencies, propositional logic,\nSets, functions, relations, recurrence, induction, combination, graphs, isomorphism,\nBenchmarking # Many computer science courses will have a basically full class on Algorithm Analysis, usually more specifically looking into BigO analysis. In a nutshell, this involves determing how much computation has to occur for a given input size. For example, if you have 10 inputs and just want to add them together, you can do that in O(n) time, because for n inputs you only need to do n computations (well, actually n-1 here, but we ignore the constant), but if you wanted to sort them with Quicksort (Wikipedia) that could take up to \\(O(n^2)\\) basically, the time to run the code (in the worst case) may be squared with the number of inputs. This is not great. If we assume each operation take 1 second (a bit unreasonably long, but go with it) that means for 10 input we\u0026rsquo;re looking at a bit over a minute and a half, but for 1000 inputs that\u0026rsquo;s up to 11.57 days.\nSo, you should learn how to do this kind of analysis, right? Well, it\u0026rsquo;s not a bad idea to - and I do have a brief overview of it in the following section - it\u0026rsquo;s really not as important as those classes make it seem. This is for a few reasons. The first is that the code you write and the code that actually runs are usually quite different. As a basic example, let\u0026rsquo;s look at this C code:\n1 2 3 4 5 6 7 int dumb(int max){ int sum = 0; for(int i = 0; i \u0026lt; max; i++){ sum += i; } return sum; } Super basic, just sums the numbers 0 to ``max`. So, let\u0026rsquo;s compile that and look at the assembly code:\ndumb(int): addi sp,sp,-48 sd s0,40(sp) addi s0,sp,48 mv a5,a0 sw a5,-36(s0) sw zero,-20(s0) sw zero,-24(s0) .L3: lw a4,-24(s0) lw a5,-36(s0) sext.w a4,a4 sext.w a5,a5 bge a4,a5,.L2 lw a4,-20(s0) lw a5,-24(s0) addw a5,a4,a5 sw a5,-20(s0) lw a5,-24(s0) addiw a5,a5,1 sw a5,-24(s0) j .L3 .L2: lw a5,-20(s0) mv a0,a5 ld s0,40(sp) addi sp,sp,48 jr ra Okay, so, yeah, that\u0026rsquo;s about what we expect. There are a few jumps so the loop can execute, whatever. Thing is, if you\u0026rsquo;re ever actually releasing code, you\u0026rsquo;ll have compiler optimization on. With optimization, the compiler will happily generate more efficient code for you. Because we didn\u0026rsquo;t do anything conditionally here sum will always, no matter what, return that same number. The compiler can figure this out, and with optimization on, it spits out this assembly:\ndumb(int): mv a4,a0 ble a0,zero,.L4 li a5,0 li a0,0 .L3: addw a0,a0,a5 addiw a5,a5,1 bne a4,a5,.L3 ret .L4: li a0,0 ret And, alright, yeah, that\u0026rsquo;s fewer lines, dramatically more efficient, but it still seems to be doing the same loop. So, let\u0026rsquo;s do one more thing, let\u0026rsquo;s add a main function that calls this code and add the keyword to our dumb function so that the compiler knows it doesn\u0026rsquo;t actually need to generate the function call, it can wrap it into the main function\u0026rsquo;s code itself:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \u0026lt;stdio.h\u0026gt; inline int dumb(int max){ int sum = 0; for(int i = 0; i \u0026lt; max; i++){ sum += i; } return sum; } int main(){ int result = 0; result = dumb(100); printf(\u0026#34;%d\u0026#34;,\u0026amp;result); return 0; } That gives us this assembly:\n.LC0: .string \u0026#34;%d\u0026#34; main: addi sp,sp,-32 lui a0,%hi(.LC0) li a5,4096 addi a1,sp,12 addi a5,a5,854 addi a0,a0,%lo(.LC0) sd ra,24(sp) sw a5,12(sp) call printf ld ra,24(sp) li a0,0 addi sp,sp,32 jr ra Which, you should notice, never runs our loop. Instead, the result of the math (summing 0 to 99, which is 4950) is stored directly into the code (well, sorta, it\u0026rsquo;s 4096 + 854, because of limits on immediate values in Assembly, but don\u0026rsquo;t worry about that) - my point is that our originally O(n) code isn\u0026rsquo;t even O(n) anymore because, well, it never even runs. The compiler went \u0026ldquo;Oh, I can just pre-compute that result and save it in the program\u0026rdquo; and that\u0026rsquo;s what it did.\nNow, the takeaway here should not be that the compiler is magic and means you don\u0026rsquo;t need to write fast algorithms. That said, the compiler totally is magic. Compiler optimization will regularly outperform anything you could write by hand. Instead, my point is that doing that analysis may not mean that much if the compiler is doing magic underneath it anyway. So, while you should be able to at a glance see that some code is just horrifically inefficient (deeply nested loops, brute force approaches, etc.) the name of the game is benchmarking. If performance matters, or you just noticed things suddenly taking a lot longer, run a benchmark! If you\u0026rsquo;re about to try to performance optimize code, seriously run a benchmark first - you may find your clever tricks actually made things slower! Log the amount of time things take. We have the tools!\nBenchmarking/Profiling Tools # Some benchmarking tools are language dependent, some aren\u0026rsquo;t. Generally, those that are will get you deeper insights but be more annoying to run. Also, keep in mind some tools actually add some time to run because of measuring the performance (Heisenberg style). Regardless, a pile of links to look though:\nPython Flame Graphs\nC and C++ Flame Graphs\nYou may want to use Pyroscope or Hotspot instead of the tools in those links\nChrome and Firefox both have Flame graph tools built in\nUsing Hyperfine (GitHub) to measure run times is amazing\nIf you really need deep insights, Palanteer may be worth checking out (Python or C++)\nOf course, you can always just print() the time before and after the event that you think might be eating cycles too - though print debugging is pretty bad - see Print Debugging Should Go Away (Robert O\u0026rsquo;Callahan) which recommends using tools like rr or TDD or replay.io instead. Though, even failing that, something like icecream (available for many languages) is still better than traditional printing for debug.\nIt\u0026rsquo;s also a good idea to test on multiple platforms, both in terms of hardware and operating system (assuming you\u0026rsquo;re targeting more than one OS) as some functions tend to have wildly varying performance - particularly system level functions (print(), I/O) and math functions like sin() - there are a lot of ways to compute trig functions, not all of them are fast.\nComplexity analysis # Big O Notation - explained as easily as possible (that computer scientist) (Archive.org link)\nMore cool videos like this can be found at https://www.youtube.com/c/Musicombo/videos\n+recursion analysis, P vs. NP (YouTube)\nBrute Force # Divide and Conquer # Data structures # trees, hashtables/maps, stacks\nPractice # Fib, some practice logical equliv, base conversion algo, overlapping lines, matrix multiplication\nLocality # Temporal # Spatial # Dynamic Programming # Heads up, this is a 5 hour video: Some Algorithmic Inspiration # Coding Adventure: Ant and Slime Simulations\nAlgorithmic Redistricting: Elections made-to-order\nFurther Reading # The true cost of linked lists (Yassir Karroum)\n"},{"id":121,"href":"/engineering/programming/bestpractices/","title":"Bestpractices","section":"Engineering","content":" Chapter 11 - Best Practices # Manifesto # Everything should be a tool. A tool transforms data without adding to its source limitations. It\u0026rsquo;s a function: returns an output for a given input. A great tool is ambient. It should disappear and flow through your actions. You should never need it because it\u0026rsquo;s always at your hands. You should never ignore it because it\u0026rsquo;s never in your way. Tools should be adaptable, changeable and personalisable. If a tool does not perfectly fit your needs, you should be able to change, mix or remove its parts. Data should be reusable, text-editable, human-readable. Produces a higher chance that (1.) is passed. Tools should be lightweight, available and timeless. Computing power or internet speed shouldn\u0026rsquo;t be the limitation for most tasks. It works in the past and in the future. \u0026ldquo;Only through open sources, open standards, human-readable formats and their independencies, might they survive this fleeting age of self-destructing informatics.\u0026rdquo; - Devine Lu Linvega - Hunor Karamán @ hex22.org If you\u0026rsquo;re on this page, presumably you\u0026rsquo;re feeling ready to tackle making some bigger programs. Fortunately for you, the core building blocks are the same. The biggest difference is the amount of discipline required. This is why the first thing I want to touch on is the equivalent of janitorial work for code:\nOrganization, Naming, and Style # There is one absolutely universal rule of code organization\nDo not write large, monolithic functions\nRead that again. And again. Burn this idea into your brain. Even if the function will only ever be called in one place and there\u0026rsquo;s no repeated segments in it, if it gets to big you absolutely have to split it up. This is rule №1, do not break it.\nTo quickly barrel though some of the others.\nFunction names should have verbs # Even if this is just get_whatever(), \u0026ldquo;get\u0026rdquo; is a verb. If it doesn\u0026rsquo;t have a verb, it\u0026rsquo;s a bad name.\nVariable names should be descripive # *Unless it\u0026rsquo;s really, really dumb, like using i, j, and k for loop counters Don\u0026rsquo;t name your variables bool blunt_master_420. Give it a name that actually means something in the code.\nSmash back if the intermediate variables don\u0026rsquo;t represent a meaningful value. Sometimes it makes sense to declare an intermediate, and sometimes it doesn\u0026rsquo;t, e.g:\n1 2 3 price = get_price() tax = income_tax * price full_price = price + tax In this situation, employing intermediate variables is fine, because each has an actual interpretation within the calculation. However, e.g:\n1 2 3 x_squared = get_x() ** 2 y_squared = get_y() ** 2 distance = math.sqrt(x_squared + y_squared) This is bad, because x_squared and y_squared are only meaningful quantities in the context of the distance calculation, and breaking out these variables just obfuscates the computation.\nIf you ever find yourself asking \u0026ldquo;what the hell could I even name this variable?\u0026rdquo; it\u0026rsquo;s a pretty typical sign that you\u0026rsquo;re trying to break things up more than is logically necessary, and just making a mess of things.\n- u/tyg13 on Reddit Peren all the things # if(a \u0026lt; b || b \u0026gt; c) isn\u0026rsquo;t bad to read, but under some circumstances statements like these can get super confusing, so always use extra parentheses to enclose each idea if((a \u0026lt; b) || (b \u0026gt; c)) is a lot easier to read.\nIf you had something like if(a \u0026amp;\u0026amp; (b || ((c \u0026lt;\u0026lt; (d + e)) == f) || ((g \u0026lt;\u0026lt; h) == !l))) those parentheses become vital to have any chance in hell of reading what\u0026rsquo;s going on. This shouldn\u0026rsquo;t happen anyway though. If you\u0026rsquo;re doing anything like that you should store the result of ((c \u0026lt;\u0026lt; (d + e)) == f) and ((g \u0026lt;\u0026lt; h) == !l) into some temporary variables to make this easier to read in the first place.\nAvoid nesting # Don\u0026rsquo;t write\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 void main(void){ if(a){ if(b){ if(c){ if(d){ // ... } } else if (e){ if(g){ // ... } } } else { // ... } } else{ // throw error and return } } It\u0026rsquo;s fucking impossible to read and debug.\nThere\u0026rsquo;s a few ways to fix this. First is moving some of the nested blocks into their own functions\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 bool my_func(c,e,d,g){ if(c){ if(d){ // ... } } else if (e){ if(g){ // ... } } } void main(void){ if(a){ if(b){ my_func(c,d,e,g); } else { // ... } } else { // throw error and return } } The other is to reverse-logic and move a conditional out of the chain.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 bool my_func(c,e,d,g){ if(c){ if(d){ // ... } } else if (e){ if(g){ // ... } } } void main(void){ if(!a){ // throw error and return } if(b){ my_func(c,d,e,g); } else { // ... } } Avoid Potential Infinite Loops # This is less code organization and more just general best practice, but only using while when absolutely necessary and - in cases where you do have to - making damn sure it can\u0026rsquo;t get stuck in an infinite loop will save you a lot of pain.\nSimilarly, don\u0026rsquo;t use floats in the conditional of your loops (for or while) if you can help it. Floats are weird and annoying as hell to debug.\nDon\u0026rsquo;t hard code values (avoid \u0026ldquo;Magic Numbers\u0026rdquo;) # 1 2 3 4 5 6 7 8 9 10 11 int main() { for (int i = 0; i \u0026lt; 10; i++) { if(!do_something()){ break; } if(i == 9){ printf(\u0026#34;ERROR, failed after 10 attemps\u0026#34;); } } } Is a pretty common block of code, just retry the thing 10 times, allowing some room for a function to fail. This is also a terrible way to write it. If we wanted to update the number of times it can retry, we have to update the code in 3 different places which is very error prone. Instead, we could do something like this,\n1 2 3 4 5 6 7 8 9 10 11 12 13 #define RETRIES 10 int main() { for (int i = 0; i \u0026lt; RETRIES; i++) { if(!do_something()){ break; } if(i == (RETRIES - 1)){ printf(\u0026#34;ERROR, failed after %u attemps\u0026#34;, RETRIES); } } } Pick a naming scheme # Generally you\u0026rsquo;ll see variable and functions named with either PascalCase, camelCase, snake_case. Some code basses will mix styles to differentiate between variable, functions, or classes. It\u0026rsquo;s also common to use UPPERCASE for some lesser used things, like constants. If you\u0026rsquo;re working in an existing code base, it\u0026rsquo;s vital that you match the style in use. If you\u0026rsquo;re writing your own code from scratch, ensure you\u0026rsquo;re consistent with your naming unless you have a damn good reason to break your own rules.\nYou\u0026rsquo;ll also probably see some naming styles that add characters to specify something. For example, in C, using _t at the end of a new type is common - as you should be used to with types like uint8_t. You may also see _f for float things.\nCheck all the things for failure # Opening a file? What if it doesn\u0026rsquo;t exist.\nAccessing a value at a pointer? What if somebody passed you a NULL.\nChecking the size of a string? What if the \\0 is missing.\nWriting good code requires thinking about all the ways it can fail. Some of this becomes routine, like adding if (ptr == NULL){//complain} to the start of any function your write in C that takes in pointers or arrays\nNotice that 3 of my 4 examples are more-or-less C specific? This the biggest reasons people complain about it as a language. It\u0026rsquo;s a shit show for \u0026ldquo;safety\u0026rdquo; - it makes you constantly think about everything that can go wrong, otherwise you\u0026rsquo;re writing security vulnerabilities and the potential for your program to crash super hard. Alternatively, write functions so they can not fail. This is pretty hard to do though.\nWhen you\u0026rsquo;re writing functions, if they can fail, make sure they can tell the caller if they failed. Usually you do this by returning a bool of true for success and false for failure.\n[TODO]\nUse tools to help\nColored regions Autoformatters\nShould probably pick some of the important options in clang-format and talk about them. Static Analysis\nComments \u0026amp; Doxygen\nDocument the \u0026lsquo;Why\u0026rsquo; not the \u0026lsquo;How\u0026rsquo; - Future you can read code, but future you probably won\u0026rsquo;t remember why it\u0026rsquo;s there or why it was done this way. Test your code.\nMake your tools work for you - especially your compiler.\nTrack your TODOs\nOften, you want to make something quick as a Proof of Concept (PoC) to know it\u0026rsquo;s not a dead end. The problem is, we often don\u0026rsquo;t go back and clean up our mess after we get it to work. https://medium.com/@msandin/strategies-for-organizing-code-2c9d690b6f33\nPrototype before polishing. Get it working before optimizing it. Separate policy from mechanism, separate interfaces from engines. Write simple modular parts connected by clean interfaces. Design programs to be connected to other programs. Write programs to write programs when you can. Design for the future, because it will be here sooner than you think. In interface design, always do the least surprising thing. When a program has nothing surprising to say, it should say nothing. When a program must fail, it should fail noisily and as soon as possible. Write big programs only when it is clear by demonstration that nothing else will do. Consider how you would solve your immediate problem without adding anything new. - xxiivv/development Why You Shouldn\u0026rsquo;t Write Big Programs: \u0026ldquo;The Unix Philosophy\u0026rdquo; # There are absolutely times you\u0026rsquo;ll need to write large, single purpose, cotained programs. For example, a video game fit\u0026rsquo;s this description pretty well.\nHowever, the vast majority of programs you may want to write probably don\u0026rsquo;t need written, at least not in the way you\u0026rsquo;re envisioning.\nIf you dug deep into the Linux Shell and learned a bit of shell programming, you\u0026rsquo;d have come across the Unix Philosophy which is beautifully summed up by Peter H. Salus,\nWrite programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface. - Peter H. Salus in A Quarter-Century of Unix The idea is that for most programs - the actual process-data-and-move-on-with-life kind of programs - we can make them by stringing together simpler programs in our shell (or, today, in Python if it\u0026rsquo;s a bit more complex) This means that for many \u0026ldquo;big programs\u0026rdquo; you might want to write, a \u0026ldquo;big program\u0026rdquo; is the wrong solution to begin with.\nThe main advatages of this design are that you\u0026rsquo;ll have a pile of reusable parts and that each part has been tested independently.\nFor example,\nlynx -dump www.example.com | fltrdr\nUses Lynx to get the text of a webpage and shoves it into fltrdr to allow for very fast reading. That\u0026rsquo;s two otherwise unrelated programs, chained together.\nfor file in *.wav; do lame \u0026quot;$file\u0026quot; \u0026quot;$(basename \u0026quot;$file\u0026quot; .wav).mp3\u0026quot; ; done;\nIs another good one from this thread that will convert all the .wav files in a folder to .mp3.\nIf you get clever you can really get these chains to do some crazy shit. By reading log files, poking things on the network, and chaining together commands, you\u0026rsquo;ll realize a large portion of the programs you might otherwise make can be much simpler chains of existing tools or you may only need to make one custom tool to sit somewhere in that chain. You might do this in Bash (the language used above) or Python if there a fair amount of logic (writing conditionals and error handling in Bash is a tad awkward) but either way, that mindset of \u0026ldquo;I can make this by chaining together existing tools, maybe adding just a bit of my own code\u0026rdquo; will avoid tedious wheel reinvention.\nStill, not all problems can be solved this way. Sometimes you actually do have to either reinvent some wheels or make a large program that isn\u0026rsquo;t just a combination of existing tools. Generally, this is because of one or more of these reasons:\nYou want to sell something and don\u0026rsquo;t want to make it open source, and so you cant use existing open source tools (viral licenses) You\u0026rsquo;re working on a very constrained system (needs to be high performance, low memory, low power, etc.) You have an original idea (You\u0026rsquo;ve looked everywhere and nobody\u0026rsquo;s done it or it\u0026rsquo;s something artistic, like a video game, audio effect, etc.) or you just want to learn how something works, so you\u0026rsquo;re making it from scratch, like making your own game engine.\nRegardless, if you\u0026rsquo;re on this page you\u0026rsquo;re clearly thinking about writing something bigger than you\u0026rsquo;ve made so far. Depending on the language, your goals, and you\u0026rsquo;re experience this can mean a lot of different things so to be clear, here I\u0026rsquo;m meaning writing something that is, at minimum, going to occupy multiple files.\nObject Oriented Programming # We already talked about Object Oriented Programming a bit in the intro pages but there\u0026rsquo;s a few more things that come with it you should know about:\n[TODO]\nTemplates - https://www.geeksforgeeks.org/templates-cpp/ (Not technically OOP but it sorta fits here)\nOperatator and Function overloading\nPrivate \u0026amp; Public methods (also not necessarliy OOP, but make more sense in this context)\nexplain this\nPlanning # Design Patterns # For more advice on writing good code, are these things called \u0026ldquo;Design Patterns\u0026rdquo; - Wikipedia has a big ol\u0026rsquo; list of \u0026rsquo;em which is worth looking into, and if you just google the \u0026ldquo;software antipatterns\u0026rdquo; you\u0026rsquo;ll find a huge list of things to avoid in code. A lot of these are high level and tend to miss why the bad things are done in the first place: time.\nSoftware Engineering # Software Engineering is a fucking nightmare.\nYou\u0026rsquo;ll hear terms like Agile, Scrum, Stand-up, Sprints, Kanban Boards, Test Driven Development, and the word \u0026ldquo;Actionable\u0026rdquo; enough that it makes you want to puke. The entire process is the corporatization of code, the distillation of a creative art into something gray and bland, lifeless and dull. They\u0026rsquo;ll tell you it makes your code better, more organized, better tested. That this is the true way to do software development, and that it\u0026rsquo;s necessary for writing good code. That all the best startups use all of these things 110% percent of the time and look how great they are, all the employees have access to an arcade at work, unlimited beer and soda at work, a pool table at work, a gym at work. Hell, they even do work at work! But maybe, just maybe, there should be some things that… aren\u0026rsquo;t work?\nIs that a radical idea, that a work-life balance means going home at the end of the work day and not working 60-hour weeks for a 40 hour salary so that you can meet a deadline of self-assigned deadlines. No, I will not talk about software engineering in earnest on OpGuides because the entire field is one of masochism and unsustaniability, where the only focus is to make a product good enough to sell to a larger, more abusive corporate overlord.\nI\u0026rsquo;m not saying all the buzzwords above are bad things, I don\u0026rsquo;t think they are. My problem is with the workaholic to burnout culture they tend to come along with as well as the inability to understand that humans do have emotions and are not, in fact, machines. Sometimes talking about something that is not actionable is still important just for the sake of thinking and letting the brain wander a bit. Sometimes it\u0026rsquo;s hard to write the test case before the code is written, as you may not understand the problem 100% yet.\nIt\u0026rsquo;s the blind following of these ideas without thought about why they\u0026rsquo;re used that\u0026rsquo;s the problem. It often results in more code that is harder to maintain, instead of good, clean code. Being overly rigid with any workflow- ironically even agile- without consideration for why it is used leads to a bad and unproductive work environment.\nHaving standards, workflows, tests, roadmaps, etc. are all good! You shouldn\u0026rsquo;t just merge in any shit code. The problems start when working with others it becomes expected to work and write code in one super specific way -not just like, use camelCase, but like, actual restrictions on logic or over adherence to SOLID to the point the code is made unnecessarily complicated and hard to follow, as more and more boilerplate code forms to tie all the mess together.\nDevelopment teams do need a good way to stay organized, I just think a lot of how it\u0026rsquo;s done in the Hail Corporate™ world results in worse code with more bugs and employees that need therapy.\nYes, you should test your code.Yes, some of these methods can help.No, you shouldn\u0026rsquo;t turn this shit into a bonafide religion and your workers into cultists.\nIf in talking to others you can only think \u0026ldquo;What they\u0026rsquo;re saying isn\u0026rsquo;t actionable\u0026rdquo; you cease to be human.\nLike my rant? You should read What The Goddamn Hell Is Going On In The Tech Industry? too, which I think adds some nice context to Software Disenchantment (Niki Tonksky).\n"},{"id":122,"href":"/engineering/programming/codecont/","title":"Codecont","section":"Engineering","content":" THIS PAGE IS BEING REMOVED # Part 3, more advanced high level # Modify the original python program to support a pretty CLI input in a pretty way to make entries and visualize the data collected, parallelize some things, finally add a config file using YAML\nPart 4, getting our toes wet with embedded systems # Finally, let\u0026rsquo;s go back and add a com port to the C code and send data to an Arduino (can be simulated) and a TFT to display the currently active task and time elapsed.\nOther resources and articles: # Good Coders Borrow, Great Coders Steal (StackOverflow Blog)\nThe Art of Code - Dylan Beattie (YouTube)\nBit Tricks (GitHub)\nCoding Challenge #12: The Lorenz Attractor in Processing (YouTube, The Coding Train) and Coding in the Cabana 4: Worley Noise (YouTube, The Coding Train)\nThings unlearned (Jamie Brandon)\nCoding Challenges # Advent of Code\nObfuscated C programs: Introduction (YouTube) Obfuscated C, https://www.ioccc.org/\nSource: https://gist.github.com/munificent/b1bcd969063da3e6c298be070a22b604 "},{"id":123,"href":"/engineering/programming/codeintro/","title":"Codeintro","section":"Engineering","content":" Chapter 10 - Let\u0026rsquo;s write some Code # Hello! If you\u0026rsquo;re here, you should know you\u0026rsquo;re on a deprecated page. All work has now been refocused on getting the new programming intro (Chapter 10 in the menu bar) to being much, much better than this page ever was. Starting Minimal # Code is mostly math # Here\u0026rsquo;s the thing: Code is mostly math. If you\u0026rsquo;re anything like me, you probably just went ugggggghhhhhhh.\nAnd I get it. But it\u0026rsquo;s not that bad for two reasons:\nThe math isn\u0026rsquo;t like what you\u0026rsquo;re used to. The math is actually doing something. You\u0026rsquo;re not just getting a number to solve a problem, you\u0026rsquo;re making a tool that can solve many problems or watching the math cause something to happen on screen. On point 1., it\u0026rsquo;s usually because code has lots of flow control and logic that you\u0026rsquo;re probably not used to seeing in math.\nThings like\nfake code for beginners:\n1 2 3 4 if x is equal to y: set x to x-1 else: set x to y or\n1 2 while Alice and Bob are Connected: exchangeMessages(Alice,Bob) slightly less fake code for people that have seen this before:\n1 2 3 4 if x == y: x = x-1 else: x = y or\n1 2 while Alice.isConnectedTo(Bob): Alice.Message(Bob, \u0026#34;Hello\u0026#34;) But, what about point 2.? Take a look at this:\nThis is tixy.land \u0026ndash; Click on the moving dots to advanced though a lil\u0026rsquo; tutorial and some examples\nHere in tixy land, you can try out some code. I don\u0026rsquo;t want to lead you to anything. Just, type something. See what happens.\nEven if you don\u0026rsquo;t understand all the math or what the symbols mean I\u0026rsquo;m sure you can get a rough idea of what\u0026rsquo;s going on.\nYou can usually make something cool by just entering a bunch of trig and making complex functions you don\u0026rsquo;t truely understand. You\u0026rsquo;re learning, that\u0026rsquo;s fine, no shame. Here, for example, is one I made by wandering around trig functions asin((t/9*(i/32*sin(t/4))*y)%5)\nAt risk of going off on a pretty big tangent, I recommend checking out some tixyland-like sites\nhttps://hexy.now.sh is inspired by tixy but has some extra interesting features, if you\u0026rsquo;re having fun with tixy.land it\u0026rsquo;s worth checking out.\nhttps://doersino.github.io/tixyz/ is the same as tixy, but add\u0026rsquo;s a 3rd dimension\nhttps://play.ertdfgcvb.xyz/ is similar, but lets you write dramatically more advanced code\nPython # Getting started with python # You may ask, why Python? Why not any of the other languages you may have heard of?\nThere are a couple reasons:\nIt Looks Like Math. As I said above, code is mostly math, so why not choose a language that looks like it? Python does not require a lot of typing or understanding weird characters with special meaning. The most subtle thing about it is whitespace. (1) Accessibility. Python was designed from the beginning to be easy to learn and read, including for non-programmers. Features. Python has most of the features common in other languages. That makes it good for teaching the features in other languages. Popularity. There are dozens of tutorials about how to use it to solve any problem you could imagine. Once this guide gets you started, the internet is full of paths to follow. Portability. You can get Python running everywhere: Windows, Linux, Mac, or even a microcontoller. The building blocks of programming # All programming is just chaining logic, for example using treatments like \u0026ldquo;if a is equal to b, then make c hold the value of a - 3\u0026rdquo; followed by \u0026ldquo;if c is negative then say hello\u0026rdquo;\nWell, that\u0026rsquo;s actually an easy program\n1 2 3 4 5 6 7 8 9 a = 1 b = 1 c = 1 if a == b: # Why are there two equal signs here? c = a - 3 if c \u0026lt; 0: print(\u0026#39;hello\u0026#39;) you should notice a few weird things here though, namely, on line 5 we used two equal signs to check equality. This is the case in most programming languages because a single equal sign, like is used on the first two lines, is used for assignment that is assigning the value of a to 1 and b to 1 or as on line 6 assigning the value of ( a - 3 ) to c, because we\u0026rsquo;ve already used a single equal sign for assignment, two equal signs is used for checking that two things are actual equal. That is, one equal sign sets things to be equal (assignment), two checks that they are equal (equality).\nYou\u0026rsquo;ll also see there\u0026rsquo;s normal english after the # character. In python # means the following text is a comment.\nIf you follow the logic here, a and b are both 1, so line 5 checks that both are equal, and this is true, so line 6 does happen. Now \u0026lsquo;c\u0026rsquo; which previously held the value \u0026lsquo;1\u0026rsquo; is now equal to \u0026lsquo;a-3\u0026rsquo;, where \u0026lsquo;a\u0026rsquo; is \u0026lsquo;1\u0026rsquo;, so \u0026lsquo;c\u0026rsquo; becomes \u0026lsquo;-2\u0026rsquo;. on line 8 we check if c is less than \u0026lsquo;0\u0026rsquo;, and because it is we print the word \u0026lsquo;hello\u0026rsquo;. Here, you\u0026rsquo;ll notice \u0026lsquo;hello\u0026rsquo; is in quotes. This is because if it were not, that is if it were print(hello) it would try to print the value of the variable \u0026lsquo;hello\u0026rsquo; which since hello isn\u0026rsquo;t defined, (2)wouldn\u0026rsquo;t work. Let\u0026rsquo;s try this in the Python interpreter. You can find install instructions for your operating system here: https://www.python.org/downloads/. If you\u0026rsquo;re on Linux simply type python into the terminal.\nWith the Python interpreter open try without quotes:\n1 2 3 4 \u0026gt;\u0026gt;\u0026gt;print(hello) Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; NameError: name \u0026#39;hello\u0026#39; is not defined As you can see Python failed to print hello because the variable was not defined. Now lets try assigning a value to the hello variable before printing:\n1 2 3 \u0026gt;\u0026gt;\u0026gt; hello = \u0026#34;Hello World!\u0026#34; \u0026gt;\u0026gt;\u0026gt; print(hello) Hello World! Anything you write to the interpreter can also be added to a file and ran that way. Try saving the examples above to a file called test.py, opening a terminal and running it with python test.py.\nConditions using if, elif and else # You often want code only to be executed, if a certain condition is met. For example, take a look at the following code:\n1 2 3 4 5 6 a = 13 b = 27 if a \u0026gt; b: print(\u0026#34;a is bigger\u0026#34;) else: print(\u0026#34;b is bigger\u0026#34;) Using the if statement, connected with a logical condition, you can control the program flow. In this case, a is smaller than b, so python will skip the code inside of the if case and only execute what is within the else part.\nYou can also combine multiple if cases like this:\n1 2 3 4 5 6 7 a = 3 if a \u0026lt; 0: print(\u0026#34;a is negative\u0026#34;) elif a == 0: print(\u0026#34;a is zero\u0026#34;) else: print(\u0026#34;a is positive\u0026#34;) Using the elif statement, you can check for another condition if the one in the if statement was false.\nNote, that not all ifs need an else, it\u0026rsquo;ll just move on after the if, weather it happened or not.\n1 2 3 4 5 6 7 a = 3 if a == 3: print(\u0026#34;a is 3\u0026#34;) #this happens a = a + 2 #increase a by 2 if a == 3: print(\u0026#34;this won\u0026#39;t print because a is 5\u0026#34;) print(\u0026#34;but this line still will print, as the program moves on\u0026#34;) Loops # Some lines of codes have to be repeated very often. Instead of typing the same line over and over again, you can use loops. There are two types of loops: The for and the while loop. While they both basically do the same thing, sometimes it is more intuitive to use one over the other.\nTODO: Again on 0-based vs. 1-based indexing\nThe for loop # The for loop iterates over a list of items and stores the current element in a variable. This is especially useful when working with lists, for example.\n1 2 3 fruits = [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;cherry\u0026#34;] for fruit in fruits: print(\u0026#34;I am eating a \u0026#34; + fruit) If you are familiar with loops in other programming languages (such as Java or C), you\u0026rsquo;re probably thinking: \u0026ldquo;That\u0026rsquo;s not a for loop, that\u0026rsquo;s a for-each!\u0026rdquo;. This is true, in python all for loops are for-each loops. If you want to iterate over a range of numbers, use pythons range() function:\n1 2 for i in range(0, 100): print(i) The while loop # The for loop is very useful, but sometimes, using the while loop is easier and more straightforward. For example, if you want to repeat something until a certain condition is met, using this loop is simple:\n1 2 3 4 i = 0 while i \u0026lt; 10: print(i) i += 1 You can also combine the condition after the while keyword with an else statement:\n1 2 3 4 5 6 i = 11 while i \u0026lt; 10: print(i) i += 1 else: print(\u0026#34;i is bigger than 10!\u0026#34;) You can abuse while to do something forever:\n1 2 3 while True: print(\u0026#34;This will print over and over again forever\u0026#34;) print(\u0026#34;This will never print\u0026#34;) [TODO] assignment, comparison, combined ops (+=), mod, exponent, floor, in/not in, is/is not, data types, functions libraries\nFunctions # This is a way to give code a name, and use it later. Here is an example with a loop:\n1 2 3 4 5 6 7 8 9 10 11 def f(x): if x \u0026lt; 10: string = \u0026#34;x is less than 10\u0026#34; else: string = \u0026#34;x is greater than or equal to 10\u0026#34; return string for a in range(100): print(a) b = f(a) print(b) When you run this code, you will see that all the steps underneath f are run over and over again, each time through the loop.\nThere are a couple things to understand here:\nLine 10 is where the function is called. That is where line 2 begins to execute. The function takes a parameter we have named x. The value of x is what was put in the parentheses at the call location, so its value is a for each time through the loop. The value of x lasts for the duration of the code in the function. The return statement on line 6 creates a value to be sent from the function back to the caller. This is then the value of b when line 10 completes. If you don\u0026rsquo;t put one of these, it will return a special value called None. You can see from this that print is just a function call! It takes more effort and extra syntax to create a function that can take all the parameters print can, but you can definitely write one. That\u0026rsquo;s for a different tutorial, though.\nTypes # Up until now, you\u0026rsquo;ve seen every variable be assigned a basic number, like a = 1, but you could also set a variable - of which you could name anything - to hold other kinds of data too, like characters, strings, floating-point numbers, etc. This can be a bit confusing at first, and this is actually one palce where python makes things a bit complicated as it\u0026rsquo;s usually hidden from us, so let\u0026rsquo;s actually break a program on purpose to see what this is all about.\na = 1 b = \u0026#34;hello\u0026#34; c = a + b Here, were trying to add the number 1 and the string \u0026ldquo;hello\u0026rdquo; together, this clearly doesn\u0026rsquo;t make sense, and so python yells at us: TypeError: unsupported operand type(s) for +: 'int' and 'str'\nthis is literally saying, \u0026ldquo;hey, dude, you can\u0026rsquo;t add an integer and a string\u0026rdquo; which, yeah. Actually, python is weird in that it lets us even add stings at all - if you did\n1 2 3 a = \u0026#34;hello\u0026#34; b = \u0026#34;world\u0026#34; print(a+b) you\u0026rsquo;d see \u0026ldquo;helloworld\u0026rdquo;, even though in most other languages they\u0026rsquo;d go \u0026ldquo;ahhhhh! these aren\u0026rsquo;t numbers!\u0026rdquo;\nBut, going back, python specifically said int and str, these are both types: integer, and string.\nIntegers, as the name implies, literally just hold non-decimal numbers, so -3, -2, -1, 0, 1, 2, 3, etc.\nstrings, as the name implies, can hold a string of letters.\nBut, of course, there\u0026rsquo;s more than that. Python gives us a function to see what the types of things are though, so let\u0026rsquo;s look at a bunch of the built in types - don\u0026rsquo;t worry to much about what they mean yet.\n1 2 3 4 5 6 7 8 9 10 11 myInt = 1 myFloat = 0.5 myComplex = complex(2,3) #2+3i myString = \u0026#34;test\u0026#34; myBool = True myList = [1,2,3] myTuple = (1,2,3) myDict = {\u0026#39;apple\u0026#39;:1,\u0026#39;orange\u0026#39;:2} mySet = {\u0026#34;one\u0026#34;,\u0026#34;two\u0026#34;,\u0026#34;there\u0026#34;} type(myInt) # this will print \u0026#34;\u0026lt;class \u0026#39;int\u0026#39;\u0026gt;\u0026#34; and, of course, things can get complicated as you compose these together, for example, you could have a list of bools\n1 2 3 4 myListOfBools = [True,True,False] type(myListOfBools) # this will print \u0026#34;\u0026lt;class \u0026#39;list\u0026#39;\u0026gt;\u0026#34; as it\u0026#39;s the type of the outter thing type(myListOfBools[0]) # this will print \u0026#34;\u0026lt;class \u0026#39;bool\u0026#39;\u0026gt;\u0026#34; as it\u0026#39;s the type of the inner thing - the [0] is asking for the first item in the list # note, python is \u0026#34;0-indexed\u0026#34; like most languages, so this list of three things has items 0, 1, and 2. This may seem weird, but it\u0026#39;s nice for a variety of reasons. Python does try to help us with these types a bit, for example, if you do\n1 2 3 4 myInt = 1 myFloat = 0.5 result = myInt + myFloat print(result) the answer is still 1.5, because python saw that we were adding an int to a float and took care of this for us. This isn\u0026rsquo;t always so cut and dry though, and sometimes you may actually want to keep things in one type or another. Because of this you can typecast. This means forcing one type to another. In python at least, this has limits. For example, it makes sense to go from the string \u0026ldquo;3\u0026rdquo; into an integer, but the string \u0026ldquo;test\u0026rdquo; into an integer is… less obvious, and so python says no. To do this conversion, just use the type as if it were a function. Here are some examples:\n1 2 3 4 5 6 7 myFloat = 123.456 myString = \u0026#34;69\u0026#34; myInt = 420 int(MyFloat) #returns the integer value 123, as the decimal is lost int(MyString) #returns 69, as these are all number characters float(MyInt) #returns 420.0, as we\u0026#39;re basically forcing it to have a decimal Of note, in other languages (not Python) there may be a sane(ish) translation between arbitary strings and numbers, such as just returning the ASCII value of each letter.\nFurthermore, in python theres a variety of ways you may run into more types, or even end up needing to work with the types of another language, such as \u0026lsquo;C\u0026rsquo;, in python. In this case you\u0026rsquo;ll start having to deal with the nitty gritty of types, such as 8-bit integers, both signed and un-signed. I want to at least introduce this here, but you\u0026rsquo;ll definitely see more later: The gist is that in lower-level languages, (ones where you\u0026rsquo;re writing in a way closer to how the computer actually works) you\u0026rsquo;ll have to actually deal with the binary, so, you\u0026rsquo;ll be working with things at the bit level. An 8 bit number can only hold 2^8 = 256 values, so an unsigned 8 bit integer will hold values from 0 to 255 while a signed 8 bit integer can hold -128 to +127 (note, this is because one of the bits is used to store the sign). There are, of course, other types like this, like 32 bit ints, with the same signed and unsigned varients, but ranging from -2147483648 to 2147483647 for the signed version\nMutability # [TODO]\nWhen writing code… # One helpful thing when writing code is to \u0026lsquo;comment out\u0026rsquo; some code, this is a big deal when trying to figure out why something doesn\u0026rsquo;t work. Here, for example, the a = a + 1 line never happens because it\u0026rsquo;s been put into a comment. It could be made to run again by removing the #\n1 2 3 a = 1 #a = a + 1 print(a) You\u0026rsquo;ll also probably find it handy to print out information to the screen about what your program is doing - Print Debugging. This isn\u0026rsquo;t great practice as there\u0026rsquo;s usually better ways to find bugs than this, but it\u0026rsquo;s still pretty useful, and good as a first way of finding something quickly. Here, for example, we\u0026rsquo;re displaying the values of a and b, as well as outputting text so we can make sure something is actually progressing.\n1 2 3 4 5 6 7 8 9 a = # some really long, complex equation for which you\u0026#39;re not sure of the result print(a) b = # another really long, complex equation for which you\u0026#39;re not sure of the result print(b) c = isPrime(a) for i in range(1:10): print(i) c = doReallComplexThingThatTakesAWhile(a,b*i) print(\u0026#34;did complex thing, doing it again...\u0026#34;) object orientation # try/catch, assert # Pointers # So, this is the part that when learing lower level programming languages makes everyone\u0026rsquo;s head spin, and, unfortunately, it\u0026rsquo;s still somewhat relevant in Python, just less so.\nSo, let\u0026rsquo;s go back to when we initialized all of those variables\n1 2 3 4 a = 1 b = 2 c = 3 ... When we do this, the computer has to store them somewhere in it\u0026rsquo;s memory. We can (kinda) see this location in memory by using the id() command. The first weird thing you\u0026rsquo;ll notice is that while id(a) will stay the same if you run it repeatedly, if you close python, set a=1 again, and rerun id(a) the number will change. That\u0026rsquo;s because this \u0026lsquo;id\u0026rsquo; is really where in memory the data is being stored, and each time to run python the computer is going to put it somewhere else(3). The is command is python is actually checking if these id\u0026rsquo;s are the same, not if the value is the same. This harkens back to object orientation- remember, we could make a bunch of objects, lets say cows, we could have two cows with the same name, same color, same age, etc. but if they\u0026rsquo;re two different cows, they\u0026rsquo;re still two different cows, and is will reflect this. They make be equal in every other regard, but one cow is not the other cow, they\u0026rsquo;re still distinct objects.\nThis can get really fucking weird. One of the weirdest things about python in regards to this is (usually) python will pre-allocate a place to store low integer numbers, so, if you make two variables with low integer numbers, they\u0026rsquo;ll actually point to the same memory location at first…\n1 2 3 a = 1 b = 1 a is b #This is true but, if we make these really big…\n1 2 3 4 5 6 7 8 9 10 11 12 13 a = 12345 b = 12345 a is b #This is false a == b #This is True a = b a is b #This is true now, because python has, for now, # updated both to point to the same location a = 67890 #assigning a new value will change it\u0026#39;s location, note this wouldn\u0026#39;t happen # in other languages - changing the value wouldn\u0026#39;t change it\u0026#39;s address, but # then, assigning a second variable wouldn\u0026#39;t make them share the same # address in other languages either. a is b #now has a distinct address (and value) again, this will be false. and this makes sense, because in the first case if we ran id(a) and id(b), we\u0026rsquo;d see they both share an id, while in the latter case they don\u0026rsquo;t. What you want to do to check equality is use the == operator, not is.\nOkay, so, this is nice and all, but why else does it matter? Well, sometimes you\u0026rsquo;ll see something like\n\u0026lt;__main__.myClass object at 0x0A2B4C6D\u0026gt; and that weird number is actually it\u0026rsquo;s address, represented in hexadecimal - that is, it should be the same as hex(id(object))\nbut more importantly, you\u0026rsquo;ll be using pointers a heck of a lot more when we go lower level, so it\u0026rsquo;s worth understanding them now. It\u0026rsquo;s okay if I lost you a bit here, they\u0026rsquo;ll make more sense later when we\u0026rsquo;re in a language that doesn\u0026rsquo;t go out of its way to hide them from us.\nRecursion (You won\u0026rsquo;t actually use this all that much) # There is an old joke that in order to understand recursion, you must first understand recursion. If that joke makes sense, you understand it.\nWell, you might at least. The concept can be understood with some study, but significant percentage of professional programmers still get it wrong when they try to use it!\nThis is something to meditate on, and do some experiments. If you don\u0026rsquo;t quite get it from one reading, don\u0026rsquo;t feel bad.\nLet\u0026rsquo;s give it a try. Consider this function:\n1 2 3 4 5 6 def unfolded_sum(n): if n == 1: return n else: s = unfolded_sum(n-1) return s + n New programmers are often confused by this. How can a function refer to itself?\nIn order to understand this, we have to get into the way that functions actually work.\nThink back to the previous example under functions. The program had to keep track of a as it went through each iteration of the for loop, and yet, x in the function f had to be kept separate.\nThis was achieved by keeping a copy of variables within a function in a different area of memory. What the programming language actually did was to copy the value of the variable a into a specific context for f, and named it x. When f got to the end, that copy went away.\nIn Python, you can use some special syntax to view this if you have the window open where you typed the Functions example:\n1 2 3 4 \u0026gt;\u0026gt;\u0026gt; print(f) \u0026lt;function f at 0x7fd36d4d9820\u0026gt; \u0026gt;\u0026gt;\u0026gt; print(f.__code__.co_varnames) (\u0026#39;x\u0026#39;,\u0026#39;string\u0026#39;) There\u0026rsquo;s x, the copy. The variable belongs to the function, which means it had to copy the value into that new slot. Every time the function was called, it had to create a new slot. Otherwise, it would clobber the value of a, or run with the wrong value!\nGiven this, perhaps the code above will make more sense:\n1 2 \u0026gt;\u0026gt;\u0026gt; print(unfolded_sum.__code__.co_varnames) (\u0026#39;n\u0026#39;, \u0026#39;s\u0026#39;) Just like before, each time we call the function, n is copied in, and s is copied out. But what happens to n on line 5?\nThe answer is the same as before: s is copied to n \u0026ndash; a new n. This \u0026ldquo;inner n\u0026rdquo; then begins at the top of the code on line 2.\nThe result looks like this if it were called with 3:\nz = unfolded_sum(3) ↳ NEW CALL n = 3 if n == 1 → False s = unfolded_sum(3-1) ↳ NEW CALL n = 2 if n == 1 → False s = unfolded_sum(2-1) ↳ NEW CALL n = 1 if n == 1 → True return n s = 1 ↲ return s + n s = 3 ↲ return s + n z = 6 ↲ The series of memory spaces for these calls grow at one end, and then shrink back down. This data structure is called a \u0026ldquo;stack\u0026rdquo; when written in code, and the programming language uses a call stack to keep track of these copies.\nThe call stack is very important to understand most programming languages, and Python is no exception. Even when you are not doing recursion, you will get a call stack trace when debugging.\nStack trace # [TODO]\nLibraries # One of the really nice things about python is that there\u0026rsquo;s a library for just about anything you might want to do. It\u0026rsquo;s easier to show than tell, so let\u0026rsquo;s start by trying the turtle library, which you can find basic documenation for here. I\u0026rsquo;ll steal the example code from that page:\n1 2 3 4 5 6 7 8 9 10 from turtle import * color(\u0026#39;red\u0026#39;, \u0026#39;yellow\u0026#39;) begin_fill() while True: forward(200) left(170) if abs(pos()) \u0026lt; 1: break end_fill() done() if you either save that code in a .py file and run it or type it in to a prompt line by line, you should be able to get the same many-point star output as shown on the page. This is the power of a library. You didn\u0026rsquo;t have to try to figure out how to make something that would understand what left() or begin_fill() means, the turtle library provided all of that for you.\nSimilarly, you could use the Tensorflow library for working with machine learning, matplotlib to generate graphs, beautiful soup to scrape the web, mido to sequence music, tweepy to make a twitter bot, nltk to process natural language\nSome simple programs # Hello World # [TODO]\nEven or Odd # [TODO]\nPrime Numbers # [TODO]\nCalculating sine and pi # Sorting a list # Palindromes # Cypher # Making a full project # Part 0, Git # Before we get started, I want to be sure you took the time to read the section on Git in Chapter 6.1 above. If you need to refer to a cheat sheet you can look in Apendix B.\nPart 1, Starting easy # [TODO] guide to write an OO python program with libraries to read and write entries to a database-like file and a real database the database should have 3 tables, a to-do list, a time-tracker list, and a list of articles\nTo-do: NAME, DUEDATE time-tracker: 2types, either manually enterend with NAME, TSTART, TSTOP or NAME, TTOTAL for the following program articles: NAME, PUBLISHED, TPUB, TEDIT\nwe\u0026rsquo;ll need some way to track what items in the time tracker were started, but never stopped\nfor now, everything should be strictly command line arguments and print statments\nMore advanced topics # [TODO] Move this section\nLambdas # [TODO]\nA little more practice # Weird projects\nEasing into Graphical Programming with Creative Coding # http://feed.grantcuster.com/\nCoding Adventure: Ray Marching (YouTube)\nCoding Adventure: Marching Cubes(Youtube)\nCoding Adventure: Portals (YouTube)\nwhitespace literally means the 'blank' characters - like spaces and tabs, which do actually matter in python. meaning we didn't make a varible called 'hello' and give it a value There's a lot of \"uhm, actually\" to be said here, but go with it. "},{"id":124,"href":"/engineering/programming/compilers/commands/","title":"Commands","section":"Engineering","content":" Commands # [TODO]\n"},{"id":125,"href":"/engineering/programming/compilers/conclusion/","title":"Conclusion","section":"Engineering","content":" Conclusion # [TODO]\n"},{"id":126,"href":"/engineering/programming/compilers/conditionals/","title":"Conditionals","section":"Engineering","content":" Conditionals # [TODO]\n"},{"id":127,"href":"/engineering/programming/compilers/generation/","title":"Generation","section":"Engineering","content":" Code Generation # As I said earlier, there is no way that you can write a proper compiler on your own, due to the amount of work involved.\nBut new languages are invented by individual people all the time. How is this possible? The answer is, they use a backend framework or library for this part.\nThis is the part where the Intermediate Representation (IR) comes it. It is determined by the library being used, which means the language itself can be abstracted away. Just convert any syntax you\u0026rsquo;re doing to that IR.\nFortunately, most of these libraries use similar concepts and representations, because they make the backends easy to implement and programs easy to optimize. In order to know what we\u0026rsquo;re looking at, let\u0026rsquo;s go through basic concepts first.\nBasic Building Blocks: names, instructions, and blocks # A common representation of a program initially is a control-flow graph. Each node is called a block, and represents a single \u0026ldquo;chunk\u0026rdquo; of instructions with one entry point and multiple exits.\nFor example, consider this psudeocode:\n1 2 3 4 5 6 while n \u0026lt; 10 x = read integer from file array[n] = x n = n + 1 end while print array[0] This would be broken into 3 blocks. Note, all the logic in the loop can be thought of as a single block, as the operations are consecutive without any conditional logic (as long as me assume \u0026ldquo;read integer from file\u0026rdquo; can\u0026rsquo;t fail)\ngraph LR A(\"Start\") --\u003e B[n \u003c 10] C --\u003e D(End) B --\u003e|true| E subgraph Loop E[\"x = read integer from file;\"] E --\u003e F[\"array[n] = x;\"] F --\u003e G[\"n = n + 1;\"] end G --\u003e B B --\u003e|false| C[\"print array[0]\"] style A fill:#9F9 style D fill:#F99 style Loop color:#fff,fill:#333 You can perhaps see how this is useful to the compiler: when it wants to do things like eliminating dead code, rearranging conditionals, or inlining a function to its caller, it just has to move some arrows around independent of the contents.\nAs for the blocks themselves, what do they contain? Surprise surprise, each statement turns out to be something like a tree! The root is called an r-value, that is the result of an expression. Exactly which operations depend on the specific backend, but walking the tree is an easy way to build these.\nFinally, we have functions. A function is basically a block with a name \u0026ndash; usually a symbol by the time the compiler passes the code off to the linker. In particular, these names can be imported or exported.\nFor example, if we want our language to print something, we need to import the print function from something that can interact with the rest of the system. Simliarly, if we want to (spoiler alert) support subroutines at some point, that means we need to export the name of our subroutine to be called by other code.\nRemember that by the time we get to this phase, we already have our program as a giant tree, with operations as parent nodes and integers as leaf nodes.\nIt should be pretty easy to make one big block that contains a single rvalue each time the user presses enter. So let\u0026rsquo;s do it!\nSetting up libgccjit # While LLVM is popular, we\u0026rsquo;ll use libgccgit. It is a library that ship with GCC to create an API for a just-in-time compiler, which is what we\u0026rsquo;re really building here.\nThe reason we\u0026rsquo;re picking it is not because it\u0026rsquo;s more popular \u0026ndash; in fact, being GPL, a lot of projects don\u0026rsquo;t like it. However, it does have one good feature: a C API that it is possible to bind to Python. To achieve this, we will use an FFI translation tool called SWIG.\nFirst, verify your installation of GCC, and libgccjit. There may be different packages depending on your distro. If you\u0026rsquo;re on Arch, the package libgccjit is available in the core repo. The docs have a hello world test example you can run to verify this.\nOnce it works, find the path to the header file that the example used. On my system running Arch, it\u0026rsquo;s /usr/include/libgccjit.h. But it likely depends on your distro.\nSWIG is based on \u0026ldquo;interface files\u0026rdquo;, which describes some properties about the library being bound. There is no point going deep into the syntax, because the library \u0026ldquo;just works\u0026rdquo; \u0026ndash; almost.\nJust a few extra definitions are needed. Copy-paste this and trust me, just this once.\ngcccjit.i DOWNLOAD\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 %module gccjit %{ #define SWIG_FILE_WITH_INIT #include \u0026lt;libgccjit.h\u0026gt; %} // This tells SWIG to treat char ** as a special case %typemap(in) char ** { /* Check if is a list */ if (PyList_Check($input)) { int size = PyList_Size($input); int i = 0; $1 = (char **) malloc((size+1)*sizeof(char *)); for (i = 0; i \u0026lt; size; i++) { PyObject *o = PyList_GetItem($input, i); if (PyString_Check(o)) { $1[i] = PyString_AsString(PyList_GetItem($input, i)); } else { free($1); PyErr_SetString(PyExc_TypeError, \u0026#34;list must contain strings\u0026#34;); SWIG_fail; } } $1[i] = 0; } else { PyErr_SetString(PyExc_TypeError, \u0026#34;not a list\u0026#34;); SWIG_fail; } } // This cleans up the char ** array we malloc\u0026#39;d before the function call // Copied from the SWIG documentation, so beware the license! %typemap(freearg) char ** { free((char *) $1); } // This tells SWIG to treat gcc_jit_param ** as a special case %typemap(in) gcc_jit_param ** { /* Check if is a list */ if (PyList_Check($input)) { int size = PyList_Size($input); int i = 0; $1 = (gcc_jit_param **) malloc((size+1)*sizeof(gcc_jit_param *)); for (i = 0; i \u0026lt; size; i++) { if(SWIG_ConvertPtr(PyList_GetItem($input, i), (void **)\u0026amp;$1[i], $descriptor(gcc_jit_param *), 0) \u0026lt; 0) { PyErr_SetString(PyExc_TypeError, \u0026#34;in function \u0026#39;$symname\u0026#39;, expecting type gcc_jit_param\u0026#34;); SWIG_fail; } } $1[i] = 0; } else { PyErr_SetString(PyExc_TypeError, \u0026#34;not a list\u0026#34;); SWIG_fail; } } // This cleans up the gcc_jit_param ** array we malloc\u0026#39;d before the function call // Copied from the SWIG documentation, so beware the license! %typemap(freearg) gcc_jit_param ** { free((gcc_jit_param *) $1); } // This tells SWIG to treat gcc_jit_rvalue ** as a special case // Derived from the SWIG documentation, so beware the license! %typemap(in) gcc_jit_rvalue ** { /* Check if is a list */ if (PyList_Check($input)) { int size = PyList_Size($input); int i = 0; $1 = (gcc_jit_rvalue **) malloc((size+1)*sizeof(gcc_jit_rvalue *)); for (i = 0; i \u0026lt; size; i++) { if(SWIG_ConvertPtr(PyList_GetItem($input, i), (void **)\u0026amp;$1[i], $descriptor(gcc_jit_rvalue *), 0) \u0026lt; 0) { PyErr_SetString(PyExc_TypeError, \u0026#34;in function \u0026#39;$symname\u0026#39;, expecting type gcc_jit_rvalue\u0026#34;); SWIG_fail; } } $1[i] = 0; } else { PyErr_SetString(PyExc_TypeError, \u0026#34;not a list\u0026#34;); SWIG_fail; } } // This cleans up the gcc_jit_rvalue ** array we malloc\u0026#39;d before the function call // Derived from the SWIG documentation, so beware the license! %typemap(freearg) gcc_jit_rvalue ** { free((gcc_jit_rvalue *) $1); } %include \u0026lt;libgccjit.h\u0026gt; Between the example and the interface file, it\u0026rsquo;s best to just create a GNU Makefile which will build the Python library:\nMakefile DOWNLOAD\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # This line may need changed depending on your distribution. GCC_INCLUDE_DIR ?= /usr/include GCC = gcc-10 all: _gccjit.so .PHONY: all clean: rm -f _gccjit.so gccjit_wrap.c example gccjit.py .PHONY: clean example: example.c $(GCC) -o $@ $\u0026lt; -lgccjit _gccjit.so: gccjit_wrap.c $(GCC) -fPIC -shared -o $@ -I/usr/include/python3.8 -I$(GCC_INCLUDE_DIR) gccjit_wrap.c -lgccjit gccjit_wrap.c gccjit.py: gccjit.i swig -python -outcurrentdir -I$(GCC_INCLUDE_DIR) gccjit.i After running make, it should be possible to enter Python and type:\n1 import gccjit This should then load successfully!\nUse of libgccjit # In brief, here is the approach we should take according to the documentation. In response to each line being parsed:\nCreate a \u0026ldquo;context\u0026rdquo; for compilation. Create a block which evaluates the tree of integer operations. Give that block a name, and export it as a function. Call that new function. Put the result on the top of our stack. Since we have relied on SWIG to be mostly automatic, it gives us a \u0026ldquo;raw\u0026rdquo; C API, so it\u0026rsquo;s not pretty. But, it\u0026rsquo;s functional, and hopefully easy to follow.\n[TODO finish this section]\n"},{"id":128,"href":"/engineering/programming/compilers/intermezzo/","title":"Intermezzo","section":"Engineering","content":" Intermezzo # At this point, we have something that is ugly looking, but seems like a real compiler! After all, it does the four stages as promised:\nLexing: the splitting of whitespace and division of tokens Parsing: the creation of the syntax tree based on ordering of operations Translation: a no-op, because the syntax tree is good enough Code Generation: Python \u0026ldquo;machine code\u0026rdquo; as valid infix math, or a JIT library running routines But still, you can\u0026rsquo;t really call this a langauge. Even aside from Turing Completeness, it\u0026rsquo;s really missing some basic features: variables, flow control and other math operations.\nMore subtle and fundamental is that each \u0026ldquo;program\u0026rdquo; is a single statement. There isn\u0026rsquo;t even an ability to have a subroutine you can define then call into, let alone do things like recursion.\nLet\u0026rsquo;s see if we can add a couple. Then perhaps these tools and approaches will stop seeming like overkill and boilerplate, and start to shine.\n"},{"id":129,"href":"/engineering/programming/compilers/intro/","title":"Intro","section":"Engineering","content":" Chapter 22 - Custom Languages # Some people like playing around with new programming languages, or concepts in Programming Language Theory (PLT). In order to do this outside of pure mathematics, anyone who does will have to learn how to write a compiler for their new language.\nUnfortunately, compilers are some of the most complex pieces of software out there, along with operating system kernels. Especially when talking about a common compiler for well-established language, there is no way a single guide on the internet can teach you how to write one.\nPopular open source compilers have effort in them measured in engineer-decades, and they still have tons of bugs.\nHowever, there is still value in learning the basics:\nThe architecture of compilers can be applied to other data processing problems. The terms and concepts may make error messages more understandable when they come out of the popular compiler you are using. A small custom language (usually called a Domain Specific Language, or DSL) can provide a lot of bang for the buck on certain kinds of problems. Maybe you are trying to learn about Programming Language Theory. Writing your own language is not for the faint of heart, but it will certainly teach you a lot. This chapter will thus focus on the high-level principles of compiler design, as well as providing common techniques and points of further research.\nGetting started # In traditional compiler design, the problems a compiler must solve are split into phases, each of which should (at least in theory) have a clean API to the next.\nFrom the Dragon Book, here are the phases we will focus on:\nLexical analysis: the program is transformed from a text string into a series of \u0026ldquo;tokens\u0026rdquo;, each of which represents a basic building block of the programming language, as well as any additional metadata needed by future stages. Operators, variables, keywords, and identifiers are all different types of token. Syntax analysis: the stream of tokens is organized into syntax constructs based on the rules of the language \u0026ndash; or if it cannot be, error messages are generated. Expressions, statements, assignments, blocks, conditionals, etc. are structures that are created during this phase. Often, the entire program is often represented as tree structure called an Abstract Syntax Tree (AST). Syntax directed translation: the AST is walked by different forms of analysis, results in the compiler taking actions: creating variables, analyzing program flow, determining the acutal instructions the program should follow, and so on. This varies widely between compilers in their approach, but many compilers create a representation of program semantics that is designed to be easy to structure by the next phase, often called an Intermediate Representation (IR). Code generation: the IR is converted to assembly or machine instructions of the actual machine which will execute the program. As noted in other sections, other steps such as assembling and linking, are likely still required. We will start with an example that is quite simple, and go into some depth. Our goal is to enhance it and come up with something more powerful and more \u0026ldquo;compiler like\u0026rdquo; in the course of these sections. And perhaps you can learn something along the way.\nStrap in and get ready for some serious coding!\n"},{"id":130,"href":"/engineering/programming/compilers/lexing/","title":"Lexing","section":"Engineering","content":" Lexical analysis # The transformation of source code text into a series of tokens is the first task. Much like words in a sentence, each token has a specific meaning that will be used by later phases. It is this meaning that is being captured, while the exact formatting or other details of the text itself are stripped away.\nIn our calculator, lexing (as it is called for short) is just one operation: line.split(). That\u0026rsquo;s it.\nIt is trivial to turn a numeric string into its integer value in the language: call the Python function int(). The operators are, of course, addition and multplication, which are represented by one character each.\nWhile line.split() is not exactly a fancy lexer, it works well enough as an example. That said, it is not very robust, and it falls on its face in some rather silly cases. For example:\n\u0026gt; 2 3+ ^ syntax error: unknown token It\u0026rsquo;s clear what the programmer meant, and spaces aren\u0026rsquo;t meaningful except to separate numbers from each other. How can this be handled?\nCreating Tokens # The general philosophy is to group the characters from the input into tokens. That is, carriers of their meaning and metadata.\nThere are many tools to generate a lexer for your language, such as the long-standing GNU flex for C, or the more modern RPLY library for Python. The basic idea behind them is all the same: some form of finite state machine, where the \u0026ldquo;final\u0026rdquo; states indicate that a recognized token was identified.\nRather than using these tools, our language is simple enough, we can use our own state machine seen all over the Linux world: regular expressions (\u0026ldquo;regexes\u0026rdquo; for short). They do exactly what a lexer does: match text against a specified pattern. In fact, many lexer generators allow tokens to be \u0026ldquo;described\u0026rdquo; with regular expressions!\nFor our language, here is an example of the table we will use, containing the tokens we have and how to match them:\nToken Type Regex Number 0|([1-9][0-9]*) Operator \\+|\\* Whitespace \\s+ The syntax of regular expressions is quite complex, so if you cannot read this, I would recommend a regex \u0026ldquo;calculator\u0026rdquo; such as this one in order to explore them.\nFor now, though, let\u0026rsquo;s build a simple test program to try them out. Rather than matching on specific characters, we will try each regular expression in the order they were in our table.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import re # raw strings are to make sure that the back slashes are not interpreted by Python itself number_re = r\u0026#39;0|([1-9][0-9]*)\u0026#39; oper_re = r\u0026#39;\\+|\\*\u0026#39; whitespace_re = r\u0026#39;\\s+\u0026#39; while True: line = input(\u0026#34;\u0026gt; \u0026#34;) orig_line = line pos = 0 while len(line) \u0026gt; 0: # try to match all of the token types starting at the line beginning re_m = re.match(number_re, line) op_m = re.match(oper_re, line) ws_m = re.match(whitespace_re, line) # the matching regex returns a match object rather than None if re_m is not None: print(\u0026#34;Number token: {}\u0026#34;.format(re_m.group(0))) # group(0) gets the entire match # since we are at the beginning, the end position of the match is the length pos += re_m.end() line = line[re_m.end():] elif op_m is not None: print(\u0026#34;Operator token: {}\u0026#34;.format(op_m.group(0))) pos += op_m.end() line = line[op_m.end():] elif ws_m is not None: print(\u0026#34;Whitespace token: \u0026#39;{}\u0026#39;\u0026#34;.format(ws_m.group(0))) pos += ws_m.end() line = line[ws_m.end():] else: # if none match, then it\u0026#39;s an invalid character print(orig_line) print(\u0026#39; \u0026#39; * pos + \u0026#39;^\u0026#39;) print(\u0026#34;error: unknown token\u0026#34;) break And let\u0026rsquo;s try some inputs:\n\u0026gt; 2 3 + Number token: 2 Whitespace token: \u0026#39; \u0026#39; Number token: 3 Whitespace token: \u0026#39; \u0026#39; Operator token: + \u0026gt; 2 3 + Number token: 2 Whitespace token: \u0026#39; \u0026#39; Number token: 3 Whitespace token: \u0026#39; \u0026#39; Operator token: + \u0026gt; 2 3 + * zzzz Number token: 2 Whitespace token: \u0026#39; \u0026#39; Number token: 3 Whitespace token: \u0026#39; \u0026#39; Operator token: + Whitespace token: \u0026#39; \u0026#39; Operator token: * Whitespace token: \u0026#39; \u0026#39; 2 3 + * zzzz ^ error: unknown token Notice that the token will be as many characters as match the regular expression. This is referred to as \u0026ldquo;greedy matching\u0026rdquo;.\nLater, we will discover a trap with this: how would you match = versus == for example? This is known as a conflict. In our lexer, we are handling it by saying that the first regex wins. Order them correctly and carefully, and everything will go well.\nBut enough foreshadowing. There is one more key subject in this part.\nHandling Errors # The example code just prints out the tokens, including errors. But if we are streaming our tokens to someone else, how do we handle errors?\nThe easiest way \u0026ndash; and the way our code will do it \u0026ndash; is to create an \u0026ldquo;error token\u0026rdquo;, and stop parisng any more tokens. We are relying on the code that called us to return that error to the user.\nPutting it all together # Let\u0026rsquo;s integrate that into our program.\nOur token type is simple: a dictionary of values. It will have metadata related to position so that we can print the arrow in the right place. It will have the token type, and value if relevant.\nWe will make it into a stand-alone function, taking a string and parsing it into a list of tokens which are returned.\nThe Final Lexer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import re # raw strings are to make sure that the back slashes are not interpreted by Python itself number_re = r\u0026#39;0|([1-9][0-9]*)\u0026#39; oper_re = r\u0026#39;\\+|\\*\u0026#39; whitespace_re = r\u0026#39;\\s+\u0026#39; def lex_line(line): orig_line = line pos = 0 output_tokens = [] while len(line) \u0026gt; 0: # try to match all of the token types with \u0026#39;^\u0026#39; -- beginning of the line re_m = re.match(number_re, line) op_m = re.match(oper_re, line) ws_m = re.match(whitespace_re, line) if re_m is not None: next_token = {\u0026#39;pos\u0026#39;: pos, \u0026#39;kind\u0026#39;: \u0026#39;int\u0026#39;, \u0026#39;value\u0026#39;: int(re_m.group(0))} pos += re_m.end() line = line[re_m.end():] elif op_m is not None: next_token = {\u0026#39;pos\u0026#39;: pos, \u0026#39;kind\u0026#39;: \u0026#39;op\u0026#39;, \u0026#39;value\u0026#39;: op_m.group(0)} pos += op_m.end() line = line[op_m.end():] elif ws_m is not None: next_token = {\u0026#39;pos\u0026#39;: pos, \u0026#39;kind\u0026#39;: \u0026#39;space\u0026#39;} pos += ws_m.end() line = line[ws_m.end():] else: next_token = {\u0026#39;pos\u0026#39;: pos, \u0026#39;kind\u0026#39;: \u0026#39;error\u0026#39;, \u0026#39;value\u0026#39;: line[0]} output_tokens.append(next_token) return output_tokens output_tokens.append(next_token) return output_tokens "},{"id":131,"href":"/engineering/programming/compilers/parsing/","title":"Parsing","section":"Engineering","content":" Syntax analysis # Our syntax analysis phase, or \u0026ldquo;parsing\u0026rdquo;, is basically a no-op in the current version. This is possible because, thanks to our stack having a \u0026ldquo;guard zero\u0026rdquo; at the bottom, there is really no such thing as a program with only valid tokens that is invalid syntax.\nThis makes it a very rare language indeed.\nSince we are doing math in a specific order of operations, it would be easy to make this into a tree. Each leaf is a number, and each middle node is an operator.\nThis would then allow separating the evaluation from the actual parsing and determining order of operations. In this simple language it is extra work, but real compilers will mostly focus on manipulating and reading the structure of the Abstract Syntax Tree (Wikipedia) (AST) when creating their intermediate representation.\nIn order to save time and keep the code simple, let\u0026rsquo;s use the binarytree python library. I\u0026rsquo;m using version 6.5.1 for this exercise.\nOnce it\u0026rsquo;s installed, add this to the top:\n1 from binarytree import Node And then, re-write the main parsing loop to fold nodes together in a tree, rather than just doing the calculation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # requires package: binarytree==6.5.1 from binarytree import Node, get_parent def parse_tokens(tokens): # parse, but now build a tree nodes = [] for token in tokens: # decide what the token of the string is. there are several options # 1. is it a number? append in on the stack if token[\u0026#39;kind\u0026#39;] == \u0026#39;int\u0026#39;: nodes.append(Node(token[\u0026#39;value\u0026#39;])) # 2. is it an operator? then put the last children into a tree with it elif token[\u0026#39;kind\u0026#39;] == \u0026#34;op\u0026#34;: left = nodes.pop() right = nodes.pop() nodes.append(Node(token[\u0026#39;value\u0026#39;], left=left, right=right)) # 3. otherwise it should be whitespace. there is no other token type elif token[\u0026#39;kind\u0026#39;] != \u0026#39;space\u0026#39;: print(\u0026#34; \u0026#34; * token[\u0026#39;pos\u0026#39;] + \u0026#34;^\u0026#34;) print(\u0026#34;internal error: unknown token\u0026#34;) break return nodes At this point, doing print(nodes[-1]) \u0026ndash; the last generated expression \u0026ndash; should print the entire tree (assuming the user correctly completed it).\n\u0026gt; 2 3 + + / \\ 3 2 \u0026gt; 2 3 4 + * __* / \\ + 2 / \\ 4 3 Thus, we have completed the parsing stage.\nFrom this point on, our program can stop worrying about tokens, or syntax errors in the file, and instead, focus on semantics \u0026ndash; what does the program mean, and what instructions should we generate to execute it.\n"},{"id":132,"href":"/engineering/programming/compilers/prelude/","title":"Prelude","section":"Engineering","content":" Prelude: A Reverse Polish Notation Calculator # In order to get a footing, we\u0026rsquo;ll start with an example: a calculator that uses postfix operator notation, sometimes called \u0026ldquo;reverse polish notation.\u0026rdquo;\nIn this calculator, all arguments are placed onto a stack. Whenever an operator occurs, it pops values off the stack at that point, performs the operation, and pushes the answer back on.\nAll operations are binary, so they take two operands from the stack and replace it with one result. To simplify matters, if the stack is has only one operand on it when an operator is called, the other operand is zero.\nThe calculator takes one line of calculation at a time. If there are leftover elements, it will print the top of the stack, which was the result of the last operation.\nHere are some examples, with \u0026gt; marking the user input prompt:\n\u0026gt; 1 1 \u0026gt; 1 2 2 \u0026gt; 2 3 + 5 \u0026gt; 2 3 * 4 5 * + 26 \u0026gt; 2 3 4 + * 14 \u0026gt; 2 3 4 5 * * + 62 Our Reference Implementation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 # this is a stack of numbers being stored for operation number_stack = [] def push_num(n): number_stack.append(int(n)) def pop_num(): # the stack has a 0 \u0026#34;pinned\u0026#34; to the bottom of it if len(number_stack) == 0: return 0 else: return number_stack.pop() while 1: number_stack[:] = [] print(\u0026#34;\u0026gt; \u0026#34;, end=\u0026#34;\u0026#34;) line = input() if line.startswith(\u0026#39;q\u0026#39;): break # step one: break the line into pieces # keeping track of position parts = line.split() pos = 1 # not zero due to an offset in the prompt for part in parts: pos += len(part) # decide what the part of the string is. there are several options # 1. is it a number? append in on the stack if part.isdigit(): push_num(part) # 2. is it an addition? pop two items and add them, then append elif part == \u0026#34;+\u0026#34;: push_num(pop_num() + pop_num()) # 3. is it a multiplication? same idea elif part == \u0026#34;x\u0026#34; or part == \u0026#34;*\u0026#34;: push_num(pop_num() * pop_num()) # 4. if it is a blank, then that means we can skip it # otherwise, finally if it\u0026#39;s anything else, ther is a syntax error elif part != \u0026#39;\u0026#39;: print(\u0026#34; \u0026#34; * pos + \u0026#34;^\u0026#34;) print(\u0026#34;syntax error: unknown token\u0026#34;) break pos += 1 # account for the space # in case of a syntax error, it was printed, so continue to the next line if pos == len(line) + 1: continue else: print(number_stack[-1]) DOWNLOAD - Note, you\u0026rsquo;ll need to put spaces between each token and press enter to run a line.\nAt a high level, it turns out the calculator is doing many of the phases of a compiler! Sort of.\nIt is doing lexical analysis: splitting up the program into numbers and the operators to execute on them.\nIt is doing syntax analysis: identifying what operations to do, and keeping track of the order to do them in, which determines their operands.\nIt is using those syntax understandings to take action. It executes them immediately, which makes it an interpreter rather than a compiler, and isn\u0026rsquo;t really \u0026ldquo;translation\u0026rdquo;, but the idea is still there.\nIt is so simple mostly because of the simplicty of the \u0026ldquo;language.\u0026rdquo; It has only one type (integer), no variables, and not even any control flow. In fact, it is not even Turing Complete!(1)\nWhile there is no way to make this into a language like C or Python without a total re-write, perhaps we can fix these shortcomings and come up with something more powerful in the course of these sections. And perhaps we can learn something along the way.\nTo make things easier to follow, and facilitate changing one piece at a time, I\u0026rsquo;m going to create a python package called calc_lang. If you\u0026rsquo;re not familiar with python packages, here\u0026rsquo;s an overview. From now on, all \u0026ldquo;final code\u0026rdquo; examples will be in the package.\nAside from the lack of control flow, this is because our abstract machine requires data to be accessed in stack order (LIFO). Even if memory and the number of operations were infinite (as is the case in a Turing machine), this data access pattern makes certain problems uncomputable. In order to make it Turing complete, at least one operation that allows random access (i.e. read from the middle without deleting the data above it) is necessary. This was proven several decades ago.\nIt would suffice, for example, to add a second parallel stack, and let operations choose between them. It would also suffice to force data accesses into queue order (FIFO) instead.\n"},{"id":133,"href":"/engineering/programming/compilers/subroutines/","title":"Subroutines","section":"Engineering","content":" Subroutines # [TODO]\n"},{"id":134,"href":"/engineering/programming/compilers/translation/","title":"Translation","section":"Engineering","content":" Syntax-Directed Translation # This stage is where we get an opportunity to modify and restructure the tree from a syntax point of view, into a semantic point of view.\nTo avoid \u0026ldquo;How to Draw an Owl Step 2: Finish the Owl\u0026rdquo;, we will continue with the interpteter theme for the moment. Instead of figuring out all the analyses required, let\u0026rsquo;s ask: what intermediate representation can be interpreted by Python?\nPython is quite nice in that it will simply evaluate any mathematical expression for you if it is standalone. If our compiler can create something we can eval, then that means it is valid \u0026ldquo;machine code\u0026rdquo; for the \u0026ldquo;machine\u0026rdquo; we are targeting.\nThe way to do this is to convert our tree into a standard infix expression. The two trees from earlier would respectively be:\n\u0026gt; 2 3 + (2 + 3) \u0026gt; 2 3 4 + * ((4 + 3) * 2) Both of those outputs are valid python expressions that can simply be passed to eval to get our answer.\nThe easiest conversion method is to use a clever 2016 Paper which describes an algorithm called BAIT: Bracket Algorithm for Infix Traversal.\nIt applies parentheses (\u0026ldquo;brackets\u0026rdquo;) to each leaf node (containing a number) based on its position in the tree. Once this has been applied, doing an infix traversal on the tree and concatenating it into a single string will get a correct textual representation.\nAt this point expr is the output string above if printed. Apply that repeatedly, and we get our final code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 # requires package: binarytree==6.5.1 from binarytree import Node, get_parent def exprs_from_tree(nodes): # build an expression in python out of the tree using an in-order traversal # combined with a bracket algorithm described here: # https://www.um.edu.mt/library/oar/bitstream/123456789/14892/1/ # Converting%20a%20binary%20tree%20expression%20to%20infix%20 # notation%20using%20the%20BAT%20algorithm.pdf def _uphill_search(root, node): p = get_parent(root, node) if p is None: return 0, \u0026#39;left\u0026#39; if p.right == node: direction = \u0026#39;right\u0026#39; else: direction = \u0026#39;left\u0026#39; order = 0 while True: node = p order += 1 p = get_parent(root, node) if p is None: break if p.right == node: newdir = \u0026#39;right\u0026#39; else: newdir = \u0026#39;left\u0026#39; if newdir != direction: break return order, direction while len(nodes) \u0026gt; 0: for leaf in nodes[-1].leaves: order, direction = _uphill_search(nodes[-1], leaf) if direction == \u0026#39;left\u0026#39;: if isinstance(leaf.value, int): leaf.value = str(leaf.value) leaf.value = \u0026#39;(\u0026#39; * order + leaf.value else: if isinstance(leaf.value, int): leaf.value = str(leaf.value) leaf.value = leaf.value + \u0026#39;)\u0026#39; * order expr = \u0026#39; \u0026#39;.join(n.value for n in nodes[-1].inorder) yield expr del nodes[-1] "},{"id":135,"href":"/engineering/programming/compilers/variables/","title":"Variables","section":"Engineering","content":" Variables # [TODO]\n"},{"id":136,"href":"/engineering/programming/data/","title":"Data","section":"Engineering","content":" Chapter 15½ - Data, Encodings, Compression, etc. # When you write code, you\u0026rsquo;ll inevitably be working with input and output of some sort - even if it\u0026rsquo;s just text. This is always more complicated than it seems. For example, text processing is easy, right?\n🚫, 🅘🄣\u0026rsquo;s 🇳ot.\nEven text encoding is a massive pain, unless you can ensure you only need to (and do) process basic ASCII characters, that is.\nUltimately, this comes down to understanding text encodings. I recommend watching Plain Text, at talk by Dylan Beattie @ NDC 2021 and reading https://kunststube.net/encoding/ for a nice intro to this.\nThat said, it\u0026rsquo;s likely you\u0026rsquo;ll need to work with many, many other data types. You\u0026rsquo;ll see formats like .json and .yaml, need to parse things from .html pages, or get large binary files which lack formatting in the typical sense, but where maybe you\u0026rsquo;ve been told ahead of time that every byte is a different reading from some sensor.\nThere\u0026rsquo;s also the point of understanding when to load assets into your program from file (like having a folder of images to load from) or when to bake it into the code (like saving a bitmap into the source code as an array).\nFinally, you should have at least some familiarity with the actual structure of the files that make up your code itself, like what\nFile formats # [TODO] wav is easy, mp3 is hard.. show this. WAV format on 767 of POC||GTFO\nZip - How not to design a file format (gamesgreggman)\nPSD is not my favorite file format\nNames # Horrible edge cases to consider when dealing with music (Julien Voisin)\nCompression # H.264 is Magic (Sid Bala)\n"},{"id":137,"href":"/engineering/programming/ethics/","title":"Ethics","section":"Engineering","content":" Chapter 11½ - Ethics \u0026amp; Copyright # Ethics # Programming is awesome. If you get into creative coding, you\u0026rsquo;ll be able to use it to make art. You\u0026rsquo;ll likely use it to automate tasks you find boring. If you\u0026rsquo;re like me, you might use it to make your own website or start to make products you intend to sell. That\u0026rsquo;s great. But there are a few things you need to consider as what you make becomes more professional. If you\u0026rsquo;re just making something for you and a few friends, don\u0026rsquo;t worry about it- hack it together and have fun. But as you start making things for a business or that something impact systems that are deeply meaningful in someone\u0026rsquo;s life, you need to be careful.\nThe Code I\u0026rsquo;m Still Ashamed Of is great. Ever since I read it, it has come back to me every now and then. And sure, it\u0026rsquo;s a pretty extreme example, but it\u0026rsquo;s also a lot easier to put into that kind of situation than you\u0026rsquo;d probably like to think.\nThere\u0026rsquo;s a pretty big list of considerations you should keep in mind when what you\u0026rsquo;re making starts to grow in impact, but honestly most of them just come down to being an empathetic, good person as best you can.\nUser Data \u0026amp; Privacy # Is user data secure? Do users have control over their data? Do users have a way to export their data? If this data were leaked, what would the impact be? Should the users have deniability (Soatok.blog) Can the code be open source? Is there an open API? Maybe what you\u0026rsquo;re making can\u0026rsquo;t be open, but interaction could be. Sorta like having 3rd party Twitter or Reddit apps. Development Considerations # Does it rely on other tools or libraries that don\u0026rsquo;t follow these ideals? ᶜᵒᵘᵍʰ Windows ᶜᵒᵘᵍʰ Have you given credit to any tools or libraries you depend on? Have you given funding to any of those tools, if you\u0026rsquo;re making money off of them? Have you contributed code to any of them? Do you really need to use that library? Every library is a threat vector \u0026hellip; at the same time, not using industry standard stuff can be bad. For example, you probably shouldn\u0026rsquo;t ever use your own cryptography code. Localization # Can users of other in other regions still use it? Qwerty isn\u0026rsquo;t standard everywhere, neither is left-to-right text. Hell, ᚛ᚅᚑᚈ ᚐᚂᚂ ᚄᚚᚐᚉᚓᚄ ᚐᚏᚓ ᚄᚚᚐᚉᚓᚄ᚜ (YouTube, Tomm Scott) Does it comply with local laws and regulations? Not all illegal services are morally wrong- take Sci-Hub for example. Does it force units of measurement? Monetization # How is copyright infringement handled? This gets very complicated, read more in Philosophy Ch.8 - Copyright If something on what you\u0026rsquo;re making is paid, is Purchasing Power Parity an option so that users in less fortunate areas can still have access? If you know what you\u0026rsquo;re making will be pirated, can you release a \u0026lsquo;Here, but seriously please pay me\u0026rsquo; version? User Experience # Can differently-abled people still use it?\nColor Blindness? check out this color blindness simulator (color-blindness.com) Deaf?\nBad vision?\nsuper tiny text Motion? Flashing Lights? Light sensitivity?\nAre the elements of interaction standard / automatable\nThis largely ties into differently-abled access Does it really need to use as many resources as it does?\nCould it still work if your internet was 100x slower? Could it still work if your hardware was 10 years older? How long does it take a user to find a feature they know exists without help?\nAvoid \u0026lsquo;Dark Patterns\u0026rsquo;\nDon\u0026rsquo;t use stupid progress bars Social Duties # Can it be used for Hate Speech? Spreading misinformation? How does content moderation work? How does this conflict with free speech? Does it matter that it does? Can it be used for exploitation of vulnerable people? The elderly? Children? Those in abusive relationships? Does it make assumptions about social norms? Does it assume something about FirstName LastName naming conventions? Does it assume binary sex/gender fields? Does it assume Hetro relationships? 36C3 ChaosWest: \u0026ldquo;Hello, I\u0026rsquo;m your Edge Case!\u0026rdquo; Here\u0026rsquo;s a nice video from TomScott on this topic:\nThe Rise of User Hostile Software (Den Delimarsky) and Hacker News Comments\nCAPTCHAs don\u0026rsquo;t prove you\u0026rsquo;re human - They prove you\u0026rsquo;re American\nStop over validating your forms\nMoral Machine - \u0026ldquo;A platform for gathering a human perspective on moral decisions made by machine intelligence, such as self-driving cars.\u0026rdquo;\n[TODO] Racist AI, Deepfake loods\n[TODO] Amazon Demands Echo not be referred to as a Microphone (Jason Koebler on Twitter, from Vice.com) Open Source, Licenses, and Copyright # Open source enables a development method for software that harnesses the power of distributed peer review and transparency of process. The promise of open source is higher quality, better reliability, greater flexibility, lower cost, and an end to predatory vendor lock-in.\n\u0026ndash; The Open Source Initiative Mission Statement\nDisclaimer # I am not a lawyer, and neither are any of my contributors to this section. This is not legal advice.\nTo Begin # So you\u0026rsquo;ve decided to make your project open source. Great! Before you publish anything, there are two things you should do.\nFirst, decide on a definition of success for your project. There is more than one, and open source is all about community. Establishing community rules and expectations early is critical.\nSecond, decide on a license. That\u0026rsquo;s what this section is about.\nA license defines the legal terms you will bind your users and contributors to under copyright law. If you release code to the world without specifying a license, it is extremely unclear what people can and cannot do with your software. In fact, it would require actual IP lawyers to untangle exactly what they are allowed to do, and it might be different in different countries!\nFortunately, this is largely a solved problem for open source. Other organizations have already hired lawyers in the past to do the heavy lifting, and have allowed anyone who wants to create an open source project to copy their license text and apply it to their own works.\nA good starting point to address both of these can be found by asking yourself:\nIs control of the project\u0026rsquo;s future important? Or do I simply want it to be available to anyone? If someone else (perhaps a Fortune 500 company) were to use my software in a proprietary product to make money, would I want some? Who are my contributors and why do they contribute? The next section will address how licenses can help support your intentions.\nChoosing a License # Except for edge cases, there are really only three options you should consider:\nIf you want to encourage maximum adoption among a variety of users and contributors, use the Apache 2.0 Software License. If you want to encourage a hobbyist/community focus and prevent its use in proprietary software for profit, use the GNU Affero General Public License (AGPL) v3. If you want to release it \u0026ldquo;as is\u0026rdquo; and don\u0026rsquo;t care about its future, consider a Creative Commons Zero Public Domain Dedication. These choices are explained in detail below.\nIf you want to put it in the public domain, why not just put a note saying so? Because in some countries, there are restrictions on the public domain which make it useless or impossible to use for open source software. Creative Commons Zero acts as a license in such countries, granting the same terms and waivers as the United States public domain. Strong Copyleft: the GPL and friends # The Free Software Foundation envisioned open source software as a collaborative community. To keep it that way, they basically wanted everyone who used the software to become a part of that community and share.\nThey created the term copyleft to capture this principle:\nCopyleft is a general method for making a program (or other work) free (in the sense of freedom, not “zero price”), and requiring all modified and extended versions of the program to be free as well.\nWhile I mentioned making money earlier, the GPL does not forbid profiting. Instead, it forbids closed source software based on the business model of \u0026ldquo;trade secret.\u0026rdquo; In practice, though, this means most of the people who turn a profit from software can\u0026rsquo;t use it.\nThe license also goes to great lengths to make sure that other areas of law cannot be abused by the covered software. For example, in the United States, a patent troll could use your software, discover it contains a software \u0026ldquo;invention\u0026rdquo; they hold the rights to, and sue you and all of your users. Even though you wrote it, and don\u0026rsquo;t even know who they are!\nIf you think this sounds far-fetched, it isn\u0026rsquo;t. The craziest things have been patented, and patent lawyers are extremely expensive \u0026mdash; even by the standards of other lawyers.\nThe main drawback (and main source of pushback on the internet) is the way this license interacts with other software. Because the GPL requires that all the same rights be included in the software you distribute, creating software out of both GPL and non-GPL code binds your users to terms that may be confusing, or in the worst case, impossible to follow.\nThe Free Software Foundation has given their own legal analysis of common licenses, and whether they are GPL compatible.\nWeaker Copyleft: Apache 2.0 # The Apache Software foundation exists as a charity to give its software away for the greater good. As a result, it is also a copyleft license, using the terms to encourage use and distribution instead of restriction. Unlike the GPL, it does not require its downstream users to be just as open. In particular, they may use it in closed source software and turn a profit.\nThis is one of the \u0026ldquo;least political\u0026rdquo; licenses in the license debates, and is a safe default if you really don\u0026rsquo;t know what to do about licensing.\nOther Licenses: BSD, MIT, X11, Oh My! # There are other licenses, that are much shorter, that seem to be similar to the Apache 2.0 License in spirit. However, I don\u0026rsquo;t recommend them, and will explain why.\nCommon other open source licenses include:\nThe MIT license The BSD license, which comes in flavors. The most common is the \u0026ldquo;2 clause\u0026rdquo; version. The ISC license. The Unlicense (auto-suggested by GitHub for option three instead of CC0) These licenses probably look okay to non-lawyers, and are designed to provide maximum flexibility. However, they have other problems.\nFirst, they lack the protections of the Apache 2.0 and GPL family of licenses against patent trolls.\nSecond, they may not have been examined by non-US courts. Aside from the Unlicense which relies on the US public domain, the liability protections in the licenses may not fit with product liability law in Europe.\nIf you still don\u0026rsquo;t like any of the three recommended options, the Free Software Foundation has given their own legal analysis of common licenses, whether they are GPL compatible, and any flaws in their opinion. It is worth reading before choosing anything else.\nSpecial Case: Cryptography # If you are writing your own cryptography and live in the United States, there are extra legal steps you have to do. This has to do with the history of The Crypto Wars.\nBut you know what? I\u0026rsquo;m not going to talk about it. It\u0026rsquo;s a bit murky without actual lawyers, but more importantly, you shouldn\u0026rsquo;t be writing your own cryptography, period. Seriously. Don\u0026rsquo;t do it.\nJust use the open source algorithms placed into the public domain already. Let Bruce Schneier, Dan Bernstein, and other famous cryptographers worry about export regulations, and just use their stuff.\nIf you are trying to write your own cryptography to learn, I recommend doing the Cryptopals Crypto Challenges instead. If that\u0026rsquo;s not enough, do A Self Study Course in Block Ciphers by Bruce Schneier.\nYou will learn more, and avoid regulations, mockery, and public facepalms all over the internet.\nWhat if I don\u0026rsquo;t have a project? # Simple: contribute to someone else\u0026rsquo;s! That\u0026rsquo;s what makes open source work!\n[TODO]\nactually contribute on GitHub, make an issue, submit a pull request, make a custom repo,\nLinks # Setting new expectations for open source maintainers\nHow to break the Internet: Cory Doctorow at TEDxOxbridge (YouTube)\nhttps://github.com/Marak/faker.js/issues/1046\nNo, \u0026ldquo;Open Source\u0026rdquo; does not mean \u0026ldquo;Includes Free Support\u0026rdquo; + The update to that post.\nMy tiny side project has had more impact than my decade in the software industry (Mike\u0026rsquo;s Corner on the Web)\n"},{"id":138,"href":"/engineering/programming/fixxingissuses/","title":"Fixxingissuses","section":"Engineering","content":" Chapter 13 - Fixing Issues \u0026amp; Debugging # Alright, so your code/electronics/computer/life was working fine just a second ago, and now it\u0026rsquo;s just not working at all. Take a deep breath, and relax. Let\u0026rsquo;s work though this.\n🦆 Grab a rubber duck # This won\u0026rsquo;t always be applicable, but assuming it\u0026rsquo;s a system- code, or electronics, or a math problem, something that can be analyzed - explain it. Out loud. To a rubber duck. If it\u0026rsquo;s code, do so line by line. if it\u0026rsquo;s electronics, go connection by connection. Don\u0026rsquo;t assume anything is working, just drop all assumptions and find the problem.\n☑️ Check your assumptions again. # Did you actually check all of your assumptions? Compilers aren\u0026rsquo;t always perfect. Your oscilloscope probe might need calibrated. Don\u0026rsquo;t dive into the weeds until you\u0026rsquo;ve double checked everything first, but if you still can\u0026rsquo;t figure it out, dig for what assumptions you\u0026rsquo;re making. Did something actually change between now and when it was last working? Is something else giving you false readings?\n… just make sure to stop short of questioning your own sanity.\n👀 Fix by working comparison # Yeah, not always applicable advice, but if you have something that\u0026rsquo;s even similar, first check that it still works, then check for what the differences are between what you\u0026rsquo;re doing and the reference you have.\n🧪 Check your Test Cases are Valid # What are your conditions for success? Are you even testing for these conditions correctly?\nThe author posted this video in the comments. It\u0026#39;s a truck full of traffic lights. pic.twitter.com/h2LwyL65ck\n\u0026mdash; FSD in 6 months (@FSD_in_6m) June 2, 2021 Archive.org backup of Twitter embed 🐜 Actually use a debugger # For some reason a ton of programmers are allergic to their debuggers. There\u0026rsquo;s more to life than print debugging. Set a break point. You can do it. I believe in you. If you want to know more about debugging, keep reading on this page.\n➗ Binary Search Debugging # The binary search algorithm looks a bit like this:\nChad250, CC BY-SA 4.0, via Wikimedia Commons So, what does this have to do with debugging? Apply the same idea- find things you can try to narrow down the problem seach space. Comment out some of the non-vital code, then bring it back in half at a time until the problem comes back, etc. Often, finding the problem is the hardest part, so having a strategy to search for it can be a big help.\n📋 Keep a list of what you\u0026rsquo;ve tried and what you haven\u0026rsquo;t tried # This is easy, just make a todo style list, if you come up with a new idea halfway though and try it real quick, add it and immediately check it off. This prevents the possibility of being 3 hours in and repeating the same \u0026lsquo;fixes\u0026rsquo; as an exercise in insanity.\nOther Resources: # How Game Designers Solved These 11 Problems (Game Maker\u0026rsquo;s Toolkit, YouTube)\nDebugging # ./missing-semester - Debugging and Profiling\nsee: Print Debugging Should Go Away and the tools recommended in it, like rr.\nSoftware Debugging # [TODO]\nGDB with Gef, interpreted languages, embedded systems, non-code issues (boot problems, glitchy behavior), hardware failures, valgrind, various trace programs, print debugging extended\nDebuggers # GDB Frontend\nGDB + GEF\nThe State of Linux Debuggers (Jamie Brandon\u0026rsquo;s Blog) ← This is a decent rant about why most debuggers sort of suck. And yeah, they do. But we still sorta need them\nAdvanced GDB Usage (Interrupt)\nhttps://rr-project.org\n+ valgrid in here somewhere, ref 11- low level prog\nStatic Analysis # CodeChecker using LLVM/Clang (GitHub)\nHardware Debugging # common interfaces, simulation, serial/print debugging (slow), internal data logging, physical indicators of internal state, hardware to facilitate debugging (LED \u0026lsquo;byte\u0026rsquo;)\n[TODO] Embedded C/C++ Unit Testing Basics (Interrupt)\n[TODO] Faster Debugging with Watchpoints (Interrupt)\nTODO: Mention looking at peripheral registers, how to handle interrupts, etc.\nThis may or may not be important to you. I would simply note that many platforms and CI systems have been taken over or bought by open-source hostile companies. Even formerly visionary ones that don't start with G. Why have different versions of the same compiler? Because they default to different versions of the C++ standard. Not only will C++ \"retcon\" keywords, but semantics will change. Suffice to say this has caught issues in open source projects. "},{"id":139,"href":"/engineering/programming/funcprog/","title":"Funcprog","section":"Engineering","content":" Chapter 20 - (((())(()((()(())))))) # What is Functional Programming? # Most of the programming languages in this section up until now have been imperative programming languages. Programs are a series of instructions: do this, then do that, then do the other thing.\nFunctional programming languages are another type of language. Like math, they simply define sets, relationships, and then have a process for doing things based on \u0026ldquo;answering questions\u0026rdquo; or \u0026ldquo;getting to a result\u0026rdquo;.\nIf this sounds like a strange concept, it dates back to the very basics of computation theory.\nLambda Calculus # Purity and Side Effects # In order to understand the power of functional languages, consider this function in Python:\n1 2 3 4 def fibonacci(x): if x \u0026lt;= 1: return x return fibonacci(x - 1) + fibonacci(x - 2) This is a very simple function that computes the Nth Fibonacci number.\nHowever, calculating fibonacci(1000) requires a lot of CPU power \u0026ndash; and more importantly, memory for all the stack frames. In fact, it is such an expensive function, Python 3.9.6 can\u0026rsquo;t do it for large values!\n1 2 3 4 5 6 7 8 9 \u0026gt;\u0026gt;\u0026gt; fibonacci(1000) Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 7, in fibonacci File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 7, in fibonacci File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 7, in fibonacci [Previous line repeated 995 more times] File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 2, in fibonacci RecursionError: maximum recursion depth exceeded while calling a Python object To save that time and space, it is far preferable to write a version that caches intermediate results:\n1 2 3 4 5 6 7 8 9 10 _private_fib_dict = {} def fibonacci(x): cached_answer = _private_fib_dict.get(x, None) if cached_answer is not None: return cached_answer if x \u0026lt;= 1: return x answer = fibonacci(x - 1) + fibonacci(x - 2) _private_fib_dict[x] = answer return answer Not only will this run faster, but it allows calculations of otherwise impossibly large values by using the cache (even though it will still take a while):\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026gt;\u0026gt;\u0026gt; fibonacci(1000) Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 7, in fibonacci File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 7, in fibonacci File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 7, in fibonacci [Previous line repeated 995 more times] File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 2, in fibonacci RecursionError: maximum recursion depth exceeded while calling a Python object \u0026gt;\u0026gt;\u0026gt; float(fibonacci(500)) 1.3942322456169787e+104 \u0026gt;\u0026gt;\u0026gt; float(fibonacci(1000)) 4.3466557686937455e+208 This is possible, because fibonacci is a pure function: the same inputs will result in the same outputs, no matter the state of the system as a whole. If you know part (or all) of the answer in advance, you can skip executing some (or all) of the code. In programming language design, this is often called laziness (even though it refers to other things in some other languages).\nWhile this is a cool concept, sometimes it does matter whether you repeat work: reading from files or databases that can change between runs, input and output to the user, updating memory read by other code outside of the current scope, and so on. These secondary concerns are called side effects.\nWe were able to write this in Python, but we had to \u0026ldquo;do work\u0026rdquo; in order to \u0026ldquo;be lazy\u0026rdquo;. Explicit extra code was written to create and maintain the cache, and Python always evaluated every instruction \u0026ndash; we simply added code paths that were less work in total.\nWhile advanced compilers can sometimes do this by themselves, it is rather hit-and-miss because it has to be inferred. Functional languages treat laziness as a first-class feature. Their approach is this principle taken to extremes: don\u0026rsquo;t do any work at all until it\u0026rsquo;s specifically necessary.\nIf we defined fibonacci in most functional languages, and then use it somewhere in a different calculation, it would not run! It would simply return a thunk: an object representing a future calculation.\nIn the case of our example, where we want the value from fibonacci(1000), it wouldn\u0026rsquo;t be until the answer was printed that any code would be executed at all. If the calculation is never used, it is never done.\nSimilarly, there is no caching code to write. Every level of the function would break down into other calls: fibonacci(999) and fibonacci(998), then fibonacci(998) and fibonacci(997), and so forth. The simple python version takes so long, because these calls are repeated over and over for each \u0026ldquo;branch\u0026rdquo;.\nBecause fibonacci is pure, calling it with 998 always gives the same result. Functional languages would recognize this, and therefore cause any two thunks with the same arguments to be the same object. (For instance, the 998 call is one level down on the left and the next call on the right.)\nSince the function is pure, these thunks will execute once, and then simply remember the value. Our \u0026ldquo;caching\u0026rdquo; code comes built into the language!\nIn fact, this is often what makes some functional languages difficult to use: they are lazy more often than the programmer expects. Their \u0026ldquo;cache\u0026rdquo; of thunks can consume a lot of memory, waiting for an actual imperative operation to be written.\nTypes of Things # Because functional languages have a focus on purity, they want to make sure that side-effects can be reduced as much as possible, or failing that, contained and made specifically useful. The way each language does so is different, and will be discussed in a later section.\nAs a cornerstone of this strategy, functional languages tend to have more complex and \u0026ldquo;set like\u0026rdquo; type systems, allowing combinations not available in many other languages. These combinations are often used to make things \u0026ldquo;pure\u0026rdquo; and \u0026ldquo;isolate\u0026rdquo; side effects, and result in very different ways of doing things.\nAdvanced typing is an entire course all its own, so we\u0026rsquo;ll consider just one problem: error handling.\nHow do we do that in Python? The typical way is with exceptions:\n1 2 3 4 try: do_operation() except OperationError(e): print(f\u0026#34;operation failed: {e}\u0026#34;) This is error handling based on code flow \u0026ndash; i.e. \u0026ldquo;doing things.\u0026rdquo; It is just a fancy way to say: do this then that, except if there\u0026rsquo;s an error, then go down here instead.\nBut functional languages don\u0026rsquo;t want to do things \u0026ndash; they want to be lazy with thunks. So instead, they create a thunk that represents the outcome.\nHere is the nearest equivalent in Python:\n1 2 3 4 5 6 outcome = do_operation() if outcome.is_ok(): pass else: e = outcome.get_error() print(f\u0026#34;operation failed: {e}\u0026#34;) This is not great Python. Among many other reasons, it\u0026rsquo;s because the type of outcome is one class, and the type of e is another class. These two have nothing to do with each other, and so must be wrapped (in this case) or cast (in clever code).\nIt gets even more complex when you realize that Haskell, unlike Python, is statically typed. It needs to type check both outcomes. How can it do that when the error hasn\u0026rsquo;t happened yet?\nFrom an Object Oriented perspective, this is impossible \u0026ndash; or requires code for casting and/or inheritance that is so ugly no one should ever write it.\nBut Haskell has a trick up its sleeve: sum types. These are types defined in part by other types they are associated with.\nThe nearest thing Python has to this is None. It is a weird type, because you can get it without actually writing any code:\n1 2 3 4 \u0026gt;\u0026gt;\u0026gt; def do_nothing(): pass \u0026gt;\u0026gt;\u0026gt; x = do_nothing() \u0026gt;\u0026gt;\u0026gt; type(x) \u0026lt;class \u0026#39;NoneType\u0026#39;\u0026gt; In most languages, this would be a compiler error: \u0026ldquo;you are trying to get a value out of a function that does not return one. Don\u0026rsquo;t do that.\u0026rdquo; But Python can\u0026rsquo;t tell that in advance, because of what you can do with functions. So instead, they return a special value None as a \u0026ldquo;value\u0026rdquo; when the code tries to read a value that isn\u0026rsquo;t there.\nBecause of this, a defensive Python programmer has to recognize that any value could be None if there is a bug. And it\u0026rsquo;s especially tricky, because of its boolean casting:\n1 2 3 4 5 6 7 8 9 10 \u0026gt;\u0026gt;\u0026gt; x = False \u0026gt;\u0026gt;\u0026gt; not x True \u0026gt;\u0026gt;\u0026gt; not not x False \u0026gt;\u0026gt;\u0026gt; x = None \u0026gt;\u0026gt;\u0026gt; not x True \u0026gt;\u0026gt;\u0026gt; not not x False if you have a boolean output, like in an if check, None behaves like False \u0026ndash; but it isn\u0026rsquo;t! You must explicitly check x is not None as was done in an earlier section.\nA Haskeller would say that, in Python, every type is really a sum type with None. Your f unction could return something of type Int, or of type None. Either one. So be vigilant!\nUnlike Python, Haskell has syntax and tooling to make this explicit. Its similar type is called maybe, and it has two values: Nothing or Just x \u0026ndash; where x is a value of some other type that is defined by the code around it.\nThat means you can check outcomes like this:\n1 2 3 case doOperation of Just answer -\u0026gt; return answer Nothing -\u0026gt; do hPutStrLn stderr \u0026#34;Error: I didn\u0026#39;t get an answer\u0026#34; And if you forget to, it\u0026rsquo;s a type error: \u0026ldquo;in your case statement, you gave me an answer, when I wanted a Just answer\u0026rdquo;.\nThe variable answer can be whatever type is expected: an integer, a float, a boolean, or something else.\nThe surrounding code requires that answer be a specific type, because Haskell is strongly typed. But it is still possible to use Just with any of them, whose type is Maybe.\nFinally, we can return to our original problem: error handling when you don\u0026rsquo;t know the type of error in advance.\nIt uses a similar idea, but you associate two types with it: one type associated with success, and another type associated with the error.\nBecause all the types are known, it can be lazy to handle errors without executing any code. And more importantly, compared to Python, you cannot forget to check for errors because the types are wrong.\n[TODO] Functional Programming languages: lisp, haskell, luna-lang.org, ronin\nHonorable Mention: Rust # Once upon a time, famous C programmer Eric Raymond wrote:\nLISP is worth learning for [\u0026hellip;] the profound enlightenment experience you will have when you finally get it. That experience will make you a better programmer for the rest of your days, even if you never actually use LISP itself a lot.\nIn other words, as a more accessible member of the functional languages family, it will teach you concepts that imperative languages would never teach.\nI would argue the same about Rust. It is a steep curve, especially in the middle, and especially for certain problems. But it is still worth it. (1)\nRust is an imperative programming language originally developed at Mozilla Research. The idea behind Rust was to take the concepts of functional languages \u0026ndash; laziness, type theory, etc. \u0026ndash; and make them accessible in an imperative language as a replacement for C or C++.\nWhile it is an imperative language, it is so strongly inspired by functional languages, it is worthy of mention here. Like functional languages, Rust has a rich type system (though not quite as rich as Haskell), and tries to turn many problems into \u0026ldquo;type checking problems.\u0026rdquo;\nIt handles errors the way Haskell does with Result\u0026lt;T, E\u0026gt;. T is the type upon success and E is the type upon error, and you literally cannot fail to check for errors \u0026ndash; even if the check is implicit. There is no exception handling, but you can handle catastrophic and/or unforeseen events (called a panic) in their own scope. Their default behavior is to abort the program.\nRust also has a lot of laziness, but you have to write it explicitly. Rather than handling the value, most iterator methods will take closures (aka lambdas in Python), just so they don\u0026rsquo;t have to call them until the iterator is \u0026ldquo;driven\u0026rdquo; by outside code. But this is all just API design: Rust is still happy to let you use a for loop instead if you want.\nThe thing that makes Rust unique is that it uses this functional approach not to explore the boundaries of type theory, express new math concepts, or deal with semi-infinite sets. Instead, it uses all of this functional design to allow programmers to write low-overhead code free of certain types of bugs.\nIn Rust, the compiler analyzes program flow and variable scope (with a concept known as ownership). It then makes sure everything is cleaned up when it goes out of scope (known as dropping), and has a type checking pass (called the borrow checker) which makes it a \u0026ldquo;type error\u0026rdquo; to do any of the following:\nDrop/free something with live references to it Mutate something without declaring it mutable (immutable is the default) Mutate something while there is a second reference to it Share an object across threads if it is not thread-safe Once your code \u0026ldquo;type checks\u0026rdquo;, the assembly produced is almost the same as C++. There is no runtime and no garbage collector, because every byte of memory is accounted for in the control flow and data flow analysis the compiler already did.\nAt the same time, the compiler has already statically proven your code is a lot safer that C++. It prevents entire classes of memory safety issues \u0026ndash; the issues that are 70% of all security issues according to both Microsoft and the Chrome team at Google.\nEven if you don\u0026rsquo;t spend a lot of time in Rust, writing programs in it \u0026ndash; and getting caught by the compiler for things you cannot do \u0026ndash; will change the way you think about code. While this is especially for similar low-level languages like C++, it can even affect the way you look at Python.\nIt is definitely worth learning for that experience.\nSimilar to functional languages, sometimes the only solution is completely rethink your approach to your problem. Learning when this is the case, and what to do about it, is the difference between an intermediate and a skilled Rust programmer. "},{"id":140,"href":"/engineering/programming/game/","title":"Game","section":"Engineering","content":" Chapter 21 - Game Programming \u0026amp; Design # https://www.gameuidatabase.com/index.php\nhttps://www.riotgames.com/en/urf-academy/curriculum-guide\nCOMP4300 - Game Programming (David Churchill, YouTube)\nEngines \u0026amp; Frameworks # Both 2d and 3d # Godot\nLuxe\nHeaps\nfine. I\u0026rsquo;ll mention Unity and Unreal, but, like, I hate that the two make up such a huge chunk of the market\nUnreal Engine\nUnity\n2d # LEd engine - \u0026ldquo;LEd is a modern and open-source 2D level editor, specifically designed for indie devs\u0026rdquo;\nOGMO Editor - \u0026ldquo;OGMO Editor is a free, open source 2D level editor built by indie game developers for indie game developers.\u0026rdquo;\nLÖVE - \u0026ldquo;Hi there! LÖVE is an awesome framework you can use to make 2D games in Lua. It\u0026rsquo;s free, open-source, and works on Windows, Mac OS X, Linux, Android and iOS.\u0026rdquo;\nPyxel - Pyxel is a retro game engine for Python.\n3d # pwnfps engine - \u0026ldquo;An incomplete game engine I made for 7DFPS 2014 using C and a bit of Lua. It\u0026rsquo;s a realtime raytracer that happens to be pretty shiny.\u0026rdquo;\nnoeuclid by CNLohr - A Non-euclidean GPU Raytraced Engine\neuclider - A higher-dimensional \u0026ldquo;non-euclidean\u0026rdquo; ray tracing prototype written in Rust.\nBevy - \u0026ldquo;A refreshingly simple data-driven game engine built in Rust Free and Open Source Forever!\u0026rdquo;\nA Minecraft clone in hyperbolic space\n\u0026lsquo;Non Euclidean\u0026rsquo; is a super mathy term and I\u0026rsquo;m really into it, basically it just means that space doesn\u0026rsquo;t quite work as you expect. The shortest distance between two points doesn\u0026rsquo;t have to be a line, portals connecting spaces, walking in circles takes you new places, etc. Here\u0026rsquo;s a decent blog post about some. There\u0026rsquo;s also been some neat progress in the realm of voxel engines:\nHeads up, not all 3d systems use the same coordinate systems. It\u0026rsquo;s a bit of a pain. Here\u0026rsquo;s a good chart for that (source - @FreyaHolmer on Twitter) Physics Engines # https://github.com/erincatto/box2d\nNetcode # https://yal.cc/preparing-your-game-for-deterministic-netcode/\nInteresting ideas # Procedural Animation: # Did you like it?\nAnother creature made using only Procedural Animation\nwith a focus on 3D Navigation. We call it the Tetrad.\nBig Stuff Coming Soon👀👀\n🧬Follow us here for more🧬: @SynthSelection#madewithunity #unity #indiegamedev #gamedev #indiedev #SyntheticSelection pic.twitter.com/FatzMuyyc6\n\u0026mdash; Makan Gilani (@Makan_Gilani) October 28, 2020 Archive.org link to embedded Tweet RougeLikes # What \u0026ldquo;Rougelike\u0026rdquo; Meant\nTons of Simulation # Notia - Rougelite where every pixel is simulated\nCogmind - ASCII art game with a similarly extreme amount of environment destructibility\nA very long thread on \u0026hellip; stairs? Yeah. Look up advice on DND level design if you need general level design or architecture design n advice. The same twitter (Tommy Norberg, @the_Norberg) has many other good posts\nGame engines for non-games # https://github.com/SebLague/Slime-Simulation\nOther Resources # Xelu\u0026rsquo;s FREE Controllers \u0026amp; Keyboard Prompts - all CC0\n"},{"id":141,"href":"/engineering/programming/gitcicd/","title":"Gitcicd","section":"Engineering","content":" 16 - Git, Testing, CI, and CD # Testing # @jnesselr replying to @alicegoldfuss (Nov 13, 2018) +----------------------------------------------------+ |Me: *does major refactor* | |Tests: ✓ | |Me: I don\u0026#39;t believe you | +----------------------------------------------------+ [Suspended User] +----------------------------------------------------+ |Me: *deliberately breaks something, just to be sure*| |Tests: ✓ | |Me: oh no | +----------------------------------------------------+ @boo_radley +----------------------------------------------------+ |Me: *changes nothing* | |Tests: ✗ | |Me: oh no | +----------------------------------------------------+ [Suspended User] +----------------------------------------------------+ |Me: *runs tests again* | |Tests: ✔ | |Me: oh no no no | +----------------------------------------------------+ src: https://twitter.com/boo_radley/status/1062513898954391552 Software Testing # unit tests, integration tests, performance testing - https://github.com/sharkdp/hyperfine\nHardware Testing # Automated Building and Testing # [TODO]\nFuzzing (sandsifter), make and alts, etc.\nContinuous Integration # This is a subject that many people have written books about, and in a small-to-medium sized open source project, may not seem necessary. But its usefulness will sneak up on you faster than you might think.\nFirst, there is the total time savings. If you consider everything it takes to make correct and clean code \u0026ndash; not only compiling, but linting, testing, etc \u0026ndash; then it is definitely worth automating for yourself. And if it\u0026rsquo;s worth automating for yourself, it\u0026rsquo;s worth automating for others.\nxkcd №1205 Second, there is consistency. Again, if you want all of your code to compile, you have to gate committing code to a successful compile (or at least syntax check). If you want all your code to have a certain format, then you have to gate committing code to passing lints. This will become a headache much faster than you think \u0026ndash; even for a simple project!\nThird, there is compatibility. A big part of open source is that it must be flexible, and support multiple environments. If you end up using a lot of GCC-style syntax, for example, someone with LLVM, ICC, or another compiler might have trouble building it. A CI system can test builds in many environments, not just the one you develop in.\nFinally, if you start actually building out compatibility? It is a very small step to Continuous Deployment. And then you\u0026rsquo;ve got something really nice to build a community around your software.\nSpeaking of community, it is worth noting: if you want to impress people and make contributions, find an open source project who didn\u0026rsquo;t learn this lesson, and write or improve CI for them. This will have a long-term positive impact that the community will benefit greatly from \u0026ndash; even if it takes a while for the payoff to be realized.\nDocker: the portable way # There are a lot of different git platforms out there, and many of them have their own CI. In addition, the most popular ones are owned by companies who have a sketchy track record in open source \u0026ndash; or once had good ones, but then were acquired by others who did.\nAs a result, I want to push toward a tool that is platform independent: docker. This has some trade-offs:\nIt\u0026rsquo;s independent of any CI provider (1) It\u0026rsquo;s well supported by most of them (a \u0026ldquo;command\u0026rdquo; makes it easy to handle containers) You can run the full CI on your own machine, e.g. to debug it without 20 pushes to trigger a rerun It doesn\u0026rsquo;t rely on their support for a particular OS (especially ancient or exotic ones) But it means you are re-inventing the wheel to some extent compared to their tooling I\u0026rsquo;m going to presume you\u0026rsquo;re familiar with the basics of docker and have read the Containers section of the Servers chapter. This section shows you specifics for this.\nIn short, CI is way to build out your support matrix. Want to support Ubuntu, Debian, RedHat, and Arch Linux? Want to support every Python version from 3.2 to 3.10? Want to try compiling your C++ library with multiple compilers?\nWith docker, just make one container for each, and run them all! (Although for the Python version specifically, tools like the tox library can solve this in only one container.)\nLet\u0026rsquo;s suppose we have a C++ project, and we want to make sure that it supports a variety of compilers. The easiest way is to define a docker file that prepares that compiler, but the actual compiler itself is not hard-coded. Instead, it is set up using ARG commands in the Dockerfile.\nHere is what that might look like:\nFROM ubuntu:20.04 # Default to the distro\u0026#39;s current GCC version ARG cc_pkgs=\u0026#39;gcc g++\u0026#39; # The name of the C compiler ARG cc=gcc ENV CC=$cc # The name of the C++ compiler ARG cxx=g++ ENV CXX=$cxx # Install the compiler packages, along with any dependencies # Suppose your program requires OpenGL, for example: RUN apt update \u0026amp;\u0026amp; apt install -y libopengl-dev build-essential $cc_pkgs With this container, it should be possible to run a build by bind-mounting the source inside. This is because the variables used by GNU Makefiles, Ninja, GNU Autoconf, etc., will be set.\nIt is easy to make all the containers for different compilers with a single shell script:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 COMPILER_NAMES=(gcc llvm-8 llvm-9 llvm-10) CC_NAMES=(gcc cc cc cc) CXX_NAMES=(g++ c++ c++ c++) PKGS=(\u0026#34;gcc g++\u0026#34; \u0026#34;llvm-8-tools\u0026#34; \u0026#34;llvm-9-tools\u0026#34; \u0026#34;llvm-10-tools\u0026#34;) i = 0 while [ i -le ${#COMPILER_NAMES[*]} ] do docker build -f ci/Dockerfile \\ --build-arg cc_pkgs=\u0026#34;${PKGS[i]}\u0026#34; \\ --build-arg cc=\u0026#34;${CC_NAMES[i]}\u0026#34; \\ --build-arg cxx=\u0026#34;${CXX_NAMES[i]}\u0026#34; \\ -t ubuntu_${COMPILER_NAMES[i]} . i=$(expr $i + 1) done Then you can test it on any compiler you wish. (2)\nIf your CI provider supports \u0026ldquo;build matrix\u0026rdquo; definition (most do), then you don\u0026rsquo;t even need to do that! Just put matrix variables for each one (so that the line up as a group, rather than a cross product).\n(Note: this is not exact for any vendor, but gives the idea.)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 matrix: - COMPILER_NAME: [\u0026#34;gcc\u0026#34;, \u0026#34;llvm-8\u0026#34;, \u0026#34;llvm-9\u0026#34;, \u0026#34;llvm-10\u0026#34;] CC_NAME: [\u0026#34;gcc\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;cc\u0026#34;] CXX_NAME: [\u0026#34;g++\u0026#34;, \u0026#34;c++\u0026#34;, \u0026#34;c++\u0026#34;, \u0026#34;c++\u0026#34;] PKGS: [\u0026#34;gcc g++\u0026#34;, \u0026#34;llvm-8-tools\u0026#34;, \u0026#34;llvm-9-tools\u0026#34;, \u0026#34;llvm-10-tools\u0026#34;] job: name: Verify Compatibility with Ubuntu 20.04 on $COMPILER_NAME script: | docker build -f ci/Dockerfile \\ --build-arg cc_pkgs=\u0026#34;$PKGS\u0026#34; \\ --build-arg cc=\u0026#34;$CC_NAME\u0026#34; \\ --build-arg cxx=\u0026#34;$CXX_NAME\u0026#34; \\ -t $COMPILER_NAME . docker run -v src:/src -w /src $COMPILER_NAME make Continuous Deployment # This may or may not be important to you. I would simply note that many platforms and CI systems have been taken over or bought by open-source hostile companies. Even formerly visionary ones that don't start with G. Why have different versions of the same compiler? Because they default to different versions of the C++ standard. Not only will C++ \"retcon\" keywords, but semantics will change. Suffice to say this has caught issues in open source projects. "},{"id":142,"href":"/engineering/programming/guiprog/","title":"Guiprog","section":"Engineering","content":" Chapter 18 - Graphical Programming # [TODO] Graphics Programming on badd10de.dev\nLet\u0026rsquo;s start in a way that\u0026rsquo;s incredibly simple, and abstract away all the hard stuff at first by using a tool kit called \u0026lsquo;Processing\u0026rsquo;, which is available under that name from the community repo in arch. The default IDE that comes with it is awful to work in though, so go ahead and open up VSCode and grab the Processing Language add on, then in VSCode open up a new workspace folder and make a file called processing.pde, then open VSCode\u0026rsquo;s command pallete (CTRL+Shift+P) and run \u0026lsquo;Processing: create task file\u0026rsquo;, after that you\u0026rsquo;ll want to open the tasks.json file and change the command: line to have \u0026quot;command\u0026quot;: \u0026quot;/usr/bin/processing-java\u0026quot;, after that you can easily try new code just by re-building project the project with CTRL+Shift+B\nAlright, setup out of the way, let\u0026rsquo;s code! One of my first projects in processing was to make a Topographic Map, looking generator because I just find them quite visually appealing.\nSo, thinking about that problem, we clearly need data. Probably an array of sorts with a bunch of values that have a smoothed relationship when viewing them as a height map, then we\u0026rsquo;d want to look at the transition points between ranges of values.\nLooking up random data generation in python, and you should stumble upon its noise generation, and see that it uses Perlin Noise, which upon looking at it should be obvious that it generates exactly what we want. So, looking up an example for that in processing, we get to this page: https://processing.org/examples/noise2d.html\nWell, that\u0026rsquo;s already super close, so let\u0026rsquo;s look at that code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 float increment = 0.02; void setup() { size(640, 360); } void draw() { loadPixels(); float xoff = 0.0; // Start xoff at 0 float detail = map(mouseX, 0, width, 0.1, 0.6); noiseDetail(8, detail); // For every x,y coordinate in a 2D space, calculate a noise value and produce a brightness value for (int x = 0; x \u0026lt; width; x++) { xoff += increment; // Increment xoff float yoff = 0.0; // For every xoff, start yoff at 0 for (int y = 0; y \u0026lt; height; y++) { yoff += increment; // Increment yoff // Calculate noise and scale by 255 float bright = noise(xoff, yoff) * 255; // Try using this line instead //float bright = random(0,255); // Set each pixel onscreen to a grayscale value pixels[x+y*width] = color(bright); } } updatePixels(); } Alright, so line by line, it seems that line 1 is just defining a constant. Reading the Processing docs, you\u0026rsquo;ll find setup() should contain size() which takes two arguments that are the size of the output window in pixels (x and y) and that draw() is an endlessly looping function that updates that window.\nBefore going further, let\u0026rsquo;s copy and paste the code into VSCode and run it:\n[TODO] add picture\n[TODO]\nC++ from scratch, JS electron app, Processing creative coding, Python Kivy or similar, Flutter (google lang), shaders (graphical editors), nimp, ronin, Nuklear\n26 video playlist from Aaron Lanterman, a Georgia Tech professor\nGP-GPU # [TODO]\nTracy - \u0026ldquo;A real time, nanosecond resolution, remote telemetry, hybrid frame and sampling profiler for games and other applications\u0026rdquo;\nLibraries # Nanogui (GitHub)\nNative GUI # Web-based # The Div that looks different in every browser (Martijn Cuppens)\nJust plotting some data # μPlot (GitHub)\nhttps://www.scratchapixel.com\n"},{"id":143,"href":"/engineering/programming/intro/prog0intro/","title":"Prog0intro","section":"Engineering","content":" Chapter 10.0 - Let\u0026rsquo;s Write Some Code # Knowing how to program will give you deep control over the most advanced tool mankind has ever made: The computer. More over, because we use computers as extensions of our own minds (and as a collective, with the Internet) it will literally expand your ability to process information as you\u0026rsquo;re no longer limited to the inputs and computation systems that other programmers have built for you.\nYou\u0026rsquo;ll also be able to make computers solve problems, do repetitive tasks, and allow you to express artistic ideas in ways that are hard to grasp before you\u0026rsquo;ve started. I can\u0026rsquo;t express in text how amazing some of the things I\u0026rsquo;ve seen thrown together in an afternoon by a single programmer are.\nSo, yeah, programming is really freakin\u0026rsquo; awesome. Unfortunately, it\u0026rsquo;s also pretty hard for most people is it will make you use your brain in ways you\u0026rsquo;re not used to. So, before we ever write a line of code, let\u0026rsquo;s talk about why learning to program is difficult.\nWhy is programming hard? # (and how to programmers think)\nProgramming is difficult for a few reasons:\n1. Because you have to use math, logic, and data structures to model your problem. # Computers can only really do one thing: manipulate bits. There are a bunch of tools for how to do this at your disposal though, and programming languages help abstract the way it is done so you rarely, if ever, need to think about the bits themselves. These tools include basic math operations like addition, subtraction, multiplication, and division as well logical operations like conditions such as \u0026ldquo;if X is less than Y, then set Z to the value of X, otherwise set Z to the value of X times Y\u0026rdquo;\n1 2 3 4 if x \u0026lt; y: z = x else: z = x * y and \u0026ldquo;While X is less than Y, decrease the value of X by Y divided by X\u0026rdquo;.\n1 2 while x \u0026lt; y: x = x - (y / x) And then you get data structures, which let you organize data:\n1 2 3 4 5 color_palette = {\u0026#39;rock\u0026#39; :0xA89858, \u0026#39;sand\u0026#39; :0xF5E18E, \u0026#39;fruit\u0026#39;:0xC583F5, \u0026#39;stem\u0026#39; :0x50A848, \u0026#39;leaf\u0026#39; :0x80F576:} (There\u0026rsquo;s a lot more data structures than just this one, which is called a dictionary)\nThere\u0026rsquo;s many more of operations, logical statements, and data structures you can use - We\u0026rsquo;ll get there soon! - but in general, all programs are made out of these things. Now, with that in mind, think about making something like a video game. The task sounds almost impossible, right? Well, not really. As long as you can break the problem down, it\u0026rsquo;s not so bad.\nSee, programming isn\u0026rsquo;t really all that different from baking.\nWhen you bake, you don\u0026rsquo;t just \u0026ldquo;make a cake\u0026rdquo;. That is, the recipe doesn\u0026rsquo;t say\nMake a cake. Because, well, that\u0026rsquo;s not a recipe. A good recipe has a list of ingredients, will tell you how to mix them, and has a lot of individual steps.\nThe big difference with programming is you don\u0026rsquo;t know the steps going in. You have to make them up as you go! So, you need to break the problem down to a point where using math, logic, and data structures to model that individual step becomes obvious. You know what you want, now you have to figure out how to get there.\nThe baking analogy goes a bit further too, because if you\u0026rsquo;re making a cake you could go milk a cow, raise chickens to get the eggs, farm the wheat and process it to get the flour, churn the butter, etc. but most people don\u0026rsquo;t.\nWhen you\u0026rsquo;re programming, you don\u0026rsquo;t have to start from scratch. In fact, you almost never will. You\u0026rsquo;ll build on the work of others and leave the flour making and cow milking to the people who have perfected it, made it safe, and kept it cost-effective. We\u0026rsquo;ll talk about this later too.\n2. Because not all solutions are created equal # There are some problems that may have a really obvious way to model them, but this really obvious way is so incredibly slow that it would take even a super computer millions of years to find the answer while there are clever solutions that may finish almost instantly.\nThere are some solutions which may seem very straight forward, but miss an edge case and so fail spectacularly.\nThere are some solutions which may work easily now, but make adding functionality later difficult.\nThere are some solutions which may make adding later functionality easy, but take more time to implement than you have.\nThere are some solutions which are really clever, fast, and work perfectly and are very, very hard to understand when you go to read your code later.\nThere are some solutions which are easy to understand and write, but don\u0026rsquo;t scale well.\nFor example, say you have a list of numbers, and you need to add one to all of them\n1 2 3 4 # You have my_numbers = [41,68,419,80084] # You want my_numbers = [42,69,420,80085] You could actually write a line of code to increment each one,\nmy_numbers[0] = my_numbers[0] + 1 my_numbers[1] = my_numbers[1] + 1 my_numbers[2] = my_numbers[2] + 1 my_numbers[3] = my_numbers[3] + 1 But then if you had a list of a thousand numbers, you\u0026rsquo;d have a problem. You could do something like this,\n1 2 for i in range(len(my_numbers)): my_numbers[i] = my_numbers[i] + 1 However, for this particular language (Python) there\u0026rsquo;s a better way:\n1 my_numbers = [x + 1 for x in my_numbers] Though that\u0026rsquo;s only a small block of code. Most problems will be much larger and abstract, and have wildly ranging solutions. This leads in to the next point,\n3. Because making decisions before you know everything is hard # For the above example, say you thought that list would only ever have two numbers in it, so you do go with the first solution. Then, you realize down the line, that, oh, no, that list is actually going to have 100 numbers in it, so you write it with my_numbers = [x + 1 for x in my_numbers], but then, later, you find out you need to add 10 if the number is greater than 100. Then you find out this list might have nothing in it (just be empty) in a special case, in which case you need to put a special value in it.\nHow I\u0026rsquo;d do that, not that it matters right now The obvious way to do this is something like\n1 2 3 4 5 6 7 8 if my_numbers: #if the list is NOT empty for i in range(len(my_numbers)): if my_numbers[i] \u0026gt; 100: my_numbers[i] = my_numbers[i] + 10 else: my_numbers[i] = my_numbers[i] + 1 else: my_numbers.append(1) However, I like this solution a bit better:\n1 2 3 4 if my_numbers: my_numbers = list(map(lambda x : x + 10 if x \u0026gt; 100 else x + 1, my_numbers)) else: my_numbers.append(1) This solution uses some less common features of Python and should look weird to you. You can probably figure out the first one, as what range() and len() do are pretty obvious, but what the hell are map() and lambda? We\u0026rsquo;ll get there.\nDon\u0026rsquo;t worry about being able to write code like this for now. Hell, you probably shouldn\u0026rsquo;t want to yet as, especially at first, writing code you can understand is more important than writing fast or pretty code: my preferred solution is roughly twice as fast, though even with 50,000 numbers, the \u0026ldquo;slow\u0026rdquo; solution only takes .0068 seconds on my computer.\nStill, if there were any other edge cases I\u0026rsquo;d probably go back to the obvious way, as it would be easier to read.\nAs one more aside, note above I said,\nif the number is greater than 100\nthis is an easy thing to screw up in programming, as this is different from\nif the number is greater than or equal to 100\u0026quot;\nThere are many different solutions to these problems, but that\u0026rsquo;s not my point.\nIdeally, this would never happen. It\u0026rsquo;d be great if from the start you knew everything your code had to do. Reality is that often working on a problem makes you realize small details and edge cases that weren\u0026rsquo;t initially obvious or that seemed absurd, so you just didn\u0026rsquo;t think about them. Many of these are about input validation, for example,\nSay a user has to enter a name, should they be able to enter \u0026quot;\u0026quot; (no letters at all)? What about \u0026ldquo;v̸̼͙̹̮̩̳͉̩̕ḛ̸̡̲͂̈́̽̽g̴̢̠̭̗̘͎̉͝a̶̖̯̳̯̭͚̹̹̎̀͝\u0026rdquo; or \u0026ldquo;🌢\u0026rdquo; or \u0026ldquo;ᵛᵉᵍᵃ\u0026rdquo; or \u0026ldquo;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\u0026rdquo; Say you\u0026rsquo;re making an inventory system in a game, and you have the ability to use a bag in the inventory to hold more items. If you\u0026rsquo;re not careful, you might add the ability to put a bag in the bag: you\u0026rsquo;d be able to hold infinite items as you stack bags into each other! Others are relevant to the design of a larger system, and require much more effort to change. For example, Minecraft used to generate worlds that were 128 blocks tall, with the bottom of the world being layer 1. Then, they decided to update the worlds to be 256 blocks tall, with the change being relatively straight forward as newly generated and previously generated sections of the worlds were both just given 128 blocks of vertical space to build into - this could be appended to in a relatively straight forward way - just add more \u0026ldquo;air blocks\u0026rdquo; to the sky.\nThen things got weird. They decided to add 64 more blocks going up and down. This required a few weird changes. First, the world now goes from -64 to 320, with \u0026lsquo;0\u0026rsquo; being roughly the middle of the underground before the bottom of the world (the old bottom). Strange number representation aside, there were extreme technical challenges to this, as the newly added downward space needed to be blended into previously generated worlds without this room. Additionally, the newly generated space was entirely different - the look of caves and the terrain above them had been entirely overhauled. Blending the old and new to combat the prior design decision likely required more complex and difficult work than the actual new world generation itself.\nFrom the FAQ page they implemented it such that new caves generate under the existing world and the new terrain blends with the old. It replaces what was previously the bottom layer (bedrock) with \u0026ldquo;deepslate\u0026rdquo; and then generates new caves under this. Just think about the challenge and stakes here! If anything goes wrong, it could destroy countless hours of work of players. It would really make the players lose trust in the developers and interest in the game.\nEven before your code is released to the world and there\u0026rsquo;s this potential expectation of backwards compatibility you may well design yourself into a corner that requires significant back peddling and re-work. Maybe you realize that two things you planned to run at the same time both need access to the same resource. Maybe you find out the scope of the project needs to be bigger, and that adding these new features will require old ones to change too. Shit happens.\nAs you get better at writing code, you\u0026rsquo;ll be better at seeing these before you start writing, but you\u0026rsquo;ll never be perfect at it because you can never know everything.\nUnfortunately, this all has security implications too. If you don\u0026rsquo;t fully understand the limits of what you write, someone else will find them for you, and they may not have good intentions.\n3½ \u0026hellip; Because you need to know what tool to use for the problem # Yunno\u0026rsquo; the expression \u0026ldquo;when you have a hammer everything is nail\u0026rdquo;? It\u0026rsquo;s a real problem in programming, because while you can use a hammer to pound in a screw, sharpen a knife, or smooth out wood, it\u0026rsquo;s probably going to be a real pain in the ass. Knowing that things like a screwdriver, knife sharpener, and sander even exist is half the battle. Of course, this can go the other way too- just because an ultra-specialized tool exits, you may still want to make do with what you have - having more tools is great, but each tool requires maintenance and upkeep of its own.\nThis is one of those things that comes with experience and knowing what problems tend to grow into unmaintainable monsters and so should be done by using a tool that solves the problem for you. For example: time.\nTime sounds easy. Storing the time, reading the time, etc. Yeah, no. Time zones, daylight savings, leap years, leap seconds, date formats, etc. will all make you hate your life as soon as you start to mess with time. You absolutely should use libraries and tools other people have made if you\u0026rsquo;re working with time.\nOn the other hand, some people over-use external tools. The is-odd JavaScript package, which just checks if a number is odd, has 425,000 downloads this week. As you\u0026rsquo;ll see later, doing this in code is as simple as\n1 2 if input_number % 2 == 1: return True * I\u0026rsquo;ve written this in Python here to match the rest of the page, it is slightly different in JavaScript This is extra dumb when you realize that the maintainers of the is-odd package could push a malicious update doing something as mundane as breaking it (making it is always say a number is odd, April Fools!) or making it check if a number is odd while also running code to mine cryptocurrency in the background!\nTo make matters worse, there\u0026rsquo;s a problem of deciding what level of abstraction you want to work at. While it\u0026rsquo;s possible to learn it all and be good at everything, most programmers pick a niche. Maybe you\u0026rsquo;re into web dev. Maybe you want to make games. (both of which are considered high-level). Maybe you want to make hardware move and be right down at the circuit level (which is known as low level). Most good low level programmers aren\u0026rsquo;t great high-level programmers, and vis-versa. Both can be a ton of fun though, and so you\u0026rsquo;ll inevitably want to do some of both.\nAs an extreme example, there\u0026rsquo;s these things called \u0026ldquo;Game jams\u0026rdquo;. These are events where programmer/artist/masochists (or small teams of masochists) will make an entire game in one weekend. The vast majority of these are going to use platforms which already give them things like a way to render 3D or 2D objects to the screen, to handle real time user input, physics between objects, etc. Making all of that stuff from scratch, for most programmers, would take months if not years to get something even remotely functional. In one weekend, they have to use everything they can to make the goals manageable.\nMy main point though is you should kind of always have an angel and a devil on your shoulders, one asking \u0026ldquo;Is this a problem I can solve easily with what I have\u0026rdquo; and the other saying \u0026ldquo;You should go look into what exists to make this easier\u0026rdquo;\nFinding the right tool will occupy a lot of your time programming at first, and will take up a fair amount of time again if you ever change the kind of code you\u0026rsquo;re working on. For example, at the start, you\u0026rsquo;ll have a lot to learn about things that are sort of meta for programming, like what text editor to use, what tools you need to build and run your code, what a debugger is, etc. plus a few extremely common tools for the program\u0026rsquo;s logic itself, like Regex for text processing.\nAs you dive into a project, you\u0026rsquo;ll often find you need something that make specific extremely hard problems much easier, but you\u0026rsquo;ll have to learn how to use that tool. For example, the math behind doing AI work is pretty damn complicated and getting it to run quickly is really important and very, very hard. Fortunately, if you google \u0026ldquo;How do I write AI code\u0026rdquo; you should pretty quickly run into mentions of \u0026ldquo;Tensorflow\u0026rdquo; and \u0026ldquo;Pytorch\u0026rdquo;, both of which are incredible tools that will make AI stuff, not-quite-easy but it will change the bar from nearly impossible to \u0026ldquo;Oh, I can do that\u0026rdquo;.\nAgain, these vary from problem to problem, but it\u0026rsquo;s actually insane how many really hard problem are approachable because of the existence of good, application-specific tools.\n4. Because your code has to run on hardware (and probably an OS too) # Running on hardware varies in importance.\nIf you\u0026rsquo;re writing a quick utility that doesn\u0026rsquo;t do much and runs infrequently, it can be a bit slow and it doesn\u0026rsquo;t really matter. An extra few hundredth of a second won\u0026rsquo;t be noticeable to anyone in that case.\nBut what about a game or an audio effect? For a game, you probably want to get at least 60FPS, for audio you\u0026rsquo;re probably processing that audio 48,000 times a second. That means for the game you need to do all your calculations in 1/60th of a second window (or faster) consistently. For audio you have 20 microseconds to process each sample.\nThis means you need to take full advantage of your hardware to hit those targets.\nThis means looking into ways you can speed things up. For most games, this means using the graphics card (though usually you\u0026rsquo;d be using something that does this for you). For audio stuff, this means digging into each function call to figure out what\u0026rsquo;s slowing you down. Maybe you\u0026rsquo;re trying to compute sin(x) and sin() is just to slow, so you may need to dive into learning about approximations of sine or figure out how to use a look up table.\nOf course, this same concept applies to more than audio and games, you can find performance critical code in anything - though in many applications \u0026ldquo;bad\u0026rdquo; performance is relative. Users won\u0026rsquo;t care if their accounting software takes an extra few hundredths of a second to finish a calculation.\nYou\u0026rsquo;ll also have to know what causes slow downs.\nFor example, your processor and graphics card are crazy fast, but your bulk storage (SSD or HDD) isn\u0026rsquo;t. If you\u0026rsquo;re making a game and you try to load the next level in full between two frames you can \u0026hellip; it\u0026rsquo;s just that those two frames are going to be a hell of a lot more than 1/60th of a second apart and the user is going to wonder if their game just froze.\nThis brings up a common problem in programming:\nIs it faster/better to check if something needs done, and only do it if it does, or is it faster to just do it regardless (doing something useless if it doesn\u0026rsquo;t actually need done)\nThe answer is a massive \u0026ldquo;It depends\u0026rdquo;. It depends on the hardware. It depends on if consistent times or lowest total time is important. It depends on if doing the thing will slow other things down. It depends on how much time it takes to check vs how much time it takes to do.\nIt also depends on if you care at all. Does writing the check take more code? That\u0026rsquo;s also a factor. Every line of code is another line where you could accidentally introduce a bug.\nDeeper still, you may be writing code for an embedded system. These are chips that, usually, are roughly on par in power with a computer from the 80s but consume very little power (Some as little as nanoamps when in low-power states) and let you directly send electrical signals to other parts, like LEDs, motors, etc.\nOn these systems there is a memory address that if you write a \u0026lsquo;1\u0026rsquo; to (binary 1\u0026rsquo;s and 0\u0026rsquo;s, I mean) it will make a pin on the physical chip on which the processor resides output a higher voltage. Similarly, you\u0026rsquo;ll have memory address you can read that will tell you if there\u0026rsquo;s a signal on that pin. These devices are everywhere. In your keyboard (even if you\u0026rsquo;re on a laptop) and your mouse. In your alarm clock. In your Bluetooth speakers. In industrial equipment. In your smart light bulbs. In many newer guitar pedals. In your TV. Even a normal computer (or things you\u0026rsquo;d think of as one, like a game console or SmartTV) will have multiple of these really lame computers in them.\nThis opens an enormous can of worms. If you\u0026rsquo;re working on something like this, you\u0026rsquo;ll often have to make sure those signals are actually \u0026lsquo;clean\u0026rsquo; enough for the processor to read and that when you toggle a pin, the signal you send gets to where it\u0026rsquo;s going like it should, even though you might be toggling these pins a million times a second.\nThen there\u0026rsquo;s the Operating System (Windows, Mac, Linux) that you\u0026rsquo;re code - if not for an embedded system - is likely to be running on. These will provide systems for things like multi-threading (letting your program do two or more things at once), a way to access file (you can\u0026rsquo;t go changing bytes on the hard drive at will - the OS will make you ask for a file to read, modify, and save), and access to networking. You can think of the OS as very beefy waiter at a bar. He\u0026rsquo;ll happily take your order and get you what you need, but if you try to go into the kitchen yourself, he won\u0026rsquo;t hesitate to throw you out.\nIn short: How you use your hardware dictates performance, the OS may limit how you use your hardware, but make doing so much easier and more secure.\nWhy is learning programming hard? # You\u0026rsquo;re trying to learn how to model problems, how computers fundamentally work, how to make good solutions, and how to think ahead all at once, and on top of it all, you need to learn how to actually express your intent to the computer via text with some weird, very strict rules that occasionally let you express something that looks correct but isn\u0026rsquo;t.\nThis sorta sucks.\nThere\u0026rsquo;s a better way. Don\u0026rsquo;t worry about \u0026ldquo;Code\u0026rdquo;. # At least at first, don\u0026rsquo;t worry about what language you\u0026rsquo;re using or even how to write code. That\u0026rsquo;s such a minor part of programming anyway. Later we\u0026rsquo;ll talk about how you really don\u0026rsquo;t get to pick the languages you use anyway - the project dictates that. For now, let\u0026rsquo;s build the problem-solving skills to make working with code less awful. How? Video Games!\nI Can\u0026rsquo;t Believe It\u0026rsquo;s Not Code! # Programming uses more-or-less the same brain muscles as puzzle video games. In a few cases, it\u0026rsquo;s actually exactly the same brain muscles. So, while they\u0026rsquo;re not free, I don\u0026rsquo;t know of a better way to learn to program than starting with a few of these games (not all!). If you have no idea what to choose, go with Factorio first.\nTitle More Game-like or More Programming The Signal State Ehh? (Logic Puzzle) Opus Magnum Ehh? (Factory Sim-ish) MHRD Programming (Hardware) TIS-100 Programming (Assembly) Shenzen I/O Programming (Hardware + Assembly) Infinifactory Game (Factory Sim) Shapez Game (Factory Sim) Factorio Game (Factory Sim) Even if you think \u0026ldquo;But I\u0026rsquo;ve written some code before!\u0026rdquo; because you\u0026rsquo;ve written at least a few lines of Python or Lua or JavaScript, you\u0026rsquo;d still probably benefit from starting here.\nAlright, I played some games / Ignored your advice, now what? # Alright, depending on what you played, you may have been exposed to at least a tiny bit of code, but it\u0026rsquo;s still pretty far off from \u0026ldquo;real\u0026rdquo; code. So, let\u0026rsquo;s look at closer-to-real-but-not-really-yet code. Play around with these for a while. Get a feel for what things mean, the effect you can have on something in a tangible way using math and logic.\nThis is tixy.land \u0026ndash; Click on the moving dots to advanced though a lil\u0026rsquo; tutorial and some examples\nHere in tixy land, you can try out some code. I don\u0026rsquo;t want to lead you to anything. Just, type something. See what happens.\nEven if you don\u0026rsquo;t understand all the math or what the symbols mean I\u0026rsquo;m sure you can get a rough idea of what\u0026rsquo;s going on.\nYou can usually make something cool by just entering a bunch of trig and making complex functions you don\u0026rsquo;t truly understand. You\u0026rsquo;re learning, that\u0026rsquo;s fine, no shame. Here, for example, is one I made by wandering around trig functions, for example, asin((t/9*(i/32*sin(t/4))*y)%5)\nAt risk of going off on a pretty big tangent, I recommend checking out some tixyland-like sites\nhttps://hexy.now.sh is inspired by tixy but has some extra, interesting features, if you\u0026rsquo;re having fun with tixy.land it\u0026rsquo;s worth checking out.\nhttps://doersino.github.io/tixyz/ is the same as tixy, but adds a 3rd dimension\nhttps://play.ertdfgcvb.xyz/ is similar, but lets you write dramatically more advanced code\n"},{"id":144,"href":"/engineering/programming/intro/prog10/","title":"Prog10","section":"Engineering","content":" Chapter 10.10 - The rest of the Owl # Okay, so, we\u0026rsquo;ve gone over types and functions and operations and all of that jazz, but there are a few little pieces that have been left out, so, let\u0026rsquo;s do some of them rapid fire\nMultiple files # In any language, once your code gets big enough, working in one really long file is going to become a clusterfuck.\nPython # In python, this is stupidly easy. Lets say we want two files so we make one file containing this:\n1 2 def double_and_add_one(number): return((number * 2) + 1) and name it my_number_tools.py\nThen, we make another file in the same folder, and call it whatever we want, in it we can put\n1 2 3 import my_number_tools print(my_number_tools.double_and_add_one(1)) And, look at that, we\u0026rsquo;ve now used multiple files. You can avoid using the file name with a dot before the function name if you import the specific function, that is,\n1 2 3 from my_number_tools import double_and_add_one print(double_and_add_one(1)) also works.\nIf you need anything more complicated than that, here\u0026rsquo;s Splitting Code Into Multiple Files (teclado - 30 Days of Python). (1)\nC # Multiple files in C is much weirder, because it actually makes you double the amount of files you should need because of design decisions that made sense 60 years ago but are very stupid today. Regardless, in C lets say you have your main file with your main() function…\n… er, side note, the function called main() is very important in C, as it\u0026rsquo;s the entry point to the program. It\u0026rsquo;s where it starts.\nAnd we call that file myProgram.c and it looks like this\n1 2 3 4 int main() { return 0; } As is, it does literally nothing other than finish by telling the computer it finished correctly (return 0) but we have another file with some function we want to call, we\u0026rsquo;ll call this file myOtherFile.c and let\u0026rsquo;s put this in it:\n1 2 3 4 5 6 7 8 9 #include \u0026lt;stdio.h\u0026gt; #inclued \u0026lt;stdint.h\u0026gt; // Note, with the above include, every file that depneds on a library should include that library. uint8_t my_other_function(void){ printf(\u0026#34;OWO\\n\u0026#34;); return 0; } Okay, now we want to call this function from main(). Welp, to do this, we actually need to make yet another file called a header file, which, importantly, ends in .h instead of .c (like the libraries we\u0026rsquo;ve been using so far). In this header file we need to put the function declaration. This is different from the function definition, which is what we put in the .c file and has the actual logic (in this case, just the print). The declaration is just what the outside code needs to know about the function - that is what it takes in and what it returns.\nIn our case, we made a function that takes in no argument (the void after the function name) and returns an 8 bit integer, so our header file, which should be named the same thing but end in .h - so be named myOtherFile.h should have the declaration of the function and any includes that declaration needs to make sense.\nWhich, uh, that\u0026rsquo;s a long way of saying it should look like this:\n1 2 3 #include \u0026lt;stdint.h\u0026gt; uint8_t my_other_function(void); with the #include \u0026lt;stdint.h\u0026gt; being necessary because the function definition needs to know what uint8_t means even in this header.\nNow, things get weirder yet. The file that header goes to and any file that calls this function now needs to #include this header file, so, for both myProgram.c and myOtherFile.c we need to add the line\n#include \u0026quot;myOtherFile.h\u0026quot;\nBut, if you\u0026rsquo;re eagle eyed, you\u0026rsquo;ll notice here that file name is in quotes while where we did #include \u0026lt;stdint.h\u0026gt; it was in \u0026ldquo;angle brackets\u0026rdquo; (yes, that\u0026rsquo;s what we call them in this context.)\nThe reason for this (glossing over a few details), is \u0026quot;filename.h\u0026quot; says to check nearby folders/local paths, while \u0026lt;filename.h\u0026gt; checks for the file in the system include path, which should be set by default to something sane on literally every operating system and will have all of the standard files we expect - that is, you shouldn\u0026rsquo;t have to think about or even know where a file in \u0026lt;\u0026gt; is from, but a file in \u0026quot;\u0026quot; should be near by or in the same project.\nOkay, but this still isn\u0026rsquo;t everything because C is super-duper fucked and we need to do one more thing in our header, we need to add \u0026ldquo;include guards\u0026rdquo; (Wikipedia) which, if you\u0026rsquo;re not stuck in the 90\u0026rsquo;s, is most easily done like this:\n1 2 3 4 #pragma once #include \u0026lt;stdint.h\u0026gt; uint8_t my_other_function(void); It\u0026rsquo;s just that extra #pragma once, but understanding why this is necessary is pretty important and will save you some hair pulling later (thanks, C.) so seriously check out the parent/grandparent/child example on that Wikipedia page and you\u0026rsquo;ll see why we want this at the top of every .h file.\nOkay, so total you should have three files: myOtherFile.c, myOtherFile.h, and myProgram.c. If you followed along, you should now be able to call the function in myProgram.c:\n1 2 3 4 5 6 7 8 #include \u0026lt;stdint.h\u0026gt; #include \u0026#34;myOtherFile.h\u0026#34; int main() { return my_other_function(); } and the code should compile and run… almost. Now we get to deal with the joy of getting C to compile and link multiple files,\nWait. Slow down, link? Yep. Link. And here\u0026rsquo;s where things get even more fun - there\u0026rsquo;s a third kind of file. Fortunately, you don\u0026rsquo;t have to write this one - it gets generated automatically. It\u0026rsquo;ll a .o or \u0026ldquo;object\u0026rdquo; file.\nObject files are the individual chunks of complied code from each file. They exist as a sort of in-between as a program is turned into an executable program and your source code.\nAs an analogy, imagine you\u0026rsquo;re working with Legos and you\u0026rsquo;re building a plane. You might have instructions for building a wing, engines, the main body, the nose, and the tail.\nThe wings may say they need you to attach the engines, and the body the wings (with the engines on them), the nose, and the tail. When you\u0026rsquo;re done, you\u0026rsquo;ll have a plane.\nThe instructions for each piece are the .c files, but the places in those instructions where it says to attach one assembled unit to another (like a wing to the body) is sort of like a header (.h) file. Importantly though, at this point, you\u0026rsquo;ve only got instructions.\nIf you finish making a wing, that\u0026rsquo;s now an object (.o) and, so long as how the wings attach (the .h) doesn\u0026rsquo;t change, you could rebuild the body (change the .c and make a different .o for the body) repeatedly without re-building the wing.\nOn a more technical level, this going from the .c to .o is compiling and assembling (yep, two steps, there\u0026rsquo;s actually a .s in there too, but normally we don\u0026rsquo;t care) and the .o to the finished executable program is linking.\nDoing all of this for a lot of files tends to get messy and hard to keep sorted though, so, naturally, we made a programming language for building our programs. Yep, not kidding. That language is Make and you\u0026rsquo;ll make a Makefile. Super clear and not confusing at all, right?\nA point of confusion from this - we\u0026rsquo;ll call the entire process compiling/compilation and the tools to do it compilers even though they\u0026rsquo;re usually full compilers, assemblers, and linkers. This is because, unlike ye\u0026rsquo; olden days where these were separate tools, anymore you just shove it though GCC or Clang and it does everything for you. You really don\u0026rsquo;t need to think about it being multiple steps except for when you\u0026rsquo;re writing the Makefile so, buckle up, because we\u0026rsquo;re gonna learn Make. And by we\u0026rsquo;re going to learn, I mean I\u0026rsquo;m going to throw you at some links because, like writing code, I don\u0026rsquo;t want to reinvent the wheel and, more importantly, leaning to read technical resources (like this website) is an important skill - and one you\u0026rsquo;ll get better at if you see different styles of technical writing.\nA Simple Makefile Tutorial (Bruce A. Maxwell @ Colby College)\nUsing make and writing Makefiles (Tia Newhall @ Swarthmore College)\nThese are pretty dense and you may not actually understand everything! That\u0026rsquo;s 100% okay. For now, we just need to make something that works. Even if it\u0026rsquo;s almost entirely done via copy and paste. Both of these mention .o files along side the .c and .h you\u0026rsquo;ve seen. .o files are \u0026ldquo;object\u0026rdquo; files and are (as a very minor simplification) the individual chunks of complied code from each file, they\u0026rsquo;re not something you\u0026rsquo;ll ever write directly. Instead, they exist as a sort of in-between as a program builds.\nAs an analogy, imagine you\u0026rsquo;re working with Legos and you\u0026rsquo;re building a plane. You might have instructions for building a wing, engines, the main body, the nose, and the tail.\nThe wings may say they need you to attach the engines, and the body the wings (with the engines on them), the nose, and the tail. When you\u0026rsquo;re done, you\u0026rsquo;ll have a plane.\nThe instructions for each piece are the .c files, but the places in those instructions where it says to attach one assembled unit to another (like a wing to the body) is sort of like a header (.h) file. Importantly though, at this point, you\u0026rsquo;ve only got instructions.\nIf you finish making a wing, that\u0026rsquo;s now an object (.o) and, so long as how the wings attach (the .h) doesn\u0026rsquo;t change, you could rebuild the body (change the .c and make a different .o for the body) repeatedly without re-building the wing.\nOn a more technical level, this going from the .c to .o is compiling and assembling (yep, two steps, there\u0026rsquo;s actually a .s in there too, but normally we don\u0026rsquo;t care) and the .o to the finished executable is linking.\nA point of confusion from this - we\u0026rsquo;ll call the entire process compiling/compilation and the tools to do it compilers even though they\u0026rsquo;re usually full compilers, assemblers, and linkers. This is because, unlike ye\u0026rsquo; olden days where these were separate tools, anymore you just shove it though GCC or Clang and it does everything for you. You really don\u0026rsquo;t need to think about it being multiple steps except for when you\u0026rsquo;re writing the Makefile\nCool, what you should\u0026rsquo;ve wound up with is something like a file literally named MAKEFILE containing:\n[TODO]\nOne more thing - while MAKEFILEs are great, we do want something will integrate with whatever we\u0026rsquo;re using for development a bit better so that debugging and testing is faster and easier. I\u0026rsquo;m going to assume you\u0026rsquo;re using VSCode, so let\u0026rsquo;s setup a VS code workspace for our little 3 file demo project too:\n[TODO]\nSome advantages to having gone though all of that:\nre-making our program will only make the parts that have changed. For something small, this doesn\u0026rsquo;t matter. For something big, this can save multiple minutes every time. Okay, so you\u0026rsquo;ve just leaned Make - here\u0026rsquo;s a little secret - like C itself, many people aren\u0026rsquo;t thrilled with the state of Make either. It was great for its time, but it came out in 1976. Clearly, it\u0026rsquo;s been updated, but the problems (and complexity of our code) of 1976 and the problems of today aren\u0026rsquo;t the same. Why still learn it? Same reason as C - everything uses it and all the new stuff assumes you already know it.\nBut, again, the problems of 1976 aren\u0026rsquo;t today\u0026rsquo;s problems, so it\u0026rsquo;s actually more fucked than this, mostly because Make is a massive pain if you want to support more than one OS or architecture, and hand-writing make files is a recipe for making stupid, small mistakes, so, naturally, we made yet another language for generating code for our language to compile code written in C. This language (er, it\u0026rsquo;s more a set of tools with their own language) is Automake and, because anything involving C is at minimum 20 years behind, it was released in 1996.\nStill, if we don\u0026rsquo;t at least acknowledge that there may be better tools out there, then we\u0026rsquo;ll never stop using the ones made back in the 70\u0026rsquo;s. So, of all the modern Make alternatives, the most notable are probably SCons, Waf, Bazel,\nThis 30 days of python series is decent, but paced a little weird and wants you to use web tools instead of running it locally on your computer - basically, if you're going to look at more of it, ignore \"day 1\" and go get python setup on your actual computer (like we did back in the programming intro) and expect to do like 6 days at a time at first. "},{"id":145,"href":"/engineering/programming/intro/prog1math/","title":"Prog1math","section":"Engineering","content":" Chapter 10.1 - It\u0026rsquo;s math? # Let\u0026rsquo;s talk math and look at some real code.\nI think a lot of people over estimate how hard it is to handle even the more complex math. As an example, let\u0026rsquo;s estimate π. (You should never actually do this in code - just use a library which will provide a pre-computed value of pi anywhere you need it!) To do this, we need a formula. Now, I don\u0026rsquo;t know about you, but I don\u0026rsquo;t have a formula for estimating pi in my head, but look at Wikipedia we can use Madhava\u0026rsquo;s method, which looks like this:\n\\(\\pi ={\\sqrt {12}}\\sum _{k=0}^{\\infty }{\\frac {(-3)^{-k}}{2k\u0026#43;1}}={\\sqrt {12}}\\sum _{k=0}^{\\infty }{\\frac {(-{\\frac {1}{3}})^{k}}{2k\u0026#43;1}}={\\sqrt {12}}\\left({1 \\over 1\\cdot 3^{0}}-{1 \\over 3\\cdot 3^{1}}\u0026#43;{1 \\over 5\\cdot 3^{2}}-{1 \\over 7\\cdot 3^{3}}\u0026#43;\\cdots \\right)\\) and, yeah, I can see you thinking \u0026ldquo;WHAT THE FUCK!\u0026rdquo; when you see that, especially if you\u0026rsquo;re a high schooler reading this and have never seen the \\(\\sum\\) symbol. So, let\u0026rsquo;s break this down. That symbol just means to take the sum of some numbers, for example, \\(\\sum _{k=1}^{\\infty }{k}\\) just means to add up numbers infinitely, starting at 1, so, 1+2+3+\u0026hellip;;however, this symbol is really helpful if we want to do something with each number, for example, \\(\\sum _{k=1}^{\\infty }{\\frac{1}{k}}\\) would mean that we want to do \\(\\frac{1}{1}\u0026#43;\\frac{1}{2}\u0026#43;\\frac{1}{3}\u0026#43;\\frac{1}{4}\u0026#43;...\\) , so, now, hopefully, the first line makes a bit more sense. So, how would we put this into code?\nWell, in programming we can do something called a while loop, this means to do something as long as a condition is true. If we want something to happen forever, we can just make that condition always be true, so, we can say, while True: to do something forever, over and over again. Then, we just need to make a variable to store what place we\u0026rsquo;re at (k) and a place to keep adding up the result. Finally, computers are really fast, so to make it so that we can see each step in the process, we need to slow it down by telling the program to sleep for a little while after each step. So, even if you don\u0026rsquo;t know how to read code yet, you should be able to see how this is the same math, just in code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 import math import time # Calculate Pi using Madhava\u0026#39;s method k = 0 # start at 0 result = 0 # make a place to store our answer while True: numerator = (-3)**(-k) denominator = ((2*k)+1) result += numerator/denominator # The above is the same as result = result + (numerator/denominator) print(math.sqrt(12)*result) k += 1 # increment k time.sleep(.25) # wait before running again And, if we run that code (written in the Python programming language):\n╭─vega@lyrae ~ ╰─➤ python3 madhavapi.py 3.4641016151377544 3.0792014356780038 3.156181471569954 3.1378528915956805 3.1426047456630846 3.141308785462883 3.1416743126988376 3.141568715941784 3.141599773811506 3.1415905109380797 3.1415933045030813 3.1415924542876463 3.14159271502038 3.141592634547314 3.141592659521714 3.1415926517339976 3.1415926541725754 3.141592653406165 3.1415926536478262 3.1415926535714034 3.141592653595635 3.1415926535879337 3.1415926535903864 3.1415926535896035 3.141592653589854 3.141592653589774 3.1415926535897998 3.1415926535897913 3.141592653589794 3.1415926535897936 3.141592653589794 You can see it does indeed zero in on pi! It will repeat that last answer, 3.141592653589794, forever though, as we\u0026rsquo;ve actually run out of precision. The way this code was set up we\u0026rsquo;re limited by the number of digits after the decimal point Python can represent without some workarounds. Also, that answer is actually wrong as the last digit is wrong. Without enough precision in the calculations, it never gets corrected. Still, we got 14 digits after the decimal correct, which for nearly everything you\u0026rsquo;d ever want to do is plenty. We\u0026rsquo;ll talk about this more later though.\nAll of that said, at the start of this program, we ran import math to give us that square root function, well, it turns out the math library just has pi built in as a constant value (saved, so it doesn\u0026rsquo;t need computed on the fly) so we could just use math.pi, which gives 3.141592653589793, so the last digit is correct. Should you ever need to use pi in your code, this is how you should do it.\nBack to the point though, going from \\({\\sqrt {12}}\\sum _{k=0}^{\\infty }{\\frac {(-3)^{-k}}{2k\u0026#43;1}}\\) to code may look scary, but as you can see it\u0026rsquo;s actually quite straight forward.\n"},{"id":146,"href":"/engineering/programming/intro/prog2turtle/","title":"Prog2turtle","section":"Engineering","content":" Chapter 10.2 - Turtles All The Way Down # Low Level and High Level Programming # There are two types of programming, high level and low level.\nHigh level programmers make things where the hardware doesn\u0026rsquo;t matter. The code they write runs everywhere, and the users directly see it and interact with it.\nLow level developers write code that runs directly on the hardware. The software inside the controller on your mouse to the driver on your computer for responding to that input, that\u0026rsquo;s all low level.\nI want you to be neither. Be an all level programmer. Why?\nMost low level devs will feel far from home using existing code and high level functions to make a video game. This will make a low level dev reach for building the foundations first, wasting time reinventing wheels that may not need reinvented. They also are less likely to know about - or even think to look for - common high level techniques. They\u0026rsquo;re also likely to get overly wrapped up in optimization problems that don\u0026rsquo;t need it. If you\u0026rsquo;re making a game, it only needs to push out a frame at the monitor\u0026rsquo;s refresh rate, not 10000 FPS. They\u0026rsquo;re likely to overestimate how hard it is to make complex software, because they\u0026rsquo;re thinking about building every little piece by hand.\nI am a low level dev, I know it, and I try to recognize when I do this. Most high level devs would struggle to optimize a section of their game if they want to add a feature that would otherwise tank performance to the point of making things unplayable. They may lack the understanding of how the code actually runs on the hardware to know why something is bad. They also may have preconceptions about what\u0026rsquo;s even possible (in either direction) because they don\u0026rsquo;t know enough about what the hardware can do or how to best take advantage of it. They\u0026rsquo;re also likely to reach for off the shelf solutions to as easily when making something custom would actually be faster and easier to maintain.\nI am a low level dev, and the high level devs writing slow, shitty code drives me nuts…. but, they\u0026rsquo;re still making cool things faster than I can. Learning both, with a 🐢 # I would really like to teach you programming from the top down, starting with something easy like the Python programming language and then talk about how things really work using the C Programming language. The problem is, when looking at Python code you\u0026rsquo;ll occasionally need to deal with things that simply don\u0026rsquo;t make sense without the context of a lower level language like C. Meanwhile, there are some things that C just… doesn\u0026rsquo;t have. This means there are three options:\nLearn C first, hate it, and think all programming is hard before learning python Learn Python first and occasionally be tripped up by concepts like pointers and types Learn both at the same time, and risk confusion as we learn two languages at once. I\u0026rsquo;m going to go with option 3 for OpGuides, so, keep in mind as you read on that you\u0026rsquo;ll be seeing two different languages and that this can be really confusing.\nAll this is to say, as hard as it is to learn to program, it\u0026rsquo;s just as hard to teach it. Worse yet, learning these fundamental concepts is really. fucking. boring. So, while you\u0026rsquo;re going to have to slog through it in a bit, I do want to at least give you some motivation first, something more exciting than calculating pi, so, I\u0026rsquo;d like to start with a Turtle. In a programming context, a Turtle is just a dot that you can move around the screen that leaves a trail.\nGo ahead and go to www.pythonsandbox.com/turtle in another tab. The starting program looks like this:\n1 2 3 4 import turtle t = turtle.Turtle() t.speed(5) # 1:slowest, 3:slow, 5:normal, 10:fast, 0:fastest t.forward(100) and, as you might guess, makes a single \u0026lsquo;100 long\u0026rsquo; straight line. Even without looking up how to use the Python Turtle Graphics Library documentation page (which you should definitely do) you can probably guess that you have options like t.left(90). So, just play around a while, like probably an hour or so. Read the doumentation page and try some of the options. Maybe search the web for some examples.\nAs a bit of a hint, on this documentation page they initialized their turtle as turtle = turtle.Turtle(), so while they use examples like turtle.color(\u0026quot;blue\u0026quot;), you\u0026rsquo;ll need to use t.color(\u0026quot;blue\u0026quot;) unless you change it.\nTo get you started, here\u0026rsquo;s a few things you can copy paste, then change some of the numbers in:\nRandom Walk 1 2 3 4 5 6 7 import turtle from random import random t = turtle.Turtle() t.speed(0) while True: t.left(random()*360) t.forward(10) Colorful Circles 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import turtle from random import random t = turtle.Turtle() t.speed(0) t.pensize(10) rgb = 100,10,100 i = 0 while True: i += 1 rgb = (i/3)%255,(i/2)%255,i%255 t.pencolor(rgb) t.left(5) t.forward(10) if (i%255 == 0): t.left(60) Jagged Ring 1 2 3 4 5 6 7 8 9 10 import turtle t = turtle.Turtle() t.speed(0) # 1:slowest, 3:slow, 5:normal, 10:fast, 0:fastest for _ in range(0,40): for i in range(0,360,30): t.left(i) for j in range(0,360,60): t.right(j+i) t.forward(15) t.left(80) Now you\u0026rsquo;re thinking with portals code. # The turtle is neat and all, but it\u0026rsquo;s also pretty useless, so you\u0026rsquo;re probably thinking either \u0026ldquo;What can I do with code anyway?\u0026rdquo; or \u0026ldquo;When do I get to learn how to make games/software/robots/etc.\u0026rdquo;, well, to answer each respectively: Anything, and you already are.\nI\u0026rsquo;m not holding you back from some secret tools of programming. Yes, there are advanced topics like using recursion, connecting up a database, regular expressions, lambda calculus, etc. but each of those things are tools you reach to for specific problems. In general, it doesn\u0026rsquo;t really matter what you\u0026rsquo;re working on, it\u0026rsquo;s (mostly) going to be data structures, variable, loops, conditions, and all the other things you\u0026rsquo;ll see as we work though these intro pages. It\u0026rsquo;s really just a matter of being able to see the big thing you want to make (a game, software tool, robot, etc.) and breaking the problem into parts that you can describe both the attributes and functionality of.\nThis is the thing that reading simple guides about \u0026ldquo;What is an if statement?\u0026rdquo; or \u0026ldquo;how do I use a for loop?\u0026rdquo; doesn\u0026rsquo;t answer, and I think where a lot of people get stuck.\nUnfortunately, when you do get here, the first response to anyone trying to teach programming is to say \u0026ldquo;Abstraction\u0026rdquo;, which, even if you fully understand abstraction and object orientation and blah blah blah it doesn\u0026rsquo;t help you mentally cross that bridge of making the thing. So while, yes, I\u0026rsquo;ll get to that, I want to address some of this before we ever actually start leaning programming concepts I want to just give the briefest possible crash course in problem-solving, with one single line:\nBreak.👏The.👏Problem.👏Down.👏\nIf you want to make a video game, you can\u0026rsquo;t just will it into existence by throwing code at a wall. You need to break the problem down. Maybe you need an inventory system? What would that look like? Does it need to handle stacking items? What attributes do items need to have? Number of uses? Edible? Tradable? Rarity? Do they need to each have a picture, name, and description? Well, before you write any code, you should be thinking about the structure of the thing you want to make. Eventually, when it\u0026rsquo;s broken down enough, you\u0026rsquo;ll realize you can represent those things via math and data.\nYou\u0026rsquo;ll often hear good programmers say a good data structure with bad code is still a hundred times better good code with a bad data structure. This is really a reflection of the above. When you break the problem down, you need to really understand what attributes each thing has, what they \u0026ldquo;belong\u0026rdquo; to, what valid values are (as in, are there some values that conflict), etc.\nIf you do this well, you can pretty much make anything given enough time. Still, I don\u0026rsquo;t recommend jumping directly into making games or robots or whatever million-dollar idea you may have. Let\u0026rsquo;s make a bunch of trivial programs and actually explore what code is.\nSo how do you get good at this?\nProjects.\nWrite code. Write more code. Keep writing code.\nReading a book or guide like this website can only help so much.\n… that said, do stick around, I haven\u0026rsquo;t even told you any of the basics yet!\n"},{"id":147,"href":"/engineering/programming/intro/prog3tools/","title":"Prog3tools","section":"Engineering","content":" Chapter 10.3 - Getting Tools # As mentioned before, you\u0026rsquo;ll be learning both Python and C. This means we need to get the tools necessary for working with each. If you\u0026rsquo;re following along with OpGuides as a whole and have Linux setup, this will be easy. If you\u0026rsquo;re on Windows it\u0026rsquo;s not hard but there are some annoying steps we\u0026rsquo;ll need to jump through.\nGetting Code To Run # Arch Linux Run pacman -Syu gcc python, then you\u0026rsquo;ll want to grab visual-studio-code-bin from the AUR. You should have yay installed, so this should be as simple as yay -S visual-studio-code-bin.\n[TODO] code plugins\nFinally, let\u0026rsquo;s quickly test both languages.\nStarting with the C language, go ahead and, using VSCode, make a new file containing\n1 2 3 4 5 #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello, World!\u0026#34;); return 0; } and save it as hello.c (pay attention to where you save it to, you may want to make a new folder for programming, and maybe make a new folder in that for C programs), then, using a terminal, get to the folder (using cd, pwd, and ls as necessary). When you\u0026rsquo;re there, go ahead and run gcc hello.c -o hello, this will take the code and compile it for you to run, so now you should be able to run ./helllo and you should see \u0026quot;Hello, World!\u0026quot; as output.\nNext up, let\u0026rsquo;s test python. This is even easier - just run python, this should bring up the python Read Evaluate Print Loop or REPL interface. This is a way for you to test code without even saving it as a file, so try just putting in 1+1 and pressing enter. Use exit() (or Ctrl+D) to quit. Then, let\u0026rsquo;s try making a file too. Open up VSCode again and this time make a new file containing\n1 print(\u0026#34;Hello, World!\u0026#34;) and save it as hello.py. Again navigate to where it is stored and now just run python hello.py and you should see the expected \u0026quot;Hello, World!\u0026quot; as output.\nWindows [TODO] Win Mac [TODO] Mac Other Linux [TODO] Other Lin Debugging! # Alright, now that we know we can write and run code in both languages, we also need to make sure we can debug code. This is sort of jumping the gun a bit, but it will help to learn if you can actually see things run step-by-step.\nNormally, when you run code it runs everything as fast as it can, this is great when it works, but bad when it doesn\u0026rsquo;t, and you need to know why. So, let\u0026rsquo;s start with python. Go ahead and make a new file (ctrl+n,ctrl+s) and name it testdebug.py. Go ahead and put the following in that file:\n1 2 3 4 5 6 7 8 my_friends = [\u0026#34;Kiri\u0026#34;,\u0026#34;Soatok\u0026#34;,\u0026#34;Loial\u0026#34;,\u0026#34;Ashlyn\u0026#34;,\u0026#34;Cendyne\u0026#34;,\u0026#34;Dusk\u0026#34;,\u0026#34;Saphire\u0026#34;,\u0026#34;Cadey\u0026#34;,\u0026#34;Lint\u0026#34;] for friend in my_friends: print(friend, end=\u0026#39;\u0026#39;) if friend == \u0026#34;Sotok\u0026#34;: print(\u0026#34;\\tWARNING: FULL OF PUNS\u0026#34;) else: print() Now, you can run this code from within VSCode by (Ctrl+F5) or going to \u0026ldquo;Run\u0026rdquo;→\u0026ldquo;Run Without Debugging\u0026rdquo;. If you run it, you should notice that \u0026ldquo;WARNING: FULL OF PUNS\u0026rdquo; never prints into the terminal that opened at the bottom of your screen:\nNow, this bug is easy enough to spot, on line 5, \u0026ldquo;Soatok\u0026rdquo; is spelled incorrectly. Still, let\u0026rsquo;s see what happens if we debug. This time, go ahead and run with debugging (F5) or \u0026ldquo;Run\u0026rdquo; → \u0026ldquo;Start Debugging\u0026rdquo;. You should notice the exact same thing, the program runs and finishes. What gives! Well, we need to set a breakpoint. Next to line 1, click to the left of the line number and you should get a red dot. Now, start debugging again (F5) and you should see the red dot get surrounded by a pentagon and somewhat look like music controls at the top of your screen:\nIf you hover over the controls you\u0026rsquo;ll see that, from left to right, they say \u0026ldquo;Continue (F5)\u0026rdquo;, \u0026ldquo;Step Over (F10)\u0026rdquo;, \u0026ldquo;Step Into (F11)\u0026rdquo;, \u0026ldquo;Step Out (Shift+F11)\u0026rdquo;, and \u0026ldquo;Stop (Shift+F5)\u0026rdquo;. If you press Step Over (F10) (the curved arrow), you should see the pointer move to the next line:\nGo ahead and click it a few more times. You should see it iterate over each name, but not ever hit the print(\u0026quot;WARNING: FULL OF PUNS\u0026quot;)\nYou should also notice on the right, that as you step though, there\u0026rsquo;s a list of variables and what their current values are. With this, you can actually see the name that will be printed next before it does so.\nIn theory, you could watch for when friend took on the value soatok and you would see that it does not trigger that if. So, go ahead and change the line to if friend == \u0026quot;Soatok\u0026quot; and re-run the program. This time, you\u0026rsquo;ll be warned that Soatok is full of puns.\nNow, let\u0026rsquo;s do the same thing with C. Again make a new file with (Ctrl+n), followed by (Ctrl+s) and name this file testdebug.c.\nYou\u0026rsquo;re about to see code written in the C programming language for the first time. Unlike the Python you\u0026rsquo;ve seen up until now, it\u0026rsquo;s not really digestible without having some prior experience. I do encourage you to try, but don\u0026rsquo;t get hung up on it. I\u0026rsquo;ll show you how to read it in upcoming sections. Go ahead and put this code in:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define NUMBER_OF_FRIENDS 9 // Longest string + 1 for the terminating character #define STRING_LENGTH 8 int main(int argc, char const *argv[]) { const char my_friends[NUMBER_OF_FRIENDS][STRING_LENGTH] = {\u0026#34;Kiri\u0026#34;,\u0026#34;Soatok\u0026#34;,\u0026#34;Loial\u0026#34;,\u0026#34;Ashlyn\u0026#34;,\u0026#34;Cendyne\u0026#34;,\u0026#34;Dusk\u0026#34;,\u0026#34;Saphire\u0026#34;,\u0026#34;Cadey\u0026#34;,\u0026#34;Lint\u0026#34;}; for (int i = 0; i \u0026lt; NUMBER_OF_FRIENDS; i++) { printf(my_friends[i]); if (!strcmp(my_friends[i],\u0026#34;Soatok\u0026#34;)) { printf(\u0026#34;\\tWARNING: FULL OF PUNS\\n\u0026#34;); } else { printf(\u0026#34;\\n\u0026#34;); } } return 0; } Heads up! strcmp(), the function that compares strings (strings are what we call a sequence of characters in programming), is a bit odd in that it doesn\u0026rsquo;t just check if they\u0026rsquo;re equal and return 1 (true) if they are and return 0 (false) if they\u0026rsquo;re not. It actually returns 0 if they are equal, a number greater than 0 (any number that\u0026rsquo;s not 0 is \u0026ldquo;true\u0026rdquo; in C) if the first non-matching letter has a greater ASCII value, and less than 0 if it has a lower ASCII value. Confused? Yeah, so is everyone else.This is very counterintuitive to new programmers, but, this is why on line 17 there\u0026rsquo;s an ! (the sign for a logical not) which in this context basically means not-anything-other-than-zero, so not-true. It also would have been valid to switch the prints around, but this is just as confusing.Anyway, don\u0026rsquo;t worry about it. The gist is that this program does the same thing as the python one, it\u0026rsquo;s just C and so has a lot more moving parts you\u0026rsquo;ll need to lean how work. You know the drill now. Press (Ctrl+F5) and see if it runs. This time, it may ask you what compiler you want to use - for now, we\u0026rsquo;ll just use GCC.\nThen, set a break point - this time probably on line 13, for (int i = 0; ..., and run it with debugging and step through.\nChapter 10.π - Intermission # Before we actually talk about the basic building blocks of programming - variables, for loops, etc.- I want to clear up a misconception.\nProgramming isn\u0026rsquo;t about writing code.\nThe vast majority of a good programmer\u0026rsquo;s time is spent reading documentation, researching how others have solved the same or similar problems, and finding problems in the code they\u0026rsquo;ve written (so, testing and debugging).\nSo, if as you\u0026rsquo;re reading you\u0026rsquo;re thing \u0026ldquo;But, man, this sure is a lot of reading, when do we get to the good stuff\u0026rdquo;, then, hate to tell \u0026lsquo;ya, this is the good stuff. Or, at least this is what doing the good stuff is like. The only difference is that, yes, we\u0026rsquo;re not really making anything cool yet.\nChapter 10.ψ - Rant about C # Like I said, we need to dive into C so you can understand how some of the lower-level things work - pointers, bit manipulations, etc.\nUnfortunately, C is a massive clusterfuck and seemingly exists exclusively to make you fuck up. It is brutally difficult to write safe code in, with even it\u0026rsquo;s standard library functions known to have security problems unless used very carefully. So even though I don\u0026rsquo;t expect you to understand these fully really at all, I want to show you some of why C is hard and let you know that even people with years of experience writing in C still occasionally make really stupid mistakes.\nExample 1: Out-Of-Bound Doesn\u0026rsquo;t Always Fail # The language will happily let you write and compile code like this:\n1 2 3 4 5 6 7 8 9 int main() { int my_array[3] = {1,2,3}; int my_other_array[3]; my_array[3] = 42; return 0; } which is very wrong because arrays start at 0 (so these arrays have 3 items, for example at my_array[0],my_array[1], and my_array[2] - more on this later). This might make your code crash outright, but it might still sort of work, just when you write 42 to my_array[3] it might be clobbering the value of some other variable, maybe setting my_other_array[0] to 42, maybe something else entirely.\nThis is really, really bad. Now, modern tools try to prevent this and actually include some of their own code to try to stop you from doing this particular fuck up, but it\u0026rsquo;s not bulletproof. In pretty much any other language, you could either be 100% sure it will crash outright (again, this is better in this case) or it will just refuse to run at all.\nExample 2: Strings should have a new line (Usually) # Say you want to make every noob\u0026rsquo;s first program, one that just says \u0026ldquo;Hello, World!\u0026rdquo;, let\u0026rsquo;s do that wrong in C:\n1 2 3 4 5 6 7 8 9 10 #include \u0026lt;stdio.h\u0026gt; int main() { char greeting[] = \u0026#34;Hello World!\u0026#34;; printf(greeting); return 0; } This looks fine, right? Well, mostly, yes. But it will probably not act as you want because after saying \u0026ldquo;Hello World!\u0026rdquo; there won\u0026rsquo;t be a new line for the terminal to print to.\nIt should be char greeting[] = \u0026quot;Hello World!\\n\u0026quot;; or printf(\u0026quot;%s\\n\u0026quot;,greeting);. This is weird, and kind of annoying.\nActually, it\u0026rsquo;s a bit more complicated than that, because you actually need a \\0 at the end of the string too, but C adds that for us usually. Again, we\u0026rsquo;ll talk about this later.\nExample 3: Stupid Code is Still Valid Code # Pop Quiz (for something you haven\u0026rsquo;t been taught yet), which is right:\n1 2 3 if(a = b){ return 1; } 1 2 3 if (a == b){ return 1; } Well, unless your intent was to check if b was anything other than 0, it\u0026rsquo;s not the one on the left.\nAs with most programming languages, C uses one equal sign to assign a value, and two equal signs to compare values.\nUnlike most languages, C will let you write and compile code with the assignment where the comparison should be, without any real, intentional comparison taking place. So what the first one is doing is actually setting a to have the same value as b, and then seeing if a is non-0. The second one is checking if a is equal to b.\nBut Wait, There\u0026rsquo;s More! # There\u0026rsquo;s many other annoyances.\nC only sort of supports variable length arrays - that is something like int n = 12; int my_array[n]; will probably work (it depends on your compiler), but shouldn\u0026rsquo;t be used.\nIt\u0026rsquo;s really hard to prevent something from accessing memory you don\u0026rsquo;t want it to in the same program\nThere is no boolean (True / False) type built in, you actually have to #include \u0026lt;stdbool.h\u0026gt;\nThe compilation process requires functions be declared before they\u0026rsquo;re called, basically:\n1 2 3 4 5 6 7 8 9 10 11 int main(){ int a = 1; int b = 2; int c = 0; c = add(a,b); // don\u0026#39;t ever actually turn add into a function return 0; } int add(int a, int b){ return a + b; } will fail because add() is defined after main. To fix this, you\u0026rsquo;re supposed to add int add(int a, int b); to a different file, called a header file, and then use #include whatever.h at the top of the whatever.c file. This is really annoying, and requires the programmer to change things in two places if the definition of a function ever changes.\nThe default types are bad. You\u0026rsquo;ve seen me use int, int8_t, uint8_t, char, etc. so far. These are types. C\u0026rsquo;s pretty much suck. The basic int may vary in how big of numbers it can handle, depending on the platform. int8_t is always 8-bits, but it requires you #include \u0026lt;stdint.h\u0026gt;. On top of this, there\u0026rsquo;s no string type, you only get arrays of characters. This is really annoying to work with.\na = b = c = d = e; is valid code, for some fucking reason.\n\u0026hellip; I could keep going, and list some much more technical problems there\u0026rsquo;s absolutely no chance you\u0026rsquo;d understand yet. But my point is this: C is hard, and you will get frustrated because of small errors that are hard to figure out what exactly you did wrong. Missing a single semicolon on the end of a line will cost you a few hours of your life at some point. This struggle will make you a better programmer, but you will definitely hate it.\nC has also been the dominant programming language for low level programming for 50 years. That\u0026rsquo;s one hell of a legacy, and only now in the last few years is something finally starting to compete: Rust. Rust, as a language, is still really hard to write in - especially for beginners with no prior knowledge - but it at least doesn\u0026rsquo;t let you make the crazy fuckups C does. I\u0026rsquo;ll go into why you\u0026rsquo;d ever want to use either later, but for now, just trust me, no matter how bad is sucks, you have to learn C.\nChapter 10.ψ? ψ is a fun number, a bit bigger than π. 🤷\nThe \u0026lsquo;\u0026lsquo;\u0026lsquo;reciprocal Fibonacci constant\u0026rsquo;\u0026rsquo;\u0026rsquo;, or ψ, is defined as the sum of the Reciprocals of the Fibonacci numbers:\n\\(\\psi = \\sum_{k=1}^{\\infty} \\frac{1}{F_k} = \\frac{1}{1} \u0026#43; \\frac{1}{1} \u0026#43; \\frac{1}{2} \u0026#43; \\frac{1}{3} \u0026#43; \\frac{1}{5} \u0026#43; \\frac{1}{8} \u0026#43; \\frac{1}{13} \u0026#43; \\frac{1}{21} \u0026#43; \\cdots.\\) The value of ψ is known to be approximately\n\\(\\psi = 3.359885666243177553172011302918927179688905133732\\dots .\\) - Reciprocal Fibonacci Constant, Wikipedia "},{"id":148,"href":"/engineering/programming/intro/prog4comments/","title":"Prog4comments","section":"Engineering","content":" 10.4 - Getting to know our tools # Okay, we now have the ability to run and debug code but we still need set up and go over a few features in your text editor (VSCode) to make things easier. Plus, now\u0026rsquo;s a good time to introduce comments and indentation and why they matter in code.\nThis may seem a bit out of order, but at this stage there\u0026rsquo;s problems with prioritizing how much to learn about the tool versus the craft. To equate to something more tangible, it\u0026rsquo;s like learning the skills to design and craft a wood working project verses learning to use a saw. Ultimately, you need to do both. While, yes, learning the tool will come with experience, you still need to know enough not to cut your fingers off - or, in this case, to not waste a ton of time and think programming is overly difficult and tedious.\nMost of this comes down to learning a few extra shortcuts and setting some preferences. Imagine using a computer without ctrl + C for copy, ctrl + V for paste, etc.? It would be really slow and annoying to copy, paste, select all, save, and other basic actions. Well, just like any other software learning how to use your text editor and related tools for writing code will make it way less awful.\nGeneric shortcut reference It occurs to me that enough people today are growing up on a smart phone that it\u0026rsquo;s possible not everyone will know all of the common shortcuts. Don\u0026rsquo;t feel bad if this is you. Here\u0026rsquo;s a quick table:\nKey Combo Typical Action ctrl + C Copy ctrl + V Paste ctrl + X Cut (Copy \u0026amp; Remove) ctrl + S Save ctrl + F Find ctrl + H Find \u0026amp; Replace ctrl + Z Undo ctrl + A Select All ctrl + N (or ctrl + T , depending on the program) Make a new document (or new tab) ctrl + + OR ctrl + mouse wheel up Zoom in / Increase font size ctrl + - OR ctrl + mouse wheel down Zoom out / Decrease font size ctrl + → / ctrl + ← Move one word to the right/left ctrl + backspace Delete whole word (depending on your hands, keyboard, and typing style this might be uncomfortable) ctrl + W Close document ctrl + P Open print dialogue (VS code doesn\u0026rsquo;t have one!) ctrl + tab Change tab (works in browsers, VSCode, etc.) Function Key Typical Action F11 Make the program full screen F5 Refresh the page alt + F4 Close application (In Windows, may not work in Linux/Mac) F12 Open up developer tools (Usually in a web browser) Keep in mind, the specific program you\u0026rsquo;re using will almost certainly have many more than this, and may actually override some of these. As we go through this page I\u0026rsquo;ll be showing you some of VSCode\u0026rsquo;s shortcuts, but there\u0026rsquo;s a full cheat-sheet that depends on your os - here a link to each:\nWindows Linux macOS They\u0026rsquo;re mostly the same, but the mostly may trip you up, so ╮(─▽─)╭\nIndentation # In Python, indentation is relevant to the meaning of the code, in C, while not necessary,(1) reading it without sucks. So, how does one indent well? Well, there\u0026rsquo;s been an ongoing fight between programs on if you should indent by using tabs, 2 spaces, 3 spaces, or 4 spaces.\nHonestly, it doesn\u0026rsquo;t matter much as long as it\u0026rsquo;s consistent in a given project. VS Code will default to trying to match the style of whatever file you open - this works because either way, you should be able to literally hit the tab key. If the project uses spaces, it will insert the correct number of spaces. Tabs? a tab. Magic.\nWith this, hitting backspace will remove however many spaces one tab inserts automatically - this is actually the default in VSCode, with a tab key being 4 spaces. This can be a bit strange when navigating code though, as if tabs get turned into spaces, you\u0026rsquo;ll have to hit arrow keys an unnatural amount of times. If you set File→Prefrences→Settings→\u0026quot;Editor: Stick Tab Stops\u0026quot; to \u0026ldquo;on\u0026rdquo;, they\u0026rsquo;ll always \u0026ldquo;feel\u0026rdquo; like tabs even if they\u0026rsquo;re not and you can just never think about it again. (unless you have to open it in another editor) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # Here\u0026#39;s a comment in Python def my_function(): # This line is indented in by one tab # code that is indented like this in # python is a child of the block above # (where it makes sense) # so, these next to lines belong to # my_function() a = 1 return a # This code, going back to no-indent, # is not in my_function() for i in range(10): # but this print is in this for loop print(i) def my_other_function(): for i in range(10): for j in range(20): # This will run 200 times # Do you see why? print(i * j) White space # When writing code, you\u0026rsquo;ll want to add some empty lines where they make sense. I\u0026rsquo;m not going to provide to much guidance on this because it\u0026rsquo;s really something that\u0026rsquo;s a you\u0026rsquo;ll-know-it-when-you-see-it, but don\u0026rsquo;t be afraid to add blank lines in C or python to make your code more clear.\nComments # Before we actually start writing code, I want to show you that you can mix in comments - that is messages to yourself - into your code. Writing useful comments is an artform. It\u0026rsquo;s often much more relevant to write why you\u0026rsquo;ve done something than how code works - mostly because if the code isn\u0026rsquo;t pretty obvious to read it\u0026rsquo;s probably not good code (there are exceptions, obviously.)\nC # In C you can type comments in two ways, either by beginning a line with\n// two slashes\nor\n/* using these */\nThe advantage to the latter is it works for multiple lines\n1 2 3 4 5 6 int a = 12; /* The comment starts here. This is still a comment. And so is this. The comment ends after this → */ printf(\u0026#34;%d\u0026#34;,a); though, a lot of people (myself included) prefer to only use // and just put it at the start of each line in a multi-line comment.\nPython # All comment in python start with a #. If we want multiple lines, we just need to start each one with a #\n1 2 3 4 a = 12 # The variable a sholud be 12 # here so this will print 12 print(a) One nice thing you can do with comments is put them before a line of code to \u0026ldquo;comment out\u0026rdquo; a section you don\u0026rsquo;t want to run. For example, using python:\n1 2 3 4 5 6 7 a = 12 b = 8 c = 0 # The following line won\u0026#39;t run because we\u0026#39;ve put it in a comment: # c = a + b # So this will print 0: print(c) But if we removed the # from before the c = a + b it would run again. You can do the same thing in C, just using the different comment syntax. Sometimes, this is really helpful for debugging.\nIn VSCode, if you want to comment out a single line, just type ctrl + / when on the line in question and that line will have the language\u0026rsquo;s comment symbol added to it. If you select multiple lines, that\u0026rsquo;ll work as you expect too. You can do this on a blank line to start typing a new comment too.\nAutoformatting # It\u0026rsquo;s pretty easy to have your code get gross with mixed indentation types, weirdly wrapped lines, etc. Autoformatters are often a bit overly aggressive, but are helpful for keeping your code clean. For example, say we had this messy C:\n1 2 3 4 5 6 7 int main() { for(int i = 0; i \u0026lt; 10; i++){if(i%2==1){ printf(\u0026#34;%d\\n\u0026#34;,i); } } } This is really awkward to read. Technically valid, but awkward. If we run it though an autoformatter it can turn it back into something reasonable:\n1 2 3 4 5 6 7 int main() { for (int i = 0; i \u0026lt; 10; i++) { if (i % 2 == 1) { printf(\u0026#34;d\\n\u0026#34;, i); } } } [TODO] Setting this up\nFonts! # One thing you should notice about code editors is that they exclusively use fonts. This means that every character takes up the same amount of room. Most fonts don\u0026rsquo;t do this. This is really important for readability and editing code. Another important note is making characters very distinct. You don\u0026rsquo;t want to be confused if something is an i, I, l, L, or 1, or if it\u0026rsquo;s a 0, o, or O\nLigatures # A few years ago, somebody had the neat idea of making fonts where if you type some common programming symbol combinations, they\u0026rsquo;ll visually turn into a symbol with the meaning. For example, != means \u0026ldquo;not equal\u0026rdquo; in almost every language, so, if you use a font that supports it, it will visually replace that combination of characters with a ≠ symbol (though, it\u0026rsquo;ll be two characters wide to keep it monospace but true to the actual length) - see https://www.programmingfonts.org/#firacode for an example. Try changing line 21 to be if (gutterClass != \u0026quot;CodeMirror-linenumbers\u0026quot;) { and you\u0026rsquo;ll see what I\u0026rsquo;m talking about.\nMultiple selections, symbol renaming, folding, etc. # Multiple Selections \u0026amp; Folding # Next up, I want to point out is using multiple selections at once. Go look at https://code.visualstudio.com/docs/editor/codebasics and it\u0026rsquo;s one of the first things on the page. If you keep scrolling, eventually you\u0026rsquo;ll see Folding as well. That can be handy for large files - though you probably shouldn\u0026rsquo;t let files get that big to begin with.\nRearranging lines # In code, the order you do things matters. If you have code like\n1 2 do_thing_a() do_thing_b() and you wanted it to be\ndo_thing_b() do_thing_a() You could cut and paste, or you could just do alt + ↑ with the cursor on the do_thing_b() line or alt + ↓ with the cursor on the do_thing_a() line. Either way, the point is you can move lines up and down as you please.\nSymbol renaming # [TODO] explaining what this is without having actually explained what a symbol is weird.\nColored Brackets # First up is colored brackets. These will make it so each bracket pair is colored so it\u0026rsquo;s more obvious what goes with what, for example, with the above code:\nint main() { for (int i = 0; i \u003c 10; i++ ) { if (i % 2 == 1) { printf(\"d\\n\", i); } } } Of course, this in addition to the other coloring that happens. The end result is that almost everything is colorful, which is a bit odd, but this change is worth it.\nIn VS Code, you can turn this on in File→Prefrences→Settings→\u0026quot;Editor: Bracket Pair Colorization: Enabled\u0026quot;\nCode navigation # There\u0026rsquo;s quite a few little tricks to navigate between code, but one you\u0026rsquo;ll want to know of for sure is the ability to control+click on a function name (we\u0026rsquo;ll get to what functions are eventually) and be brought to the code that makes it work. This is particularly helpful when that code is in another file - also something we\u0026rsquo;ll see later. So, just stow this little knowledge nugget away: ctrl+click a function name will bring you to the function\u0026rsquo;s code.\nThey're not techncially needed in C because curly braces - { and } - define sections of code. However, while the computer may still be able to understand code without reasonable indentation, humans (including you) won't be able to easily, so it still matters. "},{"id":149,"href":"/engineering/programming/intro/prog5two/","title":"Prog5two","section":"Engineering","content":" Chapter 10.5 - Leaning Two Languages At Once # Back in the Into The Hardware section we looked at some of the inner workings of the CPU, and briefly looked into how the CPU only understands machine code, 1\u0026rsquo;s and 0\u0026rsquo;s that make up individual instructions. Now, there\u0026rsquo;s absolutely no reason to ever think at that low of a level, the lowest you should ever care to look at, as mentioned there, is assembly. However, Assembly is still awful to write and read. While if you stare at the following for long enough you may be able to figure out what what it does\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 addi sp,sp,-32 sd s0,24(sp) addi s0,sp,32 li a5,1 sw a5,-20(s0) li a5,2 sw a5,-24(s0) lw a4,-20(s0) lw a5,-24(s0) addw a5,a4,a5 sw a5,-28(s0) lw a5,-28(s0) mv a0,a5 ld s0,24(sp) addi sp,sp,32 jr ra even if you\u0026rsquo;ve never seen code before, it\u0026rsquo;s pretty obvious that in this,\n1 2 3 4 5 6 7 8 int main(){ int a = 1; int b = 2; int c = a + b; return c //note, this is a really bad way to get the number back // as it will appear as an error code, not actually print to the terminal // in a normal way } it just adds 1 and 2 and returns 3. Here, the later - written in the C programming language - is what was used to generate the former. Remember, the computer can only actually understand the 1\u0026rsquo;s and 0\u0026rsquo;s, so while going from assembly to those 1\u0026rsquo;s and 0\u0026rsquo;s is much more direct, it\u0026rsquo;s useful to think at a higher level and instead program in C.\nbut even C doesn\u0026rsquo;t make everything easy. That same code, in python is as dumb simple as this:\n1 2 3 4 a = 1 b = 2 c = a + b print(c) A large portion of programmers will never, ever see that first example (assembly code) because of all of its downsides (hard to read and write, only works on a given instruction set, etc.). Furthermore, some people will never use C because it\u0026rsquo;s rather difficult to write complex programs with it. So then, why care?\nWell, if you want to write fast, correct, code you have to know C, which is ironic, because C is a great language for writing slow, broken code because of just how bad it is about letting you shoot yourself in the foot, but, I digress.\nWhile for speed you could go look up some comparisons of C and Python and see that, as a very loose rule of thumb, the python will be about 10 times slower, I think writing correct code is more important to most people, especially since for most programs, the speed difference doesn\u0026rsquo;t really matter on a modern computer. Later, you\u0026rsquo;ll see this too is a bit of an odd argument, as it\u0026rsquo;s comically easy to write security vulnerabilities into your C code on accident - clearly that\u0026rsquo;s not correct. Instead, what I mean is that you can write code that\u0026rsquo;s not incorrectly using types (Coming up in a bit) or just doing things in a way that\u0026rsquo;s just really inefficient for the computer to do. More over, as Aria Beingessner argues, C Isn\u0026rsquo;t A Programming Language Anymore, it\u0026rsquo;s really a sort of standard on which every other language is built, and it\u0026rsquo;s expected that every other language works with it… and its long history of quirks. This isn\u0026rsquo;t a good thing, but it\u0026rsquo;s how things are.\nThis brings up a good question may new programmers have:\nWhy are there multiple languages anyway? # A little while ago, I got asked\nWhat would you say is the most widespread language to know for programming? Also what\u0026rsquo;s your favorite to code in and if someone is trying to learn that language or a language in general from scratch, what are the best resources / academies / learning material to use for someone who has no experience? Or do you recommend any of these at all? - A friend that is really, really bad at programming despite having a CS degree ( Keep in mind this response is in context of knowing this guy already has a modicum of programming skill) That\u0026rsquo;s a tough question. It\u0026rsquo;s largely application dependent. Like, if you\u0026rsquo;re doing web, you have to use JavaScript. AI/ML? Python. Low level? C.\nThe best way to learn a language is to make something. Do projects.\nAlso, widespread ≠ good or even high paying. Less common languages tend to pay more.\nMy \u0026ldquo;favorite\u0026rdquo;, again, depends on what I\u0026rsquo;m doing. If it\u0026rsquo;s a quick script: Python. If it needs to be performant and low level, C. If I need absolutely reliability, performance, and low level but can get away with a size increase: Rust.\nWhat you\u0026rsquo;re missing, though is it\u0026rsquo;s really usually not a choice. If you\u0026rsquo;re working with microcontrollers, it\u0026rsquo;s almost always going to be C (maybe C++). Unity? C#. Web? Js. You get the idea.\nIf you\u0026rsquo;re looking for languages to learn to get broadly better at programming, I\u0026rsquo;d recommend Python, GLSL, Haskell (and futhark, which is similar), and Rust. Each has their own quirks and by getting good at those you\u0026rsquo;ll be good at most.\nBut along with that, remember that programming is not about knowing a language. It\u0026rsquo;s about knowing how to solve problems. If you can write code but can\u0026rsquo;t use a debugger, benchmark and profile your code, test for memory issues, and integrate it with existing tools/software you\u0026rsquo;re missing the point.\nI think a good starting point for learning about that is to make modules for https://vcvrack.com . It uses C++ but to do it well you\u0026rsquo;ll need to get used to doing debugging, optimizing code for performance, and using a 3rd party API.\nAs for this guide, the thing I want you to take away is that you usually don\u0026rsquo;t get to pick the language, and that different languages serve different roles. With that out of the way, why the two we\u0026rsquo;re looking at here?\nC # GOOD\nSuper fast Works on everything, including microcontrollers Easy to do low level operations Extremely stable BAD\nMust manage your own memory No object orientation Easy to make security issues Old - rarely gets new features Python # GOOD\nCan use Object Orientation Huge standard library - don\u0026rsquo;t need to import anything to use print(), built in functions like reverse() Lots of amazing 3rd party libraries Constantly improved, gaining great new features BAD\nVery slow Can be awkward to juggle types with libraries Rapidly updating - old versions will eventually lose support Though, you may be asking a more fundamental question of what makes a language different other than features and speed? Well, it\u0026rsquo;s not called a language for nothing: the answer is Syntax.\nSyntax # When you write a function in C, (which you\u0026rsquo;ll see later) it looks a bit like this\n1 2 3 4 int doThing(int inputa, int inbutb){ //do thing return(output); } in python, the same would be\n1 2 3 def do_thing(inputa, inputb): #do thing return output Notice the word def and lack of braces ({ ... }) in the Python code? Also, while in the C code we do have the body of the function indented it\u0026rsquo;s not necessary, while in the Python it\u0026rsquo;s mandatory (and stands in for the lack of braces). These things are part of each language syntax. While both use English words as their base and may even use a few in the same way, (like return) what words, how they\u0026rsquo;re ordered, if you need a ; at the end of each line, and so on make up the syntax of the language. It\u0026rsquo;s why you can\u0026rsquo;t just copy code from one language into another and expect it to work, and why going from a higher level language like Python to C is hard, speaking of:\nHigher Level? # Generally, you\u0026rsquo;ll see that languages are either called High level (like Python) or low level (like C) - though context does matter, as C is much higher level than Assembly.\nThis \u0026ldquo;level\u0026rdquo; isn\u0026rsquo;t in regards to difficulty but rather in terms of abstraction, which, to simplify greatly, the higher the level of abstraction the less the programmer has to worry about how the underlying program actually works, just that it does work. For example, in C, there\u0026rsquo;s no special type for a string (like \u0026ldquo;Hello\u0026rdquo;) instead, you need to make an array of characters and set a max size for it ahead of time, because this is how the hardware is going to see it anyway. Meanwhile, in python, strings are just naturally a thing, and you can add more characters onto one as much as you like. These abstractions help the programmer write code faster; however, they come at a cost of speed and control.\nWhat about other languages? # Oh boy. There\u0026rsquo;s a nearly endless amount, each with pro and cons and times when they\u0026rsquo;re the best option. Want to make something interactive on a website? You probably want JavaScript. Working in engineering and need to do some math on signals? Matlab ( While I really dislike it ) is a good bet. The reason I\u0026rsquo;m starting you with Python and C is because Python is really easy to learn and actually used a lot, while C is and always will be used for low level programming (even if it sucks, which it does.) and the syntax is similar to many, many other languages.\nHow do I choose which to use? # For anything but trivial programs, the choice is usually made for you before you start. If you\u0026rsquo;re doing AI/ML stuff and want to use Tensorflow, you\u0026rsquo;re stuck in Python (or C++, though that\u0026rsquo;s uncommon). If you\u0026rsquo;re writing code a small embedded system, you\u0026rsquo;re probably stuck with C or maybe C++. If you\u0026rsquo;re making a game in Unity, you\u0026rsquo;re pretty much stuck with C#. If you\u0026rsquo;re doing web development, you\u0026rsquo;re probably going to be using JavaScript. Doing work on an ancient program for government/banking, it was probably written in Fortran or Cobol, so you\u0026rsquo;re now stuck with Fortran or Cobol.\nNow, there are some exceptions to this. If you\u0026rsquo;re starting on a project that\u0026rsquo;s pretty weird in the first place and wanting to do things from scratch (like making your own game engine) then of course you can choose whatever you like. Some will definitely make more sense than others, though, and you\u0026rsquo;ll come to recognize these choices as you gain experience.\nThere are also times you can mix languages or use one language to generate another. For example, if you really wanted to you could write a python library in C and do basically everything in there, only really using python as the \u0026ldquo;glue logic\u0026rdquo; to hold everything together. Or, maybe you need to process a ton of data in a way that you can make really fast by writing massively parallel code (something we\u0026rsquo;ll explore much later, in both the Multithreading and GPU Computation chapters), then maybe you\u0026rsquo;ll want to use Futhark to write code that will generate C or python code for you.\nThere\u0026rsquo;s also some situations where you will literally mix one language into another, like putting blocks of assembly code into C programs, sending multiple SQL queries to a database, or using regular expressions to match text to a pattern. (Don\u0026rsquo;t worry if you don\u0026rsquo;t know what any of that means!)\nWhy will knowing C help me write good code? # If, using C, you ask your computer, \u0026ldquo;hey, what\u0026rsquo;s 1 + 0.9999999\u0026rdquo; you\u0026rsquo;d really like to think \u0026ldquo;It\u0026rsquo;s a computer, so of course it\u0026rsquo;s \u0026ldquo;1.9999999\u0026rdquo;, but, as you may have guessed from the setup, if you ask it in the most obvious way to write that code,\n1 2 3 4 5 6 7 int main(){ float a = 1; float b = 0.9999999; float c = a + b; printf(\u0026#34;%f\u0026#34;,c); return 0; } Then the answer is 2.000000.\nIf we ask the same of python, just running 1 + 0.9999999, we get 1.9999999000000002\nIn the same vein, what if we ask to add to numbers, like so:\n1 2 3 4 5 6 7 int main(){ uint8_t a = 200; uint8_t b = 100; uint8_t c = a + b; printf(\u0026#34;%d\u0026#34;,c); return 0; } the answer is actually 44.\nFinally, what if we ask the computer something weird like, \u0026ldquo;is A equal to 65?\u0026rdquo;\n1 2 3 4 5 6 7 8 9 10 int main(){ char a = \u0026#39;A\u0026#39;; int b = 65; if(a == b){ printf(\u0026#34;A is 65\u0026#34;); } else{ printf(\u0026#34;A is not 65\u0026#34;); } return 0; } Then, wait, what? The output is \u0026ldquo;A is 65\u0026rdquo;!\nAll of the examples have to do with something called types. That\u0026rsquo;s what we\u0026rsquo;ll dive into next, and they\u0026rsquo;re much more obvious in C than in Python.\n"},{"id":150,"href":"/engineering/programming/intro/prog6types/","title":"Prog6types","section":"Engineering","content":" Chapter 10.6 - What\u0026rsquo;s a Type? \u0026amp; Going Down Rabbit Holes # Alright, I\u0026rsquo;ll cut to the chase. When programming, you\u0026rsquo;ll need to deal with types. On the last page, there was a mix of types, int, uint8_t, float, and char all make appearances. While the exact names of each type and what they\u0026rsquo;re capable of may vary a bit from language to language and platform to platform understanding the basics here will help you out a lot, so, let\u0026rsquo;s start with the C language and look at ints\nInt # int, as you can probably guess, means integer. What\u0026rsquo;s a bit less obvious is that this will have an inherit range.\nOn your laptop or desktop, just using int without anything special (like the next example, uint8_t) probably means a 4-byte integer, so that means you get 32 bits (4*8) to represent your number. Now, there\u0026rsquo;s a catch: The most significant bit is actually used to store if the number is positive (0) or negative (1) using 2\u0026rsquo;s complement, so, in total that gives you a range from -2,147,483,648 to 2,147,483,647. If you try to go above or over this range, the result will wrap around.\nQ: How did you get that number\nA: \\(2^{4\\times8} = 2^{32} = 4,294,967,296\\) . 2\u0026rsquo;s complement is clever in letting us use nearly the full range of the number, so if we divide it by 2 we\u0026rsquo;d expect -2,147,483,648 to +2,147,483,648, but, we do need to use one bit for sign, and that bit is 1 for negative, which means we get to use the full range for negatives but sacrifice one on the positives, hence the final range of -2,147,483,648 to 2,147,483,647. Read that linked 2\u0026rsquo;s complement page if you want more depth.\nNow, there\u0026rsquo;s also a variant for unsigned integers or uint, these, as you might expect, can only be positive, but this means you get the full range from 0 up to 4,294,967,295 to play with before you wrap around.\nFinally, you might find times when you\u0026rsquo;ll want to specify the number of bits in a number, and in the language I\u0026rsquo;ve been showing so far, C, you can do that by including a library (more on this later) and using uint8_t, for example, to get an unsigned, 8 bit integer. This can only range from 0 to 255.\nThat library is accessed by using #include \u0026lt;stdint.h\u0026gt;, but despite my above description doesn\u0026rsquo;t give you arbitrary bit widths. It has 8, 16, 32, and 64. The big advantage is that, unlike plain int which may vary between platforms, they will always be that size. This isn\u0026rsquo;t to say you should never use plain int, just be aware it may be a problem for portability between platforms if you really want it to run everywhere. So, if we look back to when we did 200+100 last chapter, while we\u0026rsquo;d expect 300, the place we\u0026rsquo;re trying to store that number simply isn\u0026rsquo;t big enough. At 8 bits, it can only store up to 2^8 = 256. So, we wind up wrapping around, 300-256 is indeed 44. Do keep in mind that with signed integers this wrapping around means you\u0026rsquo;ll go from positive to negative if you overflow.\nBoolean # True or False. 1 or 0. In C, a boolean (accessible though #include \u0026lt;stdbool.h\u0026gt;) is really just an int in disguise and (usually) limited to being 0 or 1.\nFloats # I can\u0026rsquo;t possibly do a better job than this video:\nA word of the wise: Don\u0026rsquo;t loose sight of floats still being based on bits. If you try to add .000001 to a huge number, the answer won\u0026rsquo;t change. It\u0026rsquo;s relatively easy to make infinite loops or get a value stuck because of this. On the other hand, it does require some pretty crazy values:\n1 2 3 4 5 6 7 8 9 10 #include \u0026lt;math.h\u0026gt; int main() { // 2^16 is 65536 float a = pow(2,16); printf(\u0026#34;%.20f\\n\u0026#34;,a + .000000000001); return 0; } Will print out 65536.00000000000000000000 - our .000000000001 was lost!\nFor all this complexity\u0026hellip; it usually doesn\u0026rsquo;t matter. For normal calculations, you probably won\u0026rsquo;t even have to worry about this. If you do have to worry about it, check out Herbie.\nI have had bugs from this bite me, see this code for example, where I fixed a bug because once a value reached 512 I was adding so little to it that it no longer incremented. If for some reason this is your shit, you might want to look into Unum/Posits, as they stand to become more common in the coming years and will probably become more frequently used as an alternative to the good ol\u0026rsquo; IEEE floating point. For now they\u0026rsquo;re more an interesting look into the far future than useful to know about. Doubles # Doubles are just more precise floating point numbers. Literally they\u0026rsquo;re double-precision (hence the name) and so work with 64 bits instead of 32. If you need very, very precise math, here you go.\nWe\u0026rsquo;ll talk about it more later - but some languages, including Python, have the ability to work with arbitrarily large numbers and only use a \u0026ldquo;number\u0026rdquo; type. These will dynamically adjust the number of bits (and even if they\u0026rsquo;re floats/ints) as needed, but are, typically, slow compared to even doubles. \u0026hellip; err, yeah, doubles are slow. More on types and performance later too. Char (\u0026amp; A sneak peak at encodings) # Chars are a pain in the ass.\nHistorically, a char was always 1 byte, and you usually only used 7 bits of each byte for storing text. But, do the math, that\u0026rsquo;s only 2^7 = 128 different characters. Clearly, with things like ∞√αβ🌢░ we have a lot of other things we think of as characters on computers. The confusion is because, historically, computers (mostly) used ASCII for storing text, which was a 7-bit standard and only had that many characters (0-9,a-z,A-Z, special characters, and some control characters, like one to go to the next line) but, we\u0026rsquo;ve pretty much gone past that for all but very limited systems now and instead use Unicode.\nUnicode characters are complicated, but we can talk about that more later, to make my point what\u0026rsquo;s relevant is there are 1,112,064 valid Unicode characters, which, happens to be a bit more than 127 (ever so slightly). What\u0026rsquo;s weirder yet is due to some clever tricks, we can still use 8-bit char data types to represent all of those different points by abusing the 8th, unused-in-ASCII bit to indicate that 7-bit sequences with the 8th bit set are all actually part of the same character. You can read into this more, but this I don\u0026rsquo;t actually want to spend to much time on the specifics of Unicode and UTF-8. Instead, I want to point out that a char is a bad name because it was a datatype named as it was (char = character) because it was assumed to be used with a particular encoding. That is, a method of associating data with a meaning. Over time, that encoding fell out of favor, and now we have this mess. Weirder yet, because of this history, in C, we can always assume a char is 1 byte, which is not necessarily true about the other types - integers defined with int may change how big they can be depending on the platform (On most modern desktops an int is 4 bytes, but on the Arduino Uno, for example, they\u0026rsquo;re only 2)\nLater we\u0026rsquo;ll come back to this idea of standards and associating data to a larger meaning. We\u0026rsquo;ll look at examples like having a list of numbers be interpreted as audio, colors, etc. We\u0026rsquo;ll also briefly look at some hex editors and do some data bending, so buckle up, we\u0026rsquo;re gonna have some fun!\nBefore then, unfortunately, we need to suffer though pointers. Everybody hates pointers. You\u0026rsquo;ll soon know why.\nPointers, Memory, \u0026amp; Arrays # or \u0026ldquo;Why will knowing C help me write good code?\u0026rdquo; Part 2\nSay you\u0026rsquo;re working in C and you make a variable, let\u0026rsquo;s call it my_variable and you assign it a value of 42:\n1 int my_variable = 42; As you\u0026rsquo;ve been thinking about it so far, you\u0026rsquo;ve probably been think about it like algebra, where this variable is just this abstract concept. That thinking works most of the time, but it\u0026rsquo;s missing something. That variable isn\u0026rsquo;t just abstract, it\u0026rsquo;s bits in memory. There\u0026rsquo;s actual electrical components holding a charge low or high in memory, and, importantly, that memory is at an ADDRESS. when you write int my_variable = 42; the computer grabs a new memory address and stores 42 in it. Any time you go to do something with my_varible what you\u0026rsquo;re actually doing is accessing the data stored at that address.\nOkay, sort of. Technically, what\u0026rsquo;s happening is probably that variable is getting associated with a CPU register instead of a memory location at first\u0026hellip;. and there\u0026rsquo;s a whole layer of abstraction because of virtual memory. So, yes, for those that are reading this when they already know all of this, this is a simplification. But, shhhh. Let me build up to that. One thing C will let us do is directly get the value of the address that a variable is stored at. We do this with the \u0026amp; symbol. Something else C will let us do is make a data type that is meant to hold an address, To do this, we use the * character before the variable name, so int *my_var_address; makes a new variable that is made to hold these addresses. The * there is really important, as it actually changes the data type. Say instead of an int, my_variable was a char. We know that chars are always one byte (8-bits), but on most modern computers, an address is actually 4 bytes or 64 bits (this is, more-or-less, why a 64-bit computer is a 64-bit computer, actually.)\nSo, if we didn\u0026rsquo;t have that * on int *my_var_address;, - that is, if we just had int my_var_address; my_var_address would only be whatever size int is, which, notably, may not actually be big enough to store an address.\nThese types with the * before the names are called \u0026ldquo;pointers\u0026rdquo;, which, I\u0026rsquo;m sure you can guess why. (It stores an address that points to something else) If you have something like the above example int *my_var_address;, then my_var_address is called a \u0026ldquo;int pointer\u0026rdquo;.\nPutting this all together though, we could have these lines\n1 2 int my_variable = 42; int *my_var_address = \u0026amp;my_variable; Let\u0026rsquo;s actually run this real quick\n1 2 3 4 5 6 7 8 9 10 11 12 #include \u0026lt;stdio.h\u0026gt; int main() { int my_variable = 42; int *my_var_address = \u0026amp;my_variable; printf(\u0026#34;%d is at %p\\n\u0026#34;,my_variable,my_var_address); return 0; } Go run this for yourself, really, then come back.\nIf I run this, I get 42 is at 0x7fffffffcdec but that second number will probably be different for you as where your computer puts it in memory might be different.\nThat weird \u0026ldquo;number\u0026rdquo; 0x7fffffffcdec is written in something called hexadecimal. I\u0026rsquo;ll come back to what this means, but for now, just know this number is really big (140737488342508 in decimal) Yes, Yes, I hear you nerds. I know this is technically not a physical memory address, it\u0026rsquo;s a virtual memory address. This has to do with safety to prevent applications from modifying memory of other programs, blah blah blah. With time, I\u0026rsquo;ll get there with time. Calm yourselves. Okay, so, uh, that\u0026rsquo;s nice. But, you might be asking why you\u0026rsquo;d want to do this. Well, in C you need to do it a whole bunch. It\u0026rsquo;s basically mandatory for passing arrays of data between functions\u0026hellip;.\nWoah, hold up! Arrays? Arrays # Yep. You\u0026rsquo;ve already seen them.\nIn C, you can have a list of \u0026hellip; well, whatever really, but easiest to think about are numbers and characters. For example, if you want a list of numbers one though 10, you can do\nint my_array[] = {1,2,3,4,5,6,7,8,9,10};\nImportantly, C and Python and the vast majority of programming languages index at 0.\nThis means, to get the first number, the one listed here as \u0026lsquo;1\u0026rsquo; we\u0026rsquo;d access it by doing my_array[0]. If we did my_array[1] the value held there would be 2, because, again, we start counting from 0.\nIt\u0026rsquo;s weird, but - to spoil the mystery - it\u0026rsquo;s because C really wants you to think about the index not as what index it is but as how many offsets from the base address you are.\nYou see, in C, if you were to just set a variable equal to my_array you wouldn\u0026rsquo;t actually be copying the data, you\u0026rsquo;d actually only be setting the variable to hold the address of the first element in the array. C arrays are really just allocating a bunch of consecutive places in memory for you. So, if you think about it as address and offsets from a base address, starting at 0 - that is, no offset - makes a lot of sense.\nBy the way, while we\u0026rsquo;ll get to it later, if you did actually want to copy the data. In C at least, you\u0026rsquo;d actually have to use a function called memcpy() (1)which is literally for copying memory from one place to another. In Python, you can do it by directly doing the assignment as you\u0026rsquo;d expect.\nErr, okay, this is confusing. What I mean is in C if you have this:\n1 2 3 int my_array[3] = {1,2,3}; int my_other_array[3]; my_other_array = my_array; This code won\u0026rsquo;t even compile. It won\u0026rsquo;t work at all. If you actually wanted to copy the data you could do either\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \u0026lt;stdio.h\u0026gt; int main() { int my_array[3] = {1,2,3}; int my_other_array[3]; for (int i = 0; i \u0026lt; 3; i++) { my_other_array[i] = my_array[i]; } printf(\u0026#34;%d\\n\u0026#34;,my_other_array[1]); return 0; } Where that for loop is copying, element by element, the content of my_array into my_other_array\nor, you could use a function that\u0026rsquo;s in the \u0026lt;string.h\u0026gt; header to do it more-or-less than same thing for you\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \u0026lt;stdio.h\u0026gt; // memcpy is in the string library, for... reasons? #include \u0026lt;string.h\u0026gt; int main() { int my_array[3] = {1,2,3}; int my_other_array[3]; // Note the sizeof(int) here, because memcpy // wants the size in bytes and an int takes up // more than one byte memcpy(my_other_array,my_array,3*sizeof(int)); printf(\u0026#34;%d\\n\u0026#34;,my_other_array[1]); return 0; } Back on topic, the big use of arrays in C - at least at the beginning - is actually for text. You see, while the printf() function you\u0026rsquo;ve seen will let us print a string directly, if we wanted to make it before hand and pass it in, we\u0026rsquo;d literally make an array of characters, so,\nchar my_string[] = \u0026quot;Hello World\\n\u0026quot;; or similar.\nOf note, this is the same as char my_string[] = {'H','e','l','l','o',' ','W','o','r','l','d','\\n'};, just it\u0026rsquo;s not a massive pain to type\u0026hellip;.\nNote-in-a-note, that \\n character is really just the way we tell C that we want to go to the next line. If we print a string without it, the next thing to print will print on the same line\nNote-in-a-note-in-a-note: These characters (including the one to go to the next line) are from the aforementioned ASCII standard. The characters are ultimately just numbers being interpreted as text - the same with anything else on a computer.\nHere\u0026rsquo;s an ASCII table\nYou can see the new line character (Called \u0026ldquo;Line Feed\u0026rdquo; here) has a value of 10 in decimal, for example.\nNote-in-a-note-in-a-note-in-a-note, there\u0026rsquo;s a neat trick possible here. If you look closely you\u0026rsquo;ll see that a has a value of 0x61 and A is 0x41, if we look at those in binary:\na is 0b01100001 A is 0b01000001\nThey\u0026rsquo;re only different by flipping one bit. We can abuse this later to go from upper to lower case or vis-versa.\nIf you looked though that table, you\u0026rsquo;ll probably notice some weird ones like 7, which is literally \u0026ldquo;Bell\u0026rdquo;. That\u0026rsquo;s because ASCII was made back when people still used Teletype machines (effectively terminals that used real, physical printers) there was literally a bell. (Wikipedia)\n\u0026hellip; Well, almost. Actually, saying the array version of that is the same is a lie. C actually adds in an extra character for us automatically when we make the string like char my_string[] = \u0026quot;Hello World\\n\u0026quot;;.\nThere\u0026rsquo;s an added \\0 after the \\n when we make the string like this, and we do want it. It\u0026rsquo;s what tells other functions in C (like printf()) where the end of a string is. If we make it using the array, we\u0026rsquo;d have to add this ourselves. That \\0 is called a \u0026ldquo;Null Terminator\u0026rdquo;. Without this, things would just keep on printing or processing the string not knowing where to stop.\nThis doesn\u0026rsquo;t apply (directly) in Python. The print() function in python will add the new line for you unless you go out of your way to have it not. We\u0026rsquo;ll talk about this later - but in general Python tries to do what it thinks you probably want, and that includes internally dealing with new lines and null termination so that you don\u0026rsquo;t have to think about it. One of the real fuck-you\u0026rsquo;s with strings (or, character arrays, rather) in C is that if you try to add more characters to them and you didn\u0026rsquo;t make enough room for it to start with, very bad things happen (you\u0026rsquo;ll try to access memory you shouldn\u0026rsquo;t - crashing your program or over writing things you don\u0026rsquo;t mean to).\nFor this (and many other reasons) you may want to declare your array\u0026rsquo;s size directly:\nchar my_string[100] = \u0026quot;Hello World\\n\u0026quot;\nThis is different from the above in that the first example made exactly enough space while this one would let us put up to 100 characters in the string. If we know for sure that we won\u0026rsquo;t need the extra space, we don\u0026rsquo;t have to do this (though, if that\u0026rsquo;s the case, this should really be const char my_string[] = \u0026quot;Hello World\\n\u0026quot; - we\u0026rsquo;ll get there)\nAlso, this lets you declare an array before you use it. For example, if you know you need a place to put data before you\u0026rsquo;ve actually computed it. As a sort of stupid example, this code will make an array with 10 elements and populate each element with the numbers 0, 10, 20, \u0026hellip; 90.\n1 2 3 4 5 int my_array[10]; for (int i = 0; i \u0026lt; 10; i++){ my_array[i] = i * 10; } Also, you can make arrays of arrays:\n1 2 3 4 int a[2][4] = { {0, 1, 2, 3}, {4, 5, 6, 7}, }; This can go as deep as you want, but it does get a bit confusing if you go too deep. The page for nested arrays on TutorialsPoint may help if you want to know more.\nAnyway, a very, very, very important take away here is that if you make an array in C and then use the variable name without an index, you\u0026rsquo;re getting the address of the first element.\nThat is, if you were to \u0026ldquo;print the array\u0026rdquo; like this\nprintf(\u0026quot;%d\u0026quot;,my_array);\nyou wouldn\u0026rsquo;t get the data in the array, you\u0026rsquo;d see the address of the first element. So, if you need the address of an array you DO NOT USE the \u0026amp; operator. It\u0026rsquo;s already an address.\nHowever if you want the address of a particular element, you can. So, \u0026amp;my_array[2] (assuming the array has at least 3 elements) is totally valid and actually very, very useful to be able to do.\nBack to thinking about memory addresses. # If we have an address, we should be able to see what\u0026rsquo;s at that address right? Yes! And because C is a language made to fuck you over, the syntax is confusing. If you want to know what\u0026rsquo;s at an address, you use *, you know, the same symbol you used for defining that a variable should hold an address. Technically, this is never actually a problem with ambiguity, but it is confusing when learning. Anyway, let\u0026rsquo;s add another line to our code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \u0026lt;stdio.h\u0026gt; int main() { int my_variable = 42; int *my_var_address = \u0026amp;my_variable; printf(\u0026#34;%d is at %p\\n\u0026#34;,my_variable,my_var_address); int my_second_var = *my_var_address; printf(\u0026#34;The value of my_second_var is %d\\n\u0026#34;,my_second_var); return 0; } If you run this, you should see output like 42 is at 0x7fffffffcde8 ... The value of my_second_var is 42.\nThis should make sense, because on line 11, we assigned my second var to the value that is at the address of my_var_address\nOkay, now here\u0026rsquo;s where things get a little weird. We made int *my_var_address a variable, so it, itself, has an address.\nIf you add the line printf(\u0026quot;The address of my_var_addres is %p\\n\u0026quot;,\u0026amp;my_var_address); above the return in the above code and run it, you should see something like\n42 is at 0x7fffffffcde8 The value of my_second_var is 42 The address of my_var_addres is 0x7fffffffcdf0 Where, yes, we\u0026rsquo;re printing the address of an address. Here\u0026rsquo;s something interesting though, those two addresses are really close together. In fact, if you take 0x7fffffffcdf0 - 0x7fffffffcde8 the answer is 8. They\u0026rsquo;re 8 bytes apart in memory. Hmmm, before we said each address should be taking up 8 bytes, so can we just get to one address by doing math on another? Yep! One thing to note is C sees that we\u0026rsquo;re working on memory address and assumes we want to move by whatever the memory address size (8 bytes in this case) whenever we do math on it, so, we actually want to subtract one to go from 0x7fffffffcdf0 to 0x7fffffffcde8. Yep, not confusing at all.\nprintf(\u0026quot;The data at the address of my_second_var - 1 (which is %p) is %d\\n\u0026quot;,\u0026amp;my_second_var - 1,*(\u0026amp;my_second_var - 1));\nWill give us The data at the address of my_second_var - 1 (which is 0x7fffffffcde8) is 42. Now, this may not actually work on your computer as, technically, there\u0026rsquo;s not guarantee that my_second_var and my_variable are right next to each other in memory.\nBut, that\u0026rsquo;s not always the case. In C, we can always be assured that consecutive elements of an array are at consecutive memory locations.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include \u0026lt;stdio.h\u0026gt; int main() { int my_array[] = {10,11,12,13,14,15,16,17,18,19}; int *my_var_address = my_array; // doing int *my_var_address = my_array; is the equivilent of \u0026amp;my_array[0]. // In C, refrencing the array without an index gives the address of the // 1st item. This sort of makes sense, as anything looking at my_array // really only needs to know where the first item is and how many there are. // Hopefull this print drives that home... printf(\u0026#34;%d is the value at address %p. my_var_address is now %p\\n\u0026#34;,my_array[0],my_array,my_var_address); // Okay, so what the hell is this doing then? int *my_pointer = \u0026amp;my_array[3]; // Well, we know that array has 10 elements, let\u0026#39;s print them for(int i = 0; i \u0026lt; 10; i++){ printf(\u0026#34;my_array holds %d @ i = %d\\n\u0026#34;,my_array[i],i); } // Hmm, we made that second variable an int, but it hold the address // of the 4th element of the array (remember, arrays start at 0) for(int i = 0; i \u0026lt; 7; i++){ printf(\u0026#34;the data at the address of my_pointer + %d is %d\\n\u0026#34;,i,*(my_pointer+i)); } // Turns out C will let us treat any varible as an array. // if it\u0026#39;s not a pointer (address), this will probably wreck everything. for(int i = 0; i \u0026lt; 7; i++){ printf(\u0026#34;the data at my_pointer[%d] is %d\\n\u0026#34;,i,my_pointer[i]); } return 0; } [TODO] function pointers\nConst, Volatile, Static, and #define # Const # [TODO]\nStatic # I don\u0026rsquo;t love Geeks For Geeks, but this article is decent: https://www.geeksforgeeks.org/static-variables-in-c/\nVolatile # In computers we sometimes need to interact with the real world. For example, say you have a button hooked up to your computer - and I don\u0026rsquo;t mean through USB or anything else, instead I mean, it\u0026rsquo;s a button wired directly into the processor. Now, this may sound weird, but in reality, this is how things actually work \u0026hellip; sort of.\nAny keyboard will have a tiny, really lame computer built into it that only runs code that checks to see if those buttons have been pressed, but, it\u0026rsquo;s still a computer - so what I\u0026rsquo;m talking about is programming that tiny, lame computer.\nSo, how does it know if a button has been pressed? Well, usually, that button will be hooked up to a General Purpose Input Output or GPIO pin. Internally, the processor has hardware that will detect if this pin is high and change a bit at a fixed memory address. So, this means that at this specific point in memory (RAM) along side all the other values we can store and read, theres this special address that we can read from and the bits will be changed not from software, but by hardware.\nWhen you write code, normally it will be optimized in way where it assumes a value it\u0026rsquo;s read before won\u0026rsquo;t change unless it you write to it somewhere else. This should make sense. It\u0026rsquo;s basically just the computer having a sense of object-permanence and not expecting someone else to move things around without telling it.\nThe thing is, this is a problem with our button example. Say we want to wait until that button is pressed to continue\u0026hellip;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include \u0026lt;stdbool.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; bool check_if_button_is_pressed(void){ // This address is random, but in real life it would be pulled from the // technical refrence manual (TRM) of the processor you\u0026#39;re using. // This mildly weird code is convincing C that we actually want to treat // this value as a pointer directly. uint8_t *value = (uint8_t*)0x00108000; // Usually each bit at this address would be a different pin we\u0026#39;re reading // from. So this line picks out one bit in particular and checks if it\u0026#39;s a 1; if (*value \u0026amp; 0x40){ return true; } return false; } int main(void){ while(!check_if_button_is_pressed()){ // wait until the button is pressed. } printf(\u0026#34;You pressed the button!\\r\\n\u0026#34;); } This won\u0026rsquo;t actually work because we\u0026rsquo;re missing the word volatile. What will happen is the code will read the value at value once, and then assume it won\u0026rsquo;t change, so even if we press the button and the value at that address changes, our code won\u0026rsquo;t actually re-read it because it\u0026rsquo;s assuming, for performance reasons, that a value won\u0026rsquo;t be changed without its knowledge.\nAll that has to be done to fix it is add the word volatile before uint8_t *value = (uint8_t*)0x00108000; to tell the compiler that, hey, no, actually this value might actually change between reads.\nThe other major use of volatile is effectively the same thing - just instead of the memory changing because of some of some other hardware, it\u0026rsquo;s changing because of a CPU with multiple cores. Both cores have access to the same memory, but if one changes a value both want to read and write, both need to see re-read that variable each time they use it, since they can\u0026rsquo;t be sure the other didn\u0026rsquo;t just change it.\n#define # This has the potential to open up a huge can of worms, but generally anything you see in a C file that starts with a # is a pre\nMore on Types # Strings # Most languages (except for C. Ugh.) have a string type that\u0026rsquo;s abstracted away from the idea of being a collection of characters. Usually these will do sane things with string length (not letting you overflow, easily concatenating strings, etc.) and will often support Unicode / UTF-8 directly, etc. If the language has it, use it.\nArrays, Lists, Dictionaries, \u0026hellip; # You\u0026rsquo;ve seen arrays, but, depending on the language, there\u0026rsquo;s usually a variety of other basic ways to store data in something resembling a list.\nFor example, In python there are\nLists, which can contain mixed data types (a = ['a',43,\u0026quot;test\u0026quot;,3.14159]) and are ordered (so are accessed exactly like arrays in C) Sets, which are un-ordered and don\u0026rsquo;t allow duplicates. See the python docs. Dictionaries, which can be used to map a key to a value. See the python docs. Slightly more complex data structures # Before I mention a bunch more data structures that all seem to be more-or-less the same things but with different rules, let me take a brief aside to say why these exist:\nInserting or deleting in the middle of an array is very slow. You have to copy all the data after the insertion point over. Sorting lots of numbers can be slow, so paying a tiny cost on each insertion to keep it sorted may be better than large, periodic costs. You may need to be able to add and remove data very fast, but not need to look at it very often You may need to access data often, but very rarely add or remove it. You might need to know if some data exists, but not actually care about the value. You might need strict rules for access to prevent accidental human error. You might need something that works well when there are multiple threads accessing the data at once (imagine having a deck of cards and 4 friends available to separate out all diamonds) You may need to look up a value given an input value (dictionary and related) Again, depending on the language (or libraries used) you might have some primitives for things such as:\n\u0026ldquo;Vectors\u0026rdquo;, Basically an array that handles it\u0026rsquo;s shit when it needs resized - it won\u0026rsquo;t let you overflow BUT, it\u0026rsquo;s typically quite slow if you\u0026rsquo;re not appending at-or-near the end. (like an array)\nStacks. Usually, these only let you access the \u0026ldquo;top\u0026rdquo; item, and add a value on (push) or remove one (pop)\nHash maps. Confusing to understand (Wikipedia), but can be effectively treated as a dictionary that is typically very fast.\nLinked List. I will talk about these more later. They\u0026rsquo;re a common topic to teach in CS (fuck if I know why, they\u0026rsquo;re slower than a basic array in most circumstances)\n\u0026hellip;this also depends on the standard library, target architecture, etc. If the language has optimized the hell of of Linked Lists (cough Java cough) it can be faster than using a naive implementation that isn\u0026rsquo;t hand optimized - though often those optimizations involve making it not-a-true linked list under the hood. From a strict comp-sci perceptive linked lists should, for many applications, be better than arrays. From the perceptive of someone that understand that cache locality is a thing, they\u0026rsquo;re shit. There\u0026rsquo;s a few thousand variants of some of the above of these which seek to overcome some of their problems, notably:\nSkip Lists allow for jumping over some values, trading memory for lookup speed. See Wikipedia. Unrolled linked lists are effectively just a list of arrays. This makes them a pretty sane trad off. See Wikipedia. There\u0026rsquo;s also a ton of data structures that work by making a tree of values. Heaps, and anything ending in -Tree apply here. There\u0026rsquo;s more than I care to mention, but the gist is they tend to have structured data and faster than linked lists look ups, but insertions may be slower due to needing to restructure the tree.\nOther Types # Depending on the language, there may be types for working with complex numbers, \u0026ldquo;big numbers\u0026rdquo; (which may change in name depending on the language) which aren\u0026rsquo;t bound by bit-size limits,\nTypedef \u0026amp; Struct (and packing bits) # So, cool, we can work with things and store things in lists or whatever, but what if we want more complicated things? Like, a say we want to represent an ID card in code. That should probably have a first name, last name, unique ID, birth date, etc.\nWell, fortunately for you, almost every language has some form of this. In some cases (like C) it\u0026rsquo;s data only and are called structures, in others you can actually associate \u0026ldquo;methods\u0026rdquo; with a particular kind of thing and define behavior for these \u0026ldquo;objects\u0026rdquo; \u0026hellip; but, I\u0026rsquo;m getting ahead of myself. Let\u0026rsquo;s look at structures:\n1 2 3 4 5 6 7 8 9 10 #include \u0026lt;time.h\u0026gt; struct id_card { char first_name[30]; char last_name[30]; uint32_t id; // The time library defines a time structure for us, // and we can put a structure in a structure. struct tm birth_day; }; So, now that we have this we, we could do something along the lines of\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;time.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; struct id_card { char first_name[30]; char last_name[30]; uint32_t uid; // The time library defines a time structure for us, // and we can put a structure in a structure. struct tm birth_day; }; void print_id(struct id_card target_id) { printf(\u0026#34;%s %s\\n\u0026#34;,target_id.first_name,target_id.last_name); printf(\u0026#34;%d\\n\u0026#34;,target_id.uid); printf(\u0026#34;%d/%d/%d\\n\\n\u0026#34;,target_id.birth_day.tm_year,target_id.birth_day.tm_mon,target_id.birth_day.tm_mday); }; int main() { struct id_card vega_id; struct id_card triode_id; strcpy(vega_id.first_name,\u0026#34;Vega\u0026#34;); strcpy(vega_id.last_name,\u0026#34;Deftwing\u0026#34;); vega_id.uid = 1234; vega_id.birth_day.tm_year = 1900; vega_id.birth_day.tm_mon = 0; vega_id.birth_day.tm_mday = 0; strcpy(triode_id.first_name,\u0026#34;Triode\u0026#34;); strcpy(triode_id.last_name,\u0026#34;Killjoy\u0026#34;); triode_id.uid = 1235; triode_id.birth_day.tm_year = 1901; triode_id.birth_day.tm_mon = 1; triode_id.birth_day.tm_mday = 2; print_id(vega_id); print_id(triode_id); return 0; } As you can see, this gives us a nice way to structure our data and make reusable code. We only needed to make that print function once and we can print any ID.\nThe output, by the way, looks like this:\nVega Deftwing 1234 1900/0/0 Triode Killjoy 1235 1901/1/2 Alright, I promised a hair more here though, so there\u0026rsquo;s an extra thing you can do- you can make these structures into types. The big advantage of this is it lets you drop the use of the word struct in most places.\n1 2 3 4 5 6 7 8 typedef struct id_card { char first_name[30]; char last_name[30]; uint32_t id; // The time library defines a time structure for us, // and we can put a structure in a structure. struct tm birth_day; }; The only difference here is the word typedef. Which, as you can guess, just tells the code we want to make a new type.\nWith this done,\n1 2 struct id_card vega_id; struct id_card triode_id; becomes\n1 2 id_card vega_id; id_card triode_id; Now, there are technically some down sides to doing this in C but it\u0026rsquo;s standard enough practice and the downsides confusing enough that you should just go with it.\nThis is particularly handy for basic types, like making a type to hold two floats for complex numbers or something application specific, like a MIDI note\u0026rsquo;s pitch and velocity. Repeating the word struct every time can just get in the way.\nTypes and Performance # As a general rule of thumb, the more bits a type has, the worse it will be for performance, especially if you let the compiler optimize your code for you. I\u0026rsquo;d like to keep this relatively brief, but say you have something like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \u0026lt;stdio.h\u0026gt; int main(int argc, char const *argv[]) { double a = 1; double b = 30; double c; while (b \u0026gt; 0) { c = a + b; b -= 1; } printf(\u0026#34;%f\u0026#34;,c); return 0; } This is very stupid code not just because it\u0026rsquo;s just round about way of printing the number 2, but because it\u0026rsquo;s using double precision floating point numbers to represent integers. Now, you may be thinking: \u0026ldquo;Why would that matter, they\u0026rsquo;re both number types?\u0026rdquo;.\nHere\u0026rsquo;s why: if we compile (turn into instructions the computer can understand) that code with lots of optimization (letting the computer try to make equivalent code that\u0026rsquo;s faster) it still winds up as this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 .LC2: .string \u0026#34;%f\\n\u0026#34; main: lui a5,%hi(.LC0) fld fa5,%lo(.LC0)(a5) addi sp,sp,-16 lui a5,%hi(.LC1) fld fa4,%lo(.LC1)(a5) sd ra,8(sp) li a5,30 .L2: addiw a5,a5,-1 fmv.d fa3,fa5 fsub.d fa5,fa5,fa4 bne a5,zero,.L2 fadd.d fa5,fa3,fa4 lui a0,%hi(.LC2) addi a0,a0,%lo(.LC2) fmv.x.d a1,fa5 call printf ld ra,8(sp) li a0,0 addi sp,sp,16 jr ra .LC0: .word 0 .word 1077805056 .LC1: .word 0 .word 1072693248 Which, is a lot of what probably looks to you like gibberish. However, what we can see is that this is still 30 lines long and that at line 11 there\u0026rsquo;s a label .L2 and line 15 has branch-if-not-equal back to that point. In other words, a loop. Which, yep, is what we expected - we did put a for loop in after all!\nOnly, this really doesn\u0026rsquo;t need to be the case. If we change our code to be the more sensible option and use integers:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \u0026lt;stdio.h\u0026gt; int main(int argc, char const *argv[]) { int a = 1; int b = 30; int c; while (b \u0026gt; 0) { c = a + b; b -= 1; } printf(\u0026#34;%d\\n\u0026#34;,c); return 0; } and compile it with optimization again, we get this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 .LC0: .string \u0026#34;%d\\n\u0026#34; main: lui a0,%hi(.LC0) addi sp,sp,-16 li a1,2 addi a0,a0,%lo(.LC0) sd ra,8(sp) call printf ld ra,8(sp) li a0,0 addi sp,sp,16 jr ra Which, is obviously less lines and less instructions- but more importantly doesn\u0026rsquo;t even have a loop at all! Weird, right? This is because the C compiler realized that a and b never change, and so the value printed will always be 2, so instead of recomputing the value every time your program runs, it just computes it once and bakes the result in. Basically, if you make this program and gave it to someone else to run, their computer would never actually do the math - it would just print 2.\nSo, why did this work for the integer version and not the float version? Well, truth be told I have no clue. The way C optimizer work is ludicrously complex. What I can tell you is that, generally, simple types will work better and be faster both because the compiler will find better optimizations and (because of complex reasons regrading CPU architecture and vector operations (a very complex topic to be ignored for the moment)) more complex types just take more time anyway - see this Stackoverflow post and Integer and Floating-Point Arithmetic Speed vs Precision (Nicolas Limare) (the page is broken for graphs, but the conclusion is still relevant).\nNote, this assumption isn\u0026rsquo;t always true - it does still depend on the hardware. For example, if you\u0026rsquo;re offloading computation to your graphics card, float point operations are probably faster than integer ones. That\u0026rsquo;s a much, much bigger topic for another time though.\nWhat I want you to take from this is that you shouldn\u0026rsquo;t just use a bigger type because \u0026ldquo;it\u0026rsquo;s more than enough\u0026rdquo; if the language lets you pick. In something like Python (unless you\u0026rsquo;re using Numpy \u0026hellip; more on that eventually) you don\u0026rsquo;t get the option, but when you do get the option, you should choose wisely and handle overflow and underflow appropriately.\nDynamic Typing # Let\u0026rsquo;s stop thinking C and look at some python for a moment:\nGo ahead and open a python interpreter and run this, typing it in an pressing enter on each line\n1 2 3 4 5 6 7 8 9 a = 1 type(a) a += .1 type(a) a -= .1 type(a) a += 3j type(a) a += \u0026#34;w\u0026#34; You should see that on the first call, python tells us the type is \u0026lt;class 'int'\u0026gt;, which checks out, but that should mean adding .1 to it won\u0026rsquo;t work. But, we can, and when we look at the type again, it\u0026rsquo;s now \u0026lt;class 'float'\u0026gt;. It turned it into a float for us! Okay, so what if we subtract that .1 back off? Huh, still a float. This mostly makes sense, the type conversions aren\u0026rsquo;t free, so once it\u0026rsquo;s been used as a float Python keeps it that way. Okay, then we can add 3j to it - this is mostly just showing off that python has built in complex number support and that it will convert to it as expected - and it does, type(a) gives us \u0026lt;class 'complex'\u0026gt;. Cool. Okay, what if we add \u0026ldquo;w\u0026rdquo;. Adding a character to a complex number makes no sense, right? Python agrees:\nTypeError: unsupported operand type(s) for +=: 'complex' and 'str'\nAlong with this, while in C if we do 7/2 with ints we expect to get 3, in python, it will automatically turn into a float and we\u0026rsquo;ll get 3.5 (You can actually do two division signs, so 7//2 in python to get the same flooring behavior)\nType coercion # Python is what is known as \u0026ldquo;Dynamically Typed\u0026rdquo; due to the above. C, on the other hand is a \u0026ldquo;Statically Typed\u0026rdquo; language because we have to explicitly say what type each variable is before we use it.\nThis, however, doesn\u0026rsquo;t mean we can\u0026rsquo;t change types. We just have to be explicit about it and deal with the consequences ourselves. Yay, isn\u0026rsquo;t C funnn. So, let\u0026rsquo;s look at something we already sort of looked at above with the ASCII table and convert a character to an int and back.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main() { char my_char = \u0026#39;a\u0026#39;; int my_int; my_int = (int)my_char; my_int++; printf(\u0026#34;%c\\n\u0026#34;,(char)my_int); return 0; } Note, this example is a bit extra dumb, as C will let us do math on chars directly This, unsurprisingly, will print b. But let\u0026rsquo;s actually look at the syntax. See those types in parentheses? Those exist to tell the compiler \u0026ldquo;treat this as if it\u0026rsquo;s this other type here\u0026rdquo;. With a character to an int, the conversion is pretty reasonable, but it can get a lot weirder.\nLet\u0026rsquo;s look at a particularly famous example which converts a float to a long (basically an int, but able to hold more bits - in the video he calls it 32 bits (4 bytes) because the code it is from was written for 32-bit computers, where a long was 32-bit and not 64 like it usually is today), does some operations on it, then turns it back into a float in order to approximate the inverse square root ( \\(\\frac{1}{\\sqrt{x}}\\) ) very quickly.\nThis video is pretty in depth. I don\u0026rsquo;t really expect someone new to programming to follow all of it. I only have it to show why this stuff is powerful and provide motivation. I don\u0026rsquo;t expect you to be able to recreate this kind of code on your own. Most experienced programmers couldn\u0026rsquo;t either. Okay, we\u0026rsquo;re getting there. We\u0026rsquo;ve gone over some of the mind set of programming, you\u0026rsquo;ve now ran some code in two different languages, stepped though it, and have learned a lot about data types - next up, we\u0026rsquo;ll finally look at actual logic and doing stuff on these data types.\nWell, okay, not \"have to\". You could make a loop to iterate over every element in the array. But, memcpy will likely be dramatically faster because some really smart people have optimized the hell out of it. "},{"id":151,"href":"/engineering/programming/intro/prog7logic/","title":"Prog7logic","section":"Engineering","content":" Chapter 10.7 - ＬＯＧＩＣ \u0026amp; Functions # For this page, If you see that lines are ending with a semicolon, ;, then that code is C. If they don\u0026rsquo;t, it\u0026rsquo;s Python. Would you like to speak to an Operator? # The very first thing to understand before we can get to more intersting things is the list of operations available to us.\nThis includes the operations your used to - addition, subtraction, etc. - as well as bit-wise operations and comparisons.\nBasic Operations # I\u0026rsquo;m going to mostly skip talking about addition, subtraction, multiplication, and divsion, because, duh. Still, a few notes.\nWith multiplication, it\u0026rsquo;s pretty easy to exceed the maximum allowed by your type. For example,\n1 2 3 uint8_t a = 16; uint8_t b = 16; uint8_t c = a + b; //0, because 16*16 = 256, and unsigned 8 bits goes from 0 to 255 Division of integrers will truncate. (floor)\n1 int c = 11 / 4; //2, because 11/4 = 2.75, but the .75 \u0026#34;falls off\u0026#34; For subtraction, remumber an unsigned type can\u0026rsquo;t go negative, but it can under-flow to a large, positive value.\nNeed to increment a variable by 1? in C you can use name++; (or name--; to decrement).\nNeed to add/substract/divide/multiply/and/xor/etc. a value with itself - like a = a + 2;? Just move the symbol to before the equal sign: a += 2; is the same thing. This works for all the others too: a -= 2;, a /= 2;, etc.\nSince Python doesn\u0026rsquo;t have the a++; style syntax, you\u0026rsquo;ll at least want to use a += 1 there, as writing a = a + 1 gets old quickly. There\u0026rsquo;s one seemingly weird operation you may not be used to that belongs to this basic set: modulo.\nModulo just means to do division but store the remainder, not how many times the number goes into it. So, while 7/3 is two, 7 mod 3 is 1, because 3 goes into 7 twice with 1 left over. In most programming languages modulo is written with a percent sign, so 7%3 would give you 1. This is surprisingly handy.\nFor example, say you want to know if a number is even or odd? Well, if you just take the number \u0026ldquo;mod\u0026rdquo; 2 you\u0026rsquo;ll get 0 if it\u0026rsquo;s even and 1 if it\u0026rsquo;s odd. isn\u0026rsquo;t math fun.\nBitwise Operations # Bits? # Yep. Computers can only see numbers as binary, 1\u0026rsquo;s and 0\u0026rsquo;s. Sometimes, you do need to play with binary directly. How often this is the case really depends on what you\u0026rsquo;re doing. If you\u0026rsquo;re working with something that interfaces directly with hardware (like making motors move, etc.) the boards that make that possible will typically require you configure things and bring voltages high or low by setting individual bits. This may sound difficult, but it\u0026rsquo;s not.\nBefore we can look at operations on binary, you need to know how to read it, fortunately, it\u0026rsquo;s pretty easy for positive numbers. First, you should know we usually pad binary numbers with zeros.\nImagine you have some normal decimal numbers, say 0, 1, 23, and 1000. If you needed to use the same number of digits to repsent them all, you could pad them with zeros. That is, you\u0026rsquo;d have 0000, 0001, 0023, and 1000. The values haven\u0026rsquo;t changed, you\u0026rsquo;ve just put zero in front of them so they\u0026rsquo;re the same length.\nSo, with binary, if we have 1, 01, 001, or 0001 or 00000001 the same still applies, it\u0026rsquo;s still just 1.\nSecond weird thing, we\u0026rsquo;ll often (but not always!) prefix binary numbers with 0b, so, you might see 0b00000001, that\u0026rsquo;s still just 1. This is done because otherwise it may be hard to tell if a number is binary or just happens to only have 1\u0026rsquo;s and 0\u0026rsquo;s.\nAlright, then, how do we actually read numbers, well, some people can see it right away just seeing a pattern so\n0 = 0000, 1 = 0001, 2 = 0010 , 3 = 0011, 4= 0100, 5 = 0101, 6 = 0110, 7 = 0111, 8 = 1000, 9 = 1001, \u0026hellip;\nIf that is enough for you to understand, great. If it\u0026rsquo;s not think about it like this, the first digit, all the way on the right, is the 1\u0026rsquo;s place - just like in decimal, the second digit, is the 2\u0026rsquo;s place, the 3\u0026rsquo;rd the 4\u0026rsquo;s, the 4th the 8\u0026rsquo;s place, etc.\nso, if we have 1100 read it from the least significant (right) to most (left). For example, 1100 is \\((0 \\times 1) \u0026#43; (0 \\times 2) \u0026#43; (1 \\times 4) \u0026#43; (1 \\times 8) = 12\\) In case it\u0026rsquo;s not obvious, that\u0026rsquo;s actually \\((0 \\times 2^0) \u0026#43; (0 \\times 2^1) \u0026#43; (1 \\times 2^2) \u0026#43; (1 \\times 2^3) = 12\\) . Remember, any number to the 0 power, that is \\(x^0\\) , is always 1.\nWhile a binary number with 4 digits can only go up to 15, binary numbers can still get quite large. Most computers today are 64 bit, which means directly working on two 64 bit numbers should still be fast. These numbers, assuming they\u0026rsquo;re unsigned (meaning they can\u0026rsquo;t go negative), can be as high as 184,46,744,073,709,551,615\nAlright, so what about negative numbers? Well, for reasons, it works out that we do negatives by letting the most significant bit (the right most bit) represent the sign, and then flipping all the other bits. So, if we have 8 bits, -3 is 0b11111101, -42 is 0b11010110. Something to consider here is that if we have a really big positive number, say 0b01111111 (which is 127) and then add 1 to it we wind up with 0b10000000 which, for an 8 bit signed number is -128. This is called overflow.\nOkay, this is almost everything you need to know for now. I do want to briefly mention hexadecimial. Basically, reading binary really sucks so we often don\u0026rsquo;t. Instead, we let our numbers go from 0 to F, giving us 16 digits. This lets each symbol represent 4 bits, and two symbols represent a byte (8-bits).\nWhile binary is written with a 0b prefix, hexadecimal (often just called hex) is written with a 0x prefix.\nSo, 0xFF is 0b11111111 is 255.\nThis also gives rise to what is know as a hex editor. Very rarely, you may need to look at the binary output of something that doesn\u0026rsquo;t have a better representation or meaning to you other than the actuall binary itself. In that case, you need a way to look at the hex (as a condensed view of the binary) directly. We\u0026rsquo;re rapidly going off an a tangent though, so let\u0026rsquo;s put a pin in that idea.\nBinary (0b) Hex (0x) Decimal 0000 0 0 0001 1 1 0010 2 2 0011 3 3 0100 4 4 0101 5 5 0110 6 6 0111 6 7 1000 8 8 1001 9 9 1010 A 10 1011 B 11 1100 C 12 1101 D 13 1110 E 14 1111 F 15 AND and OR or OR and AND? # Say you have two numbers 0b11001100 and 0b01010101. You might want to make it so that only the bits that are 1 in both number one and number two are 1 in a new number, so getting 0b10001000. Well, this is a logical AND and it is done with a single \u0026lsquo;\u0026amp;\u0026rsquo; character.\n1 2 3 uint8_t a = 0b11001100; uint8_t b = 0b10101010; uint8_t c = a \u0026amp; b; // = 0b10001000 Simisarly, you might want check if either of the bits in a or b is 1, and if it is, set the bit in a new number. This is written with a | charater.\n1 2 3 uint8_t a = 0b11001100; uint8_t b = 0b10101010; uint8_t c = a | b; // = 0b11101110 XOR? # In English, if somebody asks you if you\u0026rsquo;d like cake or ice cream, it\u0026rsquo;s up to context for you to know if you have two choices Cake OR Icecream or three, Cake, Ice Cream, or BOTH. The OR from above is the \u0026ldquo;Both\u0026rdquo; variety. The bit still gets set to 1 if both are 1. XOR, or eXclusive OR, is the one-or-the-other version, the bit is only set if exclusively one of the bits is 1. It\u0026rsquo;s written with a ^.\n1 2 3 uint8_t a = 0b11001100; uint8_t b = 0b10101010; uint8_t c = a ^ b; // = 0b01100110 Gettin\u0026rsquo; Shifty: \u0026raquo; and \u0026laquo; # Sometimes, you need to shift bits over. Say you have a big number, 0b10101111, but you only want the top 4 bits, you could shift them to the left:\n1 2 3 4 5 6 7 uint16_t big_number = 0xBEEF; // Shift the 0xBE over, -\u0026gt; 0x00BE uint8_t most_significant_bits = big_number \u0026gt;\u0026gt; 4; // \u0026#34;Mask out\u0026#34; the lower 4 bits -\u0026gt; 0x00EF uint8_t least_significant_bits = big_number \u0026amp; 0xFF; Similarly, say yo u have two halves of a big number, but need to compine them, you could use a right shift to get the bits into position before OR\u0026rsquo;ing them together.\n1 2 3 4 uint8_t most_significant_bits = 0xCA; uint8_t least_significant_bits = 0xFE; uint16_t big_number = (most_significant_bits \u0026lt;\u0026lt; 4) | least_significant_bits // = 0xCAFE Beyond Bitwise: Comparisons # \u0026amp;\u0026amp; and || # Above we were working on bits. This often isn\u0026rsquo;t how we work, instead, we just want to know is this big expression True or False, or, in C, any-value-other-than-zero or zero. That\u0026rsquo;s what the normal AND and OR comparisons are for. Unlike their less common (but simplier to write!) siblings, these are written with two of the symbol, so AND is \u0026amp;\u0026amp; and OR is ||. But, what are these for?\nWell, say you have some user input for their age and you only want to tell them they can enter if they\u0026rsquo;re at least 13 but under 100:\n1 2 3 if((age \u0026gt;= 13) \u0026amp;\u0026amp; (age \u0026lt; 100)){ printf(\u0026#34;You may enter!\u0026#34;); } Or, you might want to do this the other way around, telling people that are outside the range to leave\n1 2 3 if((age \u0026lt; 13) || (age \u0026gt;= 100)){ printf(\u0026#34;Go Away!\u0026#34;); } If, in the first example, it were just a single \u0026amp;, that would be taking the result of age \u0026gt;= 13 and the result of age \u0026lt; 100 and give you a new number that is the bitwise and of these results. Let\u0026rsquo;s think about this for a moment. If somebody was 12, they\u0026rsquo;d fail the first check but pass the second - so age \u0026gt;= 13 would turn to 0 while age \u0026lt; 100 would become 1. If we do 0 \u0026amp; 1 The answer is still 0. So, it still works. So, why do we even have the \u0026amp;\u0026amp; version?\nWell, not all conditions you\u0026rsquo;re checking will be cleanly 0 or 1. For example, you might make a function which returns an 8-bit integer where each bit is used as a flag indicating some error has happened. Let\u0026rsquo;s say something in that function has gone wrong and it returns 0b00010000 (which is 16) but we only care about that function having had an error if another function returns an error at the time, but for this other function the only error it can return is 1 (true) - all successes are just 0 (false). Let\u0026rsquo;s assume it also has an error, that is, our first function returns 16 and our second returns 1:\n1 2 3 4 5 6 7 8 if(my_function_that_retuns_an_error() \u0026amp;\u0026amp; my_other_boolean_function()){ // This would run, as both are non-0, // so, non-0 \u0026amp;\u0026amp; non-0 is true \u0026amp;\u0026amp; true, which is true } if(my_function_that_retuns_an_error() \u0026amp; my_other_boolean_function()){ // This would not run, as 0b00010000 \u0026amp; 0b00000001 is 0, which is false. } As a general rule of thumb, if you\u0026rsquo;re in an if you probably want the \u0026amp;\u0026amp; or || version unless you REALLY want to be working with bits. Even if \u0026amp; would behave the same, you want your code to convey your intent to be checking a basic true/false state. To be clear, seeing the bitwise \u0026amp; and | operations in an if is very rare. Not wrong, sometimes necessary, but rare.\nThe notable exception to this would actually come from a scenario similar to the one above, where errors being reflected in each bit. If we wanted to check for specific errors, that could be done by using a bitwise and with the bit\u0026rsquo;s in the comparison value set for the errors we want to handle. This isn\u0026rsquo;t super common, but it\u0026rsquo;s something you may run into.\nNote, if you\u0026rsquo;re ever just checking that something is true (non-0), you can omit the comparison outright.\n1 2 3 4 5 6 7 8 int a = 1; if(a){ //... } // is the same as if(a \u0026gt; 0){ //... } \u0026gt; and \u0026lt;, \u0026gt;= and \u0026lt;= # Well, these are pretty obvious and shown above. They\u0026rsquo;re just greater than, less than, greater than or equal to, and less than or equal to.\nThe only thing to be careful of here is that the logic actually matches what you want. If you want a loop that says 0 though 3, you want a loop that goes to less-than-4:\n1 2 3 4 5 6 7 8 9 10 11 12 for(int i = 0; i \u0026lt; 4, i++){ print(\u0026#34;%d\u0026#34;,i); } // Will print 0,1,2,3 but NOT 4. Because we often want to // index into an array in a loop this is convient as an // array with 4 elements should go 0,1,2,3 as the indicies int my_array[4] = {10,20,30,40}; for(int i = 0; i \u0026lt; 4, i++){ my_array[i] = i*20; // This would replace the values with {0,10,20,30} } == ≠ = # Finally, you can check for equality or inequality\n1 2 3 if (a == b){ printf(\u0026#34;Correct Password!\\n\u0026#34;) } 1 2 3 if (name != \u0026#34;Vega\u0026#34;){ //not equal printf(\u0026#34;User Not Authorized!\\n\u0026#34;); } Note, you can actually use the ! symbol to negate anything, for example, we could have written the above age checking code as\n1 2 3 if(!(age \u0026gt;= 13) || !(age \u0026lt; 100)){ printf(\u0026#34;Go Away!\u0026#34;); } or\n1 2 3 if(!((age \u0026lt; 13) || (age \u0026gt;= 100))){ printf(\u0026#34;You May Enter\u0026#34;); } There are times where this sort of backwards logic is actually easier to read, this probably isn\u0026rsquo;t one of them. More often than not, it\u0026rsquo;s best when you have a chain of conditions where only one is different, that is if you needed a to be true, b to be true, but c to be false you could do\n1 2 3 if(a \u0026amp;\u0026amp; b \u0026amp;\u0026amp; !c){ //... } Going with the flow # If, else, else if # You\u0026rsquo;ve seen if statments used so many times now that covering them now seems like a bit of a joke. Still, there are sme extra things you should be aware of. First, you can write else if statments.\n1 2 3 4 5 if(name == \u0026#34;Vega\u0026#34;){ printf(\u0026#34;Hi Vega!\\n\u0026#34;) } else if (name == \u0026#34;Soatok\u0026#34;){ printf(\u0026#34;Hi Soatok!\\n\u0026#34;) } and these can still, optinoally, have an else as a catch all\n1 2 3 4 5 6 7 if(name == \u0026#34;Vega\u0026#34;){ printf(\u0026#34;Hi Vega!\\n\u0026#34;) } else if (name == \u0026#34;Soatok\u0026#34;){ printf(\u0026#34;Hi Soatok!\\n\u0026#34;) } else { printf(\u0026#34;Hi, have we met?\\n\u0026#34;) } Do keep in mind, that if an input could be true for multiple things, only the first matching case will happen. For example, say we have this code\n1 2 3 4 5 6 7 if(number \u0026gt; 10){ printf(\u0026#34;Greater than 10\\n\u0026#34;) } else if (number \u0026gt; 5){ printf(\u0026#34;Greater than 5\\n\u0026#34;) } else { printf(\u0026#34;Less than 5\\n\u0026#34;) } And number is 11, then only \u0026ldquo;Greater than 10\u0026rdquo; will print because the first condition was met, so it never checked the next one.\nYou can also nest if statments,\n1 2 3 4 5 6 7 8 9 if (a == b){ if (b == c){ printf(\u0026#34;a, b, and c are equal.\\n\u0026#34;); } else if (a \u0026gt; d){ printf(\u0026#34;a and b are greater than d.\\n\u0026#34;); } else{ printf(\u0026#34;a is equal to b, not equal to c, and less than d.\\n\u0026#34;); } } and stack else ifs:\n1 2 3 4 5 6 7 if (a == b){ // do something } else if (a == c){ // do something } else if (a == d){ // do something } Short-Circuiting # In C (and most languages) a logic operator will not evaluate all of it\u0026rsquo;s arguments if it doesn\u0026rsquo;t have to - and the order of evaluation matters. Basically, if C can go \u0026ldquo;Well, if this is true/false clearly the entire condition is true/false\u0026rdquo; it won\u0026rsquo;t even run the code that would still result in the obvious result.\nFor example in the code,\n1 2 3 if(true || my_function()){ //... } my_function() will never run because if you read \u0026ldquo;is this true or \u0026hellip;\u0026rdquo; the answer is true regardless of what follows.\nThe same applies to this code:\n1 2 3 if(false \u0026amp;\u0026amp; my_function()){ //... } This can never be true, so C sees that and doesn\u0026rsquo;t bother checking the other conditions.\nNow, both of these examples are pretty stupid. You shouldn\u0026rsquo;t be starting a || or \u0026amp;\u0026amp; comparison with true or false anyway, but if those were other functions that had returned true/false, the same would apply, they\u0026rsquo;re evaluated left-to-right until something makes the state of the entire function clear. Normally, this is totally fine and doesn\u0026rsquo;t require extra thought. It\u0026rsquo;s really only a problem if you\u0026rsquo;re assuming a function will run in an if and depending on it altering that state of things elsewhere. That is, if you\u0026rsquo;re expecting the code to have \u0026ldquo;side effects\u0026rdquo;. Typically, these side effects are signs that your code isn\u0026rsquo;t made well as one function executing or not in an if shouldn\u0026rsquo;t break future functions, but sometimes there\u0026rsquo;s no clean way to write code and shit happens. Just knowing this short-circuiting behavior is a thing may make a future bug more obvious though.\nCompound conditionals # Generally, if you need to check multiple things in an if, like\n1 2 3 if(a \u0026amp;\u0026amp; b || c \u0026amp;\u0026amp; d \u0026amp;\u0026amp; e || f){ //... } you should always group things together to convey your actual intent\n1 2 3 if((a \u0026amp;\u0026amp; b) || (c \u0026amp;\u0026amp; d) \u0026amp;\u0026amp; (e || f)){ //... } Otherwise you will have weird, hard to catch bugs. Again, short circuiting still applies, and now it applies to these groups, but it should be more clear with the added parentheses what will happen than without.\nswitch/case # While seemingly redundant, there\u0026rsquo;s also switch case statments. Becuse reasons, switch case statments are faster, but they\u0026rsquo;re also more limited. You can only have \u0026ldquo;constant expressions\u0026rdquo; basically, this means no comparisons other than direct equality, but you can do it against many cases. This is easier if you see it:\n1 2 3 4 5 6 7 8 9 10 11 12 switch(check_me){ case 1: printf(\u0026#34;check me is 1\u0026#34;); break; case 2: printf(\u0026#34;check me is 2\u0026#34;); case 3: printf(\u0026#34;check me is 2 or 3\u0026#34;); break; default: printf(\u0026#34;check me is not 1, 2, or 3\u0026#34;) } Note, the break; statments here. Without them a case \u0026ldquo;falls though\u0026rdquo; and will execute the same code as the case below it. So, in this code, if check_me was 2, it would print both \u0026ldquo;check me is 2\u0026rdquo; and \u0026ldquo;check me is 2 or 3\u0026rdquo;. Accidently missing these break;s is a pretty easy mistake.\nOf note, Python (as of pretty recently) has swictch case like statements too, but they\u0026rsquo;re way, way, way more powerful as they do pattern matching. This is a whole topic in itself, but if you want to read up, go for it (Python.org).\nfor # You\u0026rsquo;ve seen a lot of for\u0026rsquo;s in python from the start of this:\n1 2 for i in range(10): print(i) but if you haven\u0026rsquo;t actually ran it as code, you may not realize that range(10) is not 1-10, but rather 0-9. This is largely because in most programming languages (Python and C included) arrays/lists are 0-indexed. So, if we want to access each item in an array of 10 items we need to start with item[0] and end with item[9].\nThe same code in C is\n1 2 3 for(int i = 0; i \u0026lt; 10; i++){ printf(\u0026#34;%d\\n\u0026#34;,i); } I actually think the C style here is a bit more convient, as if you want to increment by something else it\u0026rsquo;s really obvious, for example, to increment by 10:\n1 2 3 for(int i = 0; i \u0026lt; 100; i = i + 10){ printf(\u0026#34;%d\\n\u0026#34;,i); } Python will of course let you do the same thing too, but you have to remember (or look up) how to use the range() function.\nIf you only give range one argument (so like range(10) ) it will use 0 as the start and step by 1 (and end before the stop). if you want to start at a different number you can use two arguments so range(5,10) would give you 5,6,7,8,9. If you want to change the step, use 3 arguments, so range(0,50,10) will give you 0,10,20,30,40.\nYou should also know you can nest for loops, use different conditions, decrement them, etc:\n1 2 3 4 5 6 7 8 9 for(int i = 0; i \u0026lt; 10; i = i++){ printf(\u0026#34;i is %d\\n\u0026#34;,i); for(int j = 0; j \u0026lt; 20; j = j++){ printf(\u0026#34;j is %d\\n\u0026#34;,j); for(int k = 0; k \u0026gt;= j; k = k--){ printf(\u0026#34;k is %d\\n\u0026#34;,k); } } } Break! # Sometimes, you really want to preemptively stop a loop, well, you can. Just use break.\n1 2 3 4 5 6 7 // This will find the index of first element with a value of 1. // Assume my array has 100 elements. for(int i = 0; i \u0026lt; 100; i++){ if(my_array[i] == 1){ break; } } continue # While less common, sometimes you want to do something in a loop, but you have an edge case where you don\u0026rsquo;t want to run that iteration in full, and instead want to start from the top again. You can do this with continue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // This will set any value in the array less than 10 to 0. // Note, there are more obvious, better ways to do this. // This is *usually* true, which is why you don\u0026#39;t see continue much. // Assume my array has 100 elements. for(int i = 0; i \u0026lt; 100; i++){ if(my_array[i] \u0026gt;= 10){ continue; } my_array[i] = 0; } // Obvious way to do this for(int i = 0; i \u0026lt; 100; i++){ if(my_array[i] \u0026lt; 10){ my_array[i] = 0; } } This is particularly handy for checking for an error each time a for loop runs if you think it may not error on the next iteration.\nfor each # C does not have a \u0026lsquo;for each\u0026rsquo; system Many languages have a convient system for iterating over each item in a data structure without needing to explicitly know the size of the structure before hand. This is generally really nice to read too. C doesn\u0026rsquo;t have this. Oddly, python ONLY has for-each loops. The range() function previously just generates this list were iterating over internally. So, when you see for i in range(10): you can read it as \u0026ldquo;for each element, i, in the range 0 though 9\u0026rdquo;. The power of this comes in python\u0026rsquo;s (and languages that support \u0026ldquo;for each\u0026rdquo;) ability to iterate over non-numeric types and ranges. For example,\n1 2 for letter in \u0026#34;Oppinioned Guides\u0026#34;: print(letter) does exactly what you think it does - though it does put each letter on its own line. Reall, the big thing to notice here is the word in, which is what\u0026rsquo;s making this easy. It\u0026rsquo;s implying that we want to iterate over something. This gets crazy powerful once you learn more about how to combine things in python using more functional-programming methods like zip or map, for example:\n1 2 3 4 5 x = [10,20,30,40] y = [12,23,34,45] for x, y in zip(x,y): print(f\u0026#34;{x},{y}\u0026#34;) does what you think and iterates though both.\nThings get way cooler when you learn about Python\u0026rsquo;s iterators and generators which let you do really crazy things. As a taste:\n1 2 3 4 5 6 7 8 def halvingn(n): num = n while num \u0026gt; 1: yield num num = num / 2 for i in halvingn(100): print(i) Will give you numbers that keep halving until the result would be under 1. That is, this prints 100, 50, 25, 12.5, 6.25, 3.125, 1.5625. The keyword here is yield in the function (made with def) above. We\u0026rsquo;ll talk about functions later.\nDo note, that again, this could probably be done simpiler and this was for example. Unless you really needed to generate having numbers all over the place, it would probably be easier to do\n1 2 3 4 i = 100 while i \u0026gt;= 1: print(i) i = i / 2 But, wait, while?! Yep, I used it above to. Look at me sneaking things in! It\u0026rsquo;s pretty obvious what it does, but let\u0026rsquo;s go back to C which has while\u0026rsquo;s too, and look at it there:\nwhile (and do-while) # 1 2 3 4 5 6 7 8 9 10 // Normally, loops iterate over integers // and we use i, j, and k as our loop indecies // however, since this is a float, this would // be a bit confusing. float f = 100; while(f \u0026gt; 1){ printf(\u0026#34;%f\u0026#34;,i); f /= 2; // same as i = i / 2 } while loops can have any condition you want. Want to run something forever?\n1 while(1){ // whatever } Want to run something as long as some condition is true?\n1 while(x == y){ // whatever } Want to run something while some condition is true and a value is less than something?\n1 2 3 while((x == y) \u0026amp;\u0026amp; (x \u0026lt; z)){ // whatever } do while # Say you have something you need to happen at least once. That is, you might have a while loop that will make the condition true initially if it\u0026rsquo;s not already so that it can then work it\u0026rsquo;s way out. Well, that\u0026rsquo;s a do-while\n1 2 3 do { // whatever } while( a == b ); Do note, that in C at least, there is a ; at the end of that while.\nAlso, as with everything else, you can stack this logic however you like. Put while loops inside other while loops. Put fors in whiles in ifs in fors in whiles in nested fors with breaks and continues. The sky is the limit.\nAside: the sky is not the limit. # Can you nest logic as deeply as you want and do while(a){while(b){for(int i = 0; i \u0026lt; 10; i++){for(int c = 0; c \u0026lt; b; c++){if(a\u0026gt;b){for(int d = 10; d \u0026gt; 0; d += b){a=b;}}else{a = c;}}}}}\nsure, but even if that was formatted well nobody is going to have any fucking idea what is going on. As a general rule of thumb, you should keep your level of indention, and so the number of nested calls like this small.\nBut, \u0026ldquo;How do I do that if I want complex programs?\u0026rdquo; I hear you ask. Easy. ＦＵＮＣＴＩＯＮＳ. Functions are vital to understand. Before we get to them though, I want to go on one more tangent into a dark shadowy place you should never go: goto.\ngoto # I reallllly don\u0026rsquo;t want to even bring these up. GOTO is something that you should never ever ever ever ever ever use. Never. Never ever. Okay? Never. I\u0026rsquo;m only bringing them up because someday your may be unfortunate enough to run into code that does and you should know how to read it and because from a low level perspective they sorta like how functions work.\nSay you have two conditions that both need to run the same chunk of code\n1 2 3 4 5 6 7 if (a == b){ // do long, complicated thing here } if (c == d){ // do the same long, complicated thing here } you don\u0026rsquo;t want to have to have two copies of the same code, so, if you didn\u0026rsquo;t know about functions, you could do something like this\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 if (a == b){ goto LONG_COMPLICATED_THING; } if (c == d){ goto LONG_COMPLICATED_THING; } goto AFTER_LONG_THING; LONG_COMPLICATED_THING: // the code to do the thing AFTER_LONG_THING: // whatver else you want to do I think what goto does and the weird labels purpose is pretty obvious. What\u0026rsquo;s less obvious is why you\u0026rsquo;d even need the AFTER_LONG_THING and goto AFTER_LONG_THING above it. This is because, unlike functions (again, getting there) goto only goes to labels and your code will excute straight though a label - meaning if neither of the if statments happened, and we didn\u0026rsquo;t have the goto AFTER_LONG_THING; there, the code after the if\u0026rsquo;s would still run, which in this case means the code after LONG_COMPLICATED_THING: would still run, basically, those ifs wouldn\u0026rsquo;t be doing anything - the code after LONG_COMPLICATED_THING would ALWAYS run.\nSorry if that\u0026rsquo;s over explained. I\u0026rsquo;m sure the name and function is pretty obvious.\nAlright, so, why are these so bad? Well, it means you can have code just sort of arbitarily hop around and it becomes really hard to trace what code leads to what. It makes debugging an absolute shit show. This is extra true when you consider that if you wanted to be extra dumb, you can use goto for loops\n1 2 3 4 5 LOOP: // thing to do in the loop if(a == b){ // way to actually leave the loop goto LOOP; } again, DON\u0026rsquo;T. If you ever think \u0026ldquo;Huh, a goto would be a nice solution\u0026rdquo; you\u0026rsquo;re wrong.\nTechnically there is some overhead with calling a function - which we\u0026rsquo;re about to see - which using a goto avoids. Still don\u0026rsquo;t.\nThe main reason these exist is because in assembly - that is the lowest level language your computer can understand - a goto is all that exists. These constructs like for, if, etc. don\u0026rsquo;t exist.\nInstead, you get individual instructions like beq,blt, or jmp which mean branch-if-equal-to, branch-if-less-than, and jump, respectively. These will go to a memory address and execute code from that point if the conditon (or lack of, for jmp) is met.\nAll your if\u0026rsquo;s, for\u0026rsquo;s, while\u0026rsquo;s, etc. are built out of these. The complier (gcc, in your case) takes your C code and turns it into these instructions and does so much more effeciently than you could by hand.\nBy writing in the higher-level-than-assembly-but-still-pretty-low-level language of C, you get to not deal with these things. The same applies to writing functions. Functions are what we use as much more poweful, easier to read alternatives to direct jumping around by memory locations that is done by goto.\nAgain, I can\u0026rsquo;t stress this enough, don\u0026rsquo;t use goto. Not even once. Don\u0026rsquo;t try it. Don\u0026rsquo;t think, \u0026ldquo;This is neat and good to know!\u0026rdquo;. Unknow it. Don\u0026rsquo;t go \u0026ldquo;this is a good use case!\u0026rdquo;. It\u0026rsquo;s not. Don\u0026rsquo;t use goto.\n\u0026hellip; Okay, so, there are some legitimate reasons to use GOTO but they are exceptionally rare. GOTOphobia considered harmful (in C)\u0026quot; by Jorengarenar does a good job of explaining these times - but even unless you\u0026rsquo;re already a quite experienced programmer \u0026hellip; just don\u0026rsquo;t. Getting Functional # In most programming languages, we have the concept of Functions. Functions let us break up code into digestable sections and reuse things. When we call print() in python or printf() in C we\u0026rsquo;re actually using a function that\u0026rsquo;s built in (well, sorta, printf is part of a library \u0026hellip; we\u0026rsquo;ll get there).\nYou can make your own functions pretty easily. Let\u0026rsquo;s look at a Python function first since they\u0026rsquo;re easier to understand.\n1 2 3 def add(a,b): c = a + b return c In python, we can make a new function with the def keyword. Then, we give it a name - here, that\u0026rsquo;s \u0026ldquo;add\u0026rdquo; - and tell it what to expect for input. Here, that\u0026rsquo;s two \u0026ldquo;arguments\u0026rdquo;, a and b. This function returns something. This isn\u0026rsquo;t always necessary, but most things will.\nWe can now use this add function (obviously you should not turn adding into a function)\n1 2 3 x = 1 y = 2 z = add(x,y) will now work. Note, the names when you make the function and the names you pass the function don\u0026rsquo;t have to match, also note, because add has a return we want to capture that result. We do this by just assigning the result to a variable.\nC, on the other hand, is much more explicit. In C, you need to specify the type of each argument and what it will return. So, if we had a function for adding (again, don\u0026rsquo;t), that might look like\n1 2 3 int add(int a, int b){ return(a + b); } but this function can only handle integers. If we try to run it with add(1.2,3.4) - that is with floating point arguments - it\u0026rsquo;s going to fail. It probably won\u0026rsquo;t even let you compile. Similarly, if we try to store the result into the wrong type it won\u0026rsquo;t work. Note, the return type is that int before the word add.\nIf we want a function in C to return nothing, it should be declared as void\n1 2 3 void say_hi(char name[]){ printf(\u0026#34;hello %s\u0026#34;,name); } Same applies to arguments. If you have a function which takes no arguments, it can also be void. You can also have both a void return and void arguments. This is handy for when you just want to put a big block of repeated code behind a convient name to make it more obvious what something does. But there\u0026rsquo;s a catch:\nSCOPE # Variables are normally local to functions, so, if you have code like\n1 2 3 4 5 6 7 8 9 10 11 12 13 int main(){ int a = 0; set_a(); printf(\u0026#34;%d\u0026#34;,a); return 0; } void set_a(void){ a = 42; } This WILL NOT COMPILE . Why? Because the a inside the set_a function is NOT the same a as in the main function. If we went up and changed this so that the add a function at least declared a with a type,\n1 2 3 void set_a(void){ int a = 42; } the code would compile, but that function doesn\u0026rsquo;t do anything. the print on line 6 will still print out \u0026ldquo;0\u0026rdquo;.\nNow, if we made this code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 int main(){ int a = 0; a = set_a(); printf(\u0026#34;%d\u0026#34;,a); return 0; } int set_a(void){ int a = 42; return a; } The code would work as expected\u0026hellip;ish. That \u0026ldquo;a\u0026rdquo; inside the set_a function? Yeah, that a is still it\u0026rsquo;s own a. It\u0026rsquo;s actually making it\u0026rsquo;s own a, returning the value of a, and the a = set_a(); is just applying that value to the a in main. They\u0026rsquo;re both called a here, but they don\u0026rsquo;t have to be and the effect would be the same.\nNow, there\u0026rsquo;s a cheat here. We can use global variables. If we take the above code and move the int a = 0; out of main, we can make it global to all functions in the file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 int a = 0; int main(){ set_a(); printf(\u0026#34;%d\u0026#34;,a); return 0; } void set_a(void){ a = 42; } So, this code works. Problem is, this tends to cause issues and get really messy. Being able to reuse names is actually really good and helpful. So, what if we want to pass a into our set_a function - not just the value that a has, but actually the variable itself so we can change it without returning a new value?\nWell, finally, pointers from last chapter serve a purpose! If we just pass in a what were doing is saying \u0026ldquo;take the value a holds and give it to the function\u0026rdquo; but if we pass in \u0026amp;a we\u0026rsquo;re saying \u0026ldquo;take the address where a is at and give it to the function\u0026rdquo;.\nThis gives rise to the two main ways to move data around \u0026ldquo;Pass by value\u0026rdquo; and \u0026ldquo;Pass by reference\u0026rdquo;. Passing by value is easy. Passing by reference is useful, but a bit harder to wrap your head around.\n[TODO]\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 int main(){ int a = 0; set_a(\u0026amp;a); // \u0026amp;a means the address where a is at printf(\u0026#34;%d\u0026#34;,a); return 0; } void set_a(int *a){ //this function takes an integer pointer (address) *a = 42; //the same syntax, but this *a says we want to modify the value at that adress } [TODO]\n[TODO] - explain the two meanings of (*a - either derencing or making a pointer.)\nThink of it like this. Passing by value is like me standing next to you and showing you a piece of a paper that has the number 0 on it. You then show me a piece of paper that says 42 on it. I can choose to erase the 0 on my paper and write 42. That\u0026rsquo;s pass by value.\nIf instead, I set my paper down, tell you where I set it, let you do what you want to it, then I take it back, that\u0026rsquo;s pass by reference.\nSo which is better?\nNeither. You need to use both. You may even need to use both in one function. There are times when one pass by reference will even work though, most notably if you want to make a function that gets data from an array, you\u0026rsquo;re going to have to deal with passing the pointer to the first element in the array.\nAs an aside, if you ever pass an array\u0026rsquo;s pointer as an argument to something in C, you should also pass in the length of the array and check that the pointer isn\u0026rsquo;t NULL. More on null checks later. fns, the stack\nThe Stack # [TODO stack plates visual]\nWhen we call a function we:\nStore the current state of the calling function\nMove execution to the address of the called function\nDo the thing\nReturn to the original (calling) function\nRestore the original state.\nThis gets complicated when we start wanting to call a function from in a function from in a function \u0026hellip;. you get the idea. Basically, we need a place to store the return address and state to know where we want to go back to when the called function returns. Problem is, we can\u0026rsquo;t just put these all in CPU registers since we only have so many CPU registers. Fortunately, by calling functions C mostly abstracts away this state storing and loading. Unfortunately, it can still bite us in the ass.\nOne option would be to give every function a place in RAM. (so each time a function is called it persists and keeps room for itself) This won\u0026rsquo;t work for a varitey of reasons:\nThis would use ton of space by not letting us reuse space between functions. Plus we\u0026rsquo;d need to allocate extra room incase the room a given function need grows, or we\u0026rsquo;d have to move everything over each time things grew, which would take a long time. We want local variables to only be valid for that call of the function anyway (This is one reason why we have static, if you do need state to be preserved). We want to be able to call our functions from multiple places (it would be awful if we had to store a ton of coppies of every function in RAM!) So, we let functions return and then reuse their space. So, we instead want to make a place to store the return address of each function (and their variables) as they\u0026rsquo;re called.\nWe do this with a Stack, in this case, The Stack. If someone says The Stack this is the stack they mean. So, uhh, what\u0026rsquo;s a stack?\nEach function call adds its own section to the stack Each stack section contains two types of data: The Return Address from the caller The local variables used by the currently executing function Arguemnts to the function When the function returns it\u0026rsquo;s section is reoved from the stack This keeps the amount of memory on the stack at a minimum Total memory usage across all functions can be greater than RAM size Limit is now the memory usage of functions at deepest call hierarchies Stack Overflows! Really hard to anticipate calculate Super annoying with recursion, hence why it\u0026rsquo;s often avoided. So, we maintain a stack pointer, this is an offset, so each function\u0026rsquo;s variables are looked up by a base + offset. The base is th estack pointer, the offset is the particular variable we want to access. So, we use a stack! - LIFO (not FIFO) - we only operate on the top of the stack\n[TODO] what\u0026rsquo;s a stack\n[TODO] inlines\n"},{"id":152,"href":"/engineering/programming/intro/prog8oo/","title":"Prog8oo","section":"Engineering","content":" 10.8 - Data Structures, Object Orientation, \u0026amp; Encodings # Why not just structs? # C is a very low level language and only lets you make structs. Structs are fine, but they have some annoying properties, particularly in separating data from how you interact with it, making it difficult to make complex abstractions where you can be sure that data that should only be internal to a structure isn\u0026rsquo;t exposed, or that the data can\u0026rsquo;t be changed in an invalid way.\nFor example, say we have a basic C structure we\u0026rsquo;ll call a \u0026ldquo;person\u0026rdquo; with first name, last name, age, and an ID, etc. We can make that structure easy enough:\n1 2 3 4 5 6 struct Person { char first_name[20]; char last_name[20]; unsigned int age; unsigned int id; } Problem is, somebody could do something like\n1 2 struct person bob; bob.first_name = \u0026#34;this string is a lot more than twenty characters\u0026#34; which would crash the program, because we\u0026rsquo;ve exceeded the length limit we defined above, so, maybe we make a function to set the first name:\n1 2 3 4 5 6 7 int set_first_name(struct Person person, char *name){ if(strlen(person.first_name) \u0026gt;= 20){ return 1; } else { person.first_name = name; } } and so long as we only ever use this function, this is fine. Problem is, we really can\u0026rsquo;t hide the data from other things and prevent them from modifying the name directly.\nThe problem gets worse, too. For example, say we wanted to add something to the structure that stores the last time the ID was changed. This should never be able to be changed directly, it should only change if the ID changes, and it should ALWAYS change if the ID changes. This is impossible to enforce in C.\nGetting a bit more abstract, what if we want data to be able to inherit ideas. For example, say we want to be able to make a person, but also have a data type for employee and customer? It would make sense to make both employees and customers people. That is, we\u0026rsquo;d want these data types to inherit their properties and data fields from the parent data structure. What I\u0026rsquo;m beginning to describe is called \u0026ldquo;Object orientation\u0026rdquo; and it\u0026rsquo;s a feature common to many languages, but notably not available in C. It generally makes it easy to model more complex data structures and limit the way you interact in them, preventing bugs.\nReally, the big difference here isn\u0026rsquo;t that you can do something new (like inheritance, etc.) - you can do similar things in C with structures and pointers if you\u0026rsquo;re clever - it\u0026rsquo;s what we can\u0026rsquo;t do. We often want to limit what we can do to prevent ourselves (and hackers) from making/exploiting errors. With Object Orientated Programming (OOP) You can place limits on your code to prevent yourself from doing very stupid things, which once you\u0026rsquo;ve written enough code, you\u0026rsquo;ll know the majority of your time goes to fixing stupid mistakes.\nA New Objective # Alright, so, we know we want something more than basic data structures (sometimes) and this thing is called \u0026ldquo;Object Orientation\u0026rdquo;, so, uh, what is that?\nOkay, so, put very basically, it means you make your code with classes and make instances of objects. Each class (and so each object) has a set of methods (basically functions) that define how you can interact with it. These methods can either be public or private. private methods can only be called by other things within the class, public can be called from outside the class. Now, in truth, this is one place where python is a hair weird to teach this as it really doesn\u0026rsquo;t do the public/private distinction well, but ╮(─▽─)╭.\nAnyway, let\u0026rsquo;s look at an example. Because OO really only makes a lot of sense in the context of larger code, let\u0026rsquo;s assume we\u0026rsquo;re making a game like Minecraft and need a tool system. The following is a rough idea of how that might look in an object-oriented style for making a Tool class, making a Pickaxe subclass of the Tool class\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class Tool: def __init__(self,durability,name,cool_down_time): # We want to set the name internally, # but don\u0026#39;t want it to be modifed directly after being set initally self._name = name sef.durability = durability self.cool_down_time = cool_down_time # This will get initalized automatically, # no need to pass it in when making the item self.time_last_used = 0 def get_name(self): return self.name def set_name(self,name) # Python doesn\u0026#39;t give us a good way to ensure data types, # and since this would be from user input, we want to be extra safe. if type(name) != str: return False # Check if the entered string is a reasonable length if len(name) \u0026gt; 30 or len(name) \u0026lt; 1: return False self._name = name return True def get_durability(self): return self.durability def _is_broken(self): if durability \u0026gt; 0: return False else: return True def use_item(): if not self.__is_broken(): if ((time.time() - self.time_last_used) \u0026lt; self.cool_down_time): # If enough time hasn\u0026#39;t elapsed, we can\u0026#39;t use the item again return False self.durability -= 1 self.time_last_used = time.time() # Return true to indicate we could use the item return True else: # If the item is broken, we can\u0026#39;t use it return False class PickTool(Tool): def __init__(self,durability,name,cool_down_time,mining_level,attack_damage): super().__init__(durability,name,cool_down_time) self.mining_level = mining_level self.attack_damage = attack_damage self.tool_type = \u0026#34;pick\u0026#34; def use_item_on_block(self,target_block): # Try to use the item if not Tool.use_item(): return False elif (target_block.hardness \u0026lt; mining_level) and (target_block.tool == self.tool_type): target_block.damage() def use_item_on_mob(self,target_mob): if not Tool.use_item(): return False else: target_mob.hurt(self.damage) Of course, this is lacking the code to craft the pick - that functionality should probably belong to a crafting table object, but without going into it too much, that might look like\n1 2 3 4 5 6 7 8 9 10 11 12 13 class Block(): #... class InteractableBlock(self,Block): #... class CraftingTableInteractableBlock(self,InteractableBlock) #... def craft_item(self,player,items) # assume items is a list of 3 lists of 3 items, (a 3x3 grid) # with something to represent no item. if items = [[plank,plank,plank],[none,stick,none],[none,stick,none]]: player.add_to_inventory(PickTool(20,\u0026#34;Wooden Pick\u0026#34;,1,1)) And of course, there\u0026rsquo;d be yet more code to actually let a player use the item once it\u0026rsquo;s in their inventory. What you should note, though, is that when calling PickTool(1,\u0026quot;Wooden Pick\u0026quot;,1,1) a new object of that type is made. If another one is crafted, it will still be a new item, with its own durability, name, etc. Even if they\u0026rsquo;re the same, if one is used, it won\u0026rsquo;t use the other. They are distinct objects.\nMaybe this would be easier to see with a toy example:\n1 2 3 4 5 6 class Dog: def __init__(self, name): self.name = name first_dog = Dog(\u0026#34;Scruffy\u0026#34;) second_dog = Dog(\u0026#34;Spot\u0026#34;)\tThere are two dogs being \u0026ldquo;made\u0026rdquo;. If both were named \u0026ldquo;Spot\u0026rdquo; that would be fine, but it\u0026rsquo;s still two different dogs. Just like how meeting someone with your same name doesn\u0026rsquo;t make the two of you the same person.\nAnother nice thing about this is it gives us a good way to organize our code, as usually it\u0026rsquo;s a good call to have a file per class (though not always, we don\u0026rsquo;t need separate files for 10 lines of code if it fits somewhere else nicely).\n[TODO]\nobjects, classes, basic OO, inheritance, SOLID\nS - Single Responsibility Principal Each class should do one thing, and only one thing. This is easy in theory, but also sometimes mentally difficult, and requires breaking things down more than natural. O - Open-Closed Principal Open for extension; Closed for modification In other words, you should be able to change how something works, as much as reasonable, by extending a class without changing its source code. L - Lisov Substitution Principal Shitty name Basically just means an instance of a thing should always be able to be replaced by a more-specific version. So, this really means that a specific version should still need all the attributes of the less-specific version. In the above example, we had employees and customers as people. So, any code that does an operation on a person should be able to work on a generic person, employee, or customer; however, it\u0026rsquo;s not necessary that any code that can work on an employee can work on a person I - Interface Segregation Principal This one needs used within limits. Don\u0026rsquo;t make code overly complex. https://reflectoring.io/interface-segregation-principle/#:~:text=The%20Interface%20Segregation%20Principle%20(ISP,%E2%80%9D%20or%20%E2%80%9Cfat%E2%80%9D%20interface. D - Dependency Inversion Principal I also don\u0026rsquo;t like this one. It\u0026rsquo;s often preemptively writing code in case of a future rewrite. Great, until the rewrite requires you change things anyway. Arguably, it\u0026rsquo;s harder to maintain code where the high level depends on the low level. Arguably, this is totally obnoxious over engineering in most circumstances. This does make sense if you\u0026rsquo;re making something in a VERY big project, working with multiple teams, etc. https://dev.to/tamerlang/understanding-solid-principles-dependency-inversion-1b0f Polymorphism -\nI/O # Files, stdout/stderr, python pickle, databases, network connection, etc.\nBeing Assertive # Assert and testing, try/catch, exceptions\nhttps://stackoverflow.com/questions/1081409/why-should-i-use-asserts\nPython\u0026rsquo;s Iterators # "},{"id":153,"href":"/engineering/programming/intro/prog9stdlib/","title":"Prog9stdlib","section":"Engineering","content":" Chapter 10.9 - The Standard Library # Yunno\u0026rsquo; how you\u0026rsquo;ve been using print() and printf() all over the place? Well, those are functions, but where are they from?!\nWell, for C, in printf()\u0026rsquo;s case it\u0026rsquo;s pretty obvious - you can\u0026rsquo;t use it unless you have #include \u0026lt;stdio.h\u0026gt; at the top of the file, so, clearly your computer has that file, and the associated .c file, somewhere. And frankly? That\u0026rsquo;s good enough for the moment. Later, you may need to learn how to download C libraries from the Internet. But for now, just know you have many more than \u0026lt;stdio.h\u0026gt; available, which cover a lot of basic functionality.\nFor Python, well, the language\u0026rsquo;s motto is \u0026ldquo;Batteries Included\u0026rdquo;, basically, you should be able to do everything you need without adding libraries? Is this totally true, well, it depends. But still, the idea is very core functionality - a list of built-in functions - is always ready to go and there are many more libraries with more specialized functions which should come with every python install and so be a import whatever away.\nSo, let\u0026rsquo;s look at each language\u0026rsquo;s standard library. Maybe not everything in detail, but lets at least see what there is, so we don\u0026rsquo;t try to reinvent any wheels and have a better idea of what\u0026rsquo;s available to us when we go to solve bigger problems.\nPython # Okay, so, we have the built-in functions - things like print(), sum(), len(),id(),input(),etc. Most of these are pretty straight forward and do what you\u0026rsquo;d think. Some are a bit weirder. Generally, if you read the function name and go \u0026ldquo;What?\u0026rdquo; it\u0026rsquo;s probably not something you need to worry about quite yet.\nThen we\u0026rsquo;ve got string with constants predefined like string.ascii_letters which has all the letters a-z and A-Z as well as a few functions.\nre lets us evaluate \u0026ldquo;regular expressions\u0026rdquo; - little snippets in a sort-of language of its own that can help match patterns in text. For example, ^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$ may look crazy, but it\u0026rsquo;s actually a way for identifying if a string is a phone number.\nSkipping over difflib, textwrap, unicodedata, stringprep, struct, codecs, and a few even less entertaining ones, we wind up at datetime which has data structures and functions for working with time, including datetime.date.today() to get the current date.\nSkipping over zoneinfo and calendar we come to collections which has functions like counter() for seeing how many times something in a list is repeated. It also has deque (pronounced \u0026ldquo;deck\u0026rdquo;) which is like a list, but much faster if you need to append or remove elements from either end often.\nSkipping over heapq and bisect there\u0026rsquo;s array, which is a lot like the python built in list because it\u0026rsquo;s basically a raw C array - that is, unlike a python list which may have mixed types (a = [\u0026quot;string\u0026quot;, 2, 3.14159]), an array has a static type. I mostly bring this up to say\u0026hellip; don\u0026rsquo;t. This is where you\u0026rsquo;d start wanting to use external libraries like numpy which is much, must more powerful and faster.\nSkipping over many boring bits, we run into copy which will be very, very useful later as you\u0026rsquo;ll see when we get deeper into object orientation. So, remember this exists.\nSkipping many more we finally hit math which has a wide array of useful mathematical functions: ceil(), comb() (combinations), factorial(), log(), sqrt(), all the trig functions, and many more. Plus, it has constants for pi and e. There\u0026rsquo;s also cmath for those in need of functions working with complex numbers.\ndecimal\u0026rsquo;s uses are niche, but if you\u0026rsquo;re trying to avoid the problems of floating point, it may help.\nSkipping over a few more, we hit random which can get you a wide range of ways to get random numbers. Speaking of, there\u0026rsquo;s statistics too! Everybody\u0026rsquo;s favorite package for working with everything from averages to correlations and standard deviations.\nWith itertools we\u0026rsquo;re diving into some rather weird territory, but if you\u0026rsquo;re wanting to learn functional programming (which, uh, is not what you think it is if you\u0026rsquo;re thinking functions from the last page) then this will be handy.\nfunctools has some black magic that lets you speed things up dramatically if you know what you\u0026rsquo;re doing. Really handy if you\u0026rsquo;re in the situations of \u0026ldquo;Ahh, shit, my python code isn\u0026rsquo;t fast enough\u0026rdquo; but caching (a topic for another day) is the answer.\nFor reasons to do with functional programming (again, advanced topic, don\u0026rsquo;t worry about it yet) you sometimes need to use the normal comparison operators as functions. That\u0026rsquo;s where operator comes in. So, uh, I guess I lied? add() is technically a thing? Don\u0026rsquo;t use it unless you actually need it, and since we haven\u0026rsquo;t gone over functional programming (again, not programming with functions - it\u0026rsquo;s a bad name) you don\u0026rsquo;t need it yet.\nThen the file-y stuff. You\u0026rsquo;ve got all the stuff you\u0026rsquo;d expect for reading and writing files and file paths (folders) and some weird stuff you won\u0026rsquo;t know what\u0026rsquo;s for.\nNext up is stuff for data persistence and the ever entertainingly named pickle which will let you save an object (like, an object orientation style object from before) to a file and then un-pickle it later. There\u0026rsquo;s also some libraries for connecting to databases.\nThere\u0026rsquo;s also libraries for compressing and de-compressing data in .zip, .lzma (.7z), .tar, etc.\nMoving more quickly now, you\u0026rsquo;ll also find libraries for:\nSecrets and Hashlib - Generating secure random numbers (for use with passwords)\nOS - Determining what OS you\u0026rsquo;re on (among other, more advanced uses)\nAlong with Datetime and Calendar there\u0026rsquo;s also just Time, which is useful for very precise times.\nA whole pile related to threading - These will let you use multiple cores.\nThis is pretty difficult to program around. We\u0026rsquo;ll talk about multithreaded programming in a future chapter. Another pile of em\u0026rsquo; related to networking, email, HTML, HTTP, URLs, ip addresses, etc.\nSome (limited) for working with .wav audio files and color systems\nIf you need to work with audio or color, you\u0026rsquo;re probably going to want some 3rd party libraries. A bunch for debugging related stuff that you probably won\u0026rsquo;t use directly\nThough you will still want to use a debugger, which does use them And many, many, many more that you\u0026rsquo;ll probably realize if you need and end up doing a web search for as necessary.\nOkay, so, uh, that\u0026rsquo;s a big ol\u0026rsquo; list of libraries alright. Why should you care?\nWell, you\u0026rsquo;ll notice that pretty much covers the majority of things you\u0026rsquo;d want to do with a computer, at least if you\u0026rsquo;re willing to do a fair amount of heavy lifting. Like, if you wanted to make a Twitter bot, there\u0026rsquo;s a networking library here and you could go read the twitter API docs and, using nothing more than what python comes with, you could make it.\nThat\u0026rsquo;s pretty cool, and makes Python really powerful.\nOn the other hand - remember what I said about not reinventing wheels? Making a Twitter bot in Python is the kind of thing that has probably been done tens thousands of times and there will certainly be existing libraries which make it an even easier problem.\nLet\u0026rsquo;s do a quick search for \u0026ldquo;Python twitter bot\u0026rdquo; - come on, you do it too. Open up a new tab and search it.\nYou\u0026rsquo;ll probably notice multiple of the results mentioning something called Tweepy. (as an aside, many python libraries end in py)\nLet\u0026rsquo;s look that up directly. If we do, we\u0026rsquo;ll find https://docs.tweepy.org/ and, more importantly, the documentation for it at https://docs.tweepy.org/en/stable/. If we were to dig around enough there, we\u0026rsquo;d see how to install it, how to get an access token from Twitter, and how to make a very simple program using it. Sure, it\u0026rsquo;s a bit of reading, but so was getting to this point. Fortunately, the more you read and work with this kind of stuff the faster it is to get though and to start actually doing cool things.\nTo be clear, you shouldn\u0026rsquo;t reach for third party libraries for every problem. If the basic python libraries are enough, that\u0026rsquo;s a good thing. You\u0026rsquo;ll need to build up this intuition for when the time and complexity cost in doing it yourself (and maintaining that solution) isn\u0026rsquo;t worth it.\nC # It\u0026rsquo;s relatively uncommon to use third party C libraries, but extremely common to use the built in ones. So far you\u0026rsquo;ve seen:\n\u0026lt;stdio.h\u0026gt; which provides printf() as well as file operations, and the ability to take in user input as text. \u0026lt;math.h\u0026gt; which provides most trig function, pow, log, exp, sqrt, etc. \u0026lt;string.h\u0026gt; which provides memcpy() as seen, but also has functions for taking a character array holding character-numbers and turns it into an interger or float (or, errors if it fails because the character-error holds letters, special characters, etc.). It also provides malloc() and free() which we\u0026rsquo;ll get into later. \u0026lt;time.h\u0026gt; which has data types and functions for working with time \u0026lt;stdint.h\u0026gt; which has the specific bit types like uint8_t \u0026lt;stdbool.h\u0026gt; which defines true and false\t(The fact that this isn\u0026rsquo;t just built in hurts me) And, yunno, that\u0026rsquo;s pretty much the only ones you\u0026rsquo;ll use for at least a good while. Eventually we\u0026rsquo;ll probably need \u0026lt;signal.h\u0026gt;, but other than that, ╮(─▽─)╭. There are a few more, but they\u0026rsquo;re rare to see.\nNow, you\u0026rsquo;re probably seeing that and thinking \u0026ldquo;Wow, compared to python that\u0026rsquo;s not much!\u0026rdquo;\nYep. Now, there are third party libraries - here\u0026rsquo;s a \u0026ldquo;awesome\u0026rdquo; list on GitHub of quite a few useful ones: https://github.com/oz123/awesome-c.\nOne thing worth noting, some libraries will say they\u0026rsquo;re \u0026ldquo;header only\u0026rdquo;. These libraries tend to be much easier to use. It\u0026rsquo;s not always the case, but, it\u0026rsquo;s often a win if you see it. We\u0026rsquo;ll talk about headers soon, because if you\u0026rsquo;re going to write anything remotely complicated in C, you have to use them.\nYou\u0026rsquo;ll also probably notice many of them claiming to be very small. This is because C is often used on embedded systems. We\u0026rsquo;ll talk about this more later, but on an embedded system, you often only have a few killobytes of RAM, practically no storage, and a CPU roughly as fast as a home computer from 1980 - so small is really important.\nWith all of the libraries you can find, you may think \u0026ldquo;oh, huh, I could write a fully featured program in C\u0026rdquo;, and, Yep. You can. It\u0026rsquo;ll probably be a much, much larger pain in the ass than a language better suited for the task. If you knew what libraries C++ or Rust had for the equivalent problems, you\u0026rsquo;d quickly see why plain C isn\u0026rsquo;t used for really anything big.\nThough, frankly, even if C had perfect libraries, the language doesn\u0026rsquo;t scale super well for massive projects unless you\u0026rsquo;re very, very, very, very, very careful and have very, very rigorous testing and quality checks. "},{"id":154,"href":"/engineering/programming/intro/progendreal/","title":"Progendreal","section":"Engineering","content":" 10.11 - \u0026ldquo;Real\u0026rdquo; Programs # So, you now mostly know all the fundamental building blocks used to write basically everything out there.\nBut\u0026hellip; not really?\nThe thing is, almost any program of moderate complexity is going to rely on libraries to provide extra, (hopefully) well tested, performant, hard to write functionality. Plus, most programs don\u0026rsquo;t exist in a vacuum: you may need to hook into a database, send packets over the internet, check for malicious user input, write to files, encrypt data, use an API to interact with a game engine, or even write in a different language and call one language\u0026rsquo;s code from another.\nMy point is, while you now have the foundational skills to write your own programs, a lot of programming is learning to use libraries and build up a repertoire of related knowledge that may not actually involve writing code directly. All the while, you still need to keep in mind the prior points:\nYou have to use math, logic, and smart data structures to model your problem Not all solutions are created equal Making decisions before you know everything is hard You need to know if tools exist for the problem in the first place If they do, you need to know which tool to use You also need to know when to do it yourself anyway So, how do you get good at these things?\nDO PROJECTS BY WRITING CODE. \u0026hellip; with variety! Games, embedded hardware, networking tools, quick utilities, tools to make programming easier, etc. CONTRIBUTE TO OPEN SOURCE BY WRITING CODE. WRITE CODE IN MANY LANGUAGES. \u0026hellip; using a variety of big-name libraries JUST. 👏 WRITE. 👏 FUCKING.👏 CODE. 👏 And don\u0026rsquo;t say, \u0026ldquo;But I don\u0026rsquo;t know what to write!\u0026rdquo;. There are thousands of open source projects that would welcome help. Hell, worst case poke me on Twitter @Vega_DW and I will find you something to work on.\n"},{"id":155,"href":"/engineering/programming/languages/","title":"Languages","section":"Engineering","content":" Appendix 3 - Programming Languages # 1 2 3 for (🥚 = 0; 🥚 \u0026lt; 🐔; 🥚++){ hatch(🥚); } Why hello,\nIf you\u0026rsquo;ve found this page, it\u0026rsquo;s likely your curiosity is getting the better of you and you\u0026rsquo;re killing time gawking at the weird syntax and features of a variety of languages. I know I have been guilty of doing so.\nThis page is meant to give you a taste, not a full list. There\u0026rsquo;s so many niche languages, esolangs, and outright jokes gone to far (like emojicode) to possibly make this list exhaustive.\nThis also means it\u0026rsquo;s quite possible your favorite language isn\u0026rsquo;t here. Depending on how esoteric it is, it may not even be on pldb or Awesome Programming Languages (GitHub), in which case, congrats, you\u0026rsquo;ve truly found something strange.\nStill though, you may be here just to get a better idea of the answer to the questions all people learning their first language begin to wonder:\nWhat do the other languages do that the one I\u0026rsquo;m using doesn\u0026rsquo;t? Why have all these languages instead of one do-it-all language everyone uses Well, those are big questions, and hopefully as you browse this page you\u0026rsquo;ll begin to understand, but in general the answers are\nNothing - but it can make some things a whole hell of a lot easier. Different logical representations making solving different problems easier Before we look at each language though I want to get your brain in the right receptive place, so please enjoy these links first:\nhttps://esoteric.codes Object Oriented Programming is Bad (Brian Will) 0-based vs. 1-based indexing (Hisham Hm) Stop Writing Dead Programs (YouTube) https://cs.lmu.edu/~ray/notes/syntaxdesign/ Microfeatures I\u0026rsquo;d like to see in more languages (Hillel Wayne) Now let\u0026rsquo;s actually see what each language has to offer.\nLow Level # In the intro to programming chapters we looked at some of the differences between low level and high level languages, and how at the very bottom of the layers of abstraction there\u0026rsquo;s assembly, so let\u0026rsquo;s start there.\nAssembly # 1 2 3 4 5 6 7 8 9 .LC0: .ascii \u0026#34;hello world!\\015\\000\u0026#34; main: push {r3, lr} movw r0, #:lower16:.LC0 movt r0, #:upper16:.LC0 bl puts movs r0, #0 pop {r3, pc} Assembly code is specific to an Instruction Set Architecture or ISA, that means it is written for a specific family of processors. Most laptops and desktops today run on x86_64 processors made by either AMD or Intel, while most tablets and phones use processors that use ARM. Of course, there are many, many other instruction sets than these two. For example, 6502 assembly is particularly easy to write, as it\u0026rsquo;s from an era (1) when programming at the assembly level was still common. On the other hand, RISC-V is a newer ISA that has been gaining a lot of traction due to its open nature.\nKnowing ASM can allow you to do some black magic, like pushing out FizzBuzz at 57.2GiB/s or may even be required to mundane tasks on micro controllers.\nThere\u0026rsquo;s only really a handful of instruction sets you\u0026rsquo;re likely to encounter today though, and of them the two most common by far are x86_64 and ARM. x86_64 (often, incorrectly, called just x86 - though I\u0026rsquo;ll do that often here as well) is very, very annoying to read because it is a CISC (Complex Instruction Set Computer) design. Complex is no joke, while the most complex variant of ARM has ~60 instructions (many of which won\u0026rsquo;t be available on all processors), x86_64 has (due to a myriad of extensions onto the instruction set) has roughly 1,000 depending on how you count them.\nThis could derail into a whole conversation about ISA, but you should really go read [TODO] for that.\nx86 Assembly: Hello World! (YouTube, John Hammond)\nSay hello to x86_64 Assembly 1-8 by 0xAX\nLet\u0026rsquo;s Learn x86-64 Assembly! Part 0 - Setup and First Steps\nPart 1 - Metaprogramming in Flat Assembler\nPart 2 - We\u0026rsquo;re Writing a Virtual Machine\nLinux-kernal-module-cheat [GitHub] has a nice guide to ASM\n\u0026lsquo;Furby\u0026rsquo; Source Code is in 6502 assembly\n[TODO] - a lot, talk about the varieties and differences of C and C++ and C# and why thery\u0026rsquo;re good and bad, etc.\nC # 1 2 3 4 5 #include \u0026lt;stdio.h\u0026gt; int main(void){ printf(\u0026#34;Hello World!\\r\\n\u0026#34;); } The next stop is the language that simultaneously gets the \u0026ldquo;most used by embedded\u0026rdquo; and \u0026ldquo;most hated for embedded\u0026rdquo; awards.\nYou\u0026rsquo;ve already seen C if you followed along with the intro to programming chapters, and really, by following those you\u0026rsquo;ve seen most of what it has to offer. It\u0026rsquo;s a pretty minimalist language with a small standard library. It\u0026rsquo;s both beautiful and immensely frustrating in its simplicity, mostly because of just how much it lacks in terms of safety, code organization systems, and portability.\nYou see, for as much as everyone likes to shout from the rooftops that C supports any and all processors ever made, they\u0026rsquo;re only half telling the truth. The problem is, C isn\u0026rsquo;t a programming language anymore (Aria Beingessner).\nAs that article argues, it\u0026rsquo;s turned into more of a \u0026ldquo;lingua franca of programming\u0026rdquo; but I\u0026rsquo;d also argue it\u0026rsquo;s not even one language anymore, because each compiler (GCC, Clang, MSVC, TCC, IAR, \u0026hellip;) all support different prepossessing macros and language revisions, be it ANSI C, C89, C99, C11, or C23, witch each compiler and C version having a non insignificant amount of compatibility fusterclucks between one another.\nStill, it\u0026rsquo;s a language that pretty much every programmer should know and know well and setting the above aside, it does still port to most platforms with lower effort than anything else.\nSo you really should dive into it. Learn pointers, macros, include guards, bounds safe function variants, memory alignment issues, asm(), and all. It\u0026rsquo;ll make you a better programmer.\nJust, if you\u0026rsquo;re going to write in C, at least unit test your code. If you do that - if you care - C can be the safest option.\nIf you\u0026rsquo;re really looking to make C easier to work with - albeit in a way that\u0026rsquo;ll likely annoy others working on the code - Cog may come in handy.\nIf you\u0026rsquo;re looking for a good reference guide to come back to when needed, bookmark Beej\u0026rsquo;s Guide to C Programming.\nC++ # 1 2 3 4 5 6 #include \u0026lt;iostream\u0026gt; int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; } If you want to increment C by one, you\u0026rsquo;d write C++.\nC++ has a reputation for being overly complicated, throwing in everything and the kitchen sink worse than Python does, changing every 5 years, and being a little too flexible.\nIt has absolutely earned all of those criticisms. It\u0026rsquo;s also one of the most commonly used programming languages exactly because of all of those things. If you like some of C\u0026rsquo;s close-to-the-metal nature, but want a bit more functionality to be included so you\u0026rsquo;re not always reinventing the wheel or fighting things to have some semblance of type safety, C++ is probably a good bet.\nJust know that while it\u0026rsquo;s possible to become a good C programmer than can read any C code and know what it\u0026rsquo;s doing (outside of intentionally obfuscated code), C++ is nearly a different language to each project which uses it. It\u0026rsquo;s object oriented, it\u0026rsquo;s heavier, and it still lets you shoot yourself in the foot, but now with a rube Goldberg machine filled with gunpowder instead of a pistol loaded with uninitialized memory.\nIf C is a desert, C++ is the Amazon. Both can be deadly and beautiful in their own ways.\nIf you\u0026rsquo;re looking to learn C++, https://www.learncpp.com is a decent bet. https://arobenko.github.io/bare_metal_cpp/ may prove helpful too.\nC# # 1 2 3 4 5 6 7 8 9 namespace HelloWorld { class Hello { static void Main(string[] args) { System.Console.WriteLine(\u0026#34;Hello World!\u0026#34;); } } } [TODO]: Get someone else to write this\nRust # 1 2 3 fn main() { println!(\u0026#34;Hello, world!\u0026#34;); } Rust’s rich type system and ownership model guarantee memory-safety and thread-safety — enabling you to eliminate many classes of bugs at compile-time.\nBasically, Rust doesn\u0026rsquo;t let you screw up the №1 thing that causes bugs.\nIt enforces writing code that\u0026rsquo;s safe (except when you specify you want to do something unsafe). It has a lot of other really nice features and makes using efficient data structures easy.\nWhile I think Rust is great for desktop programs, for embedded, When Zig is safer and faster than Rust from ZackOverflow makes a good argument for why you may want to oxidize everything - especially if you\u0026rsquo;re working on embedded hardware.\nIf you are working on desktop software though, I can not stress strong enough how much better of a choice Rust is than C or C++ for the vast majority of programs now.\nIf you\u0026rsquo;d like to learn Rust, I recommend A half-hour to learn Rust as well as\nhttps://doc.rust-lang.org/book/foreword.html Learning Rust the Dangerous Way (Cliff L. Biffle) Rust Performance Book Rust Cheat Sheet Python -\u0026gt; Rust guide - learning Rust when you know Python (GitHub) Rust isn\u0026rsquo;t a \u0026ldquo;new\u0026rdquo; language anymore, but it\u0026rsquo;s certainly not as battle tested as C or C++, so to show the maturity, just check out https://www.redox-os.org/, a full OS written in Rust!\nAlso, it\u0026rsquo;s worth noting Rust can be used to generate Web Assembly (more about that below). This means you can (in a roundabout way) use it on the Web. This isn\u0026rsquo;t unique to Rust by any means, but Rust is heavily used for it and has good resources for doing so.\nYou may also want to check out CXX for C++ ⟷ Rust interop. If you\u0026rsquo;re looking for some fun projects to get started in Rust, you may want to use Nannou, a creative coding framework for Rust.\nGo # 1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } The big claim to fame for go is its go keyword, which lets you do really easy threading. (https://gobyexample.com/goroutines). This has made it a favorite among those writing networking utilities and servers - just look at the list of programs that use it on its Wikipedia page.\nIf you\u0026rsquo;re wanting to learn go, you should go to https://tour.golang.org/welcome/1 as your first stop.\nZig # 1 2 3 4 5 const print = @import(\u0026#34;std\u0026#34;).debug.print; pub fn main() void { print(\u0026#34;Hello, world!\\n\u0026#34;, .{}); } A general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.\nhttps://ziglang.org/\nIf Rust is the next logical progression for the majority of C++ programmers, Zig is the future for C programmers. We need unsafe code to be productive, so we have it. We need good ways to write compile time code for our targets with limited memory, and so we have it. Zig fits very nicey as an upgrade to C without throwing everything and the kitchen sink in at the same time.\nFor a proficient C programmer, the bullet points on the homepage should say everything you need to hear. Seriously, go read it: https://ziglang.org/\nI highly recommend checking out each of these:\nA Half hour to Learn Zig (GitHub Gist) Zig, The Small Language (Serge Zaitsev) Zig: A programming language designed for robustness, optimality, and clarity – Andrew Kelley (YouTube) Additionally,\nWriting a small ray tracer in Rust and Zig When Zig is safer and faster than Rust (Zachoverflow) are interesting reads.\nZig is also particularly nice to develop in, thanks to the Zig Language Server. If you try Zig, make sure to set it up.\nOdin # 1 2 3 4 5 6 7 package main import \u0026#34;core:fmt\u0026#34; main :: proc() { fmt.println(\u0026#34;Hellope!\u0026#34;) } Odin is a general-purpose programming language with distinct typing built for high performance, modern systems and data-oriented programming.\nOdin is the C alternative for the Joy of Programming\nhttps://odin-lang.org\nhttps://graphitemaster.github.io/odin_review/\nCrystal # 1 puts \u0026#34;Hello World!\u0026#34; Crystal\u0026rsquo;s big thing is that it\u0026rsquo;s similar to Ruby (a very fast to write language) that\u0026rsquo;s compiled and so quite fast. Additionally, it makes some sane choices to check for common problems at compile time. It also has good C interop. Check it out at https://crystal-lang.org/.\nIt may not be well suited to every task due to how abstracted it can be, but for quick solutions with decent performance, it\u0026rsquo;s a good option and fairly mature compared to other languages (Such as Nim) which aim to do similar things.\nD # 1 2 3 4 5 6 import std.stdio; void main() { writeln(\u0026#34;Hello World!\u0026#34;); } A lesser used competitor to C++ mostly. It\u0026rsquo;s very syntactically similar. Might be worth looking at.\nhttps://dlang.org\nNim # 1 echo(\u0026#34;hello world\u0026#34;) Nim is a statically typed compiled systems programming language. It combines successful concepts from mature languages like Python, Ada and Modula.\nhttps://nim-lang.org/\nFurther, Nim allows for easy \u0026lsquo;metaprogramming\u0026rsquo; which basically means you can [TODO]\nNim\u0026rsquo;s syntax is python-like-ish\nRed # 1 print \u0026#34;Hello World!\u0026#34; To be honest, I\u0026rsquo;m not sure Red belongs in the low level category, as it can be run as a JIT language, but ╮(─▽─)╭.\nI\u0026rsquo;m not sure I\u0026rsquo;d actually reach for this language for anything - it tries to do everything, instead of being good at one thing first. That\u0026rsquo;s not necessarily a bad thing (see Python) but Red isn\u0026rsquo;t super mature yet. Still, it has some net enough features that I think it\u0026rsquo;s worth mentioning. From the home page:\nRed is a next-gen programming language, strongly inspired by REBOL. Main features are:\n[\u0026hellip;]\nPowerful PEG parser DSL included Cross-platform native GUI system, with a UI DSL and drawing DSL Bridging to the JVM If you\u0026rsquo;re interested, check out Red\u0026rsquo;s \u0026lsquo;Getting Started\u0026rsquo; page.\nHaxe # 1 2 3 4 5 class HelloWorld { static public function main():Void { trace(\u0026#34;Hello World\u0026#34;); } } Haxe is an open source high-level strictly-typed programming language with a fast optimizing cross-compiler.\nhttps://haxe.org/\nJava # 1 2 3 4 5 class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello, World!\u0026#34;); } } This is Opinionated Guides, so let me be clear, I really, really hate Java.\nIt\u0026rsquo;s a language that didn\u0026rsquo;t even become popular on its own merit, instead Sun Microsystem paid a fuck ton of money to push it- hence the \u0026ldquo;3 Billion Devices Run Java\u0026rdquo; Thing.\nI\u0026rsquo;m hopeful (albeit probably naively) that Oracle (Which bought Java from Sun) making Java a mess of licensing as the \u0026lsquo;main\u0026rsquo; Java Virtual Machine goes paid (Read on Wikipedia) and suing Google will be the nail in the coffin for education using it and that it will die out with time. See Criticism of Java (Wikipedia)\nSo, frankly, I\u0026rsquo;m not even going to give Java an honest effort here. Use literally anything else.\nThere are a few things you should know about Java only because at one point or another, it may become relevant.\nJava code compiles to \u0026ldquo;java bytecode\u0026rdquo; which runs on the \u0026ldquo;java virtual machine\u0026rdquo; (JVM). This means (in theory) any platform with the JVM should be able to run Java programs with no incompatabilities. Java programs could once be made into \u0026ldquo;applets\u0026rdquo;. That\u0026rsquo;s dead now. Java source code is stored in .java files The compiled code becomes java bytecode in .class files These class files can be collected into a .jar, which is the final executable program if the user has a JVM installed. Sometimes, the .jars are wrapped into an executable which bundles the JVM Java used to be the goto for Android development, now Kotlin (see below) is better for that in most cases. Java Jars are often relatively easy to de-compile compared to other programs in complied languages And, no, there\u0026rsquo;s no connection between Java and JavaScript.\nKotlin # 1 2 3 fun main(args : Array\u0026lt;String\u0026gt;) { println(\u0026#34;Hello, World!\u0026#34;) } https://jakewharton.com/shrinking-a-kotlin-binary/\nWebAssembly # WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.\nhttps://webassembly.org/\nWhile not technically a programming language, I wanted to bring it up and encourage you to look into it to be used instead of JavaScript for real projects. You can use a large portion of the languages mentioned above to write Webassembly.\nAdditionally, there are languages where WebAssembly is the primary target, such as https://www.assemblyscript.org, a TypeScript variant.\nVult # Vult Language Homepage\n\u0026ldquo;The Vult Language is a transcompiler to write high-performance DSP code\u0026rdquo;\nHigh Level # [TODO] probably going to need to break this out into its own chapter\nPython # Cython\nCython is an optimizing static compiler for both the Python programming language and the extended Cython programming language (based on Pyrex). It makes writing C extensions for Python as easy as Python itself.\nhttps://github.com/exaloop/codon\nJavaScript # Fine. I\u0026rsquo;ll talk about JS. But, please. For the love of god, do not use this to make an Electron App.\nBefore going too far, I do want to mention that a chunk of my hatred for JS is solved using frameworks and that I totally acknowledge the utility of JS for making quick, often very cool, \u0026lsquo;sketches\u0026rsquo;. The creative coding community is amazing. Further, JS, as much of a total dumpster fire as it is, is responsible for the Internet as it is today, whether that\u0026rsquo;s a good thing or not.\nCoffeeScript # https://coffeescript.org/\nTypeScript # https://www.typescriptlang.org/\nFrameworks # https://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks\nAngular # React # Vue # Node # PHP # 1 2 3 4 5 6 7 8 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;PHP Test\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; PHP is a language focused on making websites with sever side logic (process on the server, instead of JS in the browser). While a large portion of the web has moved to JavaScript frameworks PHP is still a good option for many tasks, and isn\u0026rsquo;t very hard to read.\nPHP as a language is hated on, a lot. This is mostly because of historical decisions to not use typing, but type hints have been added for a while and it\u0026rsquo;s actually quite nice today. It\u0026rsquo;s not many people\u0026rsquo;s language of choice, but it works. Still, I wouldn\u0026rsquo;t fully recommend it. As mentioned above, Go is doing quite well in the networking space due to it\u0026rsquo;s ease of parallelism and abundant libraries for tasks that would\u0026rsquo;ve classically been PHP\u0026rsquo;s job.\nAnother option is Hack,\nHack # 1 2 3 4 5 6 use namespace HH\\Lib\\IO; \u0026lt;\u0026lt;__EntryPoint\u0026gt;\u0026gt; async function main(): Awaitable\u0026lt;void\u0026gt; { await IO\\request_output()-\u0026gt;writeAllAsync(\u0026#34;Hello World!\\n\u0026#34;); } Hack, https://hacklang.org/, is Facebook\u0026rsquo;s (🤮) answer to PHP. They needed something safer, salable, and designed in this century. It\u0026rsquo;s syntax is PHP like, but it has easy async like Go. It also includes more intelligent ways of writing UI code to avoid XSS \u0026amp; Injection attacks.\nRuby # A dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.\nhttps://www.ruby-lang.org/en/\nPerl # \u0026ldquo;Perl\u0026rdquo; is a family of languages, \u0026ldquo;Raku\u0026rdquo; (formerly known as \u0026ldquo;Perl 6\u0026rdquo;) is part of the family, but it is a separate language which has its own development team.\n\u0026hellip; I\u0026rsquo;m not a big Perl fan, but I have to mention it only because of how bizzare it is that they used the ⚛ character for atomics . (Though that, among other choices, lead to it being split into another language, raku )\nScallop # \u0026ldquo;Scallop is a neurosymbolic programming language, solver, and framework. Based on Datalog, it supports discrete, probabilistic, and differentiable modes of reasoning.\u0026rdquo;\nBasically, it\u0026rsquo;s really nice for AI/CV/probabilistic computations\nNoulith # slaps roof of [programming language] this bad boy can fit so much [syntax sugar] into it\nhttps://github.com/betaveros/noulith\nhttps://blog.vero.site/post/noulith\nFor the Skript Kidd3s # In programming and hacking cultures, a script kiddie, skiddie, or skid is an unskilled individual who uses scripts or programs developed by others to attack computer systems and networks and deface websites, such as a web shell.\nIt is generally assumed that most script kiddies are juveniles who lack the ability to write sophisticated programs or exploits on their own and that their objective is to try to impress their friends or gain credit in computer-enthusiast communities. However, the term does not relate to the actual age of the participant.\nThe term is considered to be derogatory.\n- https://en.wikipedia.org/wiki/Script_kiddie But, really, some absolutely incredible code has been written in the following languages. They more than serve their purpose and are generally some of the fastest \u0026ldquo;I just need a quick and dirty solution\u0026rdquo; options out there. Not everything needs a blazing fast hand optimized C implementation, and code that\u0026rsquo;s really just for personal use, to accomplish a one-off task, or that runs inside a bigger program (3D modeling software like Blender, Video editing software like Premier, Game development editors, etc.) should probably be easy to read and modify quickly. Rapid prototyping certainly has its place.\nJust don\u0026rsquo;t think you should use these to write efficient, safe code.\nLUA # MoonScript # AHK # https://github.com/phil294/AHK_X11\nTasker (Android) # CMD.exe # Bash, ZSH, Fish, Xonsh, Elvish, wut? # Node-Red # n8n # Is this even Programming anymore? # Pure-Data # vvvv # tooll.io # ORCΑ # Esolangs, the hole goes deeper # An esoteric programming language (sometimes shortened to esolang) is a programming language designed to test the boundaries of computer programming language design, as a proof of concept, as software art, as a hacking interface to another language (particularly functional programming or procedural programming languages), or as a joke. - Wikipedia - Esoteric Programming Languages Brainfuck Designer\nAs a quick tour of esolangs, here are some of my favorites:\nPiet Hello World implemented in Piet (Source)\nPuddlelang Blancmange RETURN Moonstroke - 3d Nandlang bitman SendStuff (unimplemented) PowerPoint is Turing Complete Spiral 0@v*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v *^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^ v ^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v= ***^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^ * **********v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^## *^v*^v*^v*^v*^v*^v*^v*^v*^v####################### v ^*v^*v^*v^**************v^*v^*v^*v^*v^*v^********** #########^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v*^v**** # ###############v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^*v^* v*^v*^v*^v**************^v ==== X @ i:vX==:==== u@vX=@v i! ==XX ===v^== X vs.vuv @=== s=vv=X=$v= v =X X = # ===@v@X ROT13 implemented in Spiral\nTree ^ ^^|^^ ^^\\|/^^ H^ |/^^^ \\| e |/ ol~| \\| , 32| \\/ | \\ | W l \\| / \\ d |/ o \\/ !|r / \\/ |\\/ \\ |/ \\| Hello World implemented in Tree\nZiim Hello World implemented in Ziim\nIf you\u0026rsquo;re looking to learn more, check out Awesome Esolangs (GitHub) and https://esolangs.org. Also, the Esoteric IDE may be of use.\nThe Old Guard # Forth # Forth is probably the most well known \u0026ldquo;stack-oriented\u0026rdquo; language. Skipping a lot of the details, this means that you list argument and then the operand. To add 1 + 2 you would write 1 2 +.\n1 : hello .\u0026#34; Hello World!\u0026#34; CR ; There are other stack oriented languages, but today most of them are esolangs - If you want to actually try stack based programming with a modern, not intentionally convoluted syntax check out Factor.\nCobol # 1 2 3 4 5 6 000100 IDENTIFICATION DIVISION. 000200 PROGRAM-ID. MFPROG1. 000300 PROCEDURE DIVISION. 000400 MAIN-PARA. 000500 DISPLAY \u0026#39;HELLO WORLD\u0026#39; 000600 STOP RUN. From mainframebug.com Fortran # 1 2 3 4 program hello ! This is a comment line; it is ignored by the compiler print *, \u0026#39;Hello, World!\u0026#39; end program hello Pascal # 1 2 3 4 program Hello; begin writeln (\u0026#39;Hello, world.\u0026#39;); end. BASIC # 1 2 10 PRINT \u0026#34;Hello World!\u0026#34; 20 GOTO 10 Objective C # APL # Graphics Programming # look to Chapter 19: Shaders + GpGPU for programming involving graphics, including node based shader editors, general purpose computation on the GPU, and more. As for languages, this includes, GLSL, HLSL, Futhark, and a few others. There are, many, many other graphics languages depending on the platform though.\nFunctional Programming # Look at Chapter 21: (((())(()((()(())))))) for Functional Programming. You\u0026rsquo;ll probably want to look into Lisp, Haskell, and Futhark. There\u0026rsquo;s a nice tutorial for Haskell programming if you want to learn more.\nDatabase # Look at Chapter 39: Databases for information on Databases, including languages like SQL\nPopular video game consoles and computers, such as the Atari 2600, Atari 8-bit family, Apple II, Nintendo Entertainment System, Commodore 64, Atari Lynx, BBC Micro and others, use the 6502 or variations of the basic design.-from that same wikipedia article "},{"id":156,"href":"/engineering/programming/lifeofcode/","title":"Lifeofcode","section":"Engineering","content":" Chapter 12 - Life Of Code # Building # The C Build Process # I\u0026rsquo;m going to jump right in here, so things are going to be a bit brutal to understand for a bit. I\u0026rsquo;ll break things down, but I need to give the high-level view first! As we saw way back Hardware→CPU , your computer doesn\u0026rsquo;t understand instructions like printf(), so ultimately the code you write has to get turned into something your computer understands. There are multiple ways this can happen:\nYou can run a sort-of virtual machine, like python or java (google \u0026ldquo;JVM\u0026rdquo;) does, compiling the code into special instructions that work everywhere (usually called \u0026ldquo;Bytecode\u0026rdquo; for whatever they\u0026rsquo;re running on - like \u0026ldquo;JVM Bytecode\u0026rdquo;), then relying on the VM to translate the instructions into instructions (machine code) your computer actually understands on the fly This is kinda slow This usually involves some extra weirdness in terms of pointers. For example, running addressOf() in java, gives the address in JVM not the physical address in memory That said, in these languages, you should really never be trying to find the physical memory address anyway? To get extra nerdy, this means each memory address goes through 3 memory translation steps, from the JVM\u0026rsquo;s address, to the virtual memory address, to the physical memory address - albeit the translation between the latter two is hardware accelerated and present with almost any program - it does speak to the complexity here. See Hardware→RAM#Virtual Memory You can do Just In Time (JIT) compilation, which skips the weird VM step and does produce actual machine code for your system, but it\u0026rsquo;s still being done right as it\u0026rsquo;s needed instead of ahead of time, so, as you can imagine\u0026hellip; This is also kinda slow Examples include the PyPy python implementation, LuaJIT You can compile for your target system ahead of time - normal compilation This means you need to know the features and instructions available on the target system (OS, processor, etc.) This is a bigger pain than you think. This also means you need to recompile for each different target system Like Apple, which has their own OS and Processor, because fuck you. Now, those first two options have their place and can be legitimately interested in their own right, but for the vast majority of programmers the entire point of those systems is that you don\u0026rsquo;t really need to worry about the low level details of how your program is built (or, not, I guess?) and that it just works™. Now, the downside is it sometimes (very rarely) doesn\u0026rsquo;t just work™ and you have to scream bloody murder as you realize you\u0026rsquo;ve found a bug in the JVM and spent upwards of 20 hours working around it- That said, You do still need to understand the tools used to build your projects (like Gradle or Maven for Java), but you shouldn\u0026rsquo;t have to worry yourself with the lower-level details - you shouldn\u0026rsquo;t ever really need to dive into the bytecode that\u0026rsquo;s generated.\nTo put this more simply, even in these higher-level languages, you need to know how to tell the computer to take all code and files you\u0026rsquo;ve made + libraries you\u0026rsquo;re using and mash em\u0026rsquo; together, but you don\u0026rsquo;t really need to worry about how the computer goes about doing the mashing together bit, while in something low level, like C, you do.\nOkay, so, other than the performance benefit - why care about the more-difficult to write and build languages at all?\nYou\u0026rsquo;ll be doing this no matter what. For example, a good portion of Python libraries are written in C/C++, so, if you ever need to recompile those, it\u0026rsquo;ll be nice to know what\u0026rsquo;s going on. C - and low level languages - aren\u0026rsquo;t going anywhere. If you\u0026rsquo;re writing code for an embedded system, you\u0026rsquo;ll probably have to use it. Yes, I know Micropython exists, but point 1. applies there even more. Internally, a lot of what\u0026rsquo;s happening with the actual, compiled programs is still happening in the other options, just with added flavor. So, it\u0026rsquo;s still nice to understand it. Okay, so, with that out of the way, what does the C build process look like?\nThis:\ngraph LR A[Source] --\u003e|*.c, *.h| B[Preprocessor] B --\u003e|*.i| C[Compiler] C --\u003e |*.s or *.asm| D[Assembler] D --\u003e |*.o or *.obj| E[Linker] E --\u003e |.elf, .exe + .lst| F[Output] G(Linker Scripts) --\u003e|*.cmd, *.lib, etc.| E And, yes I hear the mixtures of groaning and internal screaming from the audience at this gross of a flow chart, as well as the \u0026ldquo;Uhm, acktually..\u0026rdquo; from a few of you - let me address the latter group first:\nThere\u0026rsquo;s a bit of fuzziness in a few places. For one, the output from the preprocessor (*.i files) is something you will most likely never look at, and usually isn\u0026rsquo;t even generated at all, as typically the preprocessor and compiler are the provided by the same tool (like GCC) and the file is never generated, just represented internally. Similarly, the same tool probably handles the job of the assembler, so you may also never see the *.s files either, as they too are just held internally and never written to disk, bring us to the *.o files. These typically are written to disk, and then further processed (again, usually by the same tool, like GCC) to produce the output program, in the form of a .elf, .exe, etc. as well as a .lst (if output) which is really useful for debugging embedded systems and making sure efficient assembly is generated.\nLinker scripts are something you\u0026rsquo;ll typically only see in embedded programming, and are used to map the executable\u0026rsquo;s memory to physical memory. This is particularly relevant as a lot of embedded systems will have multiple memory segments with varying speed, power usage, and capacity.\nOkay, so that\u0026rsquo;s a lot, let\u0026rsquo;s break down each step:\nSource Code # Preprocessor # Compiler # Assembler # Linker \u0026amp; Scripts # Output # Okay, so that\u0026rsquo;s a lot to juggle, right? In a larger program there might be a few dozen libraries, how do we go about working with this? Let me introduce you to make.\nmake and makefiles # "},{"id":157,"href":"/engineering/programming/lowlvl/","title":"Lowlvl","section":"Engineering","content":" Chapter 14 - Low Level Programming # Ashlyn Black\u0026rsquo;s C Cheat Sheet\n\u0026lsquo;C Programming\u0026rsquo; on badd10de.dev\nWhy C? # This chapter of OpGuides will be mostly C, but, why? Well, there\u0026rsquo;s only really a few options for learning low level programming that make sense to start with. C, C++, Rust are the \u0026lsquo;big three\u0026rsquo; that come to mind. C is what is most popular(1). Its spec is small, it\u0026rsquo;s been kept minimal, and it\u0026rsquo;s got a ton of tools to help you learn. It forces you to know the low level, which in this case is great. C++ has grown into a behemoth where anything can be done in about a dozen different ways and each development team is effectively writing in their own dialect of C++. Rust, while better than C for a million reasons, (see the footnote) also sort of assumes you have experience in language like C before using it, so\u0026hellip; the answer to why C is because we sorta have to.\nTo be clear, C has a lot of annoyances due to its minimalism. For example, there are no strings - only arrays of characters - and all memory management is manual. If you followed the programming intro chapters, you should\u0026rsquo;ve known that first part.\nTo be clear, writing low level code in C is what I do for work, so I\u0026rsquo;ve spent thousands of hours writing C with nothing but the standard library - so I\u0026rsquo;m not some noob that\u0026rsquo;s bitching from lack of skill. There\u0026rsquo;s a good reason Rust is taking over everything that was in C and it\u0026rsquo;s happening so quickly. I for one welcome our new Fe₂O₃ filled future. Fortunately, once you know C picking up Rust or C++ should be easier, as they look relatively similar to C. Plus, learning C first will help you appreciate why they were made. Keep in mind though, they are different languages. C++ has features that you absolutely should use if you\u0026rsquo;re writing in it. Strings, abstracting out much of the memory management, \u0026lsquo;vectors\u0026rsquo;, etc. The same goes for Rust.\nC also has a nice bonus for portability. You can call C code from Rust or C++ (as well as most other languages, with varying degrees of effort)\nDon\u0026rsquo;t throw out everything you already know! # Everything from the \u0026ldquo;Lets Write Some Code\u0026rdquo; chapters still applies. for and while and \u0026amp;\u0026amp; and uint8_t - all of that jazz. If you need to review it, that\u0026rsquo;s totally fine. This page isn\u0026rsquo;t going anywhere.\nSome simple programs, in C # [TODO] use TCC instead of GCC, to enable live reload https://bellard.org/tcc/\n[TODO] https://github.com/rby90/project-based-tutorials-in-c\n[TODO] 30 Seconds of C++ (GitHub)\n[TODO] http://pages.cs.wisc.edu/~remzi/OSTEP/\nHello World! # It\u0026rsquo;s traditional to start in any language by writing a program that just outputs the words \u0026ldquo;Hello World!\u0026rdquo; to the terminal, so let\u0026rsquo;s start there in C:\n1 2 3 4 5 6 #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello World!\\n\u0026#34;); return(0); } To run this code, save it to a file named hello.c and then open a terminal, navigate to that folder and run gcc hello.c -o hello, then you can run your program with ./hello, that should give you something like this:\n[vega@lyrae ~]$ gcc hello.c -o hello [vega@lyrae ~]$ ./hello Hello World! Alright, so let\u0026rsquo;s go through line by line.\nOn line 1 there\u0026rsquo;s a #include statement, this tells the compiler we want to include some library or other code. In this case we want the stdio library, as well need it in a few lines, but what about this library, where is it?\nWell, that library is just some other code. Assuming you followed along with the rest of this site and are now running Linux, we can look at it by navigating to /usr/include/stdio.hor, in VSCode you can hold control and click on the word stdio to go its file, so let\u0026rsquo;s look at that file:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /* Define ISO C stdio on top of C++ iostreams. Copyright (C) 1991-2020 Free Software Foundation, Inc. This file is part of the GNU C Library. The GNU C Library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. The GNU C Library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with the GNU C Library; if not, see \u0026lt;https://www.gnu.org/licenses/\u0026gt;. */ /* *\tISO C99 Standard: 7.19 Input/output\t\u0026lt;stdio.h\u0026gt; */ #ifndef _STDIO_H #define _STDIO_H\t1 #define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION #include \u0026lt;bits/libc-header-start.h\u0026gt; __BEGIN_DECLS #define __need_size_t #define __need_NULL #include \u0026lt;stddef.h\u0026gt; //cutting the code here to show line 332 extern int printf (const char *__restrict __format, ...); okay, so it starts with a big copyright block in comments - in C // makes a single long comment and /* comment */ are for multi-line comments - then on lines 39 and 40 we can see it is in turn including three more files such as stddef.h on line 33.\nBut let\u0026rsquo;s look deeper, down on line 332 of stdio.h we can see printf() is loaded as an external function. The extern keyword marks this as a sort of indicator to the compiler, gcc in this case, that this function definition is actually implemented elsewhere, but that this is the signature to expect from its usage. That is, when anything that imports stdio.h uses printf() it should expect to return an integer (the int before the word printf) and take in a pointer to a character array (the char * inside the parentheses) as well as a second argument of ... which is for a variable number of arguments\nWoah, hold up, variable arguments? Okay, yeah, this is a bit tangential but C does actually support functions with a variable number of arguments. You can recognize them by their declaration using an ellipsis (\u0026hellip;) as their last argument.\nFor example,\n1 2 3 4 5 6 7 int a = 1; int b = 2; inc c = 3; printf(\u0026#34;a is %d and b is %d\u0026#34;, a, b); // The \u0026#34;format string\u0026#34; + 2 variable arguments printf(\u0026#34;c is %d\u0026#34;, c); // The format string + 1 argument printf(\u0026#34;Hello!\u0026#34;) // The format string + no arguments These aren\u0026rsquo;t used super commonly outside of functions like printf/scanf but it is possible to write functions that use them yourself - it\u0026rsquo;s not magic. It\u0026rsquo;s just that normally you wouldn\u0026rsquo;t want to because there\u0026rsquo;s a lot of complexity in conveying type.\nBecause the arguments are variable, they can be whatever type they want but C doesn\u0026rsquo;t actually inform the function what type each argument is.\nThis is actually probably my biggest gripe about C. It makes writing type-generic functions require either:\nDuplicating code Using weird compiler macros like typeof() (which doesn\u0026rsquo;t do work how you\u0026rsquo;d want it to) Making an enum of valid types and passing a extra variable of that enum type in to indicate the type of the argument All of these options are awful.\nIn printf the order of the different format characters like %d tells printf how to interpret each arg, but because it really has no idea what type you\u0026rsquo;re actually passing it there\u0026rsquo;s nothing stopping you from doing something weird like printf(%s, 3.14); - printing a float as a string (this has the potential to go very bad, actually).\nvarargs could easily be a whole page, but you\u0026rsquo;re better off just searching the web and reading up on them if you want to know more.\nSo, where\u0026rsquo;s the code for printf() that does the actual printing?\nWell, in its part of libc. libc is the C standard library on Linux, typically it\u0026rsquo;s glibc in particular. This is a pre-compiled shared library so that when any program needs to use printf() it can just call the printf implementation from libc, which is stored in /usr/lib/libc.so.6\nWe could go looking into the source code for this, but I think it\u0026rsquo;s sufficient to say that it\u0026rsquo;s simply loaded from a shared system library.\nAnother thing you should notice is the #ifndef at the start of this file, which starts with a #, just like define.\nThese are pre-processor directives, just like #include is, basically, it\u0026rsquo;s special code that the compiler (in our case gcc) looks at before it complies the code. Of note there are #if and #else blocks, you might see these used for checking if a certain library is available for example, as a way to check what compiler is being used to adjust things slightly, or to check what OS the code is even being compiled for.\nWe\u0026rsquo;ve already talked about this a bit before when we discussed #define which is used to either set constants such as #define PI 3.14159 or #define GET_SIZE(*p*) (GET(p) \u0026amp; ~0x7)\nThis little adventure was mostly just to show you that these #include statements that use system libraries are not magic, and to point out that most code will end up loading shared system libraries (.so files on Linux, .dll files on Windows)\nOkay, so, that\u0026rsquo;s done. Line 2 of our 6 line hello.c is just \u0026lsquo;white space\u0026rsquo; or a blank line, so we can skip it. Line 3 is where things get interesting again, with int main() {. The main() function is special, as without doing something weird, it\u0026rsquo;s where your code starts from. You may often see this line as int main(int *argc*, char const **argv*[]) too, which I\u0026rsquo;ll get to in a bit.\nSo, let\u0026rsquo;s break this down, starting with int.\nC is a statically typed language, this means that each variable has a defined type, but also that each function has a defined type it returns and expects to be given.\nso, with int main() { we\u0026rsquo;re saying the main() function will return an integer. Skipping ahead a bit, we can see this is the case, as on line 5, return(0) it does exactly that, but, why?\nLet\u0026rsquo;s run our code as is (./hello), then change this return code to return(2);, recompile with gcc hello.cpp -o hello and run ./hello again.\nSee that little 2 ↵ in my terminal? That\u0026rsquo;s the return code, but why did it get printed?\nWell, when the program exits, it returns that number to the process that called it (In this case the shell - read up on shell vs terminal in Appendix A1) and if this number is anything but 0 the shell prints it, because anything but 0 is assumed to be an error condition, and that this number may indicate what that error was. So, if we know getting to that return(0) signifies that our program ran correctly, we should, in fact, return 0.\nOkay, So, other than the closing curly brace (}) on line 6 that defines the end of main, with\n1 2 3 int main(){ //code goes here between the curly braces } We only have one line left to look at, and that\u0026rsquo;s line 4, which is\n1 printf(\u0026#34;Hello World!\\n\u0026#34;); Okay, breaking it up, we first see that we\u0026rsquo;re using printf() the function whose definition we imported from stdio.h and which is actually being executed from a linked system library stored in /usr/lib/libc.so.6\nOkay, so, we now have almost everything, last up is just the string that we\u0026rsquo;re printing to the terminal, which is \u0026quot;Hello World!\\n\u0026quot;\nBut what\u0026rsquo;s with that \\n on the end? Well, to understand this line we\u0026rsquo;ll need our helpful friend, the ASCII table.\nOn most unix based systems, you can access this at any time by running man ascii ASCII is a really old way for computers to represent text. In most modern systems it\u0026rsquo;s been replaced by unicode (which is what lets you use emojis 🤔) but the start of the much larger character space of Unicode is the same as the ASCII table anyway. Alright, so, you\u0026rsquo;ll notice some really weird characters in the ASCII table, not just the normal symbols you\u0026rsquo;d expect. The one I\u0026rsquo;d like to mention now though is at 0xA - [LINE FEED]\nLine Feed, as well as some others like Bell and Carriage Return all date back to when computers were hooked up to Teletype machines - which were basically a mix of printer with a typewriter, so, naturally, there had to be some control characters to do things like tell the machine to move to the next line.\nBecause we like backwards comparability so very much, we still use these same codes for modern terminals, so typing \\n at the end of a line is really saying \u0026ldquo;put a line feed control code here\u0026rdquo; which, to a modern system, means go to the next line.\nThe reason we do this is because without it, the output of our program looks like this (ran first as is, then with the \\n removed)\n[vega@lyrae ~]$ ./hello Hello World! [vega@lyrae ~]$ gcc hello.c -o hello [vega@lyrae ~]$ ./hello Hello World![vega@lyrae ~]$ see how it doesn\u0026rsquo;t leave room for the prompt to be printed on a new line of its own!\nThe ASCII table has some other interesting side effects too. See how a capital \u0026lsquo;A\u0026rsquo; has an \u0026lsquo;index\u0026rsquo; 32 higher than a lower case \u0026lsquo;a\u0026rsquo;, and the same for \u0026lsquo;B\u0026rsquo; to \u0026lsquo;b\u0026rsquo;. Let\u0026rsquo;s use this to our advantage to make the \u0026rsquo;d\u0026rsquo; in \u0026lsquo;Hello World!\u0026quot; uppercase.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main() { //move the greeting into a variable so we can play with it char greeting[14] = \u0026#34;Hello World!\\n\u0026#34;; //print it as is // because arrays are naturally passed as a pointer this is fine printf(greeting); /* * C is \u0026#39;0\u0026#39; indexed, this means that * \u0026#39;H\u0026#39; is at position 0, \u0026#39;e\u0026#39; is at 1, and so on. * We want to change \u0026#39;d\u0026#39; which is at pos 10. * so we access the charecter in the string with the * syntax variableName[indexOfCharacter] */ // The following line is equivilent to greeting[10] = greeting[10] - 32; greeting[10]-=32; printf(greeting); // note, we could have just changed the character directly, greeting[10]=\u0026#39;z\u0026#39;; printf(greeting); // Let\u0026#39;s break that line feed character too, why not. greeting[12]=\u0026#39;?\u0026#39;; printf(greeting); // need to include string.h to use strcat // here strcat is concatinating on the newline that we removed. printf(strcat(greeting,\u0026#34;\\n\u0026#34;)); return(0); } [vega@lyrae ~]$ gcc hello.cpp -o hello [vega@lyrae ~]$ ./hello Hello World! Hello WorlD! Hello Worlz! Hello Worlz!?Hello Worlz!? [vega@lyrae ~]$ Recursive Fibonacci # The Stack™\nCalculating sine and pi # pseudocode, types\nSorting a list # pointers, heap\nmention efficiency, analysis later\nhttps://github.com/laserallan/malloc_geiger\nPalindromes # Cipher # Bit Operations # 1 int x = 0b11 \u0026lt;\u0026lt; 1 0b11 in binary is 3, (the 0b prefix means binary) 1 here is the number of places we want to shift it left, so, x would now contain 0b110 which is 6.\nunsigned, signed bit, 1\u0026rsquo;s compliment, 2\u0026rsquo;s compliment\nBit Twiddling Hacks from Sean Eron Anderson\nSystem Calls # Assembly # I very, very much so recommend getting a feel for writing assembly with the TIS-100 game. It\u0026rsquo;s $7 on steam (at the time of writing).\nInterrupt \u0026amp; Signal handling # Part 2, Going Deeper # [TODO] Interacting with the above, this program should run in the background and update the data, based on window focus events using libxdo\nThis program should actually provide the VAST majority of the source code, with purposeful errors for demonstrating the below\nfurthermore, the C code should check to see if there is a new article, and if so it should call a function that first checks a \u0026lsquo;meta\u0026rsquo; entry to see if the python code to change a published time to be newer or the number of entries has changed to optimize:\ngenerates a template markdown file for the article if PUBLISHED is FALSE and no file for it exists,\ngenerates a template markdown file for the article if PUBLISHED is TRUE and no file for it exists,\ngenerates a HTML file from the markdown if PUBLISHED is TRUE and no HTML exists then updates TEDIT, TPUB\nremove the HTML file if PUBLISHED is FALSE and an HTML file for it exists,\nhowever, every time this will still need checked to monitor the md for changes, using ionotify\ngenerates a new HTML from the markdown if PUBLISHED is TRUE and md has changed, then updates TEDIT\nif markdown is removed, the HTML file should be as well\nWhat are we going to do? # [TODO]\nTools to use # [TODO]\nC Gibberish \u0026lt;\u0026ndash;\u0026gt; English Translator Pseudocode # [TODO]\nWriting it # [TODO]\nusing a code editor, header files, libraries, writing and using a Make file, stdout / stderr,\nDebugging it # So, by now you\u0026rsquo;ve written a fair amount of code, and I\u0026rsquo;m sure you\u0026rsquo;ve figured out that a bunch of tiny issues can get really annoying. Maybe you keep forgetting semicolons, maybe you wrote \u0026lsquo;=\u0026rsquo; instead of \u0026lsquo;==\u0026rsquo; when doing an equality check, whatever. Turns out, there\u0026rsquo;s an easier way to catch these kinds of errors and it\u0026rsquo;s available for most languages. Allow me to introduce you to\u0026hellip;\nLinting: # Yeah, it\u0026rsquo;s literally named after the fluff you\u0026rsquo;d find in your hoodie pockets, but, it\u0026rsquo;s still a super necessary tool. A \u0026lsquo;Linter\u0026rsquo; is a static analysis tool, basically it makes sure your code is good before you run it. There\u0026rsquo;s a whole bunch of linters out there. As a pretty stupid example, let\u0026rsquo;s look at this python:\nHere\u0026rsquo;s our stupid simple example, here we want a program to show us the output of sin(1\u0026hellip;10)\n1 2 3 4 5 6 #!/usr/bin/python if __name__ == \u0026#34;__main__\u0026#34;: for i in range(0,10): math.sin(x) pass If we run this code anyway, we\u0026rsquo;ll see python print:\n\u0026lt;div style=\u0026#34;float: left; width: 30%;\u0026#34;\u0026gt; This code intentionally has a few issues stopping it from running, thankfully the Linter, in my case VSCode\u0026rsquo;s Pylance, found them both:\n[5,9] : \u0026#34;math\u0026#34; is not defined [5,18] : \u0026#34;x\u0026#34; is not defined Here, it\u0026rsquo;s saying on Line 5, character 9, (where the word math starts) I have no function named math. Furthermore, on the same line, but character 18, the variable x is not defined. Running the program did already tell us that we didn\u0026rsquo;t have math defined, but this caught that x was undefined too. Let\u0026rsquo;s fix up the code, and add some print debugging while we\u0026rsquo;re at it.\n1 2 3 4 5 6 7 8 #!/usr/bin/python import math if __name__ == \u0026#34;__main__\u0026#34;: for i in range(0,10): print(\u0026#34;The value of sine(\u0026#34;,i,\u0026#34;) is \u0026#34;, math.sin(i)) pass now running our code yields this:\nthe value of sine( 0 ) is 0.0 the value of sine( 1 ) is 0.8414709848078965 the value of sine( 2 ) is 0.9092974268256817 the value of sine( 3 ) is 0.1411200080598672 the value of sine( 4 ) is -0.7568024953079282 the value of sine( 5 ) is -0.9589242746631385 the value of sine( 6 ) is -0.27941549819892586 the value of sine( 7 ) is 0.6569865987187891 the value of sine( 8 ) is 0.9893582466233818 the value of sine( 9 ) is 0.4121184852417566 But, remember I said we want sine(1\u0026hellip;10)? The linter no longer has any problems listed, so what\u0026rsquo;s up? Well, that\u0026rsquo;s a limit of static analysis, it can only find errors that occur statically and it\u0026rsquo;s not able to read your mind. Here, the issue is that python\u0026rsquo;s range() function is inclusive of the first number, and not the second, so it should be range(1,11) to work correctly.\nSo, what can and can\u0026rsquo;t static analysis do (with some exceptions depending on language and linter):\nSTATIC ANALYSIS CAN:\n(Usually) tell you missed something trivial, like forgetting a semicolon at the end of a line (If in a strongly typed language) Tell you if you\u0026rsquo;re doing something stupid with types int x = 10; String y = \u0026quot;test\u0026quot;; int z = x + y; would tell you to quit being a dunce Let you know if you\u0026rsquo;re doing something that\u0026rsquo;s bad practice Often code formatting, like warning you that a line is super fucking long and is why you have a tiny horizontal scroll bar. Warn you about unused variables Warn you about undeclared variables and functions Warn you about some math fuckups (divide by 0, integer overflows, etc.) Warn you about some out of bound accesses (accessing the k+1 element of an array with k elements Warn you if you try to dereference a null pointer Tell you about some dead (unreachable) code. find some security issues find some memory leaks STATIC ANALYSIS CAN NOT:\nRead your mind - if you write an add(a,b) function as int add(int a, int b) { return(a * b) } it won\u0026rsquo;t know you fucked up Know what is relevant - it\u0026rsquo;s not uncommon to get a huge pile of warnings you don\u0026rsquo;t care about while doing initial development. This can make for a sea of problems that is just\u0026hellip; exhausting Always be right - There are occasional false positives Find all issues - It\u0026rsquo;s in the name, it\u0026rsquo;s static analysis. Not Dynamic. Your code is dynamic. It runs, it lives. Static Analysis is just doing a once-over to let you know if there\u0026rsquo;s something super obviously wrong, not doing in depth diagnostics. Stop you from writing stupid, inefficient, insecure, and otherwise shit code. You want to implement the obnoxiously slow recursive version of the Fibonacci function? It won\u0026rsquo;t stop you. [TODO], Clang Tidy, and using it in VSCode\n[TODO]\ngdb + gef, gdbfrontend, Valgrind, https://cdecl.org/, etc. Mention Virtual v Physical addressing/translation\nhttps://github.com/hediet/vscode-debug-visualizer/tree/master/extension\noverflows\nAnalyzing the Assembly # [TODO]\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id tellus ultricies, tempor mi interdum, pulvinar orci. Proin volutpat tincidunt tellus, facilisis iaculis elit scelerisque vel. Integer auctor vulputate augue non vulputate. Duis id orci ac tortor sollicitudin semper. Sed vulputate ipsum in eros semper laoreet. Praesent justo odio, porttitor non rutrum vitae, dignissim vitae augue. Cras aliquam mi sit amet massa accumsan viverra. Sed nec malesuada libero, vel vestibulum lacus. Sed in facilisis turpis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam quis tempus lacus. Proin fringilla bibendum erat. Nullam auctor efficitur lacinia. Donec dapibus, tellus sed porta facilisis, sem magna maximus odio, quis semper purus orci interdum velit. Nulla et maximus urna. Maecenas sed nibh in ligula rutrum fringilla.\nArt by @awr_hey, Rachel the Rox belongs to @PixelatedWah [TODO]\nCutter, TIS-100, Shenzhen IO,\nPatching it # [TODO]\nsource patching, binary patching\nWhere to get more practice with low level programming # [TODO]\nhttps://github.com/rby90/Project-Based-Tutorials-in-C\n@FogleBird Fast Inverse Square Root - A Quake III Algorithm (YouTube)\nWhy mmap is faster than system calls (Alexandra Fedorova)\nComputer Science from the Bottom Up\nHigh throughput Fizz Buzz\nhttps://en.wikipedia.org/wiki/Pragma_once vs include guards, why they exist\nhttps://embeddedartistry.com/blog/2019/04/08/a-general-overview-of-what-happens-before-main/\nhttps://8bitworkshop.com\n...because it's old and everything already uses it. There are dozens of ways it's horribly fucked, like the lack of protected data/functions, the ability to write in memory bugs that are hard to catch and lead to security problems as they're not found at compile time, the inconsistency in implementations of the standard library, ... I could go on. If you're not doing low level dev, don't use C. If you're doing low level dev and have the choice to not use C, don't use C. "},{"id":158,"href":"/engineering/programming/multithread/","title":"Multithread","section":"Engineering","content":" Chapter 17 - We\u0026rsquo;ve got cores, let\u0026rsquo;s use em' # Hey kid, Wanna go fast? Okay, so here\u0026rsquo;s the deal. Computers are generally really fast at crunching numbers. So fast, that the vast majority of the time the complexity introduced by trying to use multiple cores/threads isn\u0026rsquo;t worth it … as long as all you\u0026rsquo;re doing is crunching numbers.\nThe problem is you probably, yunno\u0026rsquo;, want to do something with the output.\nThe slowest thing to do is wait on input or output. If you time how long it takes for a program written in even something \u0026ldquo;fast\u0026rdquo; like C to run you\u0026rsquo;ll quickly realize it\u0026rsquo;s basically instant right up until the point that you try to print something to the terminal. That \u0026ldquo;Hello World\u0026rdquo; will be limited by how fast the terminal can take those characters in.\nThe same applies to pretty much all other operations on the computer. It\u0026rsquo;s very likely your limited by I/O blocking you from advancing.\nThe solution? Don\u0026rsquo;t wait. Issue the job and come back later.\nUsing Threads To Wait On I/O # [TDOO] Motivations from Moore\u0026rsquo;s law, Blocking I/O,\n[TODO] start with process forking via syscall - show it\nhttps://lemire.me/blog/2020/01/30/cost-of-a-thread-in-c-under-linux/\nC++ coroutines\nnot really threading, but process children\nSIMD, https://nullprogram.com/blog/2021/12/04/\nDo You Actually Need Speed? # Before we go any further, it\u0026rsquo;s important to note that, depending on what you\u0026rsquo;re working on, you probably don\u0026rsquo;t need this to optimize like we\u0026rsquo;ll be talking about. There\u0026rsquo;s a pretty high overhead to doing so.\nIt makes debugging harder It\u0026rsquo;s harder to debug It\u0026rsquo;s harder to make cross-platform It makes compatibility even on the same base architecture worse It\u0026rsquo;s a lot of time and effort that might be better spent doing something else I, personally, have only had a few times where the tradeoff made it make sense to go to this effort. Still, everything we\u0026rsquo;re about to look at is stuff you should have in your toolbelt, just don\u0026rsquo;t think you always need to use it.\nSIMD # As long as you\u0026rsquo;re not on a weak, embedded system CPU (and even on some of them, actually) your processor probably support some kind of Single Instruction Multiple Data processing.\nThis, as the name implies, let\u0026rsquo;s us pack data to be processed by one instruction. As a lame example, let\u0026rsquo;s look at a function which just sums some numbers. Here\u0026rsquo;s the most basic assembly:\nsum(int*, int): # @sum(int*, int) test esi, esi jle .LBB0_1 mov ecx, esi xor edx, edx xor eax, eax .LBB0_4: # =\u0026gt;This Inner Loop Header: Depth=1 add eax, dword ptr [rdi + 4*rdx] inc rdx cmp rcx, rdx jne .LBB0_4 ret .LBB0_1: xor eax, eax ret Even if reading x86_64 assembly is hard stare at it for a bit. The basic of it is we call add on line 8, increment rdx, check if it\u0026rsquo;s exceeded the size of our array (rcx) and, if it hasn\u0026rsquo;t, add the next value. Repeat. This is fine, but can we do better? YES!\nYou could do this:\nsum(int*, int): # @sum(int*, int) test esi, esi jle .LBB0_1 mov ecx, esi cmp esi, 32 jae .LBB0_4 xor edx, edx xor eax, eax jmp .LBB0_7 .LBB0_1: xor eax, eax ret .LBB0_4: mov edx, ecx and edx, 2147483616 mov eax, ecx shr eax, 5 and eax, 67108863 shl rax, 7 vpxor xmm0, xmm0, xmm0 xor esi, esi vpxor xmm1, xmm1, xmm1 vpxor xmm2, xmm2, xmm2 vpxor xmm3, xmm3, xmm3 .LBB0_5: # =\u0026gt;This Inner Loop Header: Depth=1 vpaddd ymm0, ymm0, ymmword ptr [rdi + rsi] vpaddd ymm1, ymm1, ymmword ptr [rdi + rsi + 32] vpaddd ymm2, ymm2, ymmword ptr [rdi + rsi + 64] vpaddd ymm3, ymm3, ymmword ptr [rdi + rsi + 96] sub rsi, -128 cmp rax, rsi jne .LBB0_5 vpaddd ymm0, ymm1, ymm0 vpaddd ymm1, ymm3, ymm2 vpaddd ymm0, ymm1, ymm0 vextracti128 xmm1, ymm0, 1 vpaddd xmm0, xmm0, xmm1 vpshufd xmm1, xmm0, 238 # xmm1 = xmm0[2,3,2,3] vpaddd xmm0, xmm0, xmm1 vpsrlq xmm1, xmm0, 32 vpaddd xmm0, xmm0, xmm1 vmovd eax, xmm0 cmp rdx, rcx je .LBB0_8 .LBB0_7: # =\u0026gt;This Inner Loop Header: Depth=1 add eax, dword ptr [rdi + 4*rdx] inc rdx cmp rcx, rdx jne .LBB0_7 .LBB0_8: vzeroupper ret But, that\u0026rsquo;s more assembly, so more instructions! Shouldn\u0026rsquo;t that be slower? No. Remember lines of assembly ≠ executed lines. If you have one loop of 10 lines that runs 100 times, that\u0026rsquo;s 1000 instructions. If you have one loop of 100 lines that runs 5 times times that\u0026rsquo;s only 500, so it\u0026rsquo;s still faster.\nANYWAY, I want to ignore a good 95% of this assembly as - and I can\u0026rsquo;t stress this enough - you really shouldn\u0026rsquo;t be writing stuff like this anyway unless you have a damn good reason. Assembly is hard to write and error prone. I mostly want to point out what\u0026rsquo;s happening under the hood at a high level and I think, even if you can\u0026rsquo;t read everything above in full, you\u0026rsquo;ll see the general idea.\nBasically, what\u0026rsquo;s happening is this\n1 2 3 4 5 6 7 8 while(i \u0026lt; size){ big_reg[0] = arr[i + 0]; big_reg[1] = arr[i + 1]; big_reg[2] = arr[i + 2]; big_reg[3] = arr[i + 3]; i += 4; sum += magically_add_everything_in_big_reg_in_one_instruction(big_reg) } With some extra logic to handle if the array isn\u0026rsquo;t a multiple of 4 in size.\nThat is, the CPU has these special registers which we can load data into and then tell it to operate on them with a special instruction that does everything all in one go. Sure, we still have to call the setup to load the values in, but we we\u0026rsquo;re going to have to load them value-by-value anyway. Now we can save a bunch of work by doing all those adds in one call to super_add. This works because we have some special registers which can - even though we\u0026rsquo;re on a 64 bit computer - work on more than 64-bits at a time. We just have to pack em\u0026rsquo; up, do our thing, and take em\u0026rsquo; out - or, ideally, keep the value in those packed registers until we have to covert back, since there is some overhead to the packing/unpacking.\nOkay, so, we just looked at a lot of assembly, and I just told you you really, really shouldn\u0026rsquo;t write assembly - so, what good does any of this do?\nWell, first, to do this at the most basic level, you actually don\u0026rsquo;t need to change any of your code. You just need to tell the compiler that your platform is capable of doing that, but, that\u0026rsquo;s actually the first big snag here:\nWe\u0026rsquo;re looking at assembly. You\u0026rsquo;ll recall, assembly is architecture specific. So, there\u0026rsquo;s x86_64, which most user-facing computers today use, arm which is used by most smartphones, and many many others you\u0026rsquo;ll see occasionally.\nBut, that\u0026rsquo;s only half the story. x86_64 and arm both have a ton of optional extensions. Most modern systems should support the extensions to use these special instructions to do SIMD processing, but it does vary from processor to processor. If you\u0026rsquo;re making a program you intend to distribute as a binary and want it to still work even if somebody is on an older system, you have to have a system for falling back on the simpler method. This, unfortunately, means needing to dynamically (at runtime) figure out which execution path to take. This is a small bit of overhead. The alternative would be shipping the software with assumed support for the extensions or multiple versions depending on the processor, but that means either expecting users to know which version to grab or not letting some people use the software at all.\nBasically, this means you have to first decide who your software is for and how it will be distributed:\nIf you want distribute source, then most of this becomes a non issue, we\u0026rsquo;ll just use compiler hints and lets the user compile it.\nIf you want to distribute binaries, then it depends on your users and the software\u0026rsquo;s requirements.\nIf they\u0026rsquo;re technical, you might be able to get away with shipping multiple binaries. If you think your software will run poorly without the optimizations, you might just say \u0026ldquo;You must have a processor newer than 20xx or this software will not run check this [link here] list for compatibility\u0026rdquo;. If you think they\u0026rsquo;re not technical, you don\u0026rsquo;t think it\u0026rsquo;s required, and you want to maintain compatibility in one binary, your best bet is to make it distinctly NOT your problem and to throw an open source library at it. The library you use - if using one at all makes sense - will depend on the language and what you\u0026rsquo;re doing. It\u0026rsquo;s likely that the part of your code you need to make fast is a known problem with a good, optimized to hell, library you can drop in for it. [TODO] Compiler options, using intinsics, pragmas, etc.\n"},{"id":159,"href":"/engineering/programming/shaders/","title":"Shaders","section":"Engineering","content":" Chapter 19 - Shaders # The Book Of Shaders GLSL 2D Tutorials by Vug Here for VRChat Stuff? Cool! VR chat is a really neat platform to work with and it\u0026rsquo;s really fun to be able to hold or walk around your art. Unfortunately, there\u0026rsquo;s some added complexity that comes with handling VR, Unity, and even just 3D stuff outright that, all together, takes a hot minute to build up to. That said, there are some particularly good resources for getting started in VR Chat and Unity development that aren\u0026rsquo;t available for anything else. So, after you\u0026rsquo;ve gone though the above links, in no particular order, I recommend looking at:\nThis 5 hour long Intro to Shader Coding in Unity is pretty great → Replaced by the newer Shader Basics, Blending \u0026amp; Textures • Shaders for Game Devs which is a bit under 4 hours\u0026hellip; I watched both. cnlohr\u0026rsquo;s Shadertrixx repo pema99\u0026rsquo;s Shader Knowledge repo Getting Started 1 - What Is? I got into shaders for a bit of a backwards goal - I\u0026rsquo;m into the art, sure, but it\u0026rsquo;s more that I found the idea of running code on the graphics card cool, and wanted to know how to use the multi-hundred watts of computational horse power in my desktop to my advantage. However, I knew better than to dive head-first into a difficult language like Vulkan (more on that in a bit) and that it would be much easier to get to the point of running complex, not-necessarily-for-graphics code on the GPU if I went through the normal for-art path first.\nOn top of this, I was also just getting into VR Chat, which lets users submit their own worlds and avtars made in Unity.\nThis is where some of the confusion begins, as this chapter of The Book of Shaders introduces what shaders are, but sort of glosses over the fact that there are both multiple languages and multiple types of Shaders. The Book uses GLSL, but - epically for games - HLSL is significantly more common. Fortunately, the two are extremely similar. So, porting something written in one to the other is usually not a problem. Of course, there are other option than even these two, but these are probably the two you\u0026rsquo;ll see the most.\nLanguages?\nIn Unity, you\u0026rsquo;ll probably be writing your shaders in HLSL, though there\u0026rsquo;s also another option - not writing code at all! If you\u0026rsquo;re only really into the artistic side of shaders, you can do most things pretty easily using Unity\u0026rsquo;s Shader Graph tool (or Amplify Shader Editor should you have to use the \u0026ldquo;Bulit-in\u0026rdquo; pipeline, like VRChat uses)\nIt\u0026rsquo;s also notable that Graphics Application Programming Interfaces (APIs) play a big role in all of this too. If you\u0026rsquo;ve ever seen a game require a graphics card with Direct X 12 (DX12) support, this is because each new version of Direct X exposes different ways for programmers to interact with the graphics card, and this also influences what your shaders can do. You\u0026rsquo;ll also see some other terms thrown around like Metal for Apple hardware, SPIR-V, and something called a Shader Model version. This quickly goes into reading documentation hell, and starts to defeat the purpose of having the abstractions that higher level shader languages, like HLSL and GLSL, provide us. Unfortunately, shaders are a pain and you will occasionally have to dive into this as you find out your shader doesn\u0026rsquo;t work correctly on somebody\u0026rsquo;s system because AMD or Nvidia (The two big GPU vendors) drivers act weird or that somebody want\u0026rsquo;s to use an older card that doesn\u0026rsquo;t quite support everything you used, causing things to look weird.\nFor those that are working in Unity, you should be aware Unity\u0026rsquo;s shader system has a bunch of confusion. Some of it is brought on by legacy support - For example, a lot of the Unity shader libraries use the term \u0026ldquo;CG\u0026rdquo; but that\u0026rsquo;s not actually used anymore, as now everything in Unity is HLSL. Other bits come from having three different rendering backends, all of which work differently with shaders. Finally Unity also has a special format for .shader files for something called \u0026ldquo;ShaderLab\u0026rdquo; which actually is used along side your HLSL source to make writing complex shaders easier. Yes, it\u0026rsquo;s confusing.\nIf you look at tab \u0026ldquo;4 - Running\u0026rdquo; here, there\u0026rsquo;s more information on this.\nTypes?\nThe Book focuses entirely on Fragment Shaders - the ones that pick what color a given pixel should be. However, there are other kinds. Vertex Shaders allow you to move the vertices of a 3D object to change it\u0026rsquo;s shape. Geometry and Tessellation shaders allow for interesting performance optimizations (Though are very rarely used by artists), and Compute Shaders allow for using the graphics card to do massively parallel math that would otherwise be impractical to do on the CPU - though with the limitations imposed from using the GPU. Compute Shaders can be written in HLSL, but the concept is applicable more broadly and so there are other, more purpose built languages for the task such as OpenCL and CUDA as well. See the GpGPU section near the bottom of this page for more information.\n2 - Hello World! Again, I\u0026rsquo;m writing this assuming you\u0026rsquo;re following along with The Book Of Shaders As you use the web editor, you\u0026rsquo;ll notice that you have syntax highlighting. That is, the important words appear in different colors. If you want to be able to edit code with this yourself, you may want to use VS Code and grab Shader Languages Support for VS Code.\nI also want to note that some of the names used in The Book aren\u0026rsquo;t totally standard. Most notably, it seems every platform calls their uniforms something else, so if you go to write shaders for Unity or Unreal or something the names won\u0026rsquo;t be the same - for example, while The Book uses u_time, Unity\u0026rsquo;s equivalent would be _Time and is actually a Float4 as the components of it contain different divisions and multiples of the global time.\n3 - Uniforms This chapter is fine, but I do want to stress a point made in the very first paragraph\n\u0026ldquo;\u0026hellip;we need to be able to send some inputs from the CPU to all the threads\u0026hellip;\u0026rdquo;\nSo while the book goes on to regularly use some of these like u_time, it\u0026rsquo;s worth noting that in a different environment you may well want to send in your own uniforms that do something not built in. For example, while Unity has many built in, you may want to add one that simply holds the player\u0026rsquo;s health amount. This is something you can do! Obviously, the specifics of how to do this vary from engine to engine though, and there is some overhead associated\u0026hellip;\n\u0026hellip; Also, as the name implies, it\u0026rsquo;s uniform, so every thread does see the same value.\n4 - Running While the book goes into ways to run the code written there elsewhere, I think it misses the mark for most people who are interested in using shaders for game development. If that\u0026rsquo;s you, you\u0026rsquo;re probably wanting to write shaders for Unity, Unreal, or Godot. In both cases, you may actually want to start by trying out visual shader programming, espically if you\u0026rsquo;re not used to code. However, I do recommend coming back to code at some point as the visual editors are usually both limited and generate kinda slow code.\nIf you\u0026rsquo;re using Unity, you\u0026rsquo;ll want to use the built in Shader Graph if you\u0026rsquo;re using either the Scriptable Render Pipelines (SRP) ( so the High Definition Render Pipeline (HDRP) or .Universal Render Pipeline (URP)) Unfortunately, it doesn\u0026rsquo;t work with the Built-In render pipeline (yes, it\u0026rsquo;s confusing) - though you can use the $80 Amplify Shader Editor for Built-In. If you\u0026rsquo;re doing development for VR chat, this is probably your best bet unless you want to jump right into code - which is fine! You can do it!\nIf you\u0026rsquo;re using Unreal [TODO]\nIf you\u0026rsquo;re using Godot, good news, you can use its visual shader editor.\nIf you\u0026rsquo;re going right for code, having something with a debugger may come in handy. Debuggers for shaders are still rather novel, but Shadered is pretty neat, albeit a bit confusing to use at first.\nIf you\u0026rsquo;re developing for Unity and want decent syntax highlighiting, code completion, etc. your options are forking over the better part of a grand for dotUltimate or grabbing ShaderlabVS Pro for $35\nAlgorithmic Drawing 5 - Shaping While the book tries to instill into you the importance of this chapter, I think it\u0026rsquo;s still a bit understated. Seriously, read this page three times. Mess around with the functions, and actually get a good feel for all of them.\nIt also failed to go into some of the trig options. Yes, you have sin(), cos(), tan(), but you also have asin(), acos(), atan(), and depending on the version sinh() , cosh(), and tanh() as well as asinh() , acosh(), and atanh().\nBecause most people don\u0026rsquo;t know what those look like off the top of their heads, here\u0026rsquo;s a quick refrence - You can click the colored circles to turn functions on and off.\n\\(\\text{Note, }sin^{-1}()\\) is the same as \\(asin()\\) , \\(sinh^{-1}()\\) is the same as \\(asinh()\\) Make sure you re-center the graph about (0,0), otherwise some will appear to be missing! Of particular use is tanh() as it can be used as a smooth clamping function\nThere\u0026rsquo;s also dFdx() and dFdy() for derivatives (see documentation). These do what you think if you know calculus, but you can check This Shadertoy Example from HLorenzi if you want to see it in action. These can be quite useful for things like Edge Detection (try the recommendation from jump89 in the comments); However, support for them is hit-or-miss (try this and this to check your system)\nIf you\u0026rsquo;re using https://graphtoy.com to make your shaping functions, keep in mind it does lack the derivative functions.\nAlso, keep in mind everything in the book and that I\u0026rsquo;ve said so far applied to OpenGL/GLSL. There are other languages, probably most notably for game developers is HLSL. HLSL is quite similar to OpenGL (See GLSL-to-HLSL reference) but along with the sytax differences, also has a slightly different set of functions available. One to point out that may leave you scratching your head: HLSL\u0026rsquo;s mod is a bit broken. Just use #define glsl_mod(x,y) (((x)-(y)*floor((x)/(y)))) ( from bgolus in this forum thread )\n6 - Colors While the RGB and HSB colorspaces mentioned on the color page of The Book of Shaders are nice, It\u0026rsquo;s worth mentioning that both can be a bit annoying to work with in computer graphics because of non-uniformities in actual, percieved brightness as the hue and saturation are changed. For this reason, we might want to use the relatively recently released Oklab colorspace. Fortunately, the work for converting to and from this color space has been done for us,\nWhat about Oklab, or something else with better uniformity https://www.shadertoy.com/view/WlGyDG has rgb_to_oklab, and vis-versa https://www.shadertoy.com/view/WtccD7 7 - Shapes While being able to draw shapes directly in your shader is extremely useful, it\u0026rsquo;s also not always the best way to do things. I fear this page in The Book puts some people off from writing shaders as it looks overly complicated to draw anything cool - it\u0026rsquo;s not. If you want to draw anything complex, it\u0026rsquo;s normal to just use a texture. For example, if you want to draw a star, you could just make a picture with a black background, a white star, and *maybe some gray pixels on the edge to anti-alias a bit then you can load this texture in and simply multiply it with your existing shader. Effectively, using the picture as a mask. We\u0026rsquo;ll get to actually doing this later, but I did want to point out that, no, complex shaders aren\u0026rsquo;t all just using crazy functions to draw things like high schoolers with time to waste and a graphing calculator. 8 - Matrices This chapter is probably the first that will have math that makes you go \u0026ldquo;WTF?\u0026rdquo;, espically if math with matricies and/or programming are new to you in the first place. While ideally you\u0026rsquo;d understand the math, it\u0026rsquo;s not honestly a big deal if you don\u0026rsquo;t. That said I think this chapter also just sort of fails to explain the rationaile behing rotation. If we look at the rotation matrix:\n1 2 mat2(cos(_angle),-sin(_angle), sin(_angle),cos(_angle)); we have x = x.cosθ-y.sinθ and y = x.sinθ+y.cosθ. Let\u0026rsquo;s just test some values:\nθ x y 2π (360°, full rotation) 1 1 3π/2 (270°) 1 -1 π (180°) -1 -1 π/2 (90°) -1 1 0 (0°, no rotation) 1 1 -π/2 (90°) 1 -1 -π (180°) -1 -1 -3π/2 (270°) -1 1 -2π (360°, Full rotation) 1 1 If you think about this, at 0 (no angle of rotation) both are being multpied by 1, so, no change. At either ±π/2 only one of the x or y are being multiplied by -1, a 90° rotation (albeit in oposite directions). At ±π, the shape is being rotated 180° (so, the same either way), then at ±3π/2 were at more than 180°, so we could have gotten there faster by only going π/2 in the other direction that is, 270° = -90° and 90° = -270° (since things repeat at 360°)\nI do think the book does a good job of covering scaling; however, keep in mind you can scale x and y independently, so on line 38 of the example code, st = scale( vec2(sin(u_time)+1.0) ) * st; that vec2 could have different scaling factors for each. Try st = scale( vec2(sin(u_time)+1.0,cos(u_time*.3)+1.0) ) * st; for example. You\u0026rsquo;ll see the shape gets scaled differently in x and y over time- it\u0026rsquo;s not just a simple closer/further from the camera effect.\nThis chapter does go into YUV colorspace, see tab 6 for more about color.\n9 - Patterns This chapter is pretty to the point, just a few things to add:\nIf you scale rather small and have two things very similar in frequency, it\u0026rsquo;s quite easy to accidentally wind up with a Moiré pattern (Wikipedia). You may be able to use this to your advantage. Patterns don\u0026rsquo;t have to do the same thing on every tile, you can get really interesting results by doing different things in each division. Generative Designs 10 \u0026amp; 11 - Random \u0026amp; Noise Clearly, from reading this chapter, random() in shaders is going to be deterministic. This, honestly, is pretty helpful more often than not, as it helps avoid the problems of not knowing the value of the pixel next to us- we can just look at the -1 or +1 index as is shown on The Book\u0026rsquo;s noise page for doing a bit of a blur. Still, you should know the limitations here, as it can lead to very obvious repeating patterns, as you should have noticed if you did the exercises on the page.\nThere are odd ways around the determinism using uniforms, but regardless, it\u0026rsquo;s not really a big deal. The bigger problem is that it\u0026rsquo;s actually just\u0026hellip; kinda a bad random? Like, it\u0026rsquo;s not uniform or normal. This is a big part of why you can easily see the banding in the random function as you scale it. This is especially annoying for compute shaders, as there\u0026rsquo;s quite a few algorithms that rely on having good, pseudo random numbers. There\u0026rsquo;s ways around this, but if you need them I believe in your ability to search the web.\n12 - Cellular Noise Not much to add here, but you might want to look at some of these pages:\nVoronoi Diagram (Wikipedia)\nWorsely Noise (Wikipedia)\nWavelet Noise (Pixar - PDF)\nPrime Gradiant Noise (Taylor, Sharpe, Peethambaran - PDF)\nand, mildly related:\nQuadtree (Wikipedia)\nAlso, you should know the patent on Simplex noise recent expired, so go nuts if you want to use that.\nDown to 190 characters! #つぶやきGLSL\nvec3 p=vec3(t/.1,cos(t+r)),d=r.x/(r.xxy-round(FC.zxy)*2.),a;for(;o.w++\u0026lt;9e2\u0026amp;\u0026amp;snoise3D(a=ceil(p)/28.)+1.\u0026gt;length(a.yz);p+=min(a=fract(-p*sign(d))*abs(d)+1e-4,min(a.y,a.z)).x/d);o.rgb=fwidth(p); pic.twitter.com/odgQhI5Smw\n\u0026mdash; Xor (@XorDev) March 19, 2022 Archive.org backup of tweet + see the Live version 13 - Brownian You may want to look at:\nBrownian Surface (Wikipedia)\nWhile brownian motion is cool, for similar effects you\u0026rsquo;ll also probably want to dive into fractals.\nBeyond The Book # At the time of writing, The Book of Shaders ends at Chapter 13 - Fractional Brownian Motion. Continuing where the book leaves off, I\u0026rsquo;d like to round out generative design by talking about fractals and simulation:\nGenerative # Fractals # What\u0026rsquo;s so special about the Mandelbrot Set? - Numberphile\n[TODO] https://www.youtube.com/watch?v=WWI07UQbJ9E, https://www.youtube.com/watch?v=SVj0LWmQD-E,\nhttps://www.youtube.com/watch?v=kY7liQVPQSc, https://www.youtube.com/watch?v=zmWkhlocBRY\nhttps://shawnhargreaves.com/blog/technicolor-julias.html\n++ Logistic Map\nhttps://www.shadertoy.com/view/ltyXD1\nFractal Coordinates for Incremental Procedural Content Generation (Peter Mawhorter - PDF)\nSimulation # Cellular Automata \u0026amp; Bit manipulation # https://www.shadertoy.com/view/XlcyD8\nhttps://chakazul.github.io/Lenia/JavaScript/Lenia.html\nhttps://www.dwitter.net/d/19615\nSlime mold # https://www.shadertoy.com/view/WtBcDG\nFluids # Diffusion\nTextures \u0026amp; Filters # [TODO]\nAliasing \u0026amp; Dithering # [TODO]\nFeedback # [TODO] using textures to read old data\nConvolution # [TODO]\nhttps://www.taylorpetrick.com/blog/post/convolution-part1\n3D Graphics # 3D Design has information on 3D modeling, file types, etc. This section is only for the nerdy bits as they relate to shaders\nUV Maps # UV mapping is the 3D modeling process of projecting a 2D image to a 3D model\u0026rsquo;s surface for texture mapping. The letters \u0026ldquo;U\u0026rdquo; and \u0026ldquo;V\u0026rdquo; denote the axes of the 2D texture because \u0026ldquo;X\u0026rdquo;, \u0026ldquo;Y\u0026rdquo;, and \u0026ldquo;Z\u0026rdquo; are already used to denote the axes of the 3D object in model space - Wikipedia Want to paint on a 3D object? Well, you need a way to store the color of each pixel in a 2D image and a way to map that 2D image onto the 3D object. So, you\u0026rsquo;ll need to unwrap the object to have a place to paint on, and then you can color as you please. As for this unwrapping, well, it tends to look what you\u0026rsquo;d expect:\n[TODO] image here\nThough some special consideration needs to be made to where the cuts are - these are the places where the 2D texture is cut, but the actual 3D object is continuous - and how dense the pixels are in a given region. If you think about a map projection of the globe, some places always get made to be visually larger or smaller than reality, the larger areas have more pixels to hold texture, while the visually-smaller areas have less.\nAs far as software is concerned, Substance Painter and Desginer by Adobe are pretty much the standard. Adobe is Adobe though, so you may want to see if either Quixel, Armorpaint, and/or Materialize are good enough for you.\nIf you\u0026rsquo;re working in Unity, you might want to grab UVee.\nLighting \u0026amp; Shading # Making realistic, performant lighting systems is complicated. It\u0026rsquo;s even arguable that providing this out of the box is one of the biggest selling points of modern, good looking engines like Unreal. However, while difficult, it\u0026rsquo;s not black magic - There\u0026rsquo;s even a free online book to learn how to do it.\nHowever, wanting to remaking a Physically Based Rendering (PBR) lighting setup like that from scratch implies that you\u0026rsquo;re already probably doing some pretty crazy things. So, outside of that there\u0026rsquo;s really two \u0026ldquo;sane\u0026rdquo; ways to do lighting.\nThe actually-reasonable-to-use method is to use a pretty basic system with a direct, diffused light, ambient light, and specular highlight. Programming this up is relatively straight forward- This 5hr video, Intro to Shader Coding in Unity (Freya Holmer, YouTube) , actually does a really good job of going over this and explaining each step. Coding it live as she goes along.\nThe other cool-but-to-slow-to-use method is to do ray tracing. This is actually easier than it sounds, though, the performance is typically garbage. This post from Three Eyed Games has a nice walk through of building one in Unity.\nBump and Normal Maps # [TODO]\nHard vs Soft normals on vertex edges are a thing.\nFor hard normals 2 verticies actually get placed at the same place. Extra weird. Getting Maps # Usually, you\u0026rsquo;ll have a normal map from whatever material / texture painting software you used. If you don\u0026rsquo;t have one and need one, there are options. Awesome Bump, NormalMap-Online, or, if you need some extra-oompf, there\u0026rsquo;s Shadermap for $30 personal / $50 commercial. As a last resort, you can use a combonation of angled high pass filters / edge dection in Krita and careful, manual shapening, blurring, and erasing to get what you need. It\u0026rsquo;s tedious, but possible.\nKernel Convolution # [TODO] Convolutions in image processing (3B1B + MIT + Julia)\nFiltering # [TODO]\nClipspace, Worldspace, \u0026hellip;? # So you\u0026rsquo;ll often see terms like Clip Space, World Space, Object Space, Screen Space, and View Space thrown around and often as if you magically already know what they mean. This was driving me nuts until I read Coordinate Systems page on learnopengl.com, and Coordinate Spaces and Transformations Between Them from codinBlack\nAs a TL;DR:\nObject Space → 3D Coordinates are relative to your model\nWorld Space → 3D Coordinates are global, from the entire world\nView Space → 3D Coordinates depend on camera position and rotation (probably the player)\nClip Space → 4D; Messy because of dealing with a \u0026ldquo;Projection Matrix\u0026rdquo;, but generally this determines what verticies will be discarded because they\u0026rsquo;re off screen. This also winds up being a PITA as there\u0026rsquo;s a difference between the OpenGL and Direct3D standard\nScreen Space → 2D coordinate space that actually represents the screen\u0026rsquo;s pixels. Usually, you won\u0026rsquo;t have direct control over this.\nUV Space → 2D coordinates mapping points in a texture to the object. Weird to think of in terms of \u0026ldquo;space\u0026rdquo;, so usually talked about separaetly.\nCulling, Z-test # The Unity Manual Page for culling and depth testing explains things very well. The only thing I want to add here is that you should be aware of a problem called Z-fighting which can happen when two faces of an object are in the same plane. Basically, imagine you have two cubes, both the same size and the same shape but different colors. Which one should your computer try to render? The answer is both, and it will look awful. The easiest fix is to just never have two objects have faces that occupy the same plane.\nVertex Shaders? # [TODO]\nPerformance # In HLSL and Cg a ternary operator will never lead to branching. Instead both possible results are always evaluated and the not used one is being discarded. To quote the HLSL documentation:\nSoulsource on StackOverflow\nUnlike short-circuit evaluation of \u0026amp;\u0026amp;, ||, and ?: in C, HLSL expressions never short-circuit an evaluation because they are vector operations. All sides of the expression are always evaluated.\nMicrosoft HLSL Documentation\nMultiple Buffers Render Textures Feedback [TODO] text on lighting \u0026amp; physics as shaders in egines, vulkan, etc.\nVoxel Engine by John \u0026ldquo;Lin\u0026rdquo; https://wwwtyro.net/2019/11/18/instanced-lines.html\nhttp://glsl.erogenous-tones.com/e#1341.0\nhttps://smoothstep.io/anim/534226b1d5ed\nhttps://acko.net/blog/frickin-shaders-with-frickin-laser-beams/\nhttps://github.com/stackgl/shader-school\n19.1 - 3D Shaders # [TODO] both on 3D objects and making 3D visualls in a 2D plane\n19.2 - GpGPU # If you want to learn how to do GpGPU programming, I highly recommend you learn how to do basic shader programming first. They both generally have the same limitations imposed by the hardware and, depending on the environment you\u0026rsquo;re working in, it may be that using the normal graphics languages (GLSL, HLSL, etc.) to write compute shaders is what you want anyway. In that case, you may as well learn the language from the more used and well documented side first. Even if you know you don\u0026rsquo;t need the image output, still try it, as it\u0026rsquo;s a much nicer introduction than jumping right into GpGPU and you\u0026rsquo;ll have a much better idea of what\u0026rsquo;s going on. So, we\u0026rsquo;ve got this extra massively parrallel co-processor just hanging out in our computer, and unless we\u0026rsquo;re running games or complex 3D programs, it\u0026rsquo;s probably sitting nearly completely idle. So, how do we put it to use?\nWell first of all, we need to know a few things about the GPU:\nThere\u0026rsquo;s a lot of overhead for just using the GPU. You need to detect it, reserve some memory, copy your data to it, process it, and copy it back. There\u0026rsquo;s a lot of different GPUs. Different vendors, models, etc. These will have wildly different capabilities, support different APIs, etc. Basically, this means you need to both be sure you\u0026rsquo;re workload will actually benefit. It needs to be parrallizable in the first place, you need to be processing a lot of data to justify the overhead, and you need to know you have a GPU in the system(s) that can actually use it. As a general rule of thumb, if you\u0026rsquo;re not processing an array/matrix with at least 100,000 items, it\u0026rsquo;s probably not worth it. For context, assuming each item is a byte, that\u0026rsquo;s about 100 killobytes.\nSo, if it\u0026rsquo;s not enough data or if it\u0026rsquo;s not a parallizable task, the anser to \u0026ldquo;how do we put it to use?\u0026rdquo; is \u0026ldquo;Don\u0026rsquo;t.\u0026rdquo;\nIf you hadn\u0026rsquo;t guessed from the mentioning of there being overhead, various platforms, and thresholds for the amount of data before it makes sense: Profiling matters. You will absolutly need to profile your code for this. Generating Flamegraphs (if you can) is particularly helpful. But, if you\u0026rsquo;ve got an applicable problem, the sitation is still messy. There\u0026rsquo;s a whole variety of GPU vendors and APIs in a venn diagram from hell making actually utilizing this stuff a massive pain. So while you could go write openCL or CUDA (or Vulkan, or Halide) code directly, you\u0026rsquo;ll probably find a bunch of weird edge cases across systems and it\u0026rsquo;s just generally more of a pain than it\u0026rsquo;s worth. So, frankly, I\u0026rsquo;m not even going to look into those languages anymore than to let you know that it\u0026rsquo;s quite likely the ones we will look into will actually still use their APIs, so, you\u0026rsquo;ll probably still need their respective compilers/headers/toolchain on your system. Of special note, if you\u0026rsquo;re using Cuda this probably means the full 11GB-or-so or so install with the nvcc compiler, which you can grab Here for Windows or Linux (though, if Linux you should try your package manager first).\nSo, reading that probably just made you go \u0026ldquo;Oh this is going to be compiler hell, isn\u0026rsquo;t it?\u0026rdquo;. Yes. It will be. Espically on Windows. So, is it worth it? Well, just running one of the example programs for the Arrayfire library I got an 88x speedup (though I\u0026rsquo;m pretty sure this doesn\u0026rsquo;t count the overhead of initalizing the GPU) when the code was ran on the GPU. So, yes, even if we did have to use OpenCL or Cuda directly, it probably would be.\nFortunately, we dont.\nFrom my digging I\u0026rsquo;ve found two good options that play nice with a lot of languages and different system configurations: Futhark and Arrayfire. I\u0026rsquo;ll focus on these two, but you should know there are other options. If you\u0026rsquo;re into Rust, there\u0026rsquo;s emu. Nim? check out shady. JS? this library called \u0026ldquo;GPGPU \u0026ldquo; should do the trick. If you use Matlab, it should already be GPU accelerated, at least assuming you have an Nvidia graphics card. For these more specific ones I don\u0026rsquo;t have experance with these to know if they\u0026rsquo;re good or bad. All of that said, you can probably make Futhark work damn near anywhere on account of the fact that it spits out C code for using either OpenCL, Cuda, Ptheads, or - failing all else - normal ol\u0026rsquo; sequantial processing (just C, no special sauce). So, anywhere you can load C code, Futhark should work too. This is pretty much everywhere, as almost all languages have at least some way to load in a library written in C for speed sake. It also can generate python libraries easily, which is nice too.\nSo, why do I have two recommendations? Futhark is a programming language, just not a general purpose one. You really only use it to make small, individual functions that utilize the GPU that you then call from another language. Arrayfire, on the other hand, is more of a bucket of functions, your more typical library. If arrayfire happens to have the functions you need - or those you need to compose your program, ranging from basic operations up to a ready to use functions ranging from signal processing to computer vision - then it\u0026rsquo;s easy to import and pretty much good to go. So, if you know you only really ever grind your wheels on one big operation that accounts for a majority of your programs run time and it\u0026rsquo;s a commo problem, Arrayfire is worth trying. If you know you\u0026rsquo;re going to need to do a weird opeartion that isn\u0026rsquo;t in Arrayfire\u0026rsquo;s bag of tricks ore you need to have finer control, Futhark probably makes sense.\nArrayfire, at the time of writing, has bindings for C++, Python, Rust, Julia, and Nim, with a plethora of other langauge bindings in progress. However, not all of these bindings are created equal. I had to use Futhark for a project because while the C++ version of Arrayfire has bitwise operations, the python version does not. So, YMMV. So, what about Futhark?\nFuthark is a weird language, at least to most people. This is because it\u0026rsquo;s functional. We\u0026rsquo;ll talk about this more in a few chapters - that\u0026rsquo;s what the weird looking (((())(()((()(())))))) chapter is. Honestly, you might just want to skip ahead and read it now. Though, as a TL;DR: In functinoal programming, functions are functions in the math-y sense. They don\u0026rsquo;t store any state, they simply transform input and produce an output. So, while you might want to write\n1 2 3 4 def myweirdfunc(input) for i in range(0,10): c += input**i return c in a normal lanuage, here, you can\u0026rsquo;t because you\u0026rsquo;re storing the state of i internally as it gets incremented. As you can imagine, this means that you have to get rather creative with your code.\nSo, why is futhark like this? Basically, because the limitations of the language make it so that it can generate very, very well optimized code for you. This should also make sense if you think back to learning about traditional fragment shaders above, as back there we learned that each GPU thread is memoryless anyway. So, this is really a pretty good abstraction with that in mind.\nAnyway, the end result is that the code looks weird. For example, here\u0026rsquo;s some code I wrote which takes in an array of data and strips out set of 2 bits of every byte to put them in a new array of 4 times the length (basically, if we have [0b11001001,0b00110011], we want [0b11,0b00,0b10,0b01,0b00,0b11,0b00,0b11])\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 -- Shift the bits over accordingly, so that we actually get the -- bits into the LSBs of each byte def shiftbits [n] (data: [n]i64) (shift: i64) : [n]i64 = let bits = map (\\x -\u0026gt; shift * x % 8) (0..\u0026lt;n) in map2 (\u0026gt;\u0026gt;) data bits -- Get the top two bits of each byte in x def gettop (data: []i64) (num: i64) : []i64 = map (\u0026amp;((2**num)-1)) data -- replicate each element in the arary four times, -- [1,2,3] -\u0026gt; [1,1,1,1,2,2,2,2,3,3,3,3] -- stolen from https://futhark-book.readthedocs.io/en/latest/language.html#size-types def rep4 [n] (data: [n]i64): []i64 = map (\\i -\u0026gt; data[i/4]) (0..\u0026lt;n*4) -- Do the thing def bitpack [n] (data: [n]i64): []i64 = let data2 = rep4 data let data3 = shiftbits data2 2 in gettop data3 2 And while bitshifting is sometimes black magic looking in any language, I fully expect some wide eyes. This does make marginally more sense if you read through the Parallel Programming in Futhark book (at least through Chapter 2) but if you, like me, have no prior experiance with programming like this it will be painful. While I dove straight in I suspect it will be significantly less painful if you first look at a tutorial for Haskell programming, as Futharks syntax and programming style is very similar to it but gentler introductions to Haskell are readily available compared to the assume-you\u0026rsquo;ve-already-done-functional-programming style of the Futhark book.\nThe Future of GpGPU # GPU Accelerated RAID (Linus Tech Tips, YouTube)\nSome of my favorite shaders # The Screen by Xor\n"},{"id":160,"href":"/engineering/signals/aiml/","title":"Aiml","section":"Engineering","content":" Chapter 33 - Fine, I\u0026rsquo;ll talk about AI # This chapter is very much a work in progress, and is really more of just a list of topics, despite how much content there appears to be. I\u0026rsquo;d really like to have code examples under each concept as well, as otherwise it\u0026rsquo;s like reading a fucking math textbook from hell.In the meantime, please see https://sebastianraschka.com/blog/2021/dl-course.html#l01-introduction-to-deep-learning for a good intro to Deep Learning [TODO] https://www.asimovinstitute.org/author/fjodorvanveen/\n[TODO] https://playground.tensorflow.org/\nMachine Learning? # You\u0026rsquo;ve used it today. ML is used for search engines, social media feed order (the almighty Algorithm), and predictive text systems.\nWhat is the difference between ML and AI? [TODO]\nLearning is not the same as memorization, for example, if a baby sees his mother from various angles and under different lighting, he\u0026rsquo;s not memorizing her face. He\u0026rsquo;s learning features about it, which is why he can still recognize her in new views. Checking if two things are identical (or nearly so) is much easier, learning features and detecting things based on them is more difficult for a computer.\nWhen to use ML?\nComputer being put in a situation where human\u0026rsquo;s have no direct experience No way to tell computer the human experience (speech recognition, facial recognition, driving) When the solution changes based on conditions/time (Driving in different weather / lighting, background noise removal) Every application is a bit different (different voices need different recognition) when not to use ML?\nWhen all cases can be covered by a traditional program Before I try to poorly explain something that has been explained much better than I can via text, I recommend watching this 4-video series from 3Blue1Brown, it totals just a hair over an hour.\nWith 3B1B\u0026rsquo;s videos done, I think it\u0026rsquo;s useful to just be exposed to some terms in bulk and get a sort of high level overview of what\u0026rsquo;s going on. For that, I recommend just putting this video on 2x speed and digesting it as best you can. Don\u0026rsquo;t worry if something makes you go, \u0026ldquo;huh?\u0026rdquo; for now:\nSupervised Vs. Unsupervised Learning # Supervised Learning # Given labeled examples with features described, like pictures of trucks and cars, labeled \u0026rsquo;truck\u0026rsquo; or \u0026lsquo;car\u0026rsquo; and data fields for wheel count, color, etc. that are populated, the machine learning algorithm makes a model that will try to classify new inputs.\nFeatures can be as simple as the individual pixel values in an image\nLet C be the target function to be learned. Think of C as a function that takes the input example and outputs a label. The goal is to, given a training set $ \\chi = {(x^t,y^t) }^N_{t=1}$ where $y^t=C(x^t)$, output a hypothesis h ∈H, that approximates C when classifying new input.\nEach instance x represents a vector of features (attributes). For example, let each $x=(x_1,x_2)$ be a vector describing attributes of a guitar; $x_1 = \\text{sting count}, x_2=\\text{acoustic or electric}$, each label is binary (positive/negative, yes/no, 1/0, etc.) and contributes to whether or not it\u0026rsquo;s a 6-string acoustic guitar.\nA learning algorithm uses train set χ and finds a hypothesis h∈H that approximates C\nerror (loss) of h\nEmpirical error is a fraction of χ that h gets wrong Generation error is the probability that a new, randomly selected, instance is misclassified by h. This depends on the probability distribution over instances. Generalization error is much more important than Empirical - it\u0026rsquo;s better to have it perform well on new data than be great on the training data False Negatives (C-h) and False Positives (h-C) Unsupervised Learning # Same as above, but no labels. (Still features). For example, https://en.wikipedia.org/wiki/K-means_clustering or Hierarchical clustering https://en.wikipedia.org/wiki/Hierarchical_clustering\nSemi-supervised learning # a mix of some labeled data, and some unlabed.\nPretrain to get relevant features\ntransfer-learning, take training from one task and apply it to another (should this be here?)\nReinforcement Learning # agent takes step, looks at environment, makes actions based on it, repeat. Goal it to maximize expected long term reward\nOften used for games\nMarkov Decision Process\nSorta like a state machine\nfeedback is often delayed - credit assignment problem\nHow does it work? # Not overfitting - spikey vs smooth curve. Spikey to directly fit is bad, similar with XY blobs with reaching out arms balance with model complexity with regulizer. We want generalization (learning) not memorization\nModels # Decision trees\nsupport vector machines\nprobabilistic graphical models\nArtificial Neural Networks -\u0026gt; Deep learning (many layers)\nEach node multiplied by weight, sent though activation function, often using stochastic gradient descent\nPerformance Measures # Classification error - fraction of time correct\nSquared error\ncross entropy\nNo single best approach\nLinear Unit (Regression) # [TODO] tie back to https://en.wikipedia.org/wiki/Linear_regression\na vector with features x_1 to x_2 and weights w_1 to w_n\n\\(\\hat{y}=f(x;w,b)=x w\u0026#43;b=w_1x_1\u0026#43;....w_nx_n\u0026#43;b\\) b can be represented as \\(w_0\\) instead, as is shown in the above\n\\(y=o(x;w,b)=\\{{\u0026#43;1 \\text{ if } f(x;w,b)\u0026gt;0\\atop{-1 \\text{ otherwise}}}\\) (sometimes 0 instead of -1)\nfor binary classification, +1 is it is the thing, -1 (or 0) is saying it\u0026rsquo;s not the thing.\nnot all functions are linearly separable, one straight line can\u0026rsquo;t split the data into positives and negatives- so having networks of units works around this\nOf course, we\u0026rsquo;d like to be able to use inputs that aren\u0026rsquo;t just numbers. Representing things like price or weight can be given a number, but for other things, like colors, one hot vectors are helpful, for example, if there are three color options, red, green, blue, red could be [1,0,0], green [0,1,0], blue [0,0,1]. This is better than just assigning each color an integer (red=1,green=2,blue=3, etc.) because we don\u0026rsquo;t want to imply ordering in the data. One hot vectors are especially nice because they let us assign positive weights to a given color and negative weights to others. For example, in identifying a fire truck, red will obviously have a very positive weight, while being the other colors may be a negative weight.\nTraining:\n\\(w_j\\prime\\larr w_j\u0026#43;\\eta(y^t-\\hat{y}^t)x^t_j\\) \\(w_j\\prime\\) is the new value of \\(w_j\\) , (the j\u0026rsquo;th w as each weight is incremented though)\n\\(x_j^t\\) is the jth attribute of training instance t\n\\(y^t\\) is the label of training instance t\n\\(\\hat{y}^t\\) is Perception output on training instance t\nη \u0026gt; 0, the learning rate, is a small constant (e.g.; 0.1)\nif \\((y-\\hat{y})\u0026gt;0 \\text{ then increase } w_j \\text{ w.r.t } x_j\\) else decrease\nCan prove rule will converge if training data is linearly separable and η sufficiently small\na bad learning rate, η, can cause very slow convergence (too small) or even divergence (too large)\nIt\u0026rsquo;s best to adjust the learning rate per schedule (iteration) rather than just use a constant. For this, we want to start with a high learning rate, then decrease it.\nSchedule Formula Power Scheduling \\(\\eta(t)=\\eta_0/(1\u0026#43;t/s)^c​\\) Exponential Scheduling \\(\\eta(t)=\\eta_0(0.1)^{t/s}​\\) Performance Scheduling reduce η by λ when no improvement in validation 1cycle Scheduling increase from \\(\\eta_0 \\text{ linearly to } \\eta_1​\\) then back down to ​ \\(\\eta_0​\\) Gradient Descent # [TODO] https://en.wikipedia.org/wiki/Gradient_descent\n[TODO] Stochastic Gradient Descent\nmomentum term β to keep updates moving in the same direction as previous trials\nthis can help move though local minima to a better local or global minimum and not get stuck on flat spots\nAdagrad adapts learning rate by scaling it down in the steepest dimensions\nRMSProp exponations decays old gradients to avoid AdaGrad\u0026rsquo;s problem of stopping too early for neural networks duo to aggressive downscaling\nAdaptive Moment Estimation (Adam) combines momentum optimization and RMSProp\nNonlinearly separable Problems # writing this as I take notes, it\u0026rsquo;s basically meaningless at the moment XOR\nInput A Input B Output 0 0 0 0 1 1 1 0 1 1 1 0 No single linear threshold unit can describe this\nin 2d a line, in 3d a plane, 4+d hyperplane\nEvery one side of these is a halfspace, but given two functions, we can get an overlap, the intersection of the two halfspaces\nnow, we can find $z_i$ , mapping though a non-linear function, from x space to z space, now the problem is linearly separable- there\u0026rsquo;s no need for the dimensions from mapping from x-to-z space to be the same, and there can be multiple hidden layers\nWe\u0026rsquo;ve mapped from a non-linearly separable problem into a linearly separable one\nFeedforward Neural Networks on Wikipedia\ngenerally, if the input can be split up with straight lines and be defined as the unions and intersections of those halfspaces, then two hidden layers and an output layer must exist that works\nBackpropagation # First, feed forward the network\u0026rsquo;s inputs to its outputs, then propagates back error with by repeatedly applying the chain rule\nBackpropagation (Wikipedia)\npropagate error back in order to compute loss gradient with respect to each weight, then update the wights\ndon\u0026rsquo;t have to update the loss on each instance, could do mini-batches (Stochastic Gradient Descent- SGD), or in the extreme case, have the entire training set be a single batch (batch gradient descent). SGD saves on memory, which helps.\nComputation Graphs # (note the library- tensor flow, pytorch, etc.- will probably handle this for you)\ngiven a complicated function, we want to know its partial derivatives with respect to its parameters\nFor\nmultivariate chain rule, multiple paths that can affect the output. Math gets very gross very quickly\nThe Sigmoid Unit # $S(x)=\\frac{1}{1+e^{-x}}$ squashes everything into a range from 0 to 1 (or -1 to 1), with 0 mapping to ½. It\u0026rsquo;s similar to the threshold function, for us, this is useful as $\\sigma(x)=\\frac{1}{1+e^{-net}}$, where $net=\\sum_{i=0}^{n} w_i x_i=f(x;w,b)$\nTypes of Output Units # Linear - works well with GD training\nLogistic - good for probabilities\nSoftmax - every output node\nTypes of Hidden Units # Logistic - has issues with saturation\nRectified Linear Unit (ReLU)\n​\tleaky ReLU and exp ReLU\nHow many layers to use? # Increasing number of layers increases risk of overfitting, need more training data for deeper network to avoid this\nperformance improvement even without more parameters\nGotta know when to add more layers instead of parameters, but in general adding more layers is better, that is try adding layers before widening, keeping in mind the overfitting problem. Also, increases training time\nANN - Artificial Neural Networks # Silicon \u0026rsquo;neurons\u0026rsquo; are much faster, but connect to many fewer nodes, compared\n[TODO] get human neuron count, \u0026lsquo;switching time\u0026rsquo;, interconnectivity\nmuch different for ML vs Biological Modeling\nthink a ton of really weak cores, which explains the GPU usage\ngood for raw sensor data, okay with noise, but requires long training times and lacks human readability- hard to know why it predicts what it does\nStarted with the Perceptron algorithm, but that was too limited (40\u0026rsquo;s)\nmulti-layer backpropagation (80\u0026rsquo;s) allowed for training multi layer networks, and they couldn\u0026rsquo;t be made deep on that era\u0026rsquo;s hardware, while other algorithms (Support Vector Machines, boosting) were taking off instead. In the 2000s it became possible for 5-8 layers though, making \u0026lsquo;deep\u0026rsquo; learning possible (mostly because of gaming GPUs). Better datasets, and better algorithms, helped too.\nAny boolean function can be represented with 2 layers\nany bounded continuous function can be represented with arbitrarily small error with two layers\nthat goes to any function at 3 layers\nbut, this is only true for existence. It may be very, very difficult to find the weights and take a ton of nodes\nInitialization # We used to initialize parameters to random numbers near 0, but now Glorot is used,\nwith $n_{in} \\text{ inputs and } n_{out} \\text{ outputs}$, initialize with a uniform from $[-r,r]$ with $r=a\\sqrt{\\frac{6}{n_{in}+n_{out}}}$ or normal, $\\mathcal{N}(0,\\sigma)$, with $\\sigma=a\\sqrt{\\frac{2}{n_{in}+n_{out}}}$\nActivation a Logistic 1 tanh 4 ReLU √2 Gradient Descent # alt: evolution\nNonlinearly separable problems and multilayer networks # Types of Activation Functions # Convolutional Neural Networks # CNN\u0026rsquo;s on Wikipedia\nGood for data with grid/array like topology, think images or time series data\nbased on using convolutions and pooling- extract features, invariant to transforms, parameter efficient\npassing a kernel over an image, just doing a sliding window, like normal - can do edge detection, blurring, etc.\nKernels are just weights, so, we can learn the best weight to use\nnot complete connectivity, that is no crossing from layer to another, the layer above only depends on one path\n\u0026hellip; unless we use a convolutional stack(?)\n\u0026hellip; next node over probably shares many parameters (weight sharing), the computation graph could just share this overlap to reduce parameters. Saves memory\n​\tweight sharing forces the layer to learn a specific feature extractor. Multiple layers could be learned in parallel, as only detecting one feature (like vertical lines) may not be helpful.\n​\ton images this is commonly done as separate detectors on color channels and multiple for specific feasters. Each higher layer is for a more complex feature, with multiple channels of features.\nBasically,\ncan pad to retain size, 0-padding is common\ncan use a stride-parameter to downsample\npooling nodes help get translation invariance\nDownsides of CNNs: Many parameters to tune, large memory usage\noften better to modify a prior network trained on a bigger dataset and for longer - Transfer Learning\nObject Detection can look for local areas of interest:\nR-CNN, SPP-NET, Fast R-CNN, YOLO - You Only Look Once\nRegularization and Evaluation # ML is basically an optimization problem\nWe need a function to measure performance - a loss function\nGiven instance x, with label y, and a prediction $\\hat{y}$, then $J(y,\\hat{y})$ is the loss on that instance\nFunction Common Use Formula 0-1 Loss $J(y,\\hat{y})=1$ if $y\\neq\\hat{y}$, 0 otherwise Square Loss Regression $J(y,\\hat{y}) = (y - \\hat{y})^2$ Cross-Entropy y and $\\hat{y}$ are considered probabilities of a \u0026lsquo;1\u0026rsquo; label. Allows for two probability distributions. Good for when the input data also has probability. Often used for classifying images $J(y,\\hat{y})$ = $(-y)ln(\\hat{y})-(1-y)ln(1-\\hat{y})$ Hinge Loss Large Margin Classifier $J(y,\\hat{y}) = max(0,1-y\\hat{y})$ given a loss function, J, and a dataset, X, $error_x(h)=\\sum_{x\\in h}J(y_x,\\hat{y}_x)$ where $y_x$ is x\u0026rsquo;s label, and $\\hat{y}_x$ is h\u0026rsquo;s prediction\nBut, it\u0026rsquo;s more important that the model generalizes, so given a new example (picked i.i.d) according to unknown probability distribution D, we want to minimize h\u0026rsquo;s expected loss $error_D(h)=\\mathbb{E}_{x\\sim{D}}[J(y_x,\\hat{y}_x)]$\nminimizing training loss isn\u0026rsquo;t the same as minimizing expected loss? NO\nBy doing to good on the training set, the over fitting will make results pretty bad. That is a specific parameter h overfits the training data, X, if there is an alternative hypothesis, $h^\\prime$ such that $error_x(h) \u0026lt; error_x(h^{\\prime})$ and $error_D(h) \u0026gt; error_D(h^{\\prime})$\nThis is literally just the formal defn\u0026rsquo; of overfitting. Don\u0026rsquo;t over think it.\nOverfitting example by Chabacano - CC BY-SA 4.0 Note that underfitting is just as much of a problem. Training accuracy needs to be balanced with simplicity.\nOverfitting is often a result of an overkill network topology, training too long, not having enough training data, or not doing early stopping.\nComplexity Penalty $J^{\\sim}(\\theta;X,y)=J(\\theta,X,y)+\\alpha\\Omega(\\theta)$ where $\\alpha \\in [0,\\infin)$ weights loss J against penalty $\\Omega$. $\\Omega(\\theta)$ just measures complexity via $\\Omega(\\theta)=(0.5)||\\theta||_2^2$, that is the sum of the squares of network\u0026rsquo;s weights. Since $\\theta=w$, this becomes\n$J^{\\sim}(w;X,y)=(\\alpha/2)w^{\\top}w+J(w;X,y)$\nas weights deviate from 0, activation functions become more nonlinear, which brings a higher risk of overfitting\nEarly Stopping # danger of stopping too soon, as it might just have a \u0026lsquo;bump\u0026rsquo;\nData Augmentation # Careful not to change class- ie 6 → 9 or E → 3 in images\nprotects against translation/rotation and overfitting/underfitting\nadding noise\nMultitask Learning # Share common layers of lower network\nDropout # Prevents any node from becoming too specialized sorta distributes the work load\nBatch Normalization # Parameter Tying # Parameter Sharing # Sparse Representations # Other Resources # I\u0026rsquo;ve tried to divide these into academic and artistic, but there is a ton of overlap. I recommend looking at everything here though! Academic # i.am.ai Roadmap - a \u0026lsquo;Roadmap\u0026rsquo; to learning AI\nhttps://hific.github.io - Image compression with GANs\nStan, a platform for statistical modeling\nAlias-Free GAN\nInsipriational \u0026amp; Artistic # The Art of Asking Nicely (AI Weirdness)\nThis ____ Does Not Exist\nML model can classify sex from retinal photograph, clinicians can\u0026rsquo;t\nDarknet - an open source neural network framework written in C and CUDA, with lots of examples\n"},{"id":161,"href":"/engineering/signals/commsys/","title":"Commsys","section":"Engineering","content":" 29 - Communication Systems # This chapter is currently just a stub. I\u0026rsquo;m currently taking a comm systems class at Uni and will be putting the results of my notes as well as external resources into here at some point. What is a communication system? # For the purposes of this page, we\u0026rsquo;re talking about systems that transmit signals over a medium- so that might be your voice over the air, a radio signal though the vacuum of space, or ultrasonic waves under the water as sonar.\nGenerally, these systems are made up of a few parts:\ngraph TB A[Source] --\u003e B[Transmitter] B --\u003e C[Channel] C --\u003e D[Receiver] D --\u003e E[Output] The source is just whatever is making the original signal- maybe it\u0026rsquo;s your voice\nThe output is, ideally, the same as the input signal, just on \u0026rsquo;the other side\u0026rsquo;. If the system is a phone network, this is your voice having gone through the other person\u0026rsquo;s phone\u0026rsquo;s speaker\nThe channel is the medium the signal is going to travel though- so in the above examples air, vacuum of space, and water. Pretty much anything goes here. This might even be a copper wire or fiber optic- not all signals we\u0026rsquo;re interested in are wireless. The channel is the whole reason this field of study exists- channels typically add problems that we need to solve. Usually, this problem is noise and distortion.\nThat just leaves the Transmitter and Receiver:\nThe Transmitter # The transmitter coverts the signal into a form suitable for transmission though the channel. Typically, this is done by modulation of the source signal with a high frequency signal. Two of the easier methods to understand for this are amplitude modulation or AM and frequency modulation or FM. We\u0026rsquo;ll look at both in detail in a bit.\nThe channel here comes, again, from the channel. You\u0026rsquo;ll always be limited in bandwidth and power, and you\u0026rsquo;ll need to design your system to avoid noise and interference all while keeping complexity and price as low as you can. We\u0026rsquo;ll talk about all of these things in more detail later.\nThe Receiver # The receiver grabs the signal from the channel and undoes whatever modulation we did to transmit it, recovering the original signal. While at first we\u0026rsquo;ll assume an ideal receiver, it\u0026rsquo;s worth noting that like the channel, the receiver can add noise too.\nWhat if it\u0026rsquo;s Digital? # graph TB A[Source] --\u003e B[Source Encoder] B --\u003e C[Encryption] C --\u003e D[Channel Encoder] D --\u003e E[Digital Modulator] E --\u003e F[Channel] F --\u003e G[Digital DeModulator] G --\u003e H[Channel Decoder] H --\u003e I[Decryption] I --\u003e J[Source Decoder] J --\u003e K[Output] \u0026lt;br style=\u0026ldquo;clear: both;\u0026quot;\u0026gt;\nThis looks a lot more complicated, but it\u0026rsquo;s actually not all that bad. Basically, the only difference here is that we\u0026rsquo;re taking our analog input message (our voice, for example) and turning it into a digital message - one made out of 1\u0026rsquo;s and 0\u0026rsquo;s.\nSo, the signal still comes in the same way at the source, then we put it through the source encoder now we\u0026rsquo;ve digitized the signal (it\u0026rsquo;s made up of 1\u0026rsquo;s and 0\u0026rsquo;s) then it goes through the channel encoder at this step we add redundancy. Why? Well, depending on a lot of variables, we can pretty sure not all of those\u0026rsquo;s 1\u0026rsquo;s and 0\u0026rsquo;s will get there as we want, some 0\u0026rsquo;s will become 1\u0026rsquo;s and vis-versa. For a very stupid example, imagine we just send each bit 3 times, so if we got 011 out of the source encoder, we\u0026rsquo;d send 000111111 out of the channel encoder. Now, if one of those bits flip, we\u0026rsquo;re safe as we can just assume it\u0026rsquo;s whatever the majority of those three bits are, that is if we got 000101111 we\u0026rsquo;d still know the original message was 011.\nMoving on, the stream of bits coming out of the channel encoder is sent though the digital modulator. At this stage, we\u0026rsquo;re treating the digital signal as analog again. Maybe we\u0026rsquo;re using frequency shift keying (FSK) and that means for 0\u0026rsquo;s we send a pulse at one frequency and 1\u0026rsquo;s a pulse at a different frequency. Maybe we\u0026rsquo;re doing amplitude modulation, so a strong signal is a 1 and a weak signal is a 0. Regardless, this method of transmission is the digital modulator\u0026rsquo;s job. This signal then sent though the channel like normal.\nOn the other side, we just do this process in reverse, the digital demodulator takes whatever way we used to represent the digital signal in an analog way and spits a stream of bits back out. The channel decoder undoes whatever we did to add redundancy, getting us our basic stream of bits that represent our original signal out.\nFinally, the source decoder takes the digital signal and turns it back into the analog signal we put in.\nWait a second!? I hear you say, what about encryption and decryption? Those stages just do complex math on the stream of bits that is really hard to reverse unless you know a secret key. This makes it so that people eavesdropping on the channel can\u0026rsquo;t get our original messages back out without permission. It should be noted that there are ways to secure a normal analog signal like this too, but the technology is just much more robust and cheaper in digital, - many analog methods of securing a signal are easy to break through - so you don\u0026rsquo;t usually see analog communication systems bothering to obfuscate their messages at all.\nNote on Signals \u0026amp; Systems # You absolutely need to understand signals and systems for this page to make any sense. I\u0026rsquo;ll still point out common places you can make mistakes, but you\u0026rsquo;ll need to know what a Fourier transform is and how to use it\nAmplitude Modulation # Double-sideband suppressed-carrier AM # Wikipedia\nConventional Double-sideband AM # Wikipedia\nSingle-sideband AM # Wikipedia\nTransmission Power # Frequency Modulation # Phase Modulation # Digital Modulation Methods # ASK # OOK # QAM # FSK # MFSK # PSK # APSK # PPM # Multiplexing # TDM # Wikipedia\nFDM # Wikipedia\nPacket Switching # This is how most modern networking works, see the Networking chapter! The Problem of Noise # A Smidgen of Information Theory # "},{"id":162,"href":"/engineering/signals/compvision/","title":"Compvision","section":"Engineering","content":" Chapter 32 - Computer Vision # This page is still pretty empty, in the meantime, check out The Ancient Secrets of Computer Vision by Joseph Redmon and Ali Farhadi\nAs an aside, Joseph Redmon is an absolute genius, and the main brain behind You Only Look Once: Unified, Real-Time Object Detection which sort of revolutionized the computer vision with AI space, yet, his resume looks like this\nThis is to say the man is an absolute badass and I could not be more confident in my recommendation of his course\nThe comments on hacker news about that page are quite insightful, too:\nIn terms of practical application (e.g. in industry), the biggest bang for your buck is \u0026ldquo;get the illumination right\u0026rdquo;. Surprised this never appears in the course (at least from glancing over the syllabus and some slides). Most CV tasks are borderline impossible if your input is acquired under uncontrollable lighting. Whereas the right illumination setup can often let you get away with nothing but a threshold binarization. - MauramKilom hewwo ? 🤗💕✨ pic.twitter.com/V1kYURHyWL\n\u0026mdash; 🍬 𝖇𝖊𝖊𝖙𝖑𝖊 🍭 VRC BASE LAUNCHES 11/14 (@BeetleYeen) November 13, 2021 Archive.org backup of the above Tweet This is the Difference of Gaussians (Acerola, YouTube)\n"},{"id":163,"href":"/engineering/signals/controlsys/","title":"Controlsys","section":"Engineering","content":" 31 - Control Systems # What are control systems? Well, the easiest way to answer that is to list the things control systems typically do:\nWhat Can Control Systems do? # Amplify an input: # ex: Pluck a tiny string on a guitar, get an earth shaking output from the speaker Reduce the complexity of user input or change its location # ex: Floor button on an elevator- you don\u0026rsquo;t need to input a height off the ground for what floor you want to be on, nor do you need to enter values to compensate for how quickly it should get to its max speed or how fast it should slow down.\nex: Literally any remote controlled device, like drones\nCompensate for undesired input # ex: A self drone shouldn\u0026rsquo;t drift just because the wind is pushing against one side What are the primary concerns when making a control system? # Transient Response - when we change states, we want the system to respond, but not so fast it breaks or so slow we\u0026rsquo;re stuck waiting\nex: Dose the elevator take too long to get going or does it accelerate too quickly and make your stomach turn over\nI like to think of this as \u0026ldquo;When I kick it, what happens\u0026rdquo;\nSteady-State Response - when the system reaches a steady-sate, is it behaving how we want\nex: Did the elevator stop right at the right spot, or did it under or over shoot? Is it still moving up and down a bit (oscillating) even after it reached the destination floor?\nPut simply, is the output what we want, or did we overshoot, undershoot, or did it just never stop changing.\nStability - Is the output bounded, is there any input which might cause the system to self oscillate or otherwise lose control\nex: A microphone next to a speaker will cause that awful feedback whine as soon as any input is applied (even background noise) this is instability\nPut very simply: is there a situation where the system goes to shit\nThe same concerns as everything else - Keep cost down, reliability up, and complexity reasonable for the problem.\nBlock Diagrams # When we represent these systems, we\u0026rsquo;ll typically use block diagrams that look something like this:\nThough usually we\u0026rsquo;ll have to put in some work to make them this simple - often there are multiple blocks between the input and output, sometimes with non-trivial relations to one another - and we\u0026rsquo;ll need to simplify it down to this form.\nYou\u0026rsquo;ll probably notice that the block that\u0026rsquo;s actually working on stuff here has an argument of s not t as you\u0026rsquo;d expect for signals relating to time. This is because in control systems, we\u0026rsquo;re usually going to work with things after having gone through the Laplace Transform. I won\u0026rsquo;t spend really any time going over that in this chapter, if you need a refresher, see Chapter 27: Signals \u0026amp; Systems. For the most part you\u0026rsquo;ll be able to get by just using tables and some clever thinking to find the transformations between the time and s-domain equations. I don\u0026rsquo;t want to get bogged down in the math before we see a use for it, though, so let\u0026rsquo;s move on to some terminology that will make this block diagram business make some more sense:\nInput: Input Transducer: Summing Junction: Controller: Disturbance: Plant: Output: Sensor: Another thing to note, is that this system, as depicted, is Closed Loop System because, well, there\u0026rsquo;s a closed loop where the output is fed back though a sensor into the input. In an Open Loop System there would only be one straight line of boxes, no loops, though there will likely still be disturbances, even if they\u0026rsquo;re not actually drawn. Via some math we\u0026rsquo;ll look at in a bit, you\u0026rsquo;ll see we can convert any closed loop system into an open loop system, which will generally be necessary for analysis and design.\nWe\u0026rsquo;ll generally look at two kinds of systems- those with and those without feedback, so let\u0026rsquo;s start with that and why it matters:\nFeedback # [TODO] mic next to speaker video here Feedback can be both good and bad. In some cases, like the video here, it can cause the system to keep building up and up and make the output explode- usually in the math this output will go to infinity, but in reality it will be limited by things either blowing up or clipping, if you think about the mic and speaker example this could literally be the speaker blowing out, or the amplifier having some sort of limiter. But, in the good sense, feedback can be used for making a system adapt to changing, external circumstance. The Wikipedia page for feedback gives a good example: As an example of negative feedback, the diagram might represent a cruise control system in a car, for example, that matches a target speed such as the speed limit. The controlled system is the car; its input includes the combined torque from the engine and from the changing slope of the road (the disturbance). The car\u0026rsquo;s speed (status) is measured by a speedometer. The error signal is the departure of the speed as measured by the speedometer from the target speed (set point). This measured error is interpreted by the controller to adjust the accelerator, commanding the fuel flow to the engine (the effector). The resulting change in engine torque, the feedback, combines with the torque exerted by the changing road grade to reduce the error in speed, minimizing the road disturbance. - Wikipedia Do note here, the reference to negative feedback. This is an important point, in many systems, we want the signal that\u0026rsquo;s fed back in to not tame the system, not make it push harder. Of course, there are times that\u0026rsquo;s helpful too, so positive feedback does have its place.\nWhat about Feedforward? # [TODO]\nhttps://vaclavkosar.com/ml/PID-controller-control-loop-mechanism\nhttps://pidtuner.com/#/\nhttps://www.wescottdesign.com/articles/pid/pidWithoutAPhd.pdf\n"},{"id":164,"href":"/engineering/signals/dsp/","title":"Dsp","section":"Engineering","content":" 30 - Digital Signal Processing # Spectral Audio Signal Processing by JULIUS O. SMITH III at the Center for Computer Research in Music and Acoustics (CCRMA) The Scientist and Engineer\u0026rsquo;s Guide to Digital Signal Processing By Steven W. Smith, Ph.D.\nAwesome MusicDSP (GitHub)\nTom Erbe, Design the Erbe Verb (YouTube)\nhttps://zserge.com/posts/etude-in-c/ \u0026amp; https://zserge.com/posts/beep/\nDiospyros - Search-based compiler for high-performance DSP programming\nThink DSP - DSP in Python, Free book\nVult DSP Programming Language\nWriting Efficient VCV Plugins from SquinkyLabs\nTechnical Papers from Cytomic\nhttps://blog.demofox.org/2021/12/29/why-cant-you-design-noise-in-frequency-space/\nHardware\nA Transistor-less sound synthesizer (Hackaday, Jenny List, Dr. Cockroach)\nChua oscillator on CRO during inductance sweep\nhttp://www.doepfer.de/DIY/a100_diy.htm\nAs a quick note, there are a ton of possible options when choosing what to use as hardware for developing audio hardware. You can go full analog, work with dedicated DSP hardware, use microcontrollers with full FPUs, use single board computers, use an FPGA (Like on the Rainmaker), or try to get by on a 328P (Arduino Uno). The most important part is making something, don\u0026rsquo;t stress too much about what you use to do it- but don\u0026rsquo;t use something prohibitively expensive or outright garbage (like the 328P) either, unless you know what you\u0026rsquo;re doing. The STM32\u0026rsquo;s with FPU\u0026rsquo;s are probably a good bet.\nDigital Vintage Sound: Modeling Analog Synthesizers with the Wolfram Language and System Modeler\nReverse-engineering the Yamaha DX7 synthesizer\u0026rsquo;s sound chip from die photos (Ken Shirriff\u0026rsquo;s Blog)\nSoftware\nAwesome Audio Visualization (GitHub)\nKord (GitHub) - a music theory development framework in python\nTutorial: Programming Modules for VCV Rack - Part 1 (YouTube, Leonardo Laguna Ruiz) (This might be out of date)\nTutorial: Virtual Analog Modeling Basics, the Vult way (YouTube, Leonardo Laguna Ruiz)\nRust For DSP\nLearn Modern C++ by Building an Audio Plugin w/ JUCE Framework (YouTube - freeCodeCamp.org)\nhttp://ajaxsoundstudio.com/software/pyo/\nMagenta DDSP - ML meets DSP\nColorChords Music-Optimized DFT Algorithm\nI\u0026rsquo;d like to show DSP with VCV rack as much as I can, but dev sucks without debug, so this helps:\nhttps://medium.com/@tonetechnician/how-to-setup-your-windows-vs-code-environment-for-vcv-rack-plugin-development-and-debugging-6e76c5a5f115\n[TODO] Discrete time? Nyquist? Z transform(quick review of sig \u0026amp; sys)\n[TODO] Quantization \u0026amp; Numerical effects\n[TODO] Aliasing, Upsampling, down sampling\n[TODO] why not use std::sin\n[TODO] Lookup-table generators (Wavetables)\n[TODO] Envelopes\n[TODO] Convolution reverb/cab\n[TODO] IIR\n[TODO] FIR \u0026amp; Windowing\n[TODO] Brief digression into N-dim dsp (images, etc.)\n"},{"id":165,"href":"/engineering/signals/sigandsys/","title":"Sigandsys","section":"Engineering","content":" 28 - Signals \u0026amp; Systems # When I took ECEN 304 Signals \u0026amp; Systems Ⅰ with the fantastic Dr. Sayood at UNL I remember how in awe I was at how he concisely he managed to describe the core idea of this class. While I can not hope to convey the same level of brilliance or inspiration, I do hope that my poor attempt at mimicking his introduction to the course may be of value:\nSignals and Systems as a field, fundamentally, is exactly what it says on the tin. It's the study of signals - from the periodic to the instanenous and high energy - and systems - the source of that data and the mechanism that produces it. This may be used to study how a circuit works, to fine tune the movement of a robot's arm, or to detect pockets of oil deep underground by studying how shock waves traverse thouugh the depths. This is truly applied mathematics. Sure, we may still idealize our models but with these tools we can dive into the nitty gritty when need be. You'll see how any system can be modeled. How even the motion of walking comes about from signals and systems. Further, you'll see how almost all interesting systems, including walking, are systems on the brink of total instability. Everytime you take a step, you let yourself fall before catching yourself, propulsion via constantly recoving from a state of instability. With our bodies, we have our own trained muscles and mind to thank for our ability to catch ourselves, but to design great things, we need to make circuits, write code, and devise ways of making and capturing data that takes advantage of these same facts. Signals and Systems is about harnessesing instability to make it do work for us.\nBelow is a 54 video series that totals around 13 hours MIT Signals and Systems Lectures (YouTube)\nBut, if you\u0026rsquo;d rather learn out of a textbook, if you go looking online you might just be able to stumble upon a 100% super-duper legal way to obtain Alan V. Oppenheim, Alan S. Willsky, with S. Hamid-Signals and Systems with ISBN 978-0138147570 published by Prentice Hall which is now a subsidiary of Pearson, a textbook publisher which can, and this is 100% true, go fuck themselves.\nOne of the most important things in Signals is the Fourier Transform. Fortunately, quality content about it is abundant. This site, An Interactive Introduction to the Fourier Transform provides a great introduction for developing an intuition about it graphically, while \u0026ldquo;But what is the Fourier Transform? A visual introduction. (YouTube, 3Blue1Brown)\u0026rdquo; goes a bit more into the math by the end.\n[TODO] put in all notes from class here to provide a half decent resource\nExtra Resources:\nIntuitive Guide to Convolution\nhttps://en.wikibooks.org/wiki/Signals_and_Systems\nA 313 Part - not even kidding - playlist on Signals and Systems on YouTube\nA 95 Video series, in case that 313 parter left you needing more.\nThe Scientist \u0026amp; Engineer\u0026rsquo;s Guide to Digital Signal Processing, 1999 (Analog Devices)\nDSP Spreadsheet: The Goertzel Algorithm is Fourier\u0026rsquo;s Simpler Cousin (Hackaday, Al Williams)\nWhat does the Laplace Transform really tell us? (Zach Star, YouTube)\nWhat does frequency mean in an image (Stack Exchange)\nTriple Pendulum on a Cart \u0026amp; Inverted Pendulum on a Cart (Steve Brunton\u0026rsquo;s Control Bootcamp on YouTube)\nPoisson\u0026rsquo;s Equation is the Most Powerful Tool not yet in your Toolbox (Matt Ferraro)\nWhat Is a Signal? # [TODO] Properties of waves + Discrete signals\nPhase, Frequency, Wavelength, Amplitude \u0026amp; Db \u0026amp; LuFS, Bandwidth How Do I work with signals? # [TODO] Basic signal transformations, shifts, scaling, etc. sneak peek at Frequency Domain\nImportant Signals # [TODO] Sinusoidal\n[TODO] Unit Step\n[TODO] Impulse (delta)\n[TODO] Triangle\n[TODO] Rectangle\n[TODO] Sinc\nProperties of Signals # [TODO] Memory - system is only dependent on input at the same time as the input\n[TODO] Invertability - inputs give distinct outputs\n[TODO] Causal - output doesn\u0026rsquo;t depend on future events/data\n[TODO] Stability - small inputs don\u0026rsquo;t cause divergence, easier to think of it as fragility?\n[TODO] Time Invariance - Running the same experiment at a different time will still yield the same results\n[TODO] Linearity - if you put in A and get Y, put in B and get Z, then putting in A+B should give you Y+Z. Similarly, 2A should give you 2Y.\nLTI - Linear Time Invariant Systems # Distributive, Associative, Invertability, Stability (if summable \u0026lt; inf) [TODO] Convolution\n[TODO] Fourier Decomposition\n[TODO] Filtering\n[TODO] Fourier Transform - Discrete \u0026amp; Continuous\n[TODO] Sampling\nNyquist Aliasing Interpolation \u0026amp; Sinc fn [TODO] Laplace Transform, Region Of Convergence\n[TODO] Pole-Zero Plots\n[TODO] Z-Transform \u0026amp; Inverse\n- and properties, ref *The Book* pg. 775 [TODO] Linear Feedback Systems\n[TODO] PLLs\n"},{"id":166,"href":"/engineering/wrappingup/cheat/","title":"Cheat","section":"Engineering","content":" Appendix 3 - Cheat Sheets and quick info # Electrical Part Tables # [TODO]\npackage types\nreading specs\ndatasheets\nNice Libraries \u0026amp; Resources # Please don\u0026rsquo;t use Electron\u0026hellip; # Ultralight - \u0026ldquo;Next-generation HTML renderer for apps and games\u0026rdquo;\nMuon - \u0026ldquo;GPU based Electron on a diet\u0026rdquo;\nMulti-Lang # NotCurses (It\u0026rsquo;s not Ncurses) - \u0026ldquo;blingful character graphics/TUI library. definitely not curses.\u0026rdquo;\nSimSIMD - \u0026ldquo;Vector Similarity Functions 3x-200x Faster than SciPy and NumPy — for Python, JavaScript, and C 11, supporting f64, f32, f16, i8, and binary vectors using SIMD for both x86 AVX2 \u0026amp; AVX-512 and Arm NEON \u0026amp; SVE\u0026rdquo;\nC # Awesome-C - \u0026ldquo;A curated list of awesome C frameworks, libraries, resources and other shiny things. Inspired by all the other awesome-\u0026hellip; projects out there.\u0026rdquo;\nNuklear - A single-header ANSI C immediate mode cross-platform GUI library\nGuiLite.h - \u0026ldquo;!The smallest header-only GUI library (4 KLOC) for all platforms\u0026rdquo;\nProtothreads - \u0026ldquo;extremely lightweight stackless threads designed for severely memory constrained systems\u0026rdquo;\nhanoi - \u0026ldquo;Library for strange integer number systems such as base -1+i, base -2, Stern-Brocot rationals\u0026rdquo;\nC++ # Keep in mind, everything from the above should still work\nhttps://github.com/alandefreitas/matplotplusplus\nRang - \u0026ldquo;A Minimal, Header only Modern c++ library for terminal goodies\u0026rdquo;\nNanoGUI - \u0026ldquo;Minimalistic C++/Python GUI library for OpenGL, GLES2/3, Metal, and WebAssembly/WebGL\u0026rdquo;\nMidifile - C++ classes for reading/writing Standard MIDI Files\nElements - \u0026ldquo;lightweight, fine-grained, resolution independent, modular GUI library.\u0026rdquo;\nFast IO - \u0026ldquo;a new C++20 library for extremely fast input/output and aims to replace iostream and cstdio. It is header-only\u0026rdquo;\nInteractive C++ for Data Science - Like Jupyter Notebooks\nNanoLog - \u0026ldquo;an extremely performant nanosecond scale logging system for C++ that exposes a simple printf-like API.\u0026rdquo;\nMoe [Old] - \u0026ldquo;Moe is a C++14 header-only dependency-free library providing generic implementations of some metaheuristic algorithms\u0026rdquo; - like genetic algorithms, differential evolution, simulated annealing, etc.\nAutodiff - \u0026ldquo;automatic differentiation made easier for C++\u0026rdquo;\nSymengine - \u0026ldquo;SymEngine is a fast symbolic manipulation library, written in C++\u0026rdquo;\nMach7 - \u0026ldquo;Functional programming style pattern-matching library for C++\u0026rdquo;\nSTB - \u0026ldquo;stb single-file public domain libraries for C/C++\u0026rdquo;\nDarwin - \u0026ldquo;Evolutionary Algorithms Framework\u0026rdquo;\neSpinn - \u0026ldquo;eSpinn \u0026ndash; evolving Spiking Neural Networks\u0026rdquo;\nRust # Nannou - Creative Coding Framework for Rust\npyo3 - Rust bindings for python, write python modules in rust\nGo # Lorca - \u0026ldquo;A very small library to build modern HTML5 desktop apps in Go. It uses Chrome browser as a UI layer. Unlike Electron, it doesn\u0026rsquo;t bundle Chrome into the app package, but rather reuses the one that is already installed.\u0026rdquo;\nPixel - \u0026ldquo;A hand-crafted 2D game library in Go\u0026rdquo;\nPython # NumPy Illustrated: The Visual Guide to NumPy (Lev Maximov)\nFull Stack Python Course, has some info on more common libraries\nPython-Cheatsheet by gto76 on GitHub\nOnly including the less common ones here. If you\u0026rsquo;re new to python you should look into Numpy, Matplotlib, Pygame, Pandas, and Requests. Those more or less make up the\nSympy - Symbolic computation for python.\nPretty Errors - \u0026ldquo;Prettify Python exception output to make it legible.\u0026rdquo;\nPampy - Pattern Matching for Python\nRich - library for rich text and beautiful formatting in the terminal\nManim - \u0026ldquo;Animation engine for explanatory math videos\u0026rdquo; used by 3Blue1Brown\nhttps://github.com/mitsuba-renderer/nanogui\nPyNuklear - Nuklear (see above) binding for python\nGuietta - \u0026ldquo;A tool for making simple Python GUIs\u0026rdquo;\nKivy - GUI framework\nTyper - \u0026ldquo;Typer, build great CLIs. Easy to code. Based on Python type hints.\u0026rdquo;\nPython-Fire - \u0026ldquo;a library for automatically generating CLIs from absolutely any Python object.\u0026rdquo;\nBeautiful Soup - Web scraping\nFuckIt.py - \u0026ldquo;FuckIt.py uses state-of-the-art technology to make sure your Python code runs whether it has any right to or not. Some code has an error? Fuck it.\u0026rdquo;\nbokeh - \u0026ldquo;Bokeh is an interactive visualization library for modern web browsers\u0026rdquo; (yes, it uses python)\nMoviePy - \u0026ldquo;a Python library for video editing: cutting, concatenations, title insertions, video compositing (a.k.a. non-linear editing), video processing, and creation of custom effects\u0026rdquo;\ntqdm - \u0026ldquo;Instantly make your loops show a smart progress meter - just wrap any iterable with tqdm(iterable), and you\u0026rsquo;re done!\u0026rdquo;\nPint - work with units, including prefixes like kilometers\nQuarry - \u0026ldquo;Quarry is a Python library that implements the Minecraft protocol. It allows you to write special purpose clients, servers and proxies.\u0026rdquo;\nPyxel - \u0026ldquo;A retro game engine for Python\u0026rdquo;\nNetworkX - \u0026ldquo;a Python package for the creation, manipulation, and study of the structure, dynamics, and functions of complex networks\u0026rdquo;\nAlso see pyO3 in rust above, which allows for writing python modules. Of course python modules can be written in C or C++, but doing so in Rust is safer, because, Rust.\nFor Matplotlib, I do recommend looking at the available Matplotlib colormaps and color map normalization as the colors used to view your data can make a huge difference in how readable it is\nnbterm: Jupyter Notebooks in the terminal\nMachine Learning # Obviously Tensorflow, PyTorch, Keras, etc. exist. This list is for the stuff you don\u0026rsquo;t already know about\nThat said, it\u0026rsquo;s worth noting that tensorflow-rocm exists, which might work for you if you have an AMD graphics card and don\u0026rsquo;t want to shell out for a different GPU just for CUDA support.\nSpaCy - \u0026ldquo;Industrial-strength Natural Language Processing (NLP) in Python\u0026rdquo;\nELI5 - \u0026ldquo;A library for debugging/inspecting machine learning classifiers and explaining their predictions\u0026rdquo;\n\u0026rsquo;$\u0026rsquo; family of stroke/gesture recognition tools\nKobra - \u0026ldquo;A visual programming language for machine learning (in beta)\u0026rdquo;\nFor Embedded Applications # u8g2 - \u0026ldquo;Library for monochrome displays, version 2\u0026rdquo;\n"},{"id":167,"href":"/engineering/wrappingup/job/","title":"Job","section":"Engineering","content":" Appendix 5 - Getting a Job in Engineering # \"Recently, I was asked if I was going to fire an employee who made a mistake that cost the company $600,000. No, I replied, I just spent $600,000 training him. Why would I want somebody to hire his experience?\" - Thomas John Watson Sr., IBM\n[TODO] literally this entire page is TODO. I\u0026rsquo;m just making it as a place to dump links for now. Eventually I\u0026rsquo;d like to talk about why most interview processes suck, the high no-response rate, certifications vs degree, how to write a résumé, cover letter, start up culture, non-compete clauses, fake glassdoor listings, Linked in BS, all the things.\nTHIS WILL NOT BE A PLACE TO LINK TO SPECIFIC JOBS. DO NOT EVEN TRY TO SUBMIT A PR WITH THAT.\nWhat to Expect # Things they didn’t teach you about Software Engineering (Vadim Kravcenko)\nInterviewing # https://erikmcclure.com/blog/factorio-is-best-interview-we-have/\n10 questions to ask in a job interview that will really expose a company’s culture (and hacker news comments)\nI Cheated on My Microsoft Interview (and hacker news comments)\nCharacter owned by Vega, art by Shade Know (and increase) your worth # [TODO] looking up salary beforehand\n[TODO] NEVER, EVER sign a contract that says your employer owns all of your work from outside of work\nThe Niche Programmer (Asko Nõom) explains why learning a less common language may make you worth more.\n[TODO] https://www.economist.com/business/2022/12/08/the-scourge-of-job-title-inflation\nMaking a Résumé # This is brilliant: Software engineer got tired of getting rejected by automated screeners and tested a theory.\nReal resume: 0% success\nObviously fake resume stuffed with buzzwords: 90% success rate\nCalls from from Notion, AirBnB, Reddit, Dropbox, Robinhood, etc pic.twitter.com/m80GUnPsr2\n\u0026mdash; Coding Career Community (@Coding_Career) October 30, 2021 Archive.org backup of the above tweet Self Employment? # What I learnt roasting 200 landing pages in 12 months (Oliver Meakings Blog)\nSelling Tiny Internet Projects For Fun and Profit\n"},{"id":168,"href":"/engineering/wrappingup/latex/","title":"Latex","section":"Engineering","content":" Appendix 6 - \\(\\LaTeX\\) \u0026amp; Markdown # Like the kink? # \\(\\LaTeX\\) , pronounced Lay-Tech, is a document writing and formatting \u0026rsquo;language\u0026rsquo; that acts pretty different from MS Word. It\u0026rsquo;s primarily used for writing fancy math equations, academic, journal, or conference papers, as such, you might have to use it at some point to conform to one standard or another (like IEEE).\nAs an example of what \\(\\LaTeX\\) formatting looks like, check this equation out:\nx = a_0 + \\cfrac{1}{a_1+ \\cfrac{1}{a_2 + \\cfrac{1}{a_3 + \\cfrac{1}{a_4} } } } \\(x = a_0 \u0026#43; \\cfrac{1}{a_1\u0026#43; \\cfrac{1}{a_2 \u0026#43; \\cfrac{1}{a_3 \u0026#43; \\cfrac{1}{a_4} } } }\\) Of course, it can both be much simpler and much more complex than this. On the simple side, basic \\(\\LaTeX\\) supports just writing a paragraph with no special symbols or commands, just basic text, and this will be rendered normally. On the \u0026lsquo;middling\u0026rsquo; side, you\u0026rsquo;ll see \\(\\LaTeX\\) figures, tables, and citations, which allow you to do things like easily make a figure add \\label{fig:my_thing}to it, then reference in the text with code like \\ref{fig:my_thing}, making it so if you add a figure later you don\u0026rsquo;t have to go back and increment all following figure references by one. The syntax can get a bit brutal, though, so using tools like tablesgenerator.com and detexify can be a lifesaver. There\u0026rsquo;s also https://mathpix.com (or pix2tex (GitHub) if you have the skill to set it up) Related, normcap is pretty useful too You\u0026rsquo;ll probably end up googling how to do most things in \\(\\LaTeX\\) , find that a lot of things don\u0026rsquo;t really sit where you want them to (\u0026ldquo;Why is this figure in the wrong spot?\u0026rdquo;), and end up using a lot of packages to write it. Frustratingly, most of the desktop \\(\\LaTeX\\) clients suck, so it seems most people just use Overleaf now, which does have a free tier, but is a paid web-app. Fortunately, it actually works incredibly well and has very nice Google-docs like multi-user features.\nWhile writing can be hard, it\u0026rsquo;s worth doing it right: I particularly like using annotated equations (or like this) and using margin notes though it\u0026rsquo;s likely that neither would be accepted in all academic contexts. Generally, just keep in mind, your goal is to convey as much information as clearly as you can in as few words as possible.\nYou\u0026rsquo;ll likely use Bibtex for citing sources in your document, fortunately, a lot of papers have built in Bibtex citations you can download and import and your sources document. Litmaps(1) is an awesome tool for building up research on a topic, exploring related tools, and exporting bibtex sources as well - though it is probably only free while in early access.\nYou may also want to check out Connectedpapers.com if you\u0026rsquo;re more interested in the research side, and one of the links listed for each paper does still usually have the bibtex available.\nKeep in mind if you need the full text of a paper, Sci-Hub is an option\nMarkdown? # Markdown is what most of this website is written in, though there are various additional features this site uses that are not part of the common markdown standard. In general, markdown is just a stupid fast way to spit out formatted text that can still be interpreted as plain text. If you\u0026rsquo;re thinking \u0026ldquo;Formatted Plain text? What the fuck?\u0026rdquo; Yeah, that\u0026rsquo;s a valid response. Let me show you:\nThis is a title # here are some words.\nThis word is bold.\nitalics too.\nhere\u0026rsquo;s a list item two here\u0026rsquo;s a separator line\nhere\u0026rsquo;s a task list with an item checked heading # 1 2 if foo: do bar() smaller heading # Quote block\nThis is a link.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # This is a title here are some words. This **word** is bold. *italics* too. * here\u0026#39;s a list * item two here\u0026#39;s a separator line --- - [ ] here\u0026#39;s a task list - [x] with an item checked ## heading ​```python if foo: do bar() ``\u0026#39; ### smaller heading \u0026gt; Quote block This is a [link](www.google.com). As you can see, it\u0026rsquo;s pretty simple to read and write. With a markdown render, it will look pretty and formatted like it does on this page, but if you have to view it as raw, plain text, it\u0026rsquo;s still totally human-readable, and syntax highlighting for Markdown is common.\nSome things in Markdown are a bit less obvious though, for example, images and tables:\nThis is a Table 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 | This | is a | Table | | ---- | ---- | ----- | | 1 | 2 | 3 | | 4 | 5 | 6 | | 7 | 8 | 9 | ![this description helps for blind people](/box.png) Weirder yet, a lot of Markdown supports mixed in HTML, CSS, and sometimes \\(\\LaTeX\\) , although support for all of these is not always available. When this is available though, it\u0026rsquo;s a pretty awesome way to make custom document templates and hammer out shareable HTML pages with embedded YouTube videos or Tweets, or make a PDF with a HTML header or other elements (letting you do things like centering, custom text sizes, etc. which markdown doesn\u0026rsquo;t normally support) while still hammering out the body in pure text, which is super fast to type.\nYou\u0026rsquo;ll find a lot of the web actually supports markdown input, including GitHub, Reddit, Disquis forums, a lot of chat clients, etc. Unfortunately, the extent to which they support the more advanced features varies.\nFor writing Markdown, I generally use Typora, which is not FOSS. It\u0026rsquo;s listed as \u0026lsquo;Free during beta\u0026rsquo; but it\u0026rsquo;s been in beta for a very long time now, and I suspect the old builds would still work even if it does go paid, so I\u0026rsquo;m comfortable recommending it.\nThis page really is just to inform you of the existence of Markdown and \\(\\LaTeX\\) , though honestly I\u0026rsquo;m not sure how you could have gotten this far without writing a README.md on GitHub. Regardless, the internet really does have a lot of good sources on both.\nFor S\u0026amp;Gs, check out this StackExchange question: \u0026ldquo;How do I make my document look like it was written by a Cthulhu-worshipping madman?\u0026rdquo;\nIf you would like to practice with at least one flavor of Markdown (with Hugo \u0026lsquo;Shortcodes\u0026rsquo;, \\(\\LaTeX\\) , HTML, CSS, and more baked in poorly), feel free to find a page in need of love on this website and submit a pull request on GitHub.\nI REALLY like litmaps. Honestly, 11/10 for product design. The only reason it doesn't have an OpGuides best of badges is because I really don't like SAAS, but at least they have a free tier. "},{"id":169,"href":"/engineering/wrappingup/resources/","title":"Resources","section":"Engineering","content":" Appendix 4 - Other Great Resources # Conventions # https://www.emfcamp.org\nhttps://media.ccc.de/\nNews Sites # Serializer.io (Aggregate of Hacker News, Ars, Reddit, Macrumors, and Lobste.rs )\nHacker News\nHackaday\nSlashdot\nSnopzu\nhttps://n-o-d-e.news/\nForums # https://lobste.rs/\nhttps://stackoverflow.com/\nhttp://textfiles.com/\nhttps://glitch.com/\nLearning Linux # https://linuxjourney.com\nYoutube # ElectroBoom\nCNLohr\nN-O-D-E\nLiveOverflow\nTom Scott\nbigclive\nAdoredTV\n3Blue1Brown\nBryan Lunduke\nLevel1Techs\nCrash Course: Computer Science, from PBS\nPodcasts # https://theamphour.com/\nHacker Public Radio\nGitHub info pages # Hacker Laws\nResilience Engineering\nWhat Happens When\nAwesome Windows (List of tools for Windows)\nx86 Assembly Cheat Page\nAwesome C\nProject Based Tutorials in C\nThe Book Of Secret Knowledge\nAwesome Creative Coding\nAwesome Livecoding\nList of Awesome Pages\nAwesome CTF\nAwesome Hacking\nAwesome Software Defined Networking\nAwesome Unicode\nSimple Virtual CPU\nBooks and Papers # https://github.com/EbookFoundation/free-programming-books#readme\nPOC||GTFO\nYou may want to use a VPN for the following: https://scihub.org/ \u0026amp; http://libgen.rs\nBlogs # http://blog.cleancoder.com/\nDIY Pages # https://www.instructables.com/circuits/\nNon-Technical # https://longform.org/ https://www.metafilter.com/ https://relevant.community/relevant/top\nSome really cool, inspirational people # Security # Netspooky @ https://twitter.com/netspooky LiveOverflow @ https://twitter.com/LiveOverflow https://twitter.com/ANDnXOR https://twitter.com/DCFurs https://twitter.com/gynvael https://twitter.com/ZonkSec https://twitter.com/Viss https://twitter.com/hacks4pancakes https://twitter.com/malwareunicorn https://twitter.com/da_667 https://twitter.com/0xCODEs https://twitter.com/zerosum0x0 https://twitter.com/x0rz Programming/Live coding # RavenKwok @ https://twitter.com/RavenKwok Neauoire \u0026amp; RekkaBell @ https://merveilles.town/@neauoire , http://100r.co/ https://twitter.com/RavenKwok https://twitter.com/generateme_blog https://twitter.com/manoloidee Just generally nerdy # https://twitter.com/Level1Techs / https://twitter.com/tekwendell https://twitter.com/Snowden https://twitter.com/oshpark https://twitter.com/climagic https://archive.org/ https://media.ccc.de/v/31c3_-_6373_-_en_-_saal_6_-_201412291600_-_the_only_thing_we_know_about_cyberspace_is_that_its_640x480_-_olia_lialina#t=621 Android Apps # Name \u0026amp; Link Description Screenshot/Demo Wolfram Alpha app for https://www.wolframalpha.com, gives unlimited access to some of the paid features from the website. SensorLab Spectroid BusyBox ConnectBot IP Tools Intrace zANTI Wifi Analyzer Articles and Ramblings I Want To Feature But Have Nowhere Else to Put: # Polyglot Files # [TODO need to find each thing I reference here and take these out of this page]\nelf hacking, POC||GTFO\nStrange thought # [TODO need to find each thing I reference here and take these out of this page]\nMain not fn\norder of variable declaration (paged out 001 pg 33)\ngeneric midi use (paged out 002 pg 24)\nrop\nBlog posts that don\u0026rsquo;t fit anywhere else but that you should totally read # https://hackaday.com/2020/02/20/we-ruined-status-leds-heres-why-that-needs-to-change/ Foone one weird adapters (Twitter Thread) Building the World\u0026rsquo;s Weirdest Fan (YouTube) Minetest Circuit Challenge (YouTube) A post by the guy who made Task Manager https://n-o-d-e.live/zine/NODE_VOL_02.pdf A post about Windows 10 LTSC, a super stripped down version of 10 that sucks a bit less https://criu.org Factorio Is The Best Technical Interview We Have (Erik McClure) "},{"id":170,"href":"/engineering/wrappingup/wrappingup/","title":"Wrappingup","section":"Engineering","content":" Chapter 46 - Where To Go From Here? # Hey, so, you made it. I can\u0026rsquo;t give you a degree. But, I\u0026rsquo;m proud of you. Even if you skipped a chapter or two, you still put in work to improve yourself and learn something. That\u0026rsquo;s cool.\nBut, maybe you\u0026rsquo;re thinking \u0026ldquo;Okay, but now what?\u0026rdquo;\nIntegrating other interests # There\u0026rsquo;s a lot more to life than computers and code and electronics and making and hacking. Sure, all of these things are fun, but you\u0026rsquo;ll burn yourself out if they\u0026rsquo;re all you do, especially if you\u0026rsquo;re just coding for code\u0026rsquo;s sake instead of making something cool.\nSo, make something cool and find other hobbies.\nI\u0026rsquo;m into making music, longboarding, writing, making digital art, gaming, and a whole buncha\u0026rsquo; things. I often find ways to mix my interests, though, and those are the times I have the most fun.\nMusic? Make some synths or effects pedals- distortions are dead simple.\nLong boarding? Make an electric board, or something to track your speed.\nWriting? You can make interactive fiction, stories with choices!\nGaming? You could make your own game, make a mod, make cheats - only for single player or anarchy servers.\nYou get the idea. Having a passion for nerdy things like this guide has talked about is great, but don\u0026rsquo;t let it be all consuming.\nOn that note, a lot of smart people think they always need to be making something that contributes to society or that they always need to be working to feel fulfilled.\nDon\u0026rsquo;t.\nAnd look, I know it\u0026rsquo;s not that simple. I can\u0026rsquo;t say\n\u0026ldquo;You shouldn\u0026rsquo;t feel bad for playing video games in your free time\u0026rdquo;\nand have you be suddenly all good and able to relax.\nbut, please, being happy and doing things you enjoy, even if you have to force yourself, is often the most productive thing you can do.\nWork life balance is important.\nContributing to Open Source # If you do need something to work on, though, I really recommend adopting an open source project and giving it some contributions. You might even make some friends along the way.\nYou don\u0026rsquo;t have to start with something as big and as intimidating as the Linux kernel to contribute. You can do something as easy as fixing typos and adding content to a site like this one - hint, hint - or find some actual code repos on GitHub that are actively seeking maintainers and contributors.\n"},{"id":171,"href":"/hidden/jaki/","title":"Jaki","section":"Hiddens","content":" 󱤐󱤾󱥍󱥠󱥔 # "},{"id":172,"href":"/interviews/cadeyratio/","title":"Cadey Ratio","section":"INTERVIEWS","content":" An Interview with Cadey Ratio # 3/10/2021\nThank you for taking the time for this interview Cadey. Your blog at christine.website/blog shows that you really have a wide range of interests. So, to get started, what are you passionate about and why? I\u0026rsquo;m passionate about making computers understandable. We work with these impossibly complex mechanical creations like they are nothing. They dominate our culture. With the onset of COVID, the internet has gone from an essential part of our lives to a vital method of communication.\nI\u0026rsquo;ve also been taking up fiction writing a lot in recent days. Fiction is a great canvas to explore ideas and talk about topics that people generally don\u0026rsquo;t deal with. I have a few longer stories in planning right now that I hope to use to refine my writing skills. Another side goal of them is to create the kind of fiction that I wish there was more of. Philosophy is also a fun thing to deal with, and it has some surprising links into the tech and writing I do.\nYou know on second thought, I think that the real core thing I am passionate about is making things in general understandable. My dayjob has me working on social proximity networks. A lot of my open source code allows me to explore ideas and different ways of thinking. My technical writing has been a fantastic canvas to build my basic writing skills on top of (it\u0026rsquo;s gotten me to the front page of Orange Site more than 5 times as well as a throwaway comment of mine on /r/programmingcirclejerk twice in the same day, so I\u0026rsquo;m probably doing something right, I hope). The fiction I write aims to help explain complicated moods and ideas that other forms of media struggle with (such as Readaptation, which is about gender dysphoria with some dysmorphia thrown in for good measure).\nWhat are some your favorite projects you\u0026rsquo;ve worked on? I could be here all day listing the fun things I work on but I\u0026rsquo;ll list my top favorites:\nolin and pa\u0026rsquo;i - these projects were how I learned userspace-\u0026gt;kernel API design as well as Rust The Source - a collections of ideas for the rules/homebrew system I use when dming tabletop RPGs mi - a personal API that powers a lot of boring-to-you things that I use to glue my online presence together christine.website - the code that powers christine.website hlang - the h \u0026ldquo;programming language\u0026rdquo; when-then-zen - BDD descriptions of meditation methods Backplane (defunct) - a reverse reverse proxy for web applications hosted behind firewalls My eBook/website generation pipeline built on top of nix-build that I really need to write about at some point What part of what project has been the most difficult and/or most rewarding thing you\u0026rsquo;ve ever worked on? I\u0026rsquo;m gonna break this up into two parts.\nFirst, the most difficult project I\u0026rsquo;ve worked on has been the WebAssembly research that culminated in Olin and pa\u0026rsquo;i. You think it\u0026rsquo;s hard to write WebAssembly programs, but it gets even harder when you had to debug them when I had to. It was really the wild west of WebAssembly at that point. My most reliable debugging method was to dump the WebAssembly memory to disk and then go hexdump diving with xxd. Yes, seriously. Tracing through execution usually meant puking up a pointer to the thing that I wanted to inspect and then adding let _ = 0/0 or something to the code so it would puke and die without modifying the heap. It was hell. Then I got things working and it was not hell anymore. But it was hell.\nBy any empirical measure, my most rewarding project has been my blog. It has been the reason why prospective employers reach out to me. This has made job hunting so much easier. When you are a gender minority like I am it can be very difficult to find people willing to hire you. My blog does a hilarious amount of traffic, at least 70 GB per month. My blog is mostly text save the cute sharkgirl images, so this means that my blog is very widely enjoyed.\nWhat aspect of how the web works would you change if you could? The internet in general is no longer a human-scale network. If I had ultimate authority I would want to make the internet a superstructure for human-scale subnetworks between friends, coworkers and colleagues. I\u0026rsquo;m actually quite lucky because I have the privilege to work for a company that allows me to act on that desire.\nAlso I\u0026rsquo;d want to probably figure out an alternative method of funding creative work. A lot of those ideas have an unfortunate habit of depending on systems like Universal Basic Income though. Artists get fucked over by capitalism.\nOn your site and though your blog posts I see that you use quite a wide array of programming languages, which ones are your favorite to work in? Least favorite? why? I work with many tools because I do many things. Every tool is not useful for every task. By knowing a variety of tools I\u0026rsquo;m able to pick the tool that is the best fit for the job. That being said though, my least favorite tool to use as of late is the Go programming language. It\u0026rsquo;s not really about the language itself. I definitely feel like I cannot really flex my muscle and express myself in Go the way I would want to because Rob Pike says we can\u0026rsquo;t have nice things. The biggest problems I have with it at the moment are rooted in the tooling, specifically with how they have been handling Go modules.\nWithout getting too deep into semiotics, Go modules change the definition of major versions of software in ways that are shocking to people. There are so many scripts that have been written to make Go modules Do The Right Thing™️ that frankly wouldn\u0026rsquo;t have to exist if Go modules wasn\u0026rsquo;t such an exciting feature. Some days I want to try and bolt Rust\u0026rsquo;s cargo to the side of the Go toolchain. Go does have its uses though.\nOne of my favorite tools is Rust. Rust is a programming language that gives developers a lot of freedom of expression and implementation while also making it hard for developers to do sad things in the process. It was frustrating learning Rust at first. I had learned a lot of bad habits. But the net result is that when I am writing programs in Rust, I simply do not have to have as much in my head at any given time. Entire classes of errors are eliminated by the compiler. Errors that do not compile to machine code cannot be deployed to production. This also really makes the SRE side of me very happy, because I can be more sure that Rust programs won\u0026rsquo;t crash because of a hidden gotcha.\nIt\u0026rsquo;s a shame that more people don\u0026rsquo;t use Rust.\nFrom various things that you\u0026rsquo;ve written it\u0026rsquo;s clear that you care about how people interact and communicate in a safe, comfortable enviroment where they can be themselves. At the same time, you have social media accounts across a variety of platforms that hold these values to different standards (twitter vs mastodon, for example).\nHow do you manage your social media experience to get the most good and least bad from it?\nTo be honest, I am probably one of the worst people to ask about this. I do not have a healthy relationship with social media and online platforms in general. I\u0026rsquo;ve been trying to correct it, but most of those efforts got thrown into the trash can when COVID happened. I do try to avoid the siren song of the timeline though. The addiction algorithms have a deep hook into the happy chemical part of my brain though. It\u0026rsquo;s made it hard for me to focus on longer writing projects like the novel I\u0026rsquo;ve been planning out off and on for years.\nThe biggest problem is chatrooms for communities. I\u0026rsquo;ve been in a few offshoots of the same community\u0026rsquo;s chatroom for almost a decade and had the unfortunate pleasure of serving as a chat moderator. Those things can either be very boring in the best ways (with your moderator status mostly boiling down to a symbolic gesture of \u0026ldquo;hey this person is trustable and stuff\u0026rdquo;) or very exciting in the worst ways (like when all the adults in the room move on to Bigger and Better Things, leaving you to play adolescent daycare).\nWhat do you think more people could do to make their social media experience online better? If you can, try to keep your circle of people you actively follow and engage with below Dunbar\u0026rsquo;s Number. On bigger social platforms there is a tendency to follow hundreds if not thousands of people that you barely know. This is more people than you can really keep track of. I used to follow people back that replied to my tweets, but I recently had to stop doing that to keep my feed under control.\nA lot of this is a sociological problem though. Humans really aren\u0026rsquo;t ready for social media. All of our existing systems and laws are predicated on the \u0026ldquo;old way of doing things\u0026rdquo;. Police departments haven\u0026rsquo;t been able to keep up with the ways that crime is being committed online. The vast scale of everything is difficult to comprehend. Thousands of HOURS of content are uploaded to YouTube every minute. That is the equivalent of over a month of content. That\u0026rsquo;s not like a month of 40 hour work weeks, that\u0026rsquo;s the entire month.\nWe deal with human-scale things, not the scale that social media has become. It\u0026rsquo;s difficult for us to comprehend the monsters we have created.\nWhat do you think are the biggest things that social media platforms could do to improve? Stop optimizing for engagement. It\u0026rsquo;s optimizing for addiction. It\u0026rsquo;s optimizing for users to be angry. It\u0026rsquo;s optimizing for dividing people, and they have the audacity to claim that they are bringing the world closer together too!\nMake your technology calm. Don\u0026rsquo;t make things scroll infinitely. It\u0026rsquo;s okay for people to miss notifications. Let things happen as they do.\nSince making The Source and Mara: Sh0rk of Justice what advice would you give to someone that wanted to make a game of their own? Fuck it, yolo, go for it. You\u0026rsquo;ll learn a bunch. There\u0026rsquo;s really no risk to trying stuff out to see how you like it. The Source started as a collection of DM notes that grew out of hand. Mara: Sh0rk of Justice was done in one particularly long weekend because I was bored. There is so little risk in throwing something onto Itch. I plan to release all of my future paid projects on Itch.\nAs a fellow Split-keyboard user and non-QWERTY user, how have both been going for you? Any complaints? It was hard to adapt in the first few days. It got a lot easier though, and now I can swap between qwerty and colemak mod-dh at will. I\u0026rsquo;ve even had some occasions where I\u0026rsquo;ve had one hand on a qwerty keyboard and the other on my moonlander. This really broke me for a moment. I\u0026rsquo;m probably not going to get to the level of using steno on my keyboard to dab on the haters at 200 words per minute though.\nI just hate it when games don\u0026rsquo;t let you rebind inputs. My Steam Controller helps with those, but it would be nice if they could just allow you to bind the keys to what you want to use. Cyberpunk 2077 is particularly bad at this because you can\u0026rsquo;t rebind use from f to something else. I want to use frst as my wasd cluster so it\u0026rsquo;s more comfortable on my Moonlander. I may end up having to make a gaming layer in addition to my qwerty layer.\nOn your blog you\u0026rsquo;ve talked about how tulpamancy has helped you out, care to dive into that a bit? How has it been going since your last post about how it helps you with development about two years ago? Wow, it\u0026rsquo;s hard to believe that post was written almost two years ago. Time files eh?\nAs a note, we are going to use the plural first person pronoun we to refer to the collective group (or system if you prefer that term) of all of us for the remainder of this post. Any time I use I, it\u0026rsquo;s referring to me (Cadey) in particular.\nYes, our plurality has been absolutely catalytic to our career. It\u0026rsquo;s the secret sauce to how we come across as a 10xer. Each of us has our own specialty and we chord them together to express a balanced composite. A lot of the different skills in tools and methodologies are divided between us.\nI really wonder some days if my coworkers have caught onto the notable differences between us. Nicole is very much a shitposter that has some quite insightful things to say when she wants to. Jessie has some lovely metaphors that she invents on the fly. Ashe is the one that is out on the days that shit gets really chaotic (including getting on the front page of Orange Site, not sure how that keeps happening so consistently). Sephie is much more security and SRE focused. Mai is the really creative one that comes up with a lot more of the \u0026ldquo;terrible ideas\u0026rdquo; than the others do. I sorta sit in the middle between them all, and at large we sorta kinda even out.\nI really do wonder when we will feel safe enough at a job to want to come out as plural to our coworkers. We\u0026rsquo;ve been fearing it though, it\u0026rsquo;s all of the social problems of coming out as transgender with none of the legal protections. It\u0026rsquo;s sad that there is a legitimate fear of alienating our coworkers. Coming out as plural to my (note: we have no idea what pronoun to use here) brother is a huge part of why he isn\u0026rsquo;t really present in our lives. Tailscale might be the place we do it though. The stigma around the topic is a hard fear to work around (if only because it is justified).\nMara Before any of you ask, I am not actually a systemmate/tulpa up in their head. My lines (including this one) are written by Nicole. They have gotten this question a lot and they figured this would be the best way to answer it. Collectively, we share the username Xe and the legal name Christine. There\u0026rsquo;s some stacked jokes regarding our VRChat avatar being based on the character that it\u0026rsquo;s based on, however we\u0026rsquo;ll leave those as an exercise to the reader to avoid spoiling too much of Xenoblade Chronicles 2.\nPlurality isn\u0026rsquo;t a magic bullet though. Sometimes the Big Sad can affect multiple of us at once. It becomes hard to work normally in those cases. Our strategy usually is to pass the baton when one of us gets stuck. Sometimes that doesn\u0026rsquo;t work. It can be kinda annoying.\nWhat\u0026rsquo;s the most important skill that you\u0026rsquo;ve taught yourself? How to break things down into their component parts and tackle those piecemeal. This is a skill that is absolutely vital yet seemingly nobody wants to teach it. If it is even teachable that is. A lot of it really boils down to play as a legitimate work strategy.\nThings don\u0026rsquo;t have to be boring. They can be fun.\nIs there any skill that you spent too much time developing that you wish you hadn\u0026rsquo;t? How to report child abuse to authorities. It\u0026rsquo;s unfortunate that I\u0026rsquo;ve had to do it often enough that we had to write a [CW: Pedophilia discussions] guide for myself on how to properly report it to the right people.\nOther than that we try to live life without regrets. The past has happened and can\u0026rsquo;t unhappen, time is a blockchain. It has been a tough pill to swallow, but overall it\u0026rsquo;s helped a lot.\nWhat do you do for fun? Any books, movies, TV shows, etc. that you\u0026rsquo;d recommend? We are boring nerds when it comes to having fun. Lots of YouTube, video games and absolutely atrocious Nicolas Cage movies. In terms of recommendations here\u0026rsquo;s some of our top picks:\nQuantusum by James Mahu - Quantusum is one of the best examples of spiritual fiction I have ever read, and has been a huge influence on my writing style and the kinds of stories I want to tell. It\u0026rsquo;s annoyingly hard to get a legit copy of it though. Certain websites may help with that. The Matrix, which tragically never got a sequel. Xenoblade Chronicles 2 - Xenoblade Chronicles 2 is easily one of the best games for the Nintendo Switch. You will get at least 50 hours out of a playthrough. It tells the story of a boy and his blade as they try to save the world from decay. It\u0026rsquo;s almost worth buying a Switch for if you don\u0026rsquo;t have one already. It also has an amazing portrayal of plurality that needs to be experienced by more people. It\u0026rsquo;s got the story equivalent of an entire 5 season anime packed into a 13.2 gigabyte package. Highly reccomend. Battlestar Galactica (2002) - This show was really influential to me while I was growing up. It is the story of good intentions taken to the worst possible extremes. Please watch it. The parts where the Cylon method of projection is used to customize the inputs they get have been instrumental in how I perceive things. Star Trek: The Next Generation and Deep Space Nine - These shows together comprise what I love the most about science fiction. The worldbuilding for the Federation has been instrumental in so many other science fiction media. Deep Space Nine is why we have the concept of season-long arcs in media. The Next Generation is probably one of the best visions for a utopian ideal I\u0026rsquo;ve ever seen. Deep Space Nine did corrupt that ideal a bit in the more realistic setting aboard a space station that has a chronic case of exciting things happening, but overall it used that corruption as a tool. Well worth the watch. What\u0026rsquo;s the biggest \u0026lsquo;Oh Shit\u0026rsquo; moment you\u0026rsquo;ve ever had, be it one you caught in time or not? One time at work I typoed a reboot command to run on the wrong host. The server number was transposed (AF1373 instead of AF1337 or something like that) and I accidentally rebooted a production redis server. One of the bigest redis servers with over 500 GB of ram. So much data in ram that it took 8 hours to come back up, and most of that time was spent loading things back into ram. We were so lucky that we had a replica that we could promote to the primary server. That was almost a very very bad incident. It\u0026rsquo;s been a few years though, so I don\u0026rsquo;t remember too many details beyond that.\nWho are your biggest inspirations? What creators do you think are way to underrated and deserve a shout out? One of my bigger inspirations is the idea of chaos magick as a universal hammer. Distilling things down, you can reduce chaos magick to these two axioms:\nTry many things Do more of what \u0026ldquo;works\u0026rdquo; There is no third axiom Things can extend out from there infinitely.\nThe WingMakers materials have also been a huge influence on my projects and writing. It is kind of way out there for most people, but\nWhat\u0026rsquo;s the best advice you\u0026rsquo;ve ever received? Worst? Know when to give up. This is a tough pill to swallow for me at times, as I am really really inclined to want to Make Thing Work, but sometimes I have to give up. It hurts, but sometimes you actually do need to move on to something else.\nHow do you balance doing whatever you have the itch for at the moment with doing things to unwind? Poorly! Meditation helps. The most effective method I use is to just focus my awareness on the sensations of breath. The pressure. The movement. The constant change. The inhale. The expanding. The exhale. The shrinking. The cycle of breath. The calming cool air going in my nose. The warm air coming out of my mouth. The sensations of breathing.\nWorst case there\u0026rsquo;s tools like CBD oil. Thankfully I have managed to avoid needing to use them very often.\nWhat is your favorite \u0026lsquo;hidden gem\u0026rsquo; tool? Nix and NixOS. The most magical thing about NixOS is that you can deploy stuff to a server and then you can undo it if it messes things up. I use it to deploy everything from my blog, my git server, my ebooks, my services and just about everything I can. It\u0026rsquo;s a shame the documentation is so terrible though. I\u0026rsquo;ve been working on making better documentation though.\nWhat hobby do you want to get into but haven\u0026rsquo;t had a chance to dive into yet? At this point the only hobby I haven\u0026rsquo;t gotten into yet is growing certain kinds of plants for my own private enjoyment. I\u0026rsquo;ve wanted to do it for a while but haven\u0026rsquo;t really found a place to do it yet. I may have more luck when my fiance and I finally settle down and get a house. Every other hobby I\u0026rsquo;ve wanted to play with is something I\u0026rsquo;ve been able to play with though.\n"},{"id":173,"href":"/interviews/cendyne/","title":"Cendyne","section":"INTERVIEWS","content":" An Interview With Cendyne # 12/30/2022\nThank you for taking the time for this interview Cendyne. Your blog at Cendyne.dev has a mix of crytography and tips for leadership and planning. Other than those things, what are your interests? What are you passionate about and why? Within tech, security is an ever evolving source of new things to see. I listen to podcasts every other day that mention the new details on where Lockbit affiliates are targeting hospitals, patch this and that, an analysis of some NSO malware, and so on. I do not run any Microsoft Exchange servers myself or for work, but given how often some of these companies are in the news, I can only sympathize with those that deploy their technology and shake my head at the creators. Furry twitter is fun, but Infosec twitter actually engages me each day. Today, you will find these people on mastodon and the wealth of information there is even more refined than before.\nOutside of all the work and tech stuff, I like wood working and modifying my home. There are still open cutouts in the ceiling all over from routing unterminated CAT6 between floors and rooms. I have also done electrical and I have an inspection pass card on my fridge like some children\u0026rsquo;s drawing to be proud of.\nYou present yourself online as a Lugia-Snake Naga, what\u0026rsquo;s the story behind that? I felt disconnected from many qualities of life before the pandemic. My professional interests morphed to an evolving curiosity in cryptography and security and I felt like I needed a fresh take on who I was. When I realized that I was wanting to have a new self, I began collecting any image I felt like I related to in its own album on my ipad. As a collage, it contained many unrelated pieces. Two or three months later I felt I had enough material and examined every piece asking myself \u0026ldquo;where am I in this?\u0026rdquo; I think I did a rigorous scientific observational study to find exactly what traits mattered to me.\nThen I found an artist who would tolerate a large amount of time between sketches, lines, colors, and so on and worked with them. Once the silhouette was figured out, I felt some sense of peace and the process went smoothly until we hit the colors. It took me two months to figure out the right colors and body patterns. Of course, I was still working, so I could only do this when I had the creative energy to expend. Once the colors were communicated, the rest settled and I joined the furry community again under a new identity. All in all, the creation process took seven months. Establishing myself took another eight. It helped that I could create silly telegram sticker bots to entertain.\nWhat are some of your favorite projects you\u0026rsquo;ve worked on? Ahaha\u0026hellip; If I answered that completely I would give out too much identifying information. Let me just say that exercising cryptography in C was an incredibly enlightening experience. At the same time I read A Graduate Course in Applied Cryptography to understand the theory behind the tools I was working with. I learned how incredibly light and generous my university course readings were compared to this book.\nInformation fatigue is real and this book would put me to sleep each day. Not because it was boring, no no, if a 900 page text book was boring, I would not have read most of the content. My head could only take so much information in one waking period. After a two hour sleep, I could manage another 25 pages and then do my own practical learning. Two years later, I am re-reading this book again while highlighting the practical content that I care about.\nMy favorite project was actually learning cryptography the first time.\nYou might feel similar, another favorite is my own blog. It is so customized now that it has its own tech-debt and legacy cruft to deal with. The syntax to write all the things I do is more like LaTeX than markdown.\n@sticker-left[cendyne/hi]{\rHello there from the @strong{other side}!\r} It is built upon another\u0026rsquo;s static site builder and at times it is truly frustrating. Not because of the curly braces or lack of syntax highlighting while writing, but because sometimes having a double quote \u0026quot; immediately after a } causes it to crash. It uses an incredibly powerful Parsing expression grammar (PEG) engine. Anything you see syntax highlighted on my site is a PEG I wrote to actually parse, tokenize, and highlight that code. Unfortunately it is fragile and literally impossible to debug except by brute force experiments of introducing one character at a time to the content being parsed.\nSome day I hope to dump the intermediate representation (IR) that it makes and port it into my own. I\u0026rsquo;d probably shell out to some syntax highlighting tool or service instead of write my own language parsers in the future.\nI can complain about it a lot, but like any hobby project, it receives a lot of love and at times allows me to feel incredible.\nYou\u0026rsquo;ve already written a bit about Twitter\u0026rsquo;s slow demise, and on your website you have links to Twitter, Mastodon, and Cohost accounts. What would you like to see be different or the same as Twitter wherever people wind up? I want to see more integrations. Tumblr mentioned adding activitypub on a whim and I believe that would be a wonderful thing if they can deliver. I have doubts that they will. I do have a cohost but I feel like I\u0026rsquo;m just shouting into a literal undiscoverable void there. Artistic web developers are sh*tposting a lot there and it is enjoyable to see a click-adventure doom demo or whatever when someone shares something creative. It has that whole myspace customization aspect in a post I guess. And probably the security ramifications of that too.\nBut I just cannot manage to consistently open Cohost. I am not a lurker (except on orange site), I yearn for mutual interaction and Cohost is not satisfying that for me. Whether mastodon or some other integrated / federated environment, I look forward to a place that is socially easy to navigate and to develop relationships. I think Mastodon is reaching some critical threshold where that is possible with \u0026ldquo;Infosec twitter\u0026rdquo; (in quotes as in the community), while \u0026ldquo;Furry twitter\u0026rdquo; is becoming fragmented instead.\nCould you imagine a Furry Google+?\nI have hopes that with integrations and a socially accessible platform, the fragmentation is undone to be like Twitter.\nFor now, we are seeing mostly text on mastodon. Turns out images are expensive and don\u0026rsquo;t load as well in this federated privacy respecting environment. Servers are often overloaded and I am frustrated at the choice of using the least power efficient web services language out there: ruby. The cost of running your own hardware is inaccessible to a lot of people. Less tech do-it-yourself people are finding out that media is challenging and resource intensive to upload, to retain, to transmit, to cache, and so on with a personal budget. Donating to a patreon to fund an instance is great and I think anyone on mastodon should support their host in this way, because caring for an instance is out of the question for 99.5% of humanity.\nTwitter felt cheap because it was ad supported. An online social experience without ads turns out to be financially and professionally costly. I would like these burdens to decrease over time.\nRecently, all of the BigTech™ companies have been laying off significant chunks of their workforce. What do you think the long term consequences of this will be? Gergely Orosz\u0026rsquo;s is a fantastic author if you want to hear about how it is affecting the people, see The Pragmatic Engineer.\nAs for the big tech companies, I believe that their innovation will stall. Not because they lack talented capable people. Rather, they removed the lubrication that enables their dysfunctional organization to continue forward with inertia. The amount of bullsh*t spread across the organization is now concentrated on those that remain. Instead of reevaluating and refining a mechanically evolved culture, it is easier to reduce scope by shelving projects like Stadia. It is like there\u0026rsquo;s some sort of invisible dynamic of ever growing bullsh*t that has to be overcome by throwing more people at it. And humans are expensive, so they are the first thing to go.\nI\u0026rsquo;ve heard that other companies are eagerly snatching up those who have been laid off. That the market is still hot but now there is no room for compensation negotiation. Companies will take advantage of this power dynamic to drop wages back down from the bubble created during the \u0026ldquo;great resignation\u0026rdquo; or whatever. (Which I should have joined in retrospect)\nSome argue that those who pick up these people will benefit greatly from the talent coming from big tech. I\u0026rsquo;m not so convinced. Contrary to the \u0026ldquo;data structures and algorithms\u0026rdquo; club that Google requires in every interview and the self superiority complex culture they are indoctrinated with, the people I see coming from big tech are not fundamentally better or more talented than outside big tech. In fact, I think they will drain these smaller companies for a while because they have been babied in a way at the bigger organization.\nI am not exaggerating when I say that I have seen people who practically have assembly line skills with a salary that is double my own. They figured out how to grind successfully in their lane. That grinding does not imply growth in their skill-set, it is dealing with bullsh*t specific to their employer. Outside of that lane, they really cannot contribute and the gaps they leave are why the SDLC infinity logo exists.\nHow many Stickers of Cendyne do you have? Over six hundred.\nGiven you have so many, you\u0026rsquo;ve clearly paid for a lot of custom art. There\u0026rsquo;s a strong likelihood that some of it was used in training of one of the AI art models. How do you feel about that? First a digression. You know how some artists will refuse to do some species like birds and synths? Many choose to because they lack the experience to produce a work with that type of subject at the same quality that they do for other subjects. They are trained highly on dogs, house cats, and adding details like a second set of ears aren\u0026rsquo;t too cognitively difficult for them.\nI have seen the same thing happen in AI art. Outside all the data that it is trained on, that it has \u0026ldquo;experience\u0026rdquo; with, it rarely succeeds in making something desirable.\nLet\u0026rsquo;s say there\u0026rsquo;s a neural node or a label for \u0026ldquo;feline\u0026rdquo;. There isn\u0026rsquo;t but for the sake of argument, let\u0026rsquo;s say there is. If we ingest a Cendyne image into the training data, would it recognize this looks like a cat and say the \u0026ldquo;Cendyne\u0026rdquo; label also increases the \u0026ldquo;feline\u0026rdquo; neural network strength? No, Cendyne does not have any cat features. Likewise, I am inclined to believe that there are so few good pre-existing training data that it can align \u0026ldquo;Cendyne\u0026rdquo; against for it to be successful.\nMaybe if I had 78,000 suitable images to train a model on \u0026ldquo;Cendyne\u0026rdquo;, it would develop an understanding to inject Cendyne into things successfully. There might be ways to work around this, like taking a high resolution vr model and doing all sorts of poses and expressions while capturing around 60 unique angles every second. Twenty two hours in VR would be within the realm of achievable effort.\nThis may accidentally over train it on the style of the model artist, rather than the character itself. I see Jesus come up easily in different styles when I ask stable diffusion to do so, the styles of his rendition are so varied. But when I ask for Obama, I always get a photo appearance of his likeness.\nHowever, I lack confidence in it unambiguously representing Cendyne while remaining flexible in how it injects Cendyne. In other words, I don\u0026rsquo;t think that it will ever achieve the flexibility of Jesus and will either be between the overtrained state of Obama and something that looks incomprehensible with some facets of Cendyne\u0026rsquo;s appearance.\nYour question was how do I feel about my online likeness being used in training data.\nI am curious and skeptical. I am not worried about impersonation or having my online likeness used like a deepfake for the reasons above.\nIf someone thinks my design is cool and wants a blue and orange lugia-naga thing they can commission an artist to make it. They don\u0026rsquo;t have to ask me for permission.\nDo you think it\u0026rsquo;s ethical for people to use art they\u0026rsquo;ve commissioned to train a custom model for generating more art? We\u0026rsquo;re stepping into some copyright ground here. Most people do not also purchase the copyright to an image and therefore should not use that image in places like business cards, stickers, merchandise, and so on.\nIs introducing another\u0026rsquo;s copyright\u0026rsquo;d material into a training set filled with other\u0026rsquo;s copyrights ethical? Ask OpenAI and Microsoft how that lawsuit is going for them. When the model regurgitates overtrained data verbatim, it is unambiguously reproducing another\u0026rsquo;s copy. A good model should not be overtrained. Could a good model, which is not overtrained, and does not reproduce verbatim content, be useful and not step over another\u0026rsquo;s copyright? I think so.\nThen you might prompt, \u0026ldquo;Is copyright a proxy for ethics\u0026rdquo;, and I\u0026rsquo;d say no. So why am I talking about copyright? It\u0026rsquo;s more about the verbatim part really. Tracing artwork and posting it online is shamed and not cool in the furry community. This is where verbatim content is retained and that is where many agree on ethics.\nBut there is no, and should be no push back on taking inspiration to ideas, poses, character features, and so on. Most of my stickers are not originals. They are not traces, but they do have an origin that often references another\u0026rsquo;s artwork and another\u0026rsquo;s idea. I\u0026rsquo;ve not had someone once come to me and complain about how my sticker looks like theirs. Instead most people feel excited that I joined the club of having a plastic bag on their head. What are your thoughts on ChatGPT and it\u0026rsquo;s ability to generate code? I\u0026rsquo;ve heard a variety of opinions. Academic institutions are fearful that students will use ChatGPT to cheat. Managers are excited that their reports might be more productive. Peers are worried that they are going to spend more time reviewing other\u0026rsquo;s code. CTOs are excited about the idea of having literally cheaper \u0026ldquo;Junior Engineers\u0026rdquo; on the team through ChatGPT.\nIt is a really capable piece of software and its ability to generate code has been proven in small cases. See Solving Advent of Code 2022 with ChatGPT.\nI was thinking about writing about this later: ChatGPT has been used to ghost write dangerous and harmful lies about cryptography and authors like that only take it down after being ridiculed for the harm they do to their brand, not to society. The author admitted they did not even fact check what ChatGPT wrote and that most of their blog content was made by ChatGPT lately because SEO and brand growth was their priority.\nI am worried we\u0026rsquo;re going to get back to a world where IBM management ranks the performance of their workers based on how many thousands of lines they produce a week and developers are incentivized to use ChatGPT to integrate unsafe and dangerous code in production to meet senseless quotas. Because suddenly someone who is competent and carefully prompts and code reviews along the way uses ChatGPT and scales their code production by 40x and management asks \u0026ldquo;why can\u0026rsquo;t we have everyone be 40x as productive? Let\u0026rsquo;s add a quota that this is the new excellence we strive for.\u0026rdquo;\nThis is how you get tickets from manufacturing QA in Taiwan (I am not making this story up) that say \u0026ldquo;The red light comes on when the power is connected.\u0026rdquo; Well yes there is only one power light indicator and it happens to be red. So everyone\u0026rsquo;s time is slowed down because of quotas and key performance indicators that are not aligned with actually delivering something useful. It just makes everyone look busy. Remember the bullsh*t I mentioned earlier? It\u0026rsquo;s this kind of stuff.\nLastPass recently decided to become a hard pass due to massive breach. Do you think consumers should trust storing their password vaults in the cloud? Remember how I said a small fraction of humanity is willing or even capable of running a mastodon instance? Correctly and safely maintaining an offline password vault is quite similar.\nWe need a solution that works for forgetful honest people who lose their phones in an Uber car after getting tipsy with friends, who get a drive-by malware from an ad on fandom wikis, and yes even those that want to pay money for a picture of a rock on the blockchain.\nLook around in the supposedly paranoid \u0026ldquo;crypto twitter\u0026rdquo; space and you\u0026rsquo;ll constantly see them blaming the user for getting scammed, for having their nazi apes stolen, all while begging for help and understanding. They are humans too and we need to recognize they are having the same problems we are.\nAlso:\nLook, technology can solve problems, but it can create so many more problems. We need solutions that work for the most people with the best usability. For passwords, that is a cloud vault.\nI absolutely believe that most people should use a cloud password vault. The apple one is good. The google one is good. I used apple for a long time, but I use chrome most of the time because the web is fragmented again on technology support. Guess what?\nApple will not make an integrated password manager for chrome. Google will not make an integrated password manager for safari on Mac or iOS.\nSo we, as users, are stuck between the politics of two mega companies and have to go for another provider. Unfortunately, many businesses do not care about doing cryptography correctly and do not care about their security being destroyed month after month because it does not affect their bottom line. Businesses only care about the law (e.g. CCPA, CPRA) when there is a risk to their bottom line which they could use elsewhere. To mitigate that risk, they will hire a lawyer to council them on their policies and operations. Those enterprise users are the source of all the megabux that actually pay for their \u0026ldquo;profit center\u0026rdquo; sales teams to grow the company through a big \u0026ldquo;flywheel\u0026rdquo; strategy. It costs a lot of money, time, and human effort (which is also the previous two) to change away from a vendor. As me how I know. Actually don\u0026rsquo;t.\nSo the companies with the best security to protect consumers fetter about in their tribal politics because ultimately the security service they provide to individual people is being given for free.\nSo maybe a better model in the future is something like mastodon where the clients are studied, audited, and well understood by security professionals and anyone can host theirs and their friends data. Or even store it on github or google drive or iCloud, it does not matter. If I ran a password storage service on cloudflare KV for people, most would fit under 20KB I think and cost me less than a penny per friend. And if someone else doesn\u0026rsquo;t like a client but does like the backend, they can find another or create their own.\nThe actual service costs to host encrypted password data is miniscule.\nWhat matters is having carefully vetted, carefully tested, and active offensive analysis of security tools used by people. A passwordless future is coming, but there will still be passwords.\nThe push to kill C and C++ has been getting stronger in recent years, with Rust, Zig, Go, Nim, Odin, V, Nelu, and many more. Do you think C and/or C++ should be getting replaced in the first place? I\u0026rsquo;ve written plenty of C. I actually like C more than C++. The language is simple enough that I can interpret it in my head and if I need some clarity I can dump in some printf lines in there and run it to confirm or improve my understanding.\nBut then I come back a month later and I read it and I realize. \u0026ldquo;Oh sh*t, if I had a fuzzer on this, it would have spotted this out of bounds access.\u0026rdquo;\nThe problem with these low level languages is that you can become quite confident in your work only to be oblivious that you\u0026rsquo;re gargling forks. Don\u0026rsquo;t try this at home, but if your garbage disposal gargles a fork, it makes bad sounds. When you try to clean it up after, you may cut your hand on sharp metal inside.\nThe industry is finally realizing that these issues are avoidable. In Security, Cryptography, Whatever: David says these unsafety issues are consistent across the board for critical applications.\nAnd it\u0026rsquo;s basically it\u0026rsquo;s 65% [caused by memory un safety issues] and it holds across Android. It holds across iOS. It holds across Chrome. It holds across windows. It holds across Firefox it\u0026rsquo;s CSS sub system. - David Adrian on the Security. Cryptography. Whatever podcast Rust, Zig, even Swift show that we do not have to give up performance to have safer applications.\nLogic bugs will never go away. But these bugs can.\nThe same problems happen in cryptography too. The how many days since a jwt alg none vuln counter hit around 200 last I checked. But look at the time of writing it says 9 days!!! Professional cryptographers hate JWT yet we still keep using it. C is the same. There is so much inertia and friction to change.\nThe technology choice is a problem we can move away from.\nWe need greater tooling to succeed here. To fully adopt these other languages we need thoughtful, supportive, familiar, and effective systems around these tools.\nWhat features of the new contenders are you most interested in? I think the Language Server idea is the most incredible feature we have.\nIt seems like such a meta thing to get excited about. Why not the risk reduction on memory safety? Because my goal is to solve a problem and hopefully not make mistakes. I\u0026rsquo;m not excited to think about the mistakes. But I am excited when I have a useful integrated tool that can assist me with something that is unfamiliar.\nUnlike C, Rust has a lot more type and namespace stuff going on and it does not all fit in my head. Inline access to stuff made in the language is so important to be productive and to make competent decisions. If I have to look through a generated javadoc website one more time to get my job done I\u0026rsquo;m going to flip a table.\nDo you think they go far enough or are there bigger changes you\u0026rsquo;d like to see to the languages and the tools we use? All this functional, imperative, whatever you want to label these collections of structured text, are still not accessible to most of humanity. Recall what the most used language out there is: Excel formulas.\nAnd now we got all that no-code stuff going on, but so far it\u0026rsquo;s looking more like VC-backed hype than something useful in isolation. The low-code stuff is interesting. In my professional experience, we still have to side load some developer-made adapter to solve the sharp edges of making it useful. But the low / no code side is more accessible to operations and IT so they can reconfigure on the fly with less consequences. But like any system that gets changed, some invariant is no longer met and something breaks so ultimately a developer has to step in an examine what\u0026rsquo;s happening.\nIf you\u0026rsquo;re ever interested in a neat book, check out Flow-based programming by J Paul Morrison. It has influenced how I think about and analyze data and the flow of information in existing applications (even across microservices).\nI am more convinced each year that our specialty is not dumping structured words on a keyboard, but understanding systems in the real world where we lie to ourselves in saying that abstractions matter. A language environment that helps us understand the system is what we need.\nIf you could go back and redesign any part of how the internet works, what would you change? If someone ever tells you that we should have stayed with Token Ring, they have to be joking.\nHonestly the tech we have is mostly fit\u0026ndash;in the biological sense. It has survived the test of time and deployment in the real world and we should recognize that.\nBut if I could go back, I would plead for more emphasis on confidential and privacy respecting technology. Remember DNS? It\u0026rsquo;s been unencrypted since inception. DNS was invented in 1983. We did not even have RC4 (which is broken) until 1987. They did not have the technology to produce confidential protocols at the time or at least could not with the US Government having the silly idea that math is a weapon and should have export restrictions.\nSo in the absence of technology that could enable confidential communications back then, I would ask for \u0026lsquo;How would you design this so it could be confidential in the future?\u0026rsquo; Unfortunately they would not even have the experience of protocol downgrade attacks to consider it competently.\nThen we get into cryptographic agility, which is its own can of baked beans that a dhole has opinions about.\nAt this point I have to shrug and say: the best that could have happened did happen with the knowledge we had at the time.\nMaybe we should have had IPV6 actually win? That would be nice.\nWhat does your work environment look like? My true professional work environment is a walk in closet that I took the door off and repurposed into an office. I use a 4k screen and have some nice desk speakers with one of those fancy XLR microphones on an articulating stand. My webcam is also on a stand. When I am on zoom calls, it is literally in front of the screen instead of above the screen. My office is under construction so I have been using the basement until I have the energy to resume doing networking and electrical.\nMy personal environment varies. Sometimes I work on the couch (as I am when I type this) where a projector casts something in the background to sate my excess curiosity. Otherwise I\u0026rsquo;d be looking at twitter or something and you know how productive that is.\nI have three personal work desks, in addition to the one I use for professional work. It helps to change things up, be it an external screen, tilted stand, speakers, or whatever when I feel restless or prone to some activity that distracts me from my intended goal.\nBut at each place of work, besides the couch, I use an ortholinear keyboard and bring my yubikeys. I have four of these keyboards now. I just wish they were more mechanical. A dutch friend introduced them to me in 2011 and I have used them since.\nIf you say \u0026ldquo;What about an ergodox?\u0026rdquo; I have one of those and it chafes my fingers. I need something low profile.\nIs there any skill that you spent too much time developing that you wish you hadn’t? Not really. I live a life where my time is very goal oriented. Is my goal to relax? Watch anime, read a book. Is my goal to be proud of something in my home that I use every day or every week? Learn wood working.\nWe\u0026rsquo;re all different, we all have different ideas of what \u0026ldquo;fun\u0026rdquo; means. Seeing one of my roommates in university fail the same class twice in a row because they were addicted to league of legends convinced \u0026ldquo;fun\u0026rdquo; should be exclusive to \u0026ldquo;addictive.\u0026rdquo; In my mind, Twitter is not fun, but it is addictive. Games have a propensity to be addictive, so I avoid them. I really do think my observations of said roommate permanently affected my willingness to engage in video games.\nI can say that I am unable to find any regret in how I spent my time towards the skills I have. I do think I could balance things to develop more social connection with people though.\nWhat’s the most important skill that you’ve taught yourself? A meta answer: the skill to teach myself a skill despite executive dysfunction.\nI grew up in an environment where my peers were not expected to learn anything. They\u0026rsquo;d be financially fine collecting and selling bull semen. I am not joking. That was not the future I wanted, so I took control of it myself.\nI taught myself how to program without a book when I was twelve. Theoretical cryptography though: I needed a book for that.\nWhen it comes to focusing on something, I find it incredibly difficult. Some people can rely on medication to help them in this area. Unfortunately I cannot.\nThe second most important skill I have is to consciously recognize when something engages me so I can then plan intentionally with it in mind.\nWhat do you do for fun? Any books, movies, TV shows, etc. that you’d recommend? According to kindle, I have read 56 books this year. They\u0026rsquo;re all 200 to 400 page light novels.\nIf an anime really resonates and has a powerful story behind it, chances are that a light novel is source material. This may sound out of character, but I really enjoy (and in fact set alarms for) the book series: Ascendance of a Bookworm. It is way more than what the cover might suggest of \u0026ldquo;a cute little girl that likes books.\u0026rdquo; This is a character that would probably dismantle a mafia over burning down a library through sheer economic and technological prowess.\nWhat’s the biggest ‘Oh Shit’ moment you’ve ever had, be it one you caught in time or not? I know I have had them. I know I have prevented some of them. But I also know that I have a mechanical tendency to forget them. Sorry but the memory for that has been garbage collected.\nWho are your biggest inspirations? What creators do you think are way to underrated and deserve a shout out? I\u0026rsquo;d love to answer who inspires me, but I\u0026rsquo;d rather not be correlated with leaked security questions from data breaches.\nObviously Soatok has influenced me from afar and now up close. He deserves a shout out. Xe Iaso too. Both influenced my decision to join the tech blogging scene.\nI know River of Stars in person and she deserves all the love I can send in her direction. What’s the best advice you’ve ever received? Worst? The best advice is to listen to others and not to interrupt them. Everyone wants to be heard. I have a tendency to see two or three steps forward in a logical discussion, but preempting the transmission is not healthy to do and I may be wrong.\nThe worst advice is the financial advice given to me from my own employer.\nHow do you stay motivated to keep doing cool things? I have bright and dark reasons to keep doing cool things.\nI\u0026rsquo;ll share the former at least. My goal oriented nature requires that I always have a goal to feel successful. I feel happy when I achieve the goals I set. Being happy is a good thing.\nWhat hobby do you want to get into but haven’t had a chance to dive into yet? Would you believe me if I said I wish I could make my own stickers too?\nUnfortunately, art requires an equivalent amount of practice that programming does and it is incredibly hard to do self critique without feeling emotional about it. Whenever I draw something, I feel terrible, I judge it against the creative strengths of my peers. Honestly my wood working kind of left me feeling like that too, but its functional nature smoothed that over.\nBut if we were going into less self-centered hobbies, I suppose doing something like lidar scanning 3d particle maps of interesting locations would be cool. Like just go hike to the top of a local mountain, find a spot with purple colored rocks and moss and let the machine go, then later peek inside and relive the sights, sounds, and scents of the peaceful location. Others might enjoy that too. Might be a bit minority report though.\n"},{"id":174,"href":"/interviews/kell/","title":"Kell","section":"INTERVIEWS","content":" An Interview with Kell Bengal # 7/27/2021\nThank you for taking the time for this interview Kell. I know you work on robots, and teach others to do so as well, and are from the continent where everything wants to kill you, but I don\u0026rsquo;t know much else: How would you describe yourself? What are you passionate about and why? I would describe myself as an engineer, first and foremost. I put great stock in my identity as a professional problem solver, and rather view engineers and anyone who uses scientific knowledge and principles to solve problems as being the plank that stands between civilisation itself and oblivion. While that may sound melodramatic, it is because of engineers, technicians, doctors and scientists that we have medicine, power, factories, modern agriculture, and autonomy that provides for our way of life. Commensurate with that, I feel a great responsibility to use my skills and talents for good or for awesome, both to improve quality of life, reduce the impact of humanity, and to make the world a little more interesting. I\u0026rsquo;m passionate about building cool things, solving problems, advancing big cat conservation, and advocacy for LGBT* folks.\nWhat are some your favorite projects you\u0026rsquo;ve worked on? By far, my favourite project is my bipedal robot. I\u0026rsquo;ve had a love of walking robotic war machines since I was quite young and that passion has never waned. I\u0026rsquo;m slowly putting together giant walking robot with which to crush my enemies\u0026hellip; at 1/50th scale, due to budget limitations. As a project, it combines difficult control theory, demanding electrical design, hard mechanical design, and an absolutely horrendous integration problem. It\u0026rsquo;s a hell of a challenge and I\u0026rsquo;m loving it.\nWhat part of what project has been the most difficult and/or most rewarding thing you\u0026rsquo;ve ever worked on? In 2010 I co-founded a drone company developing a 25 kg fully-electric ducted fan drone for carrying a 5 kg payload for an hour. By far, that has been the most difficult work I\u0026rsquo;ve ever done; it pushed the very limits of what contemporary technology was capable of, and we resorted to contracting specialists in aerodynamics, materials and electrodynamics in order to make a solution happen. When it flew, it blotted out the sun, and it was terribly impressive to see overhead. Also, each prototype cost $0.25M, so you held your heart in your hand each time one left the ground. It happened to be the first time I\u0026rsquo;d managed a whole team of engineers myself, so I not only had to deal with technical challenges, but also management, logistics and ordering, which I\u0026rsquo;d never had to tackle to quite a scale before. Was it rewarding? Well, I thought it would be, right up until the company folded due to events it couldn\u0026rsquo;t control. I really thought it would make me a multi-milionaire.\nWhat are some lessons you learned the hard way for how to teach engineering topics to others? I have a list of engineering maxim\u0026rsquo;s that I have slowly accumulated in my time as an engineer and educator. Every single one of them is written in blood from things that have gone wrong in the past, or challenges I\u0026rsquo;ve overcome. The wisdom of most of them is self-evident. Pauline\u0026rsquo;s Laws:\nPrototypes are expensive; experiments are expensive; experimental prototypes are very expensive.\rIt takes at least three prototypes.\rThe most elegant solution is often the correct one.\rAny obvious solution to a research problem has either already been tried or isn’t a solution.\rSimple, simple, simple; robust, robust, robust; test, test, test.\rA good engineer is worth three ordinary engineers. A bad engineer is worth negative two engineers.\rBe a fucking professional.\rEngineers thrive on good management; accountants and administrators are not managers.\rDo it right again the next time.\rIf your functional design is not sexy, it’s not functional enough.\rOnly solve one impossible problem at a time.\rCreativity isn’t using every crayon in the box.\rDesign to build less.\nWhat things to really wish other teachers would stop doing/teaching incorrectly? There is an idea that getting students building early in their engineering degrees will get them hooked and engaged and thus improve retension and investment in their studies. While that might be true, it has the added problem that it gives students the erroneous idea that one need not think deeply or critically before designing a solution to a problem. This results in engineers whose first instinct is to start hacking away at the first approach that pops into their heads, without truly understanding the nature of the thing to be solved. There are relatively few problems that require an engineer but which do not necessitate substantial contemplation prior to crafting a solution. I see it in my fourth year design/build class. I frequently will show up to the last day of testing with a system I put together the night before, but based on all the intuition I\u0026rsquo;d gained from watching how the teams were tackling it. Very often my night-before \u0026ldquo;Dark Horse\u0026rdquo; solution will outperform the overly complicated or hacky attempts worked on for a whole semester.\nWhat languages and frameworks do you like and dislike for embedded development? Why? I program in C because C is nice and close to the bare metal, which is crucial for dynamical control systems. I know that it lacks many of the comfortable resources and capabilities of more modern languages, but every target has a GCC compiler and almost everyone knows C. It is fairly straight forward to convert our control designs developed in Matlab M to work in C. Outside of the embedded sphere, I also code in Matlab M, as mentioned, and also Python.\nWhat technological advancements throughout your time as an engineering nerd have made the biggest difference to your everyday work? What do you miss about the \u0026ldquo;old way of doing things?\u0026rdquo; Arguably, the advent of drones has been the largest, but only because that\u0026rsquo;s my area of expertise. I have watched them evolve from being research curiosities to a whole field of study, all the way to being something you could buy off the shelf of a department store. It\u0026rsquo;s great not having to hand-make rotorblades any more, but there was a meditation to it and it really made you value your vehicle to fly something where every single part was literally hand-made.\nHere in the states, electrical and mechanical engineering are seen as a field dominated by \u0026ldquo;Traditional Values\u0026rdquo;, has that been an issue for you at all, being that you\u0026rsquo;re trans? Not in the least. I\u0026rsquo;ve been thrilled by the acceptance of my peers. That said, we\u0026rsquo;re academics so we tend to be very progressive people who judge you on the content of your moral character and not the colour of your skin, the god you pray to, or who you love or how. Even as a professional, I don\u0026rsquo;t hide being transgender, but nobody has given me any trouble to my face. It helps that I\u0026rsquo;m very good at what I do and widely respected, I guess.\nYou\u0026rsquo;ve got a P.H.D, do you think pursuing that level of education is worth it? A PhD is one of those things that people do for a variety of reasons, some more valid than others. Some people have a specific goal of being a professor, and the only way to do that is with a PhD. Others want to do the sorts of jobs that require that level of qualification (eg. nuclear systems technician, semiconductor physicist). Others still are deeply in love with their topic and find the PhD as a way of engaging with it further, on a deeper level than could be achieved in the undergrad or in industry. Some people feel obliged to get a PhD to somehow prove their intelligence, or just like the idea of having \u0026lsquo;Dr\u0026rsquo; in front of their names, or simply had nothing better to do than continue studying. I, personally, am deeply in love with my topic (though I certainly also had something to prove), and I love the sort of work I do now - for me it was absolutely the right chioce.\nWhat very stupid mistakes do you often see very smart people make that drive you mad? I\u0026rsquo;m surrounded by very smart people, as a matter of course, both within and outside of the university. Perhaps the key failing is in losing sight of the limits of one\u0026rsquo;s own competence. If you are a smart person, you put a lot of stock in being right about things - it\u0026rsquo;s probably how you earn your wage. Usually, you are certainly right about your particular topic, and very often right about topic areas surrounding it. However, it\u0026rsquo;s easy to generalise that confidence in your specialisation for confidence in other areas in which you may not be fully informed. While it might sound like arrogance or hubris, really it\u0026rsquo;s just a careless mistake of scope creep: without training or special grounding in a topic, one may make pronouncements on a topic with limited awareness using the same casual intuition that operates flawlessly in a domain where one has true mastery. For this reason, I very often bring up the limits of my competence as a \u0026lsquo;ring fence\u0026rsquo; for any conversation near the edges thereof, in case I should risk crossing the border.\nHow has the global silicon/part shortage affected you? Frustratingly, the Bosch B**055 IMU family and ST STM32F772 microcontroller family have been difficult to source. We\u0026rsquo;re buying cheap, older flight controllers to salvage parts from.\nWhat\u0026rsquo;s the most important skill that you\u0026rsquo;ve taught yourself? Synthetic thinking. When solving a problem, it is not enough to optimise for a single problem, a single attribute or a single parameter. For truly excellent design, you must optimise a myriad of (often conflicting) design priorities in a way that is elegant, compact, cheap, reliable and rugged. Through years of engineering and hobby design projects I have gotten very good at thinking outside the box and challenging assumptions. The most valuable part of this is to question everything you think you know about the problem, the requirements, the limitations and the goals. Push every boundary of the envelop and see what moves. Once you truly know what is important, you can often cut to the heart of the problem and attack the kernel of the underlying engineering challenge. It\u0026rsquo;s rare to meet someone else who does this implicitly.\nIs there any skill that you spent too much time developing that you wish you hadn\u0026rsquo;t? Politics. I\u0026rsquo;ve been described as the best politician in the engineering faculty, and I wish I did not have to have that skill. While valuable for surviving the cut-throat academic environment, I would much rather have put those brain-cells to work finding better ways of making cars fly.\nWhat\u0026rsquo;s the biggest \u0026lsquo;Oh Shit\u0026rsquo; moment you\u0026rsquo;ve ever had, be it one you caught in time or not? Well\u0026hellip; I once destroyed a $2000 IMU from CSIRO, but I managed to get it fixed without anyone really knowing, so I don\u0026rsquo;t know if that counts. I\u0026rsquo;ve had a few drone crashes and unscheduled disassemblies that were expensive, but not exactly disastrous. I\u0026rsquo;ve been blessed to avoid any truly dangerous mishaps. Perhaps the one that rises above the rest was one time at a start-up, we took 8.5 kg of lithium batteries out of storage at our workshop (which was the garage of a three story house we were renting), and they spontaneously ignited. I was asleep in an upstairs bedroom of the house when the fire alarm went off; the wife of one of the other founders alerted me that there was a fire and I ran downstairs to respond to it. Nothing puts Lipo fires out. The only solution was to open the doors to the shed, drag the batteries (which were on a carpet tile) out onto the driveway and let them smoke off. The house was undamaged by the fire, but the smoke caused a mess - it was $​50k to clean it all. However, it only occurred to me afterwards that I\u0026rsquo;d walked into a smoke-filled room with no face mask, no breathing apparatus, no training, no idea of what I was facing\u0026hellip; I didn\u0026rsquo;t realize I\u0026rsquo;d put my life on the line for it. I feel I jumped the right way, but it was a sobering thought.\nWhat do you do for fun? Any books, movies, TV shows, etc. that you\u0026rsquo;d recommend? I engineer hobby electronic toys, particularly watches. I enjoy the works of Peter F. Hamilton, Iain M. Banks and Philip K. Dick. My favourite film is The Hunt for Red October.\nWho are your biggest inspirations? What creators do you think are way to underrated and deserve a shout out? My hero and personal savior is Kelly Johnson, of Skunkworks fame. He was regarded as a brilliant \u0026lsquo;intuitive engineer\u0026rsquo; and I\u0026rsquo;m inspired by his preparedness to cut the crap and do what it takes to solve problems and deal squarely. Nobody adequately appreciates Gustav Whitehead, Elmer Sperry, Gus Grissom, Michael Collins or John Young - the first astronaut to smuggle a sandwich into space.\nWhat\u0026rsquo;s the best advice you\u0026rsquo;ve ever received? Worst? The best advice I\u0026rsquo;ve ever received was given to me by myself: when I was feeling intimidated by what I\u0026rsquo;d have to do to get into engineering school, I told myself \u0026ldquo;don\u0026rsquo;t be afraid of hard work\u0026rdquo;. I realised this was a weakness of mine, and I sought to use self-discipline to turn it into a strength. I\u0026rsquo;ve never shirked working hard to achieve my goals. The worst advice I\u0026rsquo;ve ever received was \u0026ldquo;it doesn\u0026rsquo;t matter what your first job out of university is - you can make your way to do whatever job you want in time\u0026rdquo;. That\u0026rsquo;s bullshit and I encourage anyone who receives that advice to disregard it. Life is short, and you should always be working to your goal. Even if you can\u0026rsquo;t take a direct step, have a plan where each step gets you incrementally closer, and where a pathway exists between where you are now and where you want to be.\nWhat is your favorite \u0026lsquo;hidden gem\u0026rsquo; tool? I use an IDE called MikroC for coding PIC microcontrollers in C. It\u0026rsquo;s a buggy, frustrating and awful platform, but it makes an otherwise difficult problem comparatively easy. Alas, the modern advent of HAL libraries will probably render it obsolete, but for now it\u0026rsquo;s keeping me going.\nMy favourite hardware tool is actually a set of Align metric hex-drivers. They are convenient, ergonomic and reliable. I\u0026rsquo;ve used them at three different organisations on two continents, and I doubt my current set will be the last I ever own.\nDo you have any obscure hobbies? I enjoy metal casting and singing opera.\nWhat hobby do you want to get into but haven\u0026rsquo;t had a chance to dive into yet? Uplift of non-sentient lifeforms. I expect I will need to crack the longevity problem before I have a chance to tackle that one, though.\n"},{"id":175,"href":"/interviews/loial/","title":"Loial","section":"INTERVIEWS","content":" An Interview With Loial Otter # 9/23/2018\nIntroduction:\nI\u0026rsquo;m Matthew or LoialOtter, a crazy person up in western Canada who likes to make stuff. I work at Kron Technology as an engineer mainly in FPGA, electronics design and hardware design.\nI don\u0026rsquo;t have any credentials except a certificate in baking and pastry arts. I\u0026rsquo;m self-taught mostly due to not being ever able to afford going to school. I suggest others do when the have the opportunity but it isn\u0026rsquo;t absolutely required.\nObviously working at Krontech has been a super cool experience of yours that has probably dominated the majority of your recent work, but what projects that you\u0026rsquo;ve done outside of Krontech did you have the most fun working on or do you find the most interesting? My passions all lie around the crossover between digital and physical worlds. I love motion control and am absolutely thrilled when I can make some code move something or control something in the real world.\nA few years ago I attempted to make my own 3d printer company and designed a motion platform that was rigid and quite a bit larger than what was available at the time. It was also very high speed to handle the greater build areas. Unfortunately the business ran out of money before I was able to get the unit to market; a mistake on my part. The excitement, though, of getting a machine partly built and get it working through it\u0026rsquo;s own control loops is just\u0026hellip; amazing.\nI\u0026rsquo;ve done many other things both through work and out on my own; I\u0026rsquo;ve made PLCs cycle engines in cold weather to keep heavy equipment ready to run and operating in extreme conditions. I\u0026rsquo;ve hacked cars and reverse engineered the protocols in use to adjust the handling of all-wheel-drive systems. I\u0026rsquo;ve done heavy adjustments to my laser cutter, the small mill we have at my house and stuff like that as well.\nThe mill is another great example. The first thing I cut on it was the mounting brackets for it\u0026rsquo;s own steppers to CNC it. I had the thing partly CNC\u0026rsquo;d within a week of getting the mill installed and fully working within three weeks (Z-axis was a little more tricky). I continued on to add a fourth axis and then rebuild the fourth axis using another way when the first one proved too weak.\nThe most interesting part of any project is getting through all the tough design challanges and getting the hardware proven. The least-liked, for me, is software. I dislike it enough that I\u0026rsquo;ve always been searching for a way to write scripts that do the tieing together of the internal parts and have finally found something that nearly covers what I want: micropython. I\u0026rsquo;ve been working on a software replacement for the Lerdge-X 3d printer control board, a cheap board from china that\u0026rsquo;s surprisingly well built. It\u0026rsquo;s running micropython but behind the scenes I want an interrupt driven lowlevel control system that\u0026rsquo;ll manage the actual movement and thermal loops. This will allow me to quickly hack the board into what ever type of robot I want, use what ever control language I want and yet still have a reliable control loop that\u0026rsquo;ll properly handle being starved for motion updates. You can follow that at https://github.com/LoialOtter/micropython and https://github.com/LoialOtter/Open-Lerdge-X\nWhat part of what specific project has been the most difficult and/or most rewarding thing you\u0026rsquo;ve ever worked on? Hard to say the most difficult and/or rewarding. There was a very good one when working on the all-wheel-drive system where due to a very small detail in the readout protection on STM32 devices we weren\u0026rsquo;t able to replace the boot code on devices that were already shipped. It was a very troubling issue as the bootloader I had built was causing check-engine lights on very select vehicles (ones that I didn\u0026rsquo;t test on). The issue was that the bootloader wasn\u0026rsquo;t passing CAN traffic within the window given for connection before the final software started. The fix, of course, was to patch the new bootloader but due to the first 4KB being locked down and non-erasable without bricking the device, it wasn\u0026rsquo;t possible to make a payload image that\u0026rsquo;d just reflash the CPU.\nThe solution was a little unusual but worked well enough. When stepping through the original bootloader I noticed that a function used to clear ram on the device was located outside the 4KB block over at about 7.6KB. I wrote a special C function that had inline assembly which reset the CPU manually to a known state, set up the interrupt table so it was at a different location and then fiddled the stack both so the return from the function would call reset and it would unwind the stack to zero when doing so.\nIt took about a month to find a solution, develop the return function and get through all the nitty gritty bits and testing. The result was updating the bootloader on all the devices in the field, fixing the issue as well as making the system a little more resiliant to similar problems.\nWhat in general as you work on something causes you the most issues- that is what reoccurring problems do you / have you had? This could be related to your field or how you work. Getting going on software. I have way too many projects that are sitting around with full hardware almost working but the inertia of getting going on the software is easily the most difficult hurdle even though it\u0026rsquo;s often one of the simplest. The issue is sorta a form of analysis paralysis; deciding how software is to be laid out is one of those things that changes how software works for the entirety of it\u0026rsquo;s life. The first few lines of code usually defines the rest of the whole thing and I\u0026rsquo;ve written the wrong first few lines so many times that it scares the crap out of me.\nWhat is your favorite \u0026lsquo;hidden gem\u0026rsquo; tool, this could be software or hardware (or say both) MicroPython (not Circuitpython, sorry). It\u0026rsquo;s totally OP in getting past that initial difficulty as long as you don\u0026rsquo;t have to write underlying systems for it. On STM32 devices, especially, it\u0026rsquo;s amazing as you have a USB interface that offers a filesystem as well as the REPL, a command line interpreter for python. The filesystem is where your code will end up once it\u0026rsquo;s working. It\u0026rsquo;s saved in source form and compiled on load to bytecode or machine code depending. The overall speed of it is amazing; the bytecode is fast and works with nearly everything within Python 3.4 while the machine code types are way faster but lack the ability to allocate new memory and such (so ints are a little weird - don\u0026rsquo;t go past 28bits in machine code).\nREPL is utterly amazing. It allows you to simply open up a console and start poking at the CPU. As there\u0026rsquo;s a memory mapping system (machine.mem32/mem16/mem8) you\u0026rsquo;re able to write drivers for hardware in python and just get the whole system up and running very quickly.\nI\u0026rsquo;ve made a watch that\u0026rsquo;s been shown some around including part of the interview on the Amp Hour a few months back. That watch runs micropython even to the point where the display is being driven by DMAs and PWMs both fully set up in python. The watch took a day to get all the software up and running on including making the drivers for the DMA, timers, the accelerometer on the unit and i2c parallel expander as well. By the end of the day I had the buttons all working, it showing the time when you tilted it to the right angles, even was doing the whole charge regulation and such.\nWhat is the most valuable lesson you\u0026rsquo;ve learned \u0026rsquo;the hard way\u0026rsquo; when it comes to engineering When something\u0026rsquo;s too complex to work on directly, you need to step back and decide if you should start from scratch. Often rewriting software or redesigning a board from scratch takes a tenth the time as you already know what the requirements are. You also know to a greater degree how it\u0026rsquo;s supposed to work which you often don\u0026rsquo;t know when you start a project. Sometimes there\u0026rsquo;s a large loss of time due to it as you already spent so much time working on the thing but that\u0026rsquo;s often similar to the gamblers fallacy; If you keep going at it long enough it\u0026rsquo;ll get better and work better.\nIt needs to be assessed though because sometimes rewriting it will be far harder than just fixing it - this is a very difficult decision and always will be. With experience you\u0026rsquo;ll get a better handle on how much effort will be needed for both rewriting and fixing.\nEvery engineer faces the problem of feature creep in any project, how do you deal with this on things you work on? First off, make sure you start with a modular design. This is why the above comment that the first few lines are often the most important. If you make everything monolithic and all the parts talk to each other and are woven together, you will have a hell of a time designing for every possible addition later. The other benefit is that given a modular design you can look at all the shiny features you want and realize that you can implement them later - they aren\u0026rsquo;t important now. You can keep features from entering the design docs because the design docs should be the base parts to get the system going.\nYou can extend the design with all the cool features you want by documenting those features seperately and working on them as you need/want rather than throughout the whole process. If you need a break from the core of the project, you can take on one of those features that normally would be considered feature creep and work on them to keep you from going mad doing just the core (I have ADHD; this is one of my coping mechanisms).\nIs there any major skill you wish you had developed in formal education that you didn\u0026rsquo;t? As I don\u0026rsquo;t have formal education outside an unrelated field (ask me some time about how related it is to electronics though); I don\u0026rsquo;t have a direct answer. I really feel that my project management and time management abilities would be far greater had I gone through formal education. I feel that engineering university, though great at giving you a good core of general knowledge that skims over most parts of engineering, isn\u0026rsquo;t really there to teach you that. It\u0026rsquo;s there to teach you time management and how to deal with crisis and priorities. The skills of being able to assess what\u0026rsquo;s absolutely critical right now to work on because you only have time to finish the work for one out of three classes and you have a final coming\u0026hellip; that\u0026rsquo;s amazing skills for when you\u0026rsquo;re getting near release and you\u0026rsquo;ve got a product almost working with four or five parts that are critical but you don\u0026rsquo;t have time to complete them all. What is going to make the user-base the most happy and do the best job fulfilling the requirements of the product. Are there parts that you can postpone and fulfill later?\nUnlike at university, real life has fuzzier time limits on things. Understanding that you can also trade off getting things done with how late you\u0026rsquo;ll be on development is also key; this is something I entirely didn\u0026rsquo;t know or understand when I was working on the 3d printer business. If you delay too long and have taken pre-payment, you may have to pay some people back and have extremely negative press from those people - getting a product out that does 90% of what they need and offer to get the last 10% done over the next period may be way better than delaying four or six more months. Also be prepared to check over everything, the other edge of such a move is that you didn\u0026rsquo;t fully vet the design out and may either have to break a promis to include a feature or to recall the product, a nightmare nobody wants to do.\nMost of those skills are in assessing situations and making critical decisions of what\u0026rsquo;s important and what\u0026rsquo;s not. School teaches these as a side-effect of their format. Even the point of money for schooling is often an eye opener: you may be able to cook everything for yourself, but how much are you loosing for time to do your work\u0026hellip; is that important enough to be a reasonable trade off? How can you manage your finances so when those crunch times come you\u0026rsquo;ll be ready for needing more lunch money to stay afloat.\nIs there any skill that comes to mind you spent to much time developing that you wish you hadn\u0026rsquo;t? Far too many things to count. As I think I mentioned I\u0026rsquo;m poor at time management. A number of times I\u0026rsquo;ve become too engrossed in things and don\u0026rsquo;t realize that I\u0026rsquo;ve led myself into a dead end in development. There are plenty of times I\u0026rsquo;ve had to step back and realize that I could have spent that time much better going through and defining the problem. My 3d printers are a great example of it took too long to develop and I screwed myself over on it because of that.\nAnother major trap of getting too deep like that is you\u0026rsquo;ll sometimes find yourself partway, looking like you got the hardest part done then figure out what you did, though tough, was just a fraction of what was needed for the next part. I have an FPGA debugger block that fits this; I have the verilog all written and overall it looks good but as soon as I went to start testing it I hit a major problem; I have to get the software working that\u0026rsquo;ll read out the data given. The real problem is that I have to write those programs in C/C++ and cross-compile them for the target and due to complexity involved that\u0026rsquo;s going to be a hellish thing. What I really needed was a scripting environment on the target and\u0026hellip; well\u0026hellip; the whole debugging system is on hold until we get the camera upgraded so I can get scripts running on it\u0026hellip;\nGetting away from engineering for a bit, What do you do for fun? More engineering!\nOh wait, other than that\u0026hellip; probably more designing\u0026hellip;\nOkay fine; I like to go camping and on road trips and travelling and such. I love going to conventions. Most of my disposable income seems to be eaten up by personal projects, though, so I tend to just build more stuff on the side.\nAny good books, movies, TV shows, etc. You\u0026rsquo;d recommend? I recommend stop watching TV; If you like a series, wait until the whole series is finished then buy/aquire it and watch it all at once - so much easier to get work done when you\u0026rsquo;re not always distracted by what\u0026rsquo;s going to happen next or all the silly ideas that tv/movies/etc. give you\u0026hellip; or at least the ones they give me.\nI use movies as a drug of sorts. I get a rush due to the stimulus response and fanale of them. After a movie I\u0026rsquo;m working off that high for a while so I have to make sure that after movies I can stay up late and get work done. The actual movie isn\u0026rsquo;t very important though stuff like Deadpool is great.\nIf you could meet anyone, living or not, who would it be and why? There are a few people I would love to meet and talk to: Chris Hadfield, Elon Musk, Peter Mansbridge (Moosebridge, heheehe). Top of that list is definitely Chris Hadfield though; his experience, his attitude towards things, he\u0026rsquo;s so nice\u0026hellip; and he\u0026rsquo;s so smart. Runner up would be Peter Mansbridge; he\u0026rsquo;s again extremely smart and has a tun of experience.\nAssuming you can talk about it, what\u0026rsquo;s the biggest \u0026lsquo;Oh Shit\u0026rsquo; moment you\u0026rsquo;ve ever had, be it one you caught on time or not? (I\u0026rsquo;m particallarly interested in the \u0026lsquo;almost did something lethal\u0026rsquo; scenarios) First one would be the bootloader mess-up earlier.\nAnother great example would be the time I was going and trying to repair a VFD (Variable Frequency Drive) and decided that, since I couldn\u0026rsquo;t see the signal right, attaching the negative side of the scope to the negative rail on the input rails of the VFD was a good idea. I had the thing powered up and was connecting the ground side aligator clip. The next moment I realised there was now a blind spot in the middle of my vision, my hearing was ringing from the bang the \u0026lsquo;gator clip made when it vaporized and my hand was strangely warm. It took a few moments to realize what had happened after pulling what was left of the clip away; I realized my hand was now electroplated with what was the aligator clip. I had shot -280V through the ground side of the probe and was lucky as hell. The end result was that most of my vision returned within a few minutes, a small amount of it took about two days to recover (or my brain to blot out the darkened spot). The probe I was using lost it\u0026rsquo;s dc coupling so I must have vaporized something internal to it; luckily the scope was fine.\nBecause of the engineer anti-social stereotype, I\u0026rsquo;m curious, do you think we as a species have been negatively or positively impacted by the way the Internet and social media has changed how people interact? Both, heavily. Things like twitter and other social media systems as well as the near-anonymous commenting on things like youtube have made it seemingly encouraged to troll and/or abuse people. Without a face attached it\u0026rsquo;s easier for people to do absolutely shitty things to others.\nAt the same time, global communication makes doing high tech stuff possible. I learned electronics mainly through the internet and through communication with people who were hardly ever in my own province or country let alone my own town. I have more friends now than I did at almost any other point in my life with the only other time being when I was helping with conventions and even that was entirely because of the internet.\nYou expressed on your interview with the AmpHour that you developed your VFD pendent as a method to help you with ADHD, how has that been working for you? If I hadn\u0026rsquo;t accidentally vaporized some traces on one of the boards, fantastic. The watch pendant was doing the job of reminding me to pay attention to if I needed to eat or drink and to check what I was working on to make sure it was effective. Since it\u0026rsquo;s no longer working as of a few weeks ago, that has been a really big problem again. I really need to make a new revision and possibly bodge together another test one so I have one again.\nAs I\u0026rsquo;m sure this\u0026rsquo;ll be asked, the watch lasted about 6 months of hell being worn. When moving some boxes I had previously crushed a few of the buttons and had to adjust the code so the damaged buttons weren\u0026rsquo;t either always pressed or draining the battery due to being shorted to ground (changed the pull-up to a pull-down on the input and ignored the input). I had drained the battery to zero volts a few times which had also impacted battery life but not terribly, it still got about 4-6 days off each charge. The thing that did it in was a partial short on the vibration board to GND which caused the battery to empty and worse, the current limit to keep the cell from charging. While trying to resurect the device, a process of using some sharp probes on a multimeter to jump the dropper resistor past the analog switch used for charging so it could get enough initial charge to boot the CPU and get things operating correctly again, I inadvertently shorted to another point and vaporized one of the traces going to the battery (LiFePO4 has an amazing current capability, it can easily vaporize traces if given the oportunity).\nWho are your biggest inspirations? My mom and oldest brother. My mom took a job when I was quite young teaching early childhood education in northern bc. It was a small program and the position didn\u0026rsquo;t pay great but was better than most of the oportunities down on the coast. While growing up I watched her take this tiny little program that was sharing a chemistry lab in the college and grow it to cover most of western canada. She developed distance education systems back when the internet was just starting to reach northern bc. She had so many people telling her that it was impossible to make distance education work and that the program would never ammount to anything and rather than just arguing, she took their issues, studied and understood them and engineered the course system to work around or even embrase some of the issues to flip them on themselves to improve the whole system.\nMy brother taught me algebra or the beginnings of it in kindergarten. He taught me most math functions in advance of school and mentored me in programming. He did things with the early computers such as 3d engines that I didn\u0026rsquo;t even know were difficult until later when I started looking at what was possible.\nThere are, of course, others who were great inspirations though often in odd ways; I love Sherlock Holmes, for instance, because he is intelligent and understanding enough to know that lawfullness is not always the best coarse of action when solving things. I also strive to be like Horratio Hornblower (look up the BBC production, it\u0026rsquo;s amazing\u0026hellip; and i so should\u0026rsquo;ve listed this above)\nWhat creators (youtube, twitters, etc) do you think are way to underrated and deserve a shout out? Tesla500; damn, I work for him\u0026hellip; This Old Tony is awesome; absolutely love his humor and what he does is great. Marco Reps; again, great humor. He does tend to sell things a lot but hey, the content is still pretty good. What\u0026rsquo;s the best advice you\u0026rsquo;ve ever received? Worst? Best:\nThose without dirty hands are wrong or at least assume that. Nothing will ever be perfect, aim for it but don\u0026rsquo;t expect to hit it and you\u0026rsquo;ll be great when you get 3/4 of the way there.\nWorst:\nHmm\u0026hellip; that\u0026rsquo;s much more difficult as I tend to forget most advice. Oh, I know, that guy who once told me not to bother making my own stuff because people have made so much better than everything I could make.\nWhat would be your perfect work environment? It\u0026rsquo;d contain a nice kitchen with a gas range. It\u0026rsquo;d have a hammock with some monitor mounts around it so I can still get my multi-monitor setup. It\u0026rsquo;d also have tools for everything from CNC milling through electronics assembly.\nHow do you stay motivated to keep doing cool things? Do small cool things even when you don\u0026rsquo;t feel like it; It won\u0026rsquo;t always work but hey, sometimes it does. Watch single-episode tv shows if you\u0026rsquo;re really stuck, or go watch a movie\u0026hellip; use the internal drugs from the movie to motivate. Hug your mate/partner\u0026hellip; eh, totally doesn\u0026rsquo;t help in the short run but they will more than you can imagine. When your stuck, don\u0026rsquo;t just sit there and stare at it, go do something else for a bit (don\u0026rsquo;t invest too much time though, you still want to come back to this one) Sitting around and BSing about stupid ways of doing things is great brainstorming\nAlso don\u0026rsquo;t sweat the days you can\u0026rsquo;t fullfill a 120% like you normally drive for; that\u0026rsquo;s fine. If it goes on too long, do something you can\u0026rsquo;t ignore to remind you to do stuff\u0026hellip; haircut, paint your nails some weird colour, whatever\u0026hellip; what ever will give you that reminder that is hard to ignore. That\u0026rsquo;s what\u0026rsquo;s saved me a few times (Minecraft, I\u0026rsquo;m looking at you!).\n"},{"id":176,"href":"/interviews/paulshapera/","title":"Paul Shapera","section":"INTERVIEWS","content":" An Interview With Paul Shapera # 2/17/2023\nPaul Shapera is a composer, musician, and storyteller known for his unique musical style, which incorporates elements of classical, rock, electronica, and more. His most well-known works include the New Albion and Post-Human series, which are both sprawling concept albums that blend together music and storytelling to create immersive musical worlds.\nShapera\u0026rsquo;s music is known for its intricate plotlines, complex characters, and exploration of themes such as transhumanism, love, loss, and redemption. Over the years, Shapera has developed a dedicated fanbase, particularly among fans of steampunk and science fiction. In this interview, we\u0026rsquo;ll be talking to Shapera about his creative process, his musical inspirations, and his plans for the future.\nThank you for taking the time for this interview Paul. Your work is truly one-of a kind, making that intro-blurb quite the challenge to write. Plus there\u0026rsquo;s clearly more to the artist than the art, so how would you describe yourself? Oh lord, i have no idea how to describe myself. Others would do a better job, although i shudder to think what they might answer. So here is a broad answer: From 6 to 14 i was completely dedicated to writing and drawing comic books. Then i wanted to be a writer, but by mid high school i had dedicated myself to music. When all is said and done, what i do now is an amalgamation of these three. I tell musical stories, pulp operas.\nDespite being dedicated to this, it has never the less taken an extraordinarily long time to actually make a living off of it. Everyone i grew up with had long progressed to actual careers where they could buy cars and houses and live materially fruitful lives while i was still eating ramen noodles and waiting tables, refusing to get a decent job and career because it would be the end of the dream i had dedicated myself to. As inspiring as this might sound, it is a terrible idea. I had despaired of ever \u0026ldquo;making it\u0026rdquo; and made my peace with the fact that i would die having taken my shot and failed.\nAnd then one day i made the thing that \u0026ldquo;hit\u0026rdquo;, that brought me an audience. Dolls of New Albion. And this audience wanted to hear more, so i\u0026rsquo;ve been making more. I\u0026rsquo;ve passed the need for a day job and am enormously happy to keep doing this forever.\nI have a wife and two kids. I live in Serbia, where my wife was from, and while that doesn\u0026rsquo;t thrill me these days, moving here was instrumental in my success. I didn\u0026rsquo;t have to constantly scrounge for money to live like i did in New York, and was able to spend vastly more time making my albums, which is how i was able to make Dolls and the next few albums after it. It was a strange decision that did get me what i wanted ultimately. I love ancient history and i love to read.\nThe Dolls of New Albion, A Steampunk Opera, your first work set in New Albion, was released over a decade ago, since then you\u0026rsquo;ve released numerous albums set in the same multiverse. Do you feel like New Albion is running out of room to grow or are you getting bored of it at all? The next series of albums i’m doing, and it could last for awhile, is a space opera. This will begin 300 years after the end of Fairypunk and will be a bit of a hard reset. There are elements and even characters who will carry over, although they wont come into play for awhile. It\u0026rsquo;s a brand new setting with brand new world building possibilities; alien races, weird places and politics, a new sandbox to play in.\nI think that a new setting is good for me and to have another stab at world building. New Albion world building was haphazard and chaotic. Which may turn out to be how i operate best, who knows, but i want another chance to construct a world relatively close to scratch knowing what i know now about putting story and character elements in over time.\nI don’t think that tiring of New Albion itself is a problem. I can move forward or backwards in time, linearly to other places in the same world, the possibilities are endless. I don\u0026rsquo;t need to leave the larger universe i\u0026rsquo;ve built because given the cosmology i\u0026rsquo;ve assembled, there\u0026rsquo;s enough opportunity to amuse myself in it for the rest of my days. The bigger problem is lore build up.\nI am convinced you can jump into the series at multiple points and don’t need to always know lore that occurred previously to understand everything you need to understand easily, but still, the amount of lore is piling up pretty massively. So i’m going to do a semi-hard reset, while still bringing along some of the preexisting elements i want to continue to play with.\nHaving stories that span such a time with interwoven plots must pose certain planning challenges. To what extent has the Shaperaverse been planned ahead of time verses fallen into place? 15% planned vs 85% fallen into place. On one hand, you don\u0026rsquo;t need to plan so much ahead if you know one or two big eventualities. You know you’re going more or less in that direction and how you get there will solve itself as you go along. I don\u0026rsquo;t want to set too much in advance because i’ll have numerous ideas along the way that are better than what i can plan right now. Sitting with a work, working it over a stretch of time, this leads to new, interesting ideas i cant have in a single sitting at a single point in time.\nYour stories often involve numerous characters which are performed by one person. What challenges do you face in combining voice acting with singing? Finding singers is hard, particularly who i am sure are into continuing to do this type of stuff. So if i have someone who works well and is into it, i’ll keep using them. Plus it makes it easier to know how to write parts for them.\nI like to play with how to tell stories using only audio, so singing, voice acting, these are just different elements i can use. I’ve tried with all shades of singing vs voice acting, more of this, more of that; it’s enormous fun to play and experiment with. I\u0026rsquo;m going to back off of voice acting for at least the first space opera album or so… i was going to leave it off for awhile but the second album conceptually might end up being a bit weird so a vague possibility exists that i’ll do some stuff with atmospheric speech samples… but i don\u0026rsquo;t know. I\u0026rsquo;m not there yet.\nThe challenge is that voice acting can be very cheesy in an album and you either have to negate that or lean into it, perhaps subvert it if you can. But suddenly breaking into speech can be jarring and break the music spell. The overt musical theater-ness of doing that can be off putting to some and it\u0026rsquo;s a fine line to balance on.\nAlso, singers that sing fantastically may not voice act at the same level. Theater performers tend not to have this problem, but i need some non theater voices in there and this can bring voice acting challenges. Also, half the things i’m asking them to say are probably ridiculous, which i\u0026rsquo;m sure doesn\u0026rsquo;t help.\nYour music often tells intricate stories and explores complex ideas. How do you balance the demands of storytelling with the demands of creating music that is enjoyable to listen to on its own when crafting your lyrics? The combination of storytelling and music is the whole joy of the craft for me. The music of course takes far, far longer to craft. Everyone sits and discusses the story elements but they take 5% of the time that the music does.\nThis makes sense if you think about it. A book writer has an idea for a book. Maybe it took them some time to come up with, maybe the basic idea came really fast but taking that idea and actually turning it into a 450 page novel word by word is where the real time is spent. For me, i don’t have to bang out the words so much as the music. I know before i start making a song what the plot point or the character point is that will happen during it. Nowaday i almost always knows what the sung melody is going to be, so i can deal with the lyrics later after i\u0026rsquo;ve assembled the basic track. The lyrics are something i will usually write in no more than a one hour stretch at a time. Best to sit in silence for an hour, stop, and come back to it later in the day or even tomorrow. Writing the initial verses is always the toughest because figuring out what a specific verse needs to say is challenging. It\u0026rsquo;s easier to come back and polish up the word choices or phrasing once the general idea is already down and solid. I do think, though, that my way is easier than writing a random song out of nowhere, because what the song will be about it is already set before i even begin writing a lyric.\nMany of your songs explore complex themes, such as transhumanism and the nature of consciousness. How do you approach writing lyrics that engage with these complex ideas? The trick of lyric writing for me is this: what do i want this verse to say and how do i make it rhyme? The themes to be explored are already suggested by the story itself. When it comes to just the words to the song, either i am getting across plot information, character information, or character feelings. Character feelings are the hardest. For plot and character information, i’m more likely to know what i need to say. It\u0026rsquo;s usually in the outline. (I write outlines for the albums. First i write a short story. Then i break the story down into songs. Then i start making the album.)\nCharacter feelings are tough because i don’t want them to come across like lyrical cliches you’ve heard a thousand times before. Love songs are a particular hell. You have heard a gazillion love songs. What possibility do i have to say in a way you haven\u0026rsquo;t heard before. But okay, tough or not, i\u0026rsquo;ve sat down to write the lyrics. Here i am with a blank page that needs a verse. I have either four or eight lines. What am i going to say in it, and how do i make it rhyme? Are there times i’ve had to change what i wanted to say because i couldn’t find a way to make it rhyme? Yes. I hate that. But it has definitely happened. Not so much in recent years as i’ve gotten better as i’ve gone.\nYour albums use a mix of traditional musical elements, clear vocal delivery, and sound effects. Clearly, balancing each requires some skill to keep the words understandable. How do you approach deciding which should be the most important to the listener at any given moment? How, technically, do you do it - I imagine there\u0026rsquo;s a bit more fines than just adjusting the volume on each track? I mean… don’t underestimate adjusting the volume. But obviously how you design it matters. If there’s a voice, you don’t want other instruments happening at the same range, and if you want the listener to really understand the voice, there shouldn’t be too much else that is interesting happening. The more you want the listener to comprehend what the voice is singing or saying, the less there should be happening. Once you have the ear hooked onto a sung bit, the more you can complexify the instrumentation behind it, because the listener is plugged in and with you on the little song journey. Additionally, it\u0026rsquo;s okay if some things become more understood upon further listens, just not the big strokes. Assuming the listener is paying attention, they should clearly understand the basics of what is happening at any given point.\nFrom a sound perspective, you can picture all the sound happening in 4 shades: bass, low mid, high mid, and hi. The ear can hear all of these at once just fine. You can have plenty happening on all four levels and the ear will happily hear it all. But start adding too many things in the same shade and you lose clarity fast. Also, the lower you go, the more sound muddies.\nWhen i was in high school, an older musician gave me this speech about the 4 sonic levels using Led Zeppelin as an example, He broke down how each player had their sonic range that they filled and was their room to move about in. You could always distinguish everything that was going on and together it created this full sonic rainbow. That speech has always stuck with me.\nYour work spans many genres and styles. Has learning each style been a challenge? Which genre was the most difficult for you? Learning a genre is one of the bits i look forward to most approaching an album. Biopunk was the hardest because i was trying to go somewhere a bit undefined. The Lost Fairy was a stretch, but because i knew it would be, i spent a lot of time in serious listening preparation and was well prepared by the time i began. A huge diet of future bass and instrumental trap for months.\nI cant stress this enough: You cannot just learn the tropes of a style. You have to love it. Aping the style wont work. Imitation is not enough. You can imitate perfectly and it can even sound convincing, but it wont… “fucking rock”. If you don\u0026rsquo;t honestly love it, it will show. It will lack something undescribable, but unmissable. You cant just go through the motions, you have to be in love.\nKaty Shaw was tough because while i had fallen in love with jazz sometime before, jazz is a particularly demanding genre that some of the greatest and most skilled musical minds of the past century have spent their lives exploring. You cant just… jump in and expect to be great. Fortunately, i wasn\u0026rsquo;t trying to make a true jazz album, just a story with jazz music tropes, and i had the love there. That was a trocky one, though.\nWhat challenges have you faced in making your works that are meant to be performed live and listened to as recordings? Most of it cant be performed live as is. The albums that can be performed live were made with that intention, most notably Dolls Of New Albion and Janissary. Janissary in particular. With that said, any of them could be performed live if you rework them creatively enough. As a life long piano player, i have the creed that any song can be replicated on a piano, you just have to rework it the right way.\nWhat does your setup look like? Do you use more software or hardware music tools? All software. I have a digital piano, a second controller with knobs (that gets much, much less use), a laptop, and a microphone. That and an external sound card is my entire hardware setup. Sounds and software instruments? Terrabytes. Why do i prefer it this way? Because i can go anywhere, set up in a corner, and make anything i can imagine. I did most of the The Fallen in a corner next to the bathroom in a small country house my wife\u0026rsquo;s parents have while she was pregnant.\nAs i’ve gone along, i have discovered the wisdom of farming out some instrument parts to other musicians to record. (Airgigs and Soundbetter are great for this.) Things like excellent guitar solos or horn solos cannot be properly replicated using software. You need the real deal. Just hire someone to do it. You can do that for about a hundred bucks, more or less.\nSome of your tracks have many listed partners in crime, What special challenges does working with so many others present? How have you adapted to it? Making the materials to send to the performers is a right pain. It\u0026rsquo;s a necessary evil, but it can get long and complicated. Sheet music, audio bits, so much to keep straight. Kicking and screaming, i have had to learn how to be organized. Then, if i am going to record them personally, i can\u0026rsquo;t forget to bring anything (though sooner or later i do). I must rent a space to record them or hope their living room works, and pray that isn’t the day some technical issue arises.\nThe actual recording of it is a breeze. All the parts were written and scratch versions performed on the demo, so the demo has already demonstrated that the parts will work. The singers are always well prepared, or talented enough that i don’t notice if they’re not, and i haven’t made a truly bad hiring mistake in several years. (You haven’t heard my mistakes, they never made it to the final album. I cannot over stress that the ultimate problem was with me, not the singer. If you hire the wrong voice with the wrong level of ability it\u0026rsquo;s your fault. They did their best, you should have seen that it wasn’t going to work before you hired them.)\nWhich story did you enjoy writing the most? Impossible to answer. I fall madly, impossibly in love each time.\nYour music has developed a dedicated fanbase, particularly among fans of steampunk and science fiction. How has fan response influenced your creative process over the years? It was a problem when i first starting truly interacting with the fanbase. I had never had a fanabse before. It was a trip. Exhilarating and heady. And i discovered you will start doing stuff to please them. It\u0026rsquo;s hard to help. So i learned how to cut off from that. Keep it at a distance. Pick up some good suggestions here and there once in a blue moon, but stay apart, aloof, and keep most of it at arms length. If i’m asking for input, it\u0026rsquo;s either something very, very specialized (i have a dedicated desire to do good LGBTQ+ representation, the motivation for which exists outside the fanbase and involves a deep conversation about my father, but i will inevitably make stupid, ignorant screwups if i don’t get some interpersonal insights and feedback.) or i already know what im going to do and throwing out a request for opinions just to titillate and build interest.\nOnce the basic album idea has been decided upon, i don’t enter into any discussion about it until the demo is done, or it\u0026rsquo;s so far along in the process that it can\u0026rsquo;t be derailed. There are early points in the creative process in which the flapping of butterfly wings can sway me. I am aware of this and act accordingly so that i do not end up pulled in different directions by different voices. If you need to ask advice in the sensitive times, be quick and strategic.\nGiven the wide range of settings your stories take place in, you must have to do a fair amount of research and inspiration hunting. What does that look like for you? Where do you find new ideas? I read a book before dieselpunk that inspired me a bit I-O by Simon Logan (very dark) and one before Biopunk, Ribofunk by Paul Di Filippo, but otherwise i mostly must sit down and start writing and see what comes out. I am the son of a librarian and i’ve been reading voraciously my entire life. There’s plenty of clutter filling up the space back there to draw from.\nIs there any skill that you spent too much time developing that you wish you hadn\u0026rsquo;t? Craftwise? Hell no, i need every little bit i\u0026rsquo;ve got or learned.\nWhat\u0026rsquo;s the most important skill that you\u0026rsquo;ve taught yourself? How to not suck at making music. How to tell a good story without screwing up the beginning, the end, or most of the middle.\nAny books, movies, TV shows, etc. that you\u0026rsquo;d recommend? God, i consume so much… my mom was a librarian and my lifelong love of reading is the greatest thing that ever happened to me. I love Peter Hamilton. I love new sci fi. The last few good book i\u0026rsquo;ve read were:\nChildren of Time by Adran Tchaikovsky (yes, there is a relation) My Year Of Rest And Relaxation by Ottessa Moshfeg The Fifth Season trilogy by N.K. Jemisin The Murderbot Diaries (best character ever) The Gideon The Ninth novels. And i stop whatever i\u0026rsquo;m doing for the new Sanderson Stormlight novel.\nDan Carlin’s history podcast. Go get The Punic Wars podcast trilogy. I\u0026rsquo;m a big history buff.\nWhat\u0026rsquo;s the biggest \u0026lsquo;Oh Shit\u0026rsquo; moment you\u0026rsquo;ve ever had, be it one you caught in time or not? There is no mistake it is possible to make that i have not made. I have erased weeks of working on an album (Shadows \u0026amp; Flames long ago, back when i was working on a keyboard sequencer). I have had mics and cables fail during recording sessions, i have hired wildly wrong people, in one case someone who didn\u0026rsquo;t actually sing and whose entire shtick was speaking his lines. How did that get past me? I\u0026rsquo;m an idiot. I\u0026rsquo;ve forgotten every piece of equipment it\u0026rsquo;s possible to forget.\nI lost an old version of my studio during a huge brownout in new york (my surge protector had apparently shorted some time before and was no longer doing any protecting) and had to work for an entire year at an airport coffee shop in san francisco (Peet\u0026rsquo;s Coffee, Gate 84) to buy another computer, keyboard, etc. another small digital studio. This is also while my wife was doing grad school, so every month i sent her half money to keep her from getting evicted back in new york. In fact, the way i finally managed to save the money was during the last 2 months, my roomate had stopped paying his rent, i couldn\u0026rsquo;t cover the place, so i just gave up having an apartment and lived at the airport for 2 months. I had very little personal stuff so it fit well in my car, and i had a good friend whose shower i would use every afternoon after work. This worked well, since i just took all the money i would have spent on rent and used it to buy the stuff i needed.\nI have played a lot of piano bars in my past, a lot. I had a book of all the songs i covered that got stolen along with my backpack and passport in Prague. I\u0026rsquo;ve had sustain pedals break mid gig\u0026hellip; it goes on and on. I have a whole system of organization in place to protect against my own idiocy, which i adheer to religiously because i have learned by experience i have to.\nWho are your biggest inspirations? What creators do you think are way to underrated and deserve a shout out? You are most blown away by the stuff you encounter between 15 and 25, because it\u0026rsquo;s all new then. After that the stuff you draw from is… endlessly vast but in smaller pieces.\nI think i\u0026rsquo;m far most inspired by comics and graphic novels than even i realize. It was such a huge part of my growing up and taught how to tell a compelling story outside of prose. There are no SO many story oriented concept albums that i knew about and was aboe to draw from. I\u0026rsquo;m sort of figuring it out as i go, and i think the graphic novel medium in a weird and abstract way has helped a lot.\nProbably 85% of the music i listen to is instrumental, or like, in the case of blackgaze, the lyrics are irrelevant.\nObviously, the artists i\u0026rsquo;ve worked with i not only owe incredible debts to, but in their own right are making incredible things. Three of them that make a lot of their own original music are Psyche Corp, who has a great pulp musical or her own, Refugees From The Otherworld.\nOliver Marsh who has a range of great tracks and releases.\nand Liel Bar Z, who has been killing it and conquering the world. She’s blown up.\nKayleigh McKnight is a rising West End goddess.\nPixelwayve, the artist who has been designing all the albums for awhile now, is making an awesome online ongoing comic series, Stained Sky.\nWhat\u0026rsquo;s the best advice you\u0026rsquo;ve ever received? Worst? Best: You should consider getting a practical, career oriented job to fall back on.\n(It really is good advice. Young people romanticize living in poverty for your art, but as years turn into decades, the romance wears off. I watched almost everyone i came up with drop out eventually and make the smart decision. It\u0026rsquo;s like a battlefield that began with this great army and now is just a couple of us left nodding to each other over the dead bodies. And the ones who did the smart thing are legitimately happy with perfectly great lives.)\nWorst: You should consider getting a practical, career oriented job to fall back on.\nWhat advice do you have for anyone interested in making works similar to yours? Sometimes a young person comes along who is enthusiastic to make a giant, epic universe like i have and their excitement and ambition is wonderful. But do not become blinded by the big vision. If you cannot tell a heartfelt, intimate tale with grace and style, none of it will matter. Intimate tale. Heartfelt. Grace and style. The rest of it is window dressing. Super fun window dressing, but if there is no emotional center, no hypnotic audio pulling you in, no one will care.\nHow do you stay motivated to keep doing cool things? I would rather die than go back to a dayjob. I worked for SO long for SO hard to do Exactly This. Plus, what i do is an ecstatic process. Making music is an ecstatic experience. And i choose my own projects so i don’t embark on something which i’m not into doing. So… i could do exactly this, OR…. i could go back to waiting tables and making coffee drinks. Also, i have this thing where in order to not make an album that completely sucks, i consider that every album i\u0026rsquo;m currently making might be the very last one i will ever make, and so is this one here worthy of being that? The fear of death nipping at my heels is quite potent as a motivator. Dayjob… death… somewhere in there is some helpful motivation. And falling in love every album.\nWhat hobby do you want to get into but haven\u0026rsquo;t had a chance to dive into yet? I want to move to the states and play a TTRPG on a regular basis. One day…\n"},{"id":177,"href":"/interviews/soatok/","title":"Soatok","section":"INTERVIEWS","content":" An Interview With Soatok Dreamseeker # 12/3/2020\nThank you for taking the time for this interview Soatok. Your blog at https://soatok.blog shows that you\u0026rsquo;re a furry crypto nerd, but I\u0026rsquo;d like to hear how you\u0026rsquo;d put it, so, to get started, can you describe yourself? Whenever I\u0026rsquo;m asked, I usually say something to the effect of, \u0026ldquo;I\u0026rsquo;m a security engineer with a dhole fursona that sometimes writes about cryptography on my furry blog.\u0026rdquo;\nThere\u0026rsquo;s actually a lot more to the story than that, but comical understatement is somewhat an unspoken tradition among my technical friends. (I can\u0026rsquo;t tell if it\u0026rsquo;s humility or impostor syndrome with them.)\nOutside my fandom persona, I\u0026rsquo;ve written the code that helps to secure a double digit percentage of the websites on the Internet. I work on a cryptography team at an unspecified technology company. I\u0026rsquo;m very deeply immersed in this stuff, for the good of the Internet, and even if I didn\u0026rsquo;t set out to talk about cryptography topics, it would leak out (as it often does with my dumb Twitter jokes).\nWhat are some your favorite projects you\u0026rsquo;ve worked on? My favorite project is usually whatever I\u0026rsquo;m working on at a given moment.\nIn the past, I\u0026rsquo;ve implemented a full suite of constant-time JavaScript algorithms, only to discover Thomas Pornin already did something similar for C.\nMy current project involves creating a series of open source libraries to make it easier for JavaScript developers to implement end-to-end encryption in their own applications.\nWhy JavaScript? Cryptographers have an orthodoxy that loosely follows the same battle lines as infosec opinions on programming languages: PHP bad, JavaScript harmful.\nI think the intent is, if they neglect these languages, they can exert some sort of bastard lovechild of market pressure and darwinism to coerce developers onto programming languages that are more suitable to secure cryptography than the ones they\u0026rsquo;re already using.\nIn practice, this just means that the programming languages that most of us use are less safe than they could be, and the ivory tower academics and infosec thought leaders just hold their nose up to the thought of meeting them halfway. This makes the Internet less secure for us all.\nIt\u0026rsquo;s interesting to me that you\u0026rsquo;re so openly furry and mix that in with all of your more technical posts about cryptography, much like I have here on OpGuides. Why did you make the decision to do both under one unified identity and what has the reaction to that been like? I love the furry fandom and I\u0026rsquo;m deeply fascinated by security topics, so it\u0026rsquo;s an obvious cross-over for me. But there is more to it than just that!\nI mentored a few folks over the years, and tried to nudge many more towards supportive, accepting, and uplifting venues. Almost everyone involved in that was deathly terrified of, for example, hiring managers finding out about their fandom participation.\nWe both know this, but a lot of business people do not: The furry fandom is widely regarded as a LGBT subculture. Discriminating against people who participate in our community is a good way to undermine your own diversity and inclusion initiatives.\nBeing openly and shamelessly my furry self is an easy opportunity for me to normalize our community to companies that hire security analysts, programmers, or cryptographers. This has a few effects:\nHiring managers are more exposed to furries in tech, which makes them less likely to react badly if someone discloses their hobbies during an interview (whether or not they intended to). Neophytes get to see someone with a lot of experience in the industry be openly weird, so they will be a little more comfortable in their own fur. Queerphobes that use anti-furry hate as a dog-whistle out themselves on social media in droves, which helps identify which companies should be avoided. The rarest consequence, but has happened to me about a half-dozen times in my career: More tech people that were incidentally furry become open about it when they see no significant ill befall me. I hope it\u0026rsquo;s clear that the end result is a net positive, even if the prospect of doing what I do is a little scary to a lot of people.\nIf you could go back and make the decision to post under two different personas, would you? at least in part? Nope! Game Theory says it\u0026rsquo;s the optimal strategy.\nCryptography is under constant attack from the US government. Do you think there are things the US government should do related to crypto? The US government should really stop trying to give the Department of Justice a backdoor.\nLike, I get it: Their bottoms still need a regular powdering after Edward Snowden revealed the NSA was literally spying on everyone. They wanted to keep abusing their power with impunity and secrecy, and now they can\u0026rsquo;t. Boo hoo.\nBut if they\u0026rsquo;re really as interested in \u0026ldquo;protecting the children\u0026rdquo; as they like to claim, they\u0026rsquo;d invest more in end-to-end encryption and tougher privacy protections; especially but not exclusively for kids!\nWhat are your thoughts on cryptocurrency? Are you concerned about the environmental cost from the electricity mining uses? Cryptocurrency is a mixed bag, and it\u0026rsquo;s hard to give a succinct answer.\nOn one paw, it\u0026rsquo;s one of the most reliable revenue sources for advancements in cryptography. A lot of the work on practical zero-knowledge proofs happening today is the result of Zcash and Ethereum developers trading recipes and not being preoccupied with Line of Business development work at their dayjob.\nOn the other, it\u0026rsquo;s a magnet for unscrupulous hacks and ancap tech bros. You know the type: They hate the state and want governments to get off their back, but they love the hierarchies of capitalism and the privileges of private property and systemic state violence that serves the interests of the wealthy? If you see \u0026ldquo;Bitcoin maximalist\u0026rdquo; in someone\u0026rsquo;s Twitter bio, 99 times out of 100, you\u0026rsquo;re dealing with that beast.\nWhat changes do you think should be made to social media platforms to give users the best combination of privacy, ease of use, and security? Public messages (e.g. tweets) should have slightly more granular access controls than the current all-or-nothing approach (Is your account public or private?).\nPublic messages should be editable (with a public changelog). Replies should be clearly marked if they were directed at a previous version, and the option to view them in context should be available.\nPrivate messages should be end-to-end encrypted, using keys that the platforms cannot access.\nIf you could go back and redesign any part of how the internet works, what would you change? I would have encrypted every packet from day one, rather than slowly bolting it on years later. For example: Email encryption is still opportunistic in 2020. We\u0026rsquo;ve only started addressing DNS privacy. (Note: DNS privacy is a good problem to solve; DNSSEC is stupid.)\nLast week the CEO\u0026rsquo;s of Facebook and Twitter just went to a congressional hearing about §230 of the CDA, where many senators expressed concern about biases in how tweets and posts are flagged for misinformation and how accounts are suspended for Terms Of Service violations. How do you think this problem should be addressed moving forwards? Assuming they\u0026rsquo;re being even mildly honest about anything (which I don\u0026rsquo;t really believe), Silicon Valley needs to get over their fear of the perception of having anti-conservative bias. This fear leads to them tolerating hate speech and rallying cries for racist and transphobic violence.\nFacebook is unsalvageable.\nI previously touched on defeating coordinated inauthentic behavior at scale in my Medium writing days.\n(My Medium writing days ended because I got tired of their constant pressure to monetize my writing. I\u0026rsquo;m happy to pay for the privilege of publishing my ideas, ad-free, without a paywall.)\nHaving just gone though the 2020 election, with what seem to be mass unfounded allegations of voter fraud, do you think electronic voting, potentially over the internet, should have been used? No.\nWhat\u0026rsquo;s the failure mode for a hacked election? You can\u0026rsquo;t just roll back a political career advancement.\nThe threat model for elections is incompatible with the BYOB mental model of consumer electronics (which is what people imply when they talk about electronic voting).\nPaper ballots. You need an audit trail that technology cannot tamper with.\nThe repository for YouTubeDL, a popular tool for downloading videos off of many more sites than just YouTube, was taken down from GitHub recently as a result of a DMCA take down notice from the RIAA, in part because they were using copyrighted videos in their test cases to ensure their method of bypassing YouTubes \u0026lsquo;Rolling Cipher\u0026rsquo; code worked. What do you think about this? The RIAA is a blight upon the Internet and needs to be dismantled, but only after we tear down JSTOR and Elsevier. Remember Aaron Swartz.\nThe EFF does a lot of good work to oppose tyrants like the RIAA.\nWhat are your thoughts about bypassing Digital Rights Management (DRM) in general? DRM is diametrically opposed to endpoint security, transparency, and trustworthy computing. Only corporate shills that sold their soul to the intellectual property machine ever think DRM is a good idea for consumer devices.\nThat being said, the notion of using DRM to run code in \u0026ldquo;the cloud\u0026rdquo; that the cloud service providers cannot understand or tamper with is very attractive. But that\u0026rsquo;s an inversion of the normal power dynamic.\nDo you think society has been negatively or positively impacted by the way the Internet and social media has changed how people interact? I think it\u0026rsquo;s mildly positive. It\u0026rsquo;d be significantly more positive if tech companies took coordinated inauthentic behavior, misinformation, and propaganda more seriously 10 years ago.\nThere\u0026rsquo;s a lot to hate. But I wouldn\u0026rsquo;t have known about the furry fandom\u0026ndash;let alone ever participated in it\u0026ndash;if it weren\u0026rsquo;t for the Internet and social media.\nAs time moves on there is at least some growing public understanding of cryptographic security, like HTTPs and why someone may want their phone to be encrypted, etc. - Do you think it\u0026rsquo;s necessary that the public have an even better understanding than what is currently normal? What things do you think most people miss that could be easily taught? People don\u0026rsquo;t need a graduate course in number theory and CS101 descriptions of RSA, which is what the cryptography orthodoxy pawned off on the public.\nI wrote a guide to learning cryptography as a programmer earlier this year.\nWe as an industry need to spend some time talking to the UX experts, technical writers, and science communicators of the world and devise a concise and coherent public education strategy. Until that happens, we\u0026rsquo;ll continue to flounder around in the dark but some of us will make better and easier-to-use tools, so things won\u0026rsquo;t be so bad.\nIs there any skill you wish you had developed in a formal education that you didn\u0026rsquo;t? There\u0026rsquo;s a lot of academic formality that I missed out on, including:\nHow to write a whitepaper for a scientific journal. In \\( \\LaTeX \\) . Familiarity with the mathematician jargon (especially lambda calculus) that obfuscates intuition. How to not be a filthy degenerate (or so my detractors say). When doing crypto stuff, what does your work environment look like? It depends what I\u0026rsquo;m doing.\nMost of my open source security work over the years involved a web browser with GitHub.com on one monitor, and Notepad++ in the other. Nothing too fancy.\nIf I\u0026rsquo;m reverse engineering (e.g. Android apps), I\u0026rsquo;ll boot up a Virtualbox machine and fullscreen it on one of the monitors.\nI do find good background music indespensible to deep analytic work. Time I by Wintersun and Malcom Robinson\u0026rsquo;s Chrono Trigger Orchestral Selections are two playlists you\u0026rsquo;ll hear emit from my bedroom all day long.\nI\u0026rsquo;ve worked from home for most of my career, and for the entire past 6 years, so my home computer setup is pretty sweet.\nIs there any skill that you spent too much time developing that you wish you hadn\u0026rsquo;t? Not particularly. There’s no such thing as useless knowledge; only stuff you don’t want to use, or don’t know how.\nWhat\u0026rsquo;s the most important skill that you\u0026rsquo;ve taught yourself? Active listening. Hands down.\nThe most stressful problems you will ever encounter in almost any profession is either, at its core, a communication problem, or the consequence of one.\nThat being said, I didn\u0026rsquo;t entirely teach it to myself. My close friends (a.k.a. chosen family) were all deeply involved in those lessons. :3\nWhat do you do for fun? Any books, movies, TV shows, etc. that you\u0026rsquo;d recommend? I frequently play co-op video games with my chosen family. We\u0026rsquo;re currently experiencing Final Fantaxy XIV together, and looking forward to Corepunk when it comes out.\n(Sometimes we even stream our gameplay, but usually on this channel.)\nWhat\u0026rsquo;s the biggest \u0026lsquo;Oh Shit\u0026rsquo; moment you\u0026rsquo;ve ever had, be it one you caught in time or not? One time I was migrating a PostgreSQL cluster at night, and I accidentally typed the rm command into the wrong terminal.\nI called my boss and then we discovered the backup software had been failing for nearly a month. (I did have a manual snapshot from a week ago, but that was a week of data lost.)\nNot a fun year.\nWho are your biggest inspirations? What creators do you think are way to underrated and deserve a shout out? There are too many people to list. I feel like I\u0026rsquo;d do everyone a disservice if I tried. Too many artists, too many musicians, too many videographers, too many photographers, too many dancers.\nMaybe if I could Ctrl+A, Ctrl+C the furry fandom (sans the alt-right), that\u0026rsquo;d be closer to the comprehensive list.\nOutside of the fandom, my best friend of 12+ years recently made a fursona.\nI\u0026rsquo;m very fortunate to count @SwiftOnSecurity among my friends too.\nWhat\u0026rsquo;s the best advice you\u0026rsquo;ve ever received? Worst? Best (all from my best friend over the years):\nJust because you can doesn\u0026rsquo;t mean you should. The truest measure of a person is what they do when they think no one is watchng. Power is temporary; what you do with it when you have it is what counts. Worst:\nYou need to find God \u0026ndash; annoying person in my high school How do you stay motivated to keep doing cool things? At this point, it\u0026rsquo;s a habit for me. But early on, I was motivated largely by spite.\nI got my start in tech by playing with a program called RPG Maker, and I decided to make a website for my personal projects. The indie game community back then was super toxic, so people in the community kept hacking my website. (My early PHP wasn\u0026rsquo;t very good.) I got angry and decided I would learn about web application security to stop them from breaking in.\nYears later, one of the perpetrators admitted to me what they were doing. By then, I was long over it.\nWhat hobby do you want to get into but haven\u0026rsquo;t had a chance to dive into yet? I have absolutely no musical talent. I\u0026rsquo;m getting a fursuit soon. Therefore, I figured learning to dance would be pretty cool :3\n"},{"id":178,"href":"/interviews/spg/","title":"Spg","section":"INTERVIEWS","content":" An Interview with Annie of Sex Positive Gaming # 01/07/2022\nAnnie is the creator behind the Sex Positive Gaming YouTube channel where she primarily reviews adult games and occasionally streams SFW game play. Her channel is still relatively new, having only started in February. In this time she has release over 120 videos ranging from game reviews to explainers of sexual topics all with the theme of \u0026ldquo;No Shaming, Just Gaming.\u0026rdquo;\nThank you for taking the time for this interview Annie. How would you describe yourself? What are you passionate about and why? I’m a shy curly haired redhead. I am passionate about videogames and helping to find ways for us to be less shitty towards each other. I know that’s naive, but I’m at the age where I’m supposed to be naive.\nHow has the need to keep the channel SFW influenced your content - What would you do differently if there were no censor? We live in a world where everything seems to bleed into everything else. I am on YouTube, Twitter, and Patreon and all three of those platforms have a history of suspending and banning people for activity from other places or communities. I risk being removed from all of these places if I had NSFW content that they strongly disagreed with. This wouldn’t be a problem, except what they strongly disagree with seems to change all of the time.\nWhat is your favorite adult game? Why? Cloud Meadow. I like the pixel artstyle and I love farming games.\nWhat made you want to start making adult game reviews? Cyberpunk 2077. So many of the reviews said that it was the most sexually explict game the reviewer had ever played and I was so confused as it is similar to Mass Effect and the Witcher series. After digging around it became apparent that there was a great deal of disingenuity and ridiculousness in how many reviewers deal with even the specter of sexual content. I wanted to talk about adult content in video games like a normal person.\nDo you have any prior experience in sexual education? Does sex ed in highschool count? Otherwise no. The last year has required a ton of research in both scholarship and the various flavor communities. I’ve learned so much, but I still have a really long way to go.\nWhat do the viewership statistics of your videos look like? Is there a strong gender bias? Age? My current demographic is mostly millennial and gen-xers who identify as male. I expect that to change as this space continues to grow.\nHave you gotten any hate for running an adult-content oriented channel? I’ve gotten a lot of inappropriate comments and messages based on my age and gender, but I tend to get a lot more heated interactions when I cover more contentious subjects like consent and NTR.\nWhat adult game do you really want to exist that doesn\u0026rsquo;t? I want an adult game to exist that is seen as normal and acceptable. Romance novels can contain the same level of explicitness as an adult content game, yet one is acceptable and the other can get you banned.\nWhat are you thoughts on the adult game industry as a whole? What do you could be done better? It is currently the wild west. For developers, there is a lot of money to be made and none of the rules and laws surrounding this industry are very clear. I’m not sure what can remedy that, but whenever we gang up and exclude other flavors we just make it that much easier to censor the entire space.\nWhat recomendations do you have for someone just starting to make YouTube videos? No idea. This has been an arduous journey and I am still almost completely clueless about how anything is supposed to work.\nWhat tools/software do you use to make your videos? I record and edit my videos with Wondershare Filmora and I use OBS Studio when I record games or stream. I am open to other suggestions if there is something better. Like I said, I am almost completely clueless about how anything is supposed to work.\nAre there any big changes coming to Sex Positive Gaming in 2022? It really depends on growth. Ideally I would love to find a way to do this as a profession and be able to help support new and upcoming creators. I am so far from that currently, but I am hopeful.\nHow do you feel about YouTube removing the Dislike button? I have to modify so much of my personality and content to conform to YouTube that the absence of the Dislike button seems trivial in comparison. I understand it matters a lot to people who understand this space more than I do, but my current focus is in making sure that each new video I release isn’t my last.\nWithout looking at steam, do you think there\u0026rsquo;s more lood furry or anime games? It depends on how you define anime. If Otome games count as anime, then it would be anime. What about anime style furry games? What would they count as? Not to mention the fuzzy line of demarcation between monster girl and furry (pun intended).\nWhat\u0026rsquo;s the most important skill that you\u0026rsquo;ve taught yourself? I am really, really introverted. This channel is really helping me to grow as a person and try out new things. Like a year ago there is no way in hell I would have ever considered streaming or showing my face.\nIs there any skill that you spent too much time developing that you wish you hadn\u0026rsquo;t? That is really hard to say. We are all the sum total of our experiences. If I hadn’t spent thousands of hours on the Mario Kart or Fire Emblem series would I still be the same person?\nWhat\u0026rsquo;s the biggest \u0026lsquo;Oh Shit\u0026rsquo; moment you\u0026rsquo;ve ever had, be it one you caught in time or not? When I first started I didn’t know that gmail sent my whole name in the messages. I had a conversation with a developer and I saw my whole name and I completely freaked out.\nWhat do you do for fun? Any books, movies, TV shows, etc. that you\u0026rsquo;d recommend? Obviously I like video games, but I also really enjoy 80s and 90s movies and culture. I don’t get a chance to read as much anymore because the channel takes up so much time.\nWhat\u0026rsquo;s the best advice you\u0026rsquo;ve ever received? Worst? I got a lot of good advice before I started the channel from people in the industry, but the community has been my biggest asset towards improvement. Seriously– almost everyone has been so kind and tolerant of my mistakes and that has really allowed me to grow and learn.\nDo you have any obscure hobbies? Aside from reviewing and playing almost every type of adult content video games? I mean seriously, I have seen things.\nHow do you stay motivated to keep doing cool things? The terror of having to go and get a 9-5 job where I have to interact with other humans face to face is a powerful motivator.\nWhat hobby do you want to get into but haven\u0026rsquo;t had a chance to dive into yet? I would really like to pick up some type of activity that I could use to exercise my brain more. This is a really repetitive and sedentary job and I’m trying to work out more physically, but I should also include something for my mental well being as well. If you have any suggestions, please feel free to let me know.\nThanks for giving me an opportunity to talk!\nIf you haven\u0026rsquo;t yet, please check out Annie\u0026rsquo;s incredible Channel, follow SPG on Twitter, and consider supporting her work on Patreon "},{"id":179,"href":"/interviews/taxbadger/","title":"Taxbadger","section":"INTERVIEWS","content":" An Interview with Laguna of Tax Badger, LLC # 08/26/2021\n﻿﻿\nLaguna Crale is a bright pink Tax Badger that has made a name for himself with Tax Badger, LLC where he has made waves in the furry artist and NSFW content creator communities for being open and accepting of these professions. He\u0026rsquo;s freely given helpful pointers on his Twitter, @TaxBadgerLLC to help those questioning how to handle transitioning from making content as a hobby to making it a real, legal self-employment career. He\u0026rsquo;s also an economics major, kinky married gay man, and outspoken about the state of democracy in the United States.\nThank you for taking the time for this interview Laguna. How would you describe yourself? What are you passionate about and why? Opening with the hard questions! I’m Laguna, the Tax Badger. I’ve been a furry since I was 13, and the community means more to me than I can describe. I’m here to help people! Especially the people who don’t know where else to turn.\nDo you turn away clients if you think the NSFW content they make is harmful? It depends – I would turn away clients whose content is explicitly illegal. But for some clients, who are able to make that distinction between fiction and reality, they still need help with taxes. Pedophilia and bestiality are firmly in the illegal camp, though.\nIs it difficult to keep up with the constant changes to how taxes work over the last few years? That’s been one of the easier parts of the job, actually! Research has always been a strong suite of mine, so the tax law changes have been just a part of my tax upkeep. I’m actually going to be a little disappointed in the coming years when the changes slow down!\nWhat is your take on OnlyFans recent choice to shoot itself in the foot à la Tumblr? (This interview was presented prior to the reversal, and answered afterwards.) I view it as an inherent problem with capitalism, and especially the concentration of wealth that laissez-faire capitalism promotes. OnlyFans, like any business, needs financial security. Those offering financial security get to decide what goes and what doesn’t – for example, PayPal doesn’t allow sales of adult goods and services. Capitalism has decided that ‘adult’ is bad, even though it’s a part of everyone’s lives. There’s no room for other parties to disagree, due to the concentration of wealth; meaning that as a society, we are at a disadvantage seeking to change what’s taboo.\nThere have been reports that OnlyFans is only doing this because of payment processors not wanting to be associated- the same thing that happened to PornHub with Mastercard and Visa. Because of this, there have been suggestions that creators should look into a platform based on cryptocurrency to avoid this happening again. What do you think? While I do think another payment platform is going to be critical in correcting the foundational issues, I don’t think that cryptocurrency is the correct venue.\nWhat else should content creators look for in the next NSFW content platform? Transparency! Any ‘Large business’ platform that fails at transparency will be less likely to explore options that retain their NSFW creators when finances become an issue. A more transparent business will be more receptive to its userbase, and act accordingly.\nWhat are the tax implications of NFTs? Is there anything artists should know before using them? Oh God. I… haven’t thought about this, haha.\nSo, there are two answers, depending on the results of IP laws coming to a conclusion on NFTs. The first, if NFTs are considered a purchase of IP, is that you would recognize the gains and losses on NFTs on 8949, much like cryptocurrency or stocks. (It would functionally be identical to the purchase and sale of collectibles, like prototype Super Mario cartridges). In this case, a short term sale would be taxed as ordinary income, and long term sales (holding the NFT for more than a year) would get the advantaged Capital Gains rate.\nThe other answer is that NFTs are not a purchase of IP, in which case you’re buying and selling… money. To the extent that, you do not recognize the loss (since you didn’t lose anything) but you DO recognize the gains (as you were paid for a thing), which would report on 1040 Schedule 1 line 8 other income, and be taxed as ordinary income.\nTl;dr don’t buy NFTs what are you doing\nDo you think there\u0026rsquo;s a best choice among Patreon, Buy Me a Coffee, Ko-fi, etc.? Social Economies of Scale! The best choice is the platforms that the most people use. I know a lot of people don’t like FurAffinity, but that’s also why you can’t get rid of FurAffinity – there isn’t a userbase elsewhere that gets you the publicity and ease of market access. (I guess there’s inkbunny, but… it’s better to not, haha).\nThe furry artists seems to be all over the place for what they charge, what do you think is the best way for an artist to gauge how much they should charge for a given piece? I’ve discussed this before! I think that determining your buyout length is the greatest metric; you should be looking to sell out of slots in more than an hour, and less than 24. If you’re selling out in less than an hour, you can raise your prices – you have enough demand that while some people will no longer be able to afford your art, you still have clients who will fill your slots. If you’re over 24 hours, though, you may not have the fandom awareness for those prices; consider running a sale until you’re seeing those slots fill up at a pace you’re happy with!\nDo you think artists should ask for tax on top of the sale price or is the norm of it being included already too strong? I think incorporating tax into the price is simply more consumer friendly. The price on the box is the price you pay! Do note that commissions are not subject to sales tax in most states, so the only tax to be charged is income tax.\nWhat do you think government could have done do better to help support the self employed and gig workers during the pandemic? Controversial hot take: I think they’re handling self-employed/gig workers just fine? Perhaps better oversight in the Small Business Loans to make sure the firms that needed the resources were more easily able to get it, and better oversight for what determines a contractor and an employee.\nI\u0026rsquo;ve seen some online vendors implementing Purchasing Power Parity (PPP)(1), where the price will change depending on the purchasing power of country where you\u0026rsquo;re buying from. What do you think about this: is it good or bad? I’m neutral! This is already done by big business – a $300 Nintendo Switch (US) is $343 (EU) is $272 (Japan). Just make sure that you’re noting the amount recognized!\nWhat are your thoughts on Universal Basic Income (UBI)? Necessary for the continuing functioning of capitalist economies. Note that capitalist economies aren’t bad, just that their extremes are bad. And the US market is closer to the extreme than is healthy.\nShould minimum wage be increased? Should it be equal everywhere, tied to the cost of living, or something else? That depends on the implementation of UBI. If there is UBI, I don’t think the minimum wage is necessary. If there ISN’T UBI, then our minimum wage definitely needs to increase. I also would like to see an income cap (a 100% tax bracket).\nThere\u0026rsquo;s recently been talk about the power of Big Tech in the US. Some of this has resulted in scrutiny over how these business just buy all competition, mostly startups, that have any innovative ideas. Should the motivation for startup founders to innovate so they can get big enough to get the big bought-out paycheck worth more or less to society than having the smaller businesses offering competition? I have to laugh that I already touched on this, haha. Unfortunately, in our society, getting bought out IS the innovation pathway; innovation alone won’t be able to offer competition to the entrenched powers of the market.\nWhat\u0026rsquo;s your take on the Tax Cuts and Jobs Act of 2017 (otherwise known as Trump\u0026rsquo;s Tax Reform) Makes good fire starter.\nWhat\u0026rsquo;s the most important skill that you\u0026rsquo;ve taught yourself? How to communicate. I have mild autism, so communication has always been difficult. I still have difficulty reading an interaction, and I still say the wrong things (it’s why you’ll hear me stutter and go ‘um’ a hundred times in a single conversation), but I don’t think that I’d be where I’m at if I hadn’t developed any communication skills.\nIs there any skill that you spent too much time developing that you wish you hadn\u0026rsquo;t? There isn’t – regret doesn’t help anyone! Everything I’ve learned, everything I’ve done, good or bad, has made me the badger I am today. Whether that’s from improving myself, or learning what I shouldn’t do in the future, if I hadn’t done the thing in question, I wouldn’t have that information now.\nWhat\u0026rsquo;s the biggest \u0026lsquo;Oh Shit\u0026rsquo; moment you\u0026rsquo;ve ever had, be it one you caught in time or not? My keyboard at H\u0026amp;R block was sticking, so I accidentally reported someone’s real estate tax paid with an extra 0. The state kindly told them that was wrong, and updated the number for the client. I’ve made sure to not repeat that!\nWhat do you do for fun? Any books, movies, TV shows, etc. that you\u0026rsquo;d recommend? Magic: the Gathering, Video Games (especially Zelda Randomizers, especially the 3D Zelda randomizers), talking with friends, D\u0026amp;D. I don’t watch things, though, so I’m missing a LOT of pop culture knowledge.\nWhat\u0026rsquo;s the best advice you\u0026rsquo;ve ever received? Worst? “You miss 100% of the shots you don’t take.” Reach out and ask, try, before dismissing it. Even if you’re certain it’s a 1% chance of happening… You might get that 1 if you try. It’s impossible if you don’t.\n“Don’t go to sleep angry.” The idea behind this piece of advice is to resolve issues so that nobody’s left to stew… but tackling the issue with a fogged head is a very easy to make the situation worse, or prevent its resolution. Go take a nap and look at it without the emotional distress!\nDo you have any obscure hobbies? I think being a badger on the internet would have to be the most obscure interest I have. 😉\nWhat hobby do you want to get into but haven\u0026rsquo;t had a chance to dive into yet? Miniature painting. I’ve painted a couple, but when I had just gotten all the resources to really start painting as a hobby, Tax Badger took off and I had no time!\nNotably for my readers both Dracula Theme Pro and Wizard Zines do this.\r"},{"id":180,"href":"/music/effects/dynamics/","title":"Dynamics","section":"Effects","content":" Dynamics # Distortion # How Distortion Works in Music (Ben Sheron\u0026rsquo;s Blog)\nDynamics \u0026amp; Transients # When thinking of effects we have some nice mental models for what things sound like. Delay is just echos, reverb adds space, etc. Distortions sound simple enough, they just make it more aggressive - the problem is, they sometimes don\u0026rsquo;t. We have to think like an audio engineer here.\nFirst, they sound massively different depending on the volume and frequency content of the input. That\u0026rsquo;s why in the above video he mentions that putting an EQ before and after a distortion that would otherwise cancel each other out can still sound different than no EQ at all.\nBut it\u0026rsquo;s still more complicated than that - Distortions also tend to massively impact transients and your sustain. That is, if you have a lot of distortion on, the pluck of the guitar string may get swallowed up and the amount of time your string can ring out before it becomes inaudible will go up considerably.\nSort of like this. Here, the blue curve is the volume of a guitar though no distortion over time, and the red though a distortion. The white dashed line is the level where it fades into the background so that it no longer audible.\nBecause the blue has a lot more difference between the initial bump (the pluck of the string) and the fade out, that pluck will be much more noticeable. On the other hand, the blue line gets to a level where we can\u0026rsquo;t hear it sooner.\nHow a distortion handles that \u0026lsquo;pluck\u0026rsquo; at the start - the initial transient - can make a huge difference in the resulting sound. Armed with this knowledge, when mixing and playing with effects you can try to tweak things intentionally to let some of the pluck through or make the sustain even longer, or kill the pluck entirely to make a controllable wall of noise. What matters is you understand there\u0026rsquo;s more to distortion than just making the sound spicier and louder.\nClipping (Soft \u0026amp; Hard) # Clipping does what it sounds like, it just chops off the wave. While you can use it as an effect intentionally, it\u0026rsquo;s origin - which you\u0026rsquo;re likely to do on accident yourself - is from accidentally driving a louder signal into something than it\u0026rsquo;s meant to handle. When this happens, the part of the incoming wave that is out of range is going to get chopped off no matter what, but there are different ways that can happen: it can be hard or soft.\nHard clipping will let the original signal pass though undisturbed until it crosses a threshold (positive or negative), at which point the value snaps to that threshold. Soft clipping will start to bend the signal away as it gets close, avoiding the hard cut edges.\nHere, visually this should help:\nIn code, hard clipping technically is as easy as two comparisons. You might be able to do some SSE voodoo to accelerate this. See https://stackoverflow.com/questions/427477/fastest-way-to-clamp-a-real-fixed-floating-point-value, but the real complexity comes in finding a way to do that which doesn\u0026rsquo;t alias. Good luck!\nSoft clipping will be more expensive than hard. Using an actually trig call like atan() will wreck you on some platforms, so probably either use a LUT or polynomial approximation.\nGain: Type: Hard The key takeaway from the two different kinds of clipping is that while both add harmonics (which is the whole point of distortion) hard clipping adds significantly more, furthermore, soft-clipping mostly adds even harmonics, while hard clipping will give you odd harmonics. That is, it adds a lot more to the higher frequencies.\nIf you intentionally use clipping as a distortion and not for limiting the signal, the effect will need to apply some gain to bring the signal back up to the same amplitude, but if this is done, it will usually be a few Loudness Units(1) higher in volume. This is because more harmonics sounds louder. Mix with care.\nWaveshaping # Wave shaping is a pretty broad term, but usually it refers to a method of mapping a wave onto another. It\u0026rsquo;s basically just a function, like you\u0026rsquo;ve seen in math class, if you think y=x, that\u0026rsquo;s a simple 45° slope, and that corresponds to this:\nThe dashed line represents an example input and output. Because here the line is that simple x=y the input and output values are exactly the same. If we change this line to be something else though, that\u0026rsquo;s where the magic happens\nThis gif uses Nysthi\u0026rsquo;s BZ-Mapper despite the fact that I\u0026rsquo;m showing this on a basic oscillator, that isn\u0026rsquo;t necessary. The input wave can be anything, drums, guitar, whatever you want. This kind of distortion can get pretty crazy pretty quickly.\nIf you want to know more Learning Synthesis: Waveshapers explains things beautifully, and also goes into some of the other kinds of distortion and wave mangling up ahead\nMost obvious implementation is a LUT, but if you have 16bit+ audio you\u0026rsquo;re looking at a freakishly large LUT. Actually generating whatever function you need and doing the math is probably wise. If you know certain values are common, do a LUT for those. Wavefolding # This is one of those things where while the name is pretty self-descriptive, you sorta just have to see the signal on a scope and hear it to see what it does.\nLike any distortion, it ultimately adds in more harmonics, so it will make any sound you give it have a lot more high frequency content; however, folding in particular adds a ludicrous amount, so much so they\u0026rsquo;re sometimes deemed \u0026ldquo;Anti-Filters\u0026rdquo;.\nWavefolding eats the transition between high and low, the slopes, so with a square wave it has nothing to grab onto and so does nothing except for maybe changing the level. Because of this, you\u0026rsquo;ll most often see simple waves forms like sines fed into wavefolders, like sines, triangles, and saws.\nIf you\u0026rsquo;re looking to get crazy, check out Befaco\u0026rsquo;s Chopping Kinky (available in hardware and VCV) which basically replaces the top half of the wave with one input, the bottom half of the wave with another, and then lets you fold both of those inputs. It\u0026rsquo;s absolutely nuts. See the manual here if you\u0026rsquo;re still confused.\nWave folding is very easily done by using fmod() and compensating for the reduced signal with gain. This is relatively efficient, but if you need more control you can also just generate a polynomial/LUT to do the folding. That\u0026rsquo;s a bit harder to add control to though. See https://ccrma.stanford.edu/~jatin/ComplexNonlinearities/Wavefolder.html Drive, and Tubes # \u0026ldquo;Drive\u0026rdquo; is just soft clipping with some extra nonlinearities. Tubes are hard to emulate because they do a bit of everything. Soft clipping, adding some harmonics, compression, some hysteresis - basically, this is entering the fustercluck that is Virtual Analog and there be dragons. See https://infocomp.dcc.ufla.br/index.php/infocomp/article/view/369/353 Bitcrushing \u0026amp; Comparators # Bit crushing is often related to sample rate reduction as well, so one at a time:\nBit crushing is taking the signal and lowering the number of bits used to store it. This means it\u0026rsquo;s an inherently digital effect. Most audio is processed at 16 or 24 bit, even at just 16 bit that means each sample point can be any of \\(2^16 = 65536\\) values. Usually, audio is sampled with a Digital to Analog Converter (DAC) at around 44.1khz. This means that 44,100 times a second the signal is sampled and the level (amplitude) of the signal is stored as a value between 0 and 65536. That bit depth (16bit) is good enough that you shouldn\u0026rsquo;t really be able to tell it\u0026rsquo;s digital once it\u0026rsquo;s spit back though a Digital to Analog Converter (ADC). However, if we turn that bit depth down, let\u0026rsquo;s say all the way to 8 bit now there are only \\(2^8 = 256\\) levels of amplitude the signal can use, even if we continue to sample at the same rate, this will cause audible distortion and bring a lo-fi sound. Crush even harder, say down to 2 bit (4 levels), and it turns into an outright destructive distortion that mangles the signal.\nSimilarly, you can reduce the sample rate can to cause the signal to have issues with higher frequencies as a result of aliasing.\nRe sample, quantize. This is about as textbook DSP as it gets. Doing the quantization (bit reduction) efficiently is often as easy as just \u0026amp;= 0xFF00 or whatever to match the bit count you want. Fuzz # Describing fuzz in words without being recursive and calling it \u0026ldquo;fuzzy\u0026rdquo; is difficult. Generally, Fuzz is the dirtiest of the dirty when talking about distortions. It\u0026rsquo;s the punk-rock sound. But, it doesn\u0026rsquo;t have to be. You can use Most fuzz effects (usually guitar pedals) subtly so that they add just a bit of crunch on the hardest played notes, adding some grit that\u0026rsquo;s more at home in a country song than punk or metal.\nFuzz is typical done for guitar and so most of the famous ones are pedals. Of those, the most well known are:\nThe Big Muff by Electro-Harmonix Though competitors have cloned it and made it better Fuzz-Tone / Tone Bender / Fuzz-Face all have roughly the same circuit, evolved in slightly different directions Each has clones made by pretty much every pedal maker Super-Fuzz by Univox Also cloned by everyone I do recommend looking each up and getting a vibe for how they sound. Even if you never intend to get a hardware fuzz pedal, most software fuzz effects are trying to sound like one of these.\nThere\u0026rsquo;s an aspect of fuzz that makes it hard to convey over video reviews: It plays like a totally different instrument.\nAll distortions change the dynamics of your input (See the whole first section of this page) but they also respond differently depending on the input dynamics as well. Fuzzes do this to the extreme. The difference between playing soft and playing hard is crazy, as is the difference depending on how much input gain you feed it (how much do you turn the volume up or down before the effect). This makes playing a fuzz well radically change how you have to play your instrument. It necessitates some care in thinking about your volume knob as a tone control.\nSome fuzzes will have an in-built analog octave effect. It\u0026rsquo;s more common for this to be an octave up, but down is fair game too. These are sort of their own thing, and while they don\u0026rsquo;t have much to do with dynamics or distortion, they don\u0026rsquo;t fit anywhere else either, so\u0026hellip;.\nOctave \u0026amp; Pitch Shifter Effects # Okay, from earlier in this guide we talked about how on the piano every 12 notes, the note repeats, and that\u0026rsquo;s called an octave.\nWell, that also means you can play both notes at once and your ears will hear 1 note, it\u0026rsquo;ll just be a lot thicker. It adds a lot of extra flavor.\nAnalog Octave effects # These \u0026ldquo;analog\u0026rdquo; effects can exist in software too, it\u0026rsquo;s just that they\u0026rsquo;re well known from a pre-digital era, where they could be implemented in analog circuits relatively easily. Octave Up # There are two very super simple ways to get an octave up effect, the easiest to understand is rectification:\nWhat this means is to take the negative bit and flip it positive - here, the blue sine wave is rectified to make the red wave: Now, remember frequency = pitch = how often does the signal repeat. If it repeats twice as often that\u0026rsquo;s twice the frequency or up 1 octave. If it repeats 3 times as fast, that\u0026rsquo;s up two octaves, and so on. By doing this we\u0026rsquo;ve made a new signal, one octave up.\nWe can then mix those two signals together and it\u0026rsquo;ll have roughly the same sound as playing the same note at the same time an octave up on the instrument in the first place. The roughly is because there\u0026rsquo;s two big differences:\nThe red wave above isn\u0026rsquo;t a sine wave anymore. Sure, it\u0026rsquo;s an octave up, but it also has a lot more flavor than a basic sine wave too. On a anything but a synthesizer, it would be impossible to make the phase match on each octave if playing by hand. In the above picture you can see how the hills and valleys of the two waves align. That wouldn\u0026rsquo;t happen if you actually struck both keys / strings / whatever. You can also do it by what the audio world calls \u0026ldquo;Ring Mod\u0026rdquo;. Ring mod is just multiplying two signals together. Now, Ring Mod can, and usually does, sound totaly different from an octave effect. Typically an entirely different signal is multiplied with the input, causing what\u0026rsquo;s effectively a tremolo-that-can-invert-the signal effect, but with audio-rate signals instead of an LFO. Despite historically using analog electronics, this sounds a bit like sample-rate-reduction (Some of what makes Lo-Fi sound Lo-Fi) \u0026hellip; anyway\u0026hellip;. Ring Mod can give an octave effect if you just multiply the signal with itself.\nIf you\u0026rsquo;re wondering why that works, it\u0026rsquo;s because -1 * -1 = 1. That is, we\u0026rsquo;re still rectifying the signal (making the negative bits positive) but we\u0026rsquo;re doing it in a different way. The result is a much \u0026ldquo;cleaner\u0026rdquo; octave sound, as you can see, the output is a lot closer to the input this time. Depending on how the implimentation, it may also be inverted first - imagine flipping the red wave. The effect is nearly identical in sound, but may change how other effects in the chain respond.\nOctave Down # The easiest way to generate a signal an octave down is to just set some threshold and flip a signal every other time that threshold is crossed. Effectively, this means counting the number of peaks you see and generating a square wave at half that frequency: This, uh, isn\u0026rsquo;t great? If out input was a square wave, awesome, we just got a perfect square an octave down back out. If it\u0026rsquo;s anything else\u0026hellip; we also just got a square. This can sound good, but isn\u0026rsquo;t always what you want.\nAnother option is to use that output square wave to allow the original signal though or not: And that\u0026rsquo;s getting a lot better, but most analog octave effects will be a bit fancier than this,\nThe Boss OC-2 unit generates tones at one and two octaves down from the input signal. This effect also uses flip-flops to generate square waves at 1/2 and 1/4 of the input signal frequency, but rather than simply mixing in these signals, it uses them to invert the polarity of the input signal on every other cycle (every two out of four cycles for the second octave).\nThis effectively amplitude modulates the input signal with a carrier at half the input signal, creating new frequency components at 1/2 and 3/2 the input signal. The 3/2 component is low-pass filtered out. This more complex approach lessens the synthetic sound of the octave tones by making them more closely associated with the original signal, and also makes the effect volume-sensitive.\n- Wikipedia \u0026ldquo;Octave Effect\u0026rdquo; Digital Pitch Effects # I don\u0026rsquo;t want to go into how real-time digital pitch shifting works. If you really must know, looking up Phase-Locked Loops (Wikipedia) and the Fast Fourier Transfrom (Wikipedia) will give you the start of an idea, but both require a fair amount of math-y science-y engineering-y background to gronk, and it mostly doesn\u0026rsquo;t matter. What does matter is unlike the analog-effects (which can also be done digitally anyway) these can:\nPitch shift to non-octave intervals (Perfect 5ths are particularly fun ) Handle playing more than one note much, much better than the above Allow live sweeping of the shift amount (\u0026ldquo;a digital whammy bar\u0026rdquo;) Produce much better reproductions of the original waveform at the new frequency Is digital is all around better? Ehhhh. I don\u0026rsquo;t want to say \u0026ldquo;better\u0026rdquo;. First, some of how the analog effects - which again, can be modeled digitally - can misbehave often sounds good.\nSome of this \u0026ldquo;good\u0026rdquo; sound is cultural context too. You\u0026rsquo;ve heard these effects, and the distortions they cause, before - even if you didn\u0026rsquo;t realize it.\nIf you want to sound like 80\u0026rsquo;s metal, using a digital octave effect may sound \u0026ldquo;wrong\u0026rdquo; as they didn\u0026rsquo;t have digital octave effects back then.\nIf you\u0026rsquo;re wanting to try a digital pitch shifter in VCV Rack, HCTIP (VCV Library) does good enough, and is free and open source. If you need a VST Plugin for pitch shifting, the Kilohearts Pitch Shifter is free and does an incredibly good job.\nTracking? # Tracking is how well the effect produces the correct frequency based on your input. If you play an C and you get a C# and octave up from the effect, you\u0026rsquo;ll have a lot of dissonance and it\u0026rsquo;ll sound weird. You want the effect to consistently produce the right tone.\nGenerally, these effects have some issues with polyphony - playing more than one notes at once. If you play a chord, it may not sound like playing that same chord twice, one octave up.\nThe basic rectification, octave up tends to sound fine with polyphony, the ring-mod version \u0026hellip; not so much. But, the ring-mod does fail in cool sounding ways so long as the chords have simple relationships, like perfect 5ths. This produces what is actually one of my absolute favorite sounds in the realm of guitar pedals, though as a general-purpose effect on other instruments that tracking failure is less useful.\nDigital octave ups can be all over the place. They may do the analog methods digitally, in which case they\u0026rsquo;ll behave more-or-less the same, or they may use some of the black-magic DSP techniques, and so fail in weird ways, like making random tones at different frequencies, ignoring low frequency notes, or generally just sounding robotic and weird. Failure isn\u0026rsquo;t always bad in music though, so see what happens.\nMost octave down effects use the basic counter / frequency divider method described above, so they all tend to fail in the same way. There can be subtle difference though. For example, some will try to track the input signal and do some intelligent things to produce a cleaner octave sound - this can fail.\nSome digital octave downs will do as described above and get the spectrum of the sound, shift it down, and then turn it back into a waveform. This process, for technical reasons, tends to fail at lower input frequencies (~200Hz and below will sound weird). Most digital effect designers know this and will do tricks to compensate, but it\u0026rsquo;s still something to look out for.\nI wouldn\u0026rsquo;t worry to much about the why it sounds weird. Unless you\u0026rsquo;re trying to DIY your own effect, it doesn\u0026rsquo;t matter. What does matter is if you can make it sound cool/good, and again, its failures might be good for this.\nHow did we get here again? # Ah, right, fuzz.\nOctave effects and fuzz, despite on the surface having nothing to do with each other, are often paired for two reasons:\nThey sound kick ass together The circuits for doing fuzz often make adding an octave effect easy. This is why you can grab the Joyo Voodoo Octave (not my favorite pedal by any means\u0026hellip;) for $40.\nYou should note that most analog octave up guitar effects won\u0026rsquo;t have any knobs at all, for example, the EQD Tentacle - but this applies to the 2-in-1 Fuzz-plus-octave pedals too: The octave is on or off, no controls, not even blend.\nNoise Gating # Some effects, especially if you\u0026rsquo;re using hardware, will add a lot of noise to your signal.\nThere are two ways to handle this, the simplest is to use a noise gate. The idea is simple, that noise should be a lot quieter than your normal signal, so whenever you drop below a certain threshold, just cut the signal. You\u0026rsquo;re not really removing the noise, but you are only letting it get though when there\u0026rsquo;s something else to cover it up.\nThis obviously has it\u0026rsquo;s limits. If your Signal to Noise Ratio (SNR) is to low (that is, the sound you want to hear isn\u0026rsquo;t much louder than the noise) then the gate may be to set to aggressive to actually cut the noise, causing the intended signal to fade out to quickly, missing the tail-end of each note (or string pluck, as this is most commonly a guitar problem).\nThe other option is to use a true de-noising plugin. There\u0026rsquo;s many out there. Probably the most popular are the various plugin in Izotopes RX suite - These regularly go on sale dramatically - you should not pay full price for them. While I haven\u0026rsquo;t tried it, ToneLib NoiseReducer looks like a good bet if you\u0026rsquo;re trying to use all free tool.s\nThe Animated Guide to Gates (Patches.zone)\nThis will require something to do the shareholding. You\u0026rsquo;ll want an envelope follower on the signal that you\u0026rsquo;re detecting the threshold of, otherwise you\u0026rsquo;ll cut out far to often. The follower can be as dumb as a very cheap LPF implementation. The detection may benefit from having a different on and off point for the gate too: different rising and falling thresholds. Gating other effects with a mix # gated verb, gated distortion\nLimiting # Limiting is basically the exact same as clipping from before (including the hard and soft bits) except it usually involves being a little more clever about when to clip the signal, usually having some attack time before the signal gets clipped, moreover, the intention is usually to avoid distortion outright and so the limiter will usually try to turn down the gain a bit to keep signals in check, rather than just clipping them and getting all those extra harmonics.\nsee: Q. Is there a difference between clipping and limiting? from Sound on Sound.\nThe limiter says stuff like \u0026ldquo;every time the signal gets loud, I\u0026rsquo;ll gently attenuate it so that it\u0026rsquo;s not TOO loud\u0026rdquo;.\nA clipper will say \u0026ldquo;every time the signal gets too loud, I\u0026rsquo;ll chop every peak that\u0026rsquo;s too loud and fuck you\u0026rdquo;.\n- [deleted] account on Reddit If you already know what compressors do, you can basically think of limiters as compressors with the ratio knob at ∞. See Limiter Vs Compressor: What you need to know (Musician on a Mission).\nCompression # The Animated Guide To Compression (patche.zone) is a great place to start, but if you still need more, I recommend reading on:\nThe above is a 3 part series that explains compressors better than anything I can really write here Compression can mean two things when talking about music and sometimes this makes talking about it sometimes confusing. On this page when talking about compression the meaning is for compression that changes the dynamics of the audio, making loud sounds quieter and quiet sounds louder sort of ~squishing~ the sound. The other, unrelated, definition of compression is data compression, for example .mp3 vs .wav. We\u0026rsquo;ll go into that later.\nOkay, this is sort of a lie. Compressors don't technically make anything louder, only quieter. It's just that usually there's some input and/or output gain that makes it seem this way. If you first boost all your signals, then lower louder parts that's nearly the same thing as making the quiet stuff louder and louder stuff quieter The reason this is worth bringing up is because not all compressors actually have that gain stage, so they will literally only make the loud sounds quieter and assume the user knows they need to compensate\nUsually, compression has a few basic attributes that are relevant:\nThe \u0026lsquo;Threshold\u0026rsquo; is what level the compressor has to be over to do anything at all. \u0026lsquo;Attack\u0026rsquo; is the time it takes for the signal to be affected. All compressors will have some minimum attack time if they\u0026rsquo;re happening live (there are some compressors with \u0026lsquo;Lookahead\u0026rsquo; that solve this problem) which lets the transients (sharp changes) of louder sounds, like the start of a drum hit, get through to some extent, but more attack will let more of the drum transient through. Tune to taste, release is a similar idea, but controls how the compressor behaves as it falls below the threshold, letting the compressor fade out with a given time instead of having a sharp cut. Compressors can be used to make drums really stand out, give guitars a longer sustained sound, or just glue the mix together better.\n[TODO] knee, sidechain\n[TODO] Dynamic range compression, Parallel Compression, Multiband compression, different analog models (FETs v tube v optical)\nWTF is a Compander? (YouTube, Dan Worrall)\nHow to use a Compressor + 10 tips (Musician on a Mission)\n[TODO] parallel Compression\n[TODO] Multiband Compression\n[TODO] Expansion\nThere\u0026rsquo;s an infinite number of ways to make a compressor. The most basic is to just multiply the signal with the a scaled inverse from an envelope follower, and then multiply that with some make up gain. The envelope follower is the tricky part, as the attack and release of that follower will make a huge difference. More over, a lot of compressors have non-linear frequency response. Things, of course, get even weirder when you\u0026rsquo;re doing multi-band compression - though that is mostly just doing a LPF, BPF, and HPF with related cut-off frequencies and compressing each \u0026ldquo;band\u0026rdquo; individually. TL;DR: A compressor is easy to make, but hard to make good. Recommendations # While we can look at what make a distortion on the microscopic scale as we have though this page: this sort of misses a point about how these things play together. The truth is you probably want your distortion to do a lot of effects all at once. You probably want some overdrive, some soft clipping, some of the dry signal, some eq applied, some filtering, some \u0026hellip; magic - that is, you probably want your distortion to do all the things you\u0026rsquo;re thinking about when you think about what a guitar sounds like after running though the guitar amp and speaker.\nCalling this magic isn\u0026rsquo;t that far from the truth. The way analog circuits that we think to sound good do distortion is extraordinarily tricky to emulate digitally. It\u0026rsquo;s so bad that the best emulations are using AI to model the circuits because humans just can\u0026rsquo;t get all the weird little quirks.\nWhere I want to end this page is a recommendation to know what wavefolding, waveshaping, bitcrushing, soft vs hard clipping etc. all are, but to just not care most of the time and instead focus on finding distortion sounds you like.\nI, personally, have found my go-to tools are\nVult\u0026rsquo;s \u0026ldquo;Flame\u0026rdquo; for VCV Rack ($25 iirc) Literally any clone of the Pro Co \u0026ldquo;RAT\u0026rdquo; distortion pedal - but actually hardware, software emulations alias like hell. (clones go for ~$30) Noise Engineering Ruina VST (FREE) Kuassa\u0026rsquo;s Gainia preamp VSTs When paired with another distortion (Rat, DS-1, whatever) the a green ringer pedal clone with germanium diodes (the diodes are important, as otherwise the response doesn\u0026rsquo;t feel great, in my opinion) adds a lot of \u0026hellip; something. It is an octave effect, but the way it distorts with chords yields something I haven\u0026rsquo;t heard in anything else. These are pretty much only available from random hand made pedal builders on Reverb, so prices vary. The one I have was made by Dongeomac, but there are others. Evantide\u0026rsquo;s CrushStation These have a nice response to varying dynamics and feel \u0026ldquo;right\u0026rdquo; to me.\nSee EBU R 128 (Wikipedia) if you're curious how loudness is usually defined. I'll talk about this more in the mixing and mastering chapter "},{"id":181,"href":"/music/effects/filter/","title":"Filter","section":"Effects","content":" Filters (LP, HP, BP, Notch) # See the signal processing chapters. If you\u0026rsquo;re trying to do real time DSP and if you want to modulate the cutoff, you\u0026rsquo;re probably stuck with an IIR. FWIW, the delay of an FIR means the linear phase is often worse than not anyway. If licensing isn\u0026rsquo;t an issue, you\u0026rsquo;ll probably want to start with at least https://www.musicdsp.org/en/latest/Filters/index.html or really any DSP library. Implementing a well performing filter isn\u0026rsquo;t that hard. Implementing a well performing, variable-cutoff-filter is doable. Implementing one better than open source libraries is a heckin\u0026rsquo; undertaking. All of that said, if you\u0026rsquo;re after a particular character or Virtual Analog, you\u0026rsquo;ll have to start from scratch anyway. https://www.perfectcircuit.com/signal/learning-synthesis-filters\nLow Pass Filters # Low Pass filters do what you think, they let the low frequencies pass and cut out the high frequencies. As with most filters, this will typically not be a sharp cutoff but instead be a gradual fading of the higher frequencies. Despite this, there is still a point called the cut off frequency, which is defined as the point where the signal is cut by 3db (what this means is discussed below). It\u0026rsquo;s also pretty common for Low pass filters to have some resonance, where the frequency right at the cut off has a bit of a bump, as can be seen in this gif:\nSlew Limiting # Slew, in a circuits, is usually a bad thing. When working with digital circuits - circuits that operate on binary values, 1\u0026rsquo;s and 0\u0026rsquo;s - we want our voltages to be either high or low, so we really, really want clean square waves.\nUnfortunately, in reality we can\u0026rsquo;t get perfect square waves. When transitioning from a low signal to a high signal or a high signal to a low signal, there\u0026rsquo;s a bit of a curve. In digital circuit a lower slew - longer transitions - is almost universally bad.\nWhat does this have to do with synths and filters? Well, a basic tool for making the slew rate lower (longer transitions) is\u0026hellip; a low pass filter. They\u0026rsquo;re the same thing.\nBut, some slew rate limiters can let us set the rise and fall times independently!\nIn synthesizers, we can use slew to our advantage for a lot of things. For audio, it can be used as a very strange kind of filter, sure, but for control signals it can be used for much more.\nOne common use is legato - how long it takes to go to a new note when you press a different key on the piano. If you use a slew limited with individual controls, you can make it really neat slow rise to a higher pitch but an instantaneous fall back to a lower pitch (or vis-versa)\nHigh Pass Filters # High pass filters act pretty much the same as low pass filters, except they do they cut the lows and pass the highs. High pass filters are, ironically, often actually used to give a bump in the bass using the resonant peak.\nNote, one use of high pass filters is to remove \u0026ldquo;mudd\u0026rdquo; and/or DC offset. This is VERY useful, but should be done with some care, as while we may not hear it, audio content bellow 20Hz can matter: Undetectable very-low frequency sound increases dancing at a live concert.\nBand Pass Filters # There are two kinds of bandpass filters:\nFirst, is a \u0026ldquo;fake\u0026rdquo; band pass, where a Lowpass and Highpass filter are placed in series, where there\u0026rsquo;s only a band left that can pass, giving two distinct resonant peaks at the edges of the pass-band Then there\u0026rsquo;s band pass filters which are true band pass filters that have a resonant peak in the middle. Usually if someone is talking about a bandpass, they mean the latter. Bandpasses tend to be ignored outside of using them in an EQ, but they can be fun in their own right. Definitely give them a shot. If you\u0026rsquo;re playing around in VCV Rack, many, many filters have a \u0026ldquo;BP\u0026rdquo; output or input for this. Stabile and Tangents from Vult are good free options with a lot of character.\nNotch Filters # Again, as the name implies, notch filters create a notch in the sound. Often used to correct for an issue in the sound, such as removing a 60hz hum. In Notch filters the resonance control actually changes how steep the notch is, so low resonance (Low Q) will cause the notch to be wider as the slope isn\u0026rsquo;t very steep, but a high resonance (Q) will let you really pick out a specific frequency.\nPeak Filters # These do what they sound like. You pick a frequency and add a peak there. Typically these are used in an Equalizer and can have a negative Q to allow for something similar to a notch, only they dip in instead of totally annihilating the frequency range.\nLow and High Shelf Filters # Unlike all the filters until now which have a resonant peak, shelf filters actually boost or lower the volume all the way to the cut off frequency. In the image below, (1) is a low shelf filter, boosting all the lows (by a lot more than you\u0026rsquo;d ever actually want to) and (8) is a high-shelf set to cut the highs.\nAdditionally, (5) is a peak filter.\nContrast this to a normal Low/High pass filter, adding resonance, (dragging the point above the +0db line in this graph) would only make a spike like this at the cut off point, before falling off, not make a shelf. To clarify, in the image below, (1) has been changed to a low-pass filter with the same settings, with the line being a different color.\nThis new (1), where the line before it is still centered around 0 and it peak up to the \u0026lsquo;dot\u0026rsquo; and then falls off quickly, makes the frequencies after it silent so that (5) and (8) do nothing - the lines falls off far before it gets to (5).\nObviously, This is dramatically different than the low-shelf at the same point.\nComb Filters # Comb filters can be feed-forward or feedback. They sound pretty different. The actually difference equation is dumb simple and easy to impliment, since it\u0026rsquo;s usually just a single delay\u0026rsquo;d sample. Here be dragons for passing into instability though. Pick your coefficents wisely. A comb filter produces a series of equally spaced notches or peaks in the frequency response of the filter. This creates a characteristic \u0026ldquo;comb\u0026rdquo; pattern in the frequency domain, which is why the filter is called a \u0026ldquo;comb\u0026rdquo; filter.\nWhile most of the filters up until now require some intention to bring about, it\u0026rsquo;s fairly easy to make a comb filter on accident, which can cause problems.\nAll-Pass Filters (Phaser) # An all-pass filter is a signal processing filter that passes all frequencies equally in gain, but changes the phase relationship among various frequencies. Most types of filter reduce the amplitude (i.e. the magnitude) of the signal applied to it for some values of frequency, whereas the all-pass filter allows all frequencies through without changes in level. - Wikipedia \u0026ldquo;All Pass Filter\u0026rdquo; So\u0026hellip; it\u0026rsquo;s not really a \u0026ldquo;filter\u0026rdquo; in the traditional sense. Rather, it just changes the phase after the specificed frequency. By moving that frequency around, you can get an effect called a \u0026ldquo;phaser\u0026rdquo; which can add a lot of movement to a sound.\nThe Phaser (Effect) Wikipedia page has some nice audio examples of this.\nFamous examples of phaser effects include the MXR Phase 90 pedal and the EHX Small Stone and Bad Stone.\nFilter Circuits # Electrical jargon incoming. You don\u0026rsquo;t need to understand everything here. Passive Filters # By combining a single capacitor and resistor, you can make either a single-pole low pass or high pass filter, depending on which one is going to ground.\nThis really means they\u0026rsquo;re dirt cheap to make, but don\u0026rsquo;t have steep slopes or any resonance. Still, they\u0026rsquo;re literally everywhere, often they\u0026rsquo;re included just to block DC signals or to avoid really high frequency noise from getting in (or out, to avoid your music gear from accidentally becoming a radio jammer!)\nSallen-Key # This is usually baby\u0026rsquo;s first active filter - adding resonance and a sharper cutoff - the things musicians want. Making one requires a single Op-Amp (a common, cheap component - but not as cheap as resistors and capacitors) and a handful of resistors and capacitors. It creates a 2-pole filter, which is a fancy way of saying it only slowly attenuates frequency above the cutoff. Sallen-Key filters can be built as Low Pass, High Pass, or Band-Pass.\nSallen-Key filters are capable of self oscillation.\nAt high resonance values, the two poles sometimes are obviously separated, causing the slope to have a second peak part way down.\nState Variable (Steiner-Parker) # State variable filters\nThey tend to sound a smidgen brighten and smoother than Sallen–Key filters. They have a 12dB slope, so nice and gentle still.\nTransistor Ladder # Moog Filters\nDiode Ladder # The Diode Ladder filter is most famous for it\u0026rsquo;s use in the TB-303 synthesizer which is the sound of Acid music\u0026hellip;\nA bit confusingly, if you look at a 303\u0026rsquo;s schematic you\u0026rsquo;ll see that the \u0026ldquo;diode ladder\u0026rdquo; is actually made up of transistors. There\u0026rsquo;s some historical context here, but the TL;DR version is that today, if you make it using diodes, the difference should be minimal because if you look closely at one transistor in that ladder, you\u0026rsquo;ll see two of the pins on each are connected to each other, which effectively turns the transistor into a diode. Yay, electronics. Image from this TD-3 Mod Guide, schematic from Nordcore If you\u0026rsquo;re into electronics, see Designing a diode ladder filter from scratch (Moritz Klein, YouTube).\nOperational Transconductance Amplifiers (OTA Filters) # CEM3320\nChebyshev # SEM # Wasp (CMOS) # The filter from the EDP Wasp is extremely famous for being a typical state variable filter where, to save money, they replaced the Operational Amplifiers (Op-Amps) with digital-logic inverters, which creates a crazy heavily distorted filter sound unlike anything else.\nWelcome back to virtual analog hell. The Wasp basically has a fuster-cluck of almost-hard-clipping internal to it\u0026rsquo;s feedback path. This get\u0026rsquo;s messy quickly. See https://dafx2020.mdw.ac.at/proceedings/papers/DAFx20in22_paper_34.pdf You might also be able to extrapolate something out of https://www.youtube.com/watch?v=DnO5sMU5DqU Polivoks (Поливокс) # Again, a famous filter from a particular synth, and again just another State Variable Filter with a twist:\nThe Polivoks filter is just an SVF but the integrator capacitor is actually the stabilising capacitor right there inside the OTA (it\u0026rsquo;s a funny implementation of an OTA at that). - u/erroneousbosh The end result is a fair amount of distortion and multiple peaks down the filters slope. It\u0026rsquo;s aggressive as hell and super fun. Plus, it can self oscillate.\nBack to VA hell. I wish you luck. Formant Filters # If you play with some band-pass filters for long enough, you\u0026rsquo;ll accidentally make something that sounds like a human making a vowel noise. This is known. The frequencies of the peaks for each vowel can also be googled, but if you\u0026rsquo;re just making music, you can usually just drop a formant filter that will let you pick (or morph!) between the vowels.\nhttps://www.musicdsp.org/en/latest/Filters/110-formant-filter.html https://ccrma.stanford.edu/~jos/fp/Formant_Filtering_Example.html Slope, Pole-Zero plots, dB # Filter Resonance (Q) # Self Oscillation # Filters with resonance can often be put into self oscillation by turning the resonance above a threshold for normal operation. In digital filters, you may need to give the filter some sort of brief input before it starts oscillating. With analog hardware, noise in the system, even if not normally noticeable, is typically enough to start the process. Most filters will output a pure sine wave when self oscillating.\nHere I start by feeding this filter an input from an oscillator module which is off screen, and sweep though the frequencies. Then I turn up the resonance a bit, do another sweep. Then I unplug the oscillator and sweep frequencies, you can see that it is silent. Finally, I turn the resonance above the self oscillation threshold, and you can hear the output.\nNote, this module is a multi-mode filter, it\u0026rsquo;s top 4 outputs are various poles of a low pass filter and the bottom four outputs are a highpass, \u0026lsquo;band bost + notch\u0026rsquo;, Phase-shifter, and Band Pass, respectively. Here, you\u0026rsquo;re hearing the output of the band pass filter. The sound of self oscillation will be a sine wave for any of the outputs, though.\nPinging Filters # This filter module actually has a dedicated ping input, which is why I can \u0026lsquo;ping\u0026rsquo; it with a square wave, but typically you\u0026rsquo;d want to ping filters with a trigger (a very short pulse) rather than a square wave (which is high as much as it is low). You can think of this as the difference between striking a drum head and slapping a drum, but keeping your hand pressed on to the drum\u0026rsquo;s skin when you do. Clearly the latter is going to mute the sound.\nAuto Wah # an Auto Wah or Envelope filter uses an envelope follower to control a filter\u0026rsquo;s cut off. Essentially, this means how loud you play will change the filter. These are normally used on guitar, but you can put them on anything really.\nFIR, IIR? # Finite Impose Response, Infinite Impulse Response- ref Signals from Engineering\nEqualizers # Parametric # Graphic # Dynamic # Fixed Filter Banks # "},{"id":182,"href":"/music/effects/meta/","title":"Meta","section":"Effects","content":" Meta # Mid-Side # Want to apply a different effect to the center of your sound than the more hard-panned left or right sounds - that is, does applying a different effect tho \u0026ldquo;middle\u0026rdquo; and \u0026ldquo;sides\u0026rdquo; of your audio sound interesting to you?\nGain-Staging # Gain staging is the practice of setting the gain or level of each stage in a signal chain, such as in a mixer or a sound system, to an optimal level. This is important because it ensures that the signal remains at a consistent level as it passes through each stage of the signal chain, which can help to avoid distortion and other problems.\nGain staging is particularly important in audio applications, where it is critical to maintain a high signal-to-noise ratio in order to produce clear, high-quality sound. By carefully setting the gain at each stage of the signal chain, it is possible to ensure that the signal remains strong and free from distortion. This can affect both software and hardware, but it\u0026rsquo;s normally a hardware problem.\nFor example, if you have hardware amplifiers in your signal chain doing a repeated ½*2*½*2*½*2, the output will not give you the same signal. Why? Because Every time you need to amplify your signal, you add some noise. Worse, every time you do one of these it-should-balance-out-trips you\u0026rsquo;re at risk of clipping. So, by the end, you\u0026rsquo;ve halved your dynamic range and possibly added a bunch of noise.\nImpedance Matching # You\u0026rsquo;ll probably hear about impedance matching issues at some point when working with music. The most likely place for anyone to deal with this - musician or not - is setting up speakers and an amplifier. Some amplifiers are design for 4Ω speakers, some for 8Ω, and as you might guess, speakers to come in either variant. If they don\u0026rsquo;t match, you may have sound quality problems.\nSimilarly, you may go to buy headphones and see they come in a variety of different impedances. Usually 32Ω, 80Ω, and something obnoxious, like 300Ω or more. The science as to why it matters here is much more than I want to get into but the short version is higher impedance will sound better BUT be harder to drive. That is, if you hook up a 300Ω pair of headphones to your phone with a tiny USB-C to 3.5mm adapter, don\u0026rsquo;t expect it to get to good enough volume. Hell, your laptop or desktop may not be capable either. At that range, you probably need a dedicated headphone amp.\nThis quickly veers out of the relm of making music and into pro audio and \u0026ldquo;audiophile\u0026rdquo; land, which is not a debate I want to get into. Still, if you\u0026rsquo;re looking for headphones and need a recommendation at the typical \u0026ldquo;I don\u0026rsquo;t want to drop a million dollars but I want something good price point\u0026rdquo; of ~$150 there\u0026rsquo;s three good options:\nNeed good sound isolation (don\u0026rsquo;t want others hearing you or hearing others?)\nMaking EDM-y stuff? Get the AT M50x Want a good all-rounder? Get the Beyerdynamic DT-770 (80Ω) Want better sound stage at the cost of isolation:\nBeyerdynamic DT-990\u0026rsquo;s (80Ω) will be decent. Senheiser HD599 or HD6xx are both really good choices. Okay, that tangent aside, the other really big place impedance comes up is when recording \u0026ldquo;electric\u0026rdquo; instruments - like electric guitar, violin, etc. usually they\u0026rsquo;ll have pretty high impedance, usually around about 20kΩ, but it varies a ton. To make things play along better, your audio interface (which you should really get one if you intend to record your instrument) will probably have an input labeled (or button to configure an input) \u0026ldquo;Hi-Z\u0026rdquo; or \u0026ldquo;Inst.\u0026rdquo;. In either case, this makes your audio interface and instrument have better impedance matching, usually making it sound better (better tone), have less noise, and generally feel better to play\u0026hellip;.\nBUT\nThis isn\u0026rsquo;t always needed. If you have a pedal between your instrument and your audio interface or sometimes if your instrument has an \u0026ldquo;active pickup\u0026rdquo; (Does it need batteries? Then it\u0026rsquo;s probably active.) Then this may make things sound worse.\nThis explanation is intentionally non-technical, because if you\u0026rsquo;re just making music what matters more than anything is it sounds the way you want. This should be enough for you to at least get a rough idea of what to try if it doesn\u0026rsquo;t.\nIf you want to know more about impedance, you may want to dig into some of the Circuits pages on this website.\nPlaying the Feedback Loop # Imagine you have a weird effect with two inputs and a way to split the output such that it doesn\u0026rsquo;t half the volume of to do so, and you wire it in a seemingly stupid way,\ngraph LR A(\"Signal In\") --\u003e B[\"Weird Effect\"] B --\u003e B B --\u003e G(\"Signal Out\") This pedal is going to cause a feedback loop - the same thing that happens when you put a microphone to close to a speaker that outputs the mics signal. Only, you can actually tame feedback. If you put something in the loop to lower the volume (which an effect with this will probably have) you can get it right on the edge of exploding into chaos, which can allow you to make some really neat sounds.\nParallel Processing # The most obvious way to route effects is something like this:\ngraph LR A(\"Signal In\") --\u003e B B[Compressor] --\u003e C C[\"Drive\"] --\u003e D D[\"Delay\"] --\u003e E E[\"Reverb\"] --\u003e F(\"Signal Out\") And more often than not, that is what you\u0026rsquo;ll want, but this isn\u0026rsquo;t always the case.\nFor example, you could setup something like this:\ngraph LR A(\"Signal In\") --\u003e B A --\u003e D B[Compressor] --\u003e C C[\"Drive\"] --\u003e F D[\"Delay\"] --\u003e E E[\"Reverb\"] --\u003e F(\"Signal Out\") In this case, the compressed and driven signal wouldn\u0026rsquo;t end up going though the delay and reverb, the result would be all the punch of distotion, but with the trails of the clean signal though the delay and reverb.\nAnother common trick is to do something like this:\ngraph LR A(\"Signal In\") --\u003e B B[Compressor] --\u003e C C[\"Drive\"] --\u003e D D[\"Delay\"] --\u003e E E[\"Reverb\"] --\u003e F[\"Mixer\"] A --\u003e F F --\u003e G(\"Signal Out\") Most effect pdeals will have some sort of Dry/Wet (Amount of effect) knob, but with a lot of effects stacked together it\u0026rsquo;s pretty easy to loose some of the charm in the original signal. By doing this, you can blend some of the original signal back in. This is typically reall handy for getting some of the initial transiant (pluck) sound back in after a long chain.\nFrequency Split processing # One very neat option for routing into different paths like this is to set a filter or EQ setup oposite to eachother in each path, such that one gets the lows in your signal and the other the highs. Commonly, this will be done to add distortion to the low end without making the high end to harsh, while also adding reverb to high end that would other wise make the low end dirty.\ngraph LR A(\"Signal In\") --\u003e B B[\"⦧ HPF\"] --\u003e D A --\u003e C[\"⦦ LPF\"] C --\u003e H[\"Fuzz\"] --\u003e I[\"Octave up\"] --\u003e F D[\"Delay\"] --\u003e E E[\"Reverb\"] --\u003e F[\"Mixer\"] F --\u003e G(\"Signal Out\") KMA Machines TYLER DELUXE Demo (YouTube) does a good job of showing off what this is capable of. This is very easy to do in software for free by just running two EQ\u0026rsquo;s with one only using a low shelf and the other a high shelf.\nDealing with phase # If you do any parallel chains, be aware it can and will fuck your day with phase. You may need to adjust for timings to fix this (use some micro-timing tools) or, if it\u0026rsquo;s close to worst-case, just invert the phase and you\u0026rsquo;ll be good to go. Just be aware it\u0026rsquo;s an issue.\nActually playing the instrument # Effects can be awesome, but the instrument itself shouldn\u0026rsquo;t be ignored\u0026hellip; I realize that may be a massive \u0026ldquo;Well no shit\u0026rdquo; but what I mean is that most traditional instruments have a whole world of advanced techniques that can allow you to make new, interesting sounds that then can be processed with the effects you know. It\u0026rsquo;s why cool effects are no replacement for a skilled player.\nMy favorite example is playing harmonics on a guitar, which this video (YouTube) demonstrates well.\nDouble Tracking # One common trick is to hard pan two takes of playing the same instrument. Metal does this commonly with two guitars playing the line (again, hard panned L \u0026amp; R) + a bass playing an octave down. There are plugins to fake this with one take (Search \u0026ldquo;Artificial Double Tracking\u0026rdquo;) but most sound sorta meh.\n"},{"id":183,"href":"/music/effects/misc/","title":"Misc","section":"Effects","content":" Misc Effects # Auto-Tune # Doing autotune in code is well beyond the scope of a small comment. Outside of just throwing AI at the problem - witch is likely to sound god awful - there\u0026rsquo;s no magic bullet here. It\u0026rsquo;s spectral analysis hell. Given it\u0026rsquo;s basically a meme now, I assume you know what Auto-Tune is. What you may not realize is that not all auto-tune is, well, auto. A lot of the time it\u0026rsquo;s done manually, painstakingly correcting the tuning. If the original sound is close enough, it\u0026rsquo;s usually pretty easy to get it to sound natural, too.\nAlso keep in mind pitch correction isn\u0026rsquo;t just for vocals, you might want to pitch correct your guitar playing, change a note in an already recorded sequence when you change keys, or even just use it as a glitchy effect on pitch bends.\nVocoders # Traditionally, It\u0026rsquo;s a lot of band pass filters with envelope followers. That\u0026rsquo;s it. That said, actuall implementiton, use an FFT, not a fuck load of filters. See https://dsp.stackexchange.com/questions/1232/programming-a-vocoder Vocoders are a bit weird to understand, and really need a visual explanation. This first video is really trying to sell you on the \u0026lsquo;OVOX\u0026rsquo; vocoder, but does start with a decently good explanation. The second video is for a particularly neat vocoder-y, pitch-shifty effect that I think does the vocoder effect better than your traditional vocoder. It is kinda pricey though.\nNote, that when you hear a vocoder you may confuse the sound for a talkbox, the way they work is pretty dramatically different. There\u0026rsquo;s an extraordinary good video on talkboxes embedded at the bottom of this page.\nPitch, Glitch, \u0026amp; Granular # Most of these come down to recording a buffer, occasionally playing back from that buffer, and doing weird things with the sample rate or reversing the order. Some pitch effects, like the PitchFork+ below, are real time and are doing much crazier voodoo. If you just want to do monophonic octave up/down, that\u0026rsquo;s easy though. Just use a PLL (or code to simulate one) and multiply it for octave up or just use a digital counter and output on every-other above-threshold point for octave down. This just tends to sound like ass with polyphony. Rather than try to explain all of these, I\u0026rsquo;m just gonna throw a grid of videos at you. Skip around, hear some neat sounds. Get inspired.\nPitch # Glitch # Granular # Spectral Editing # Spectral editing is sorta crazy, the idea is instead of working with waves in the time domain, you\u0026rsquo;re applying effects in the frequency domain. The idea being that you can directly select and work with chunks of frequency in a way that would be a nightmare of filters otherwise. You can even do weird things like delay only certain frequency blocks (see MSpectralDelay) De-Noising \u0026amp; De-Essing # (Make sure you didn\u0026rsquo;t gloss over Noise Gates in the Dynamics Chapter)\nRing Modulators # Talk-boxes # There\u0026rsquo;s really no way to emulate this, as it\u0026rsquo;s less a matter of the sound and more of the interface - using a real mouth as a filter. Vocoders are basically the closest you\u0026rsquo;ll get, but you lose out on the infinite sustain. Even digital has limits, I\u0026rsquo;m afraid. "},{"id":184,"href":"/music/effects/time/","title":"Time","section":"Effects","content":" Time Based Effects # Delay # There are a million ways to make a delay that\u0026rsquo;s weird. Most basic? Make a ring buffer and add the signals, probably with a dry/wet mix. Less basic? IDK, add in multiple taps on the ring buffer? Use random samples in the buffer? Change the sample rate of the buffer? Reverse the buffer occasionally? Go nuts. Delay is basically echo. Take a sound in, and repeat it it it. Normally the main controls on a delay are \u0026lsquo;Time\u0026rsquo;, which controls how long of a delay there is before each repeat, \u0026lsquo;Feedback\u0026rsquo; which controls how much the level is reduced each time the delay repeats (and in turn, how many audible repetitions there are), and \u0026lsquo;Dry/Wet\u0026rsquo; which controls how the signal is blended, entirely dry will have no delay, entirely wet may even miss the initial sound adding a weird latency before you hear what you\u0026rsquo;re playing. Some delays have additional controls, obviously I can\u0026rsquo;t cover every possible delay, but I\u0026rsquo;ll try to cover most:\nSome delays instead of letting you set a delay time or \u0026rsquo;tap\u0026rsquo; a delay tempo in to actually synchronize to a clock signal input which lets the delayed repetitions always be in time with the rest of the song.\nStereo delays many have additional controls as well, most commonly offering a different delay time for the left and right channels. Often a \u0026lsquo;Ping Pong\u0026rsquo; mode will also be available where the left and right speaker alternate for the repeated sound- \u0026lsquo;ping\u0026rsquo; and \u0026lsquo;ponging\u0026rsquo; out each side until the sound cuts out.\nSome delays may also allow for unity or higher feedback, which will cause the delay to be infinite or, if above unity, infinitely grow in volume until it\u0026rsquo;s just a distorted clipping mess. This can actually be a lot of fun to play with.\nFrom the Quick Reference Card for the Chronoblob 2 from Alright Device Some delays let you insert other things into the feedback path. This means you could do things such as having each repetition be progressively more filtered, cutting out more and more high end each time or putting a delay in the delay. (yo dawg, I heard you like delay?).\nSome digital delays and most analog delays (especially bucket brigade delays(1)) can produce interesting sounds if you change the delay time while audio is going through the buffer, resulting in a sort of pitch shift as the delay catches up or slows down. Here\u0026rsquo;s a demo of Chronoblob2, which does this sort of pitch shifting, in action:\nThere\u0026rsquo;s also a demo of over unity gain at the end. I\u0026rsquo;ve edited the volume of that, but it\u0026rsquo;s still a bit alarming! It\u0026rsquo;s also worth noting that by making delay time very short and having gain near unity, sending a brief trigger (impulse) can make a sound that sounds like a string being plucked. This is called Karplus-Strong Synthesis. To the right, I\u0026rsquo;ve shown a way to do this in VCV Rack. Finally, it\u0026rsquo;s worth noting that there are a few interesting features some delays may have, such as letting the delay buffer be frozen to infinitely repeat what was playing at the time (unity gain, ignore input), reverse\u0026rsquo;d delay - having the initial sound play forward but each repeat play in reverse, pitch shifted delay- having each delay affected by a pitch shift, often done with octave up/down. Often, this pitch shifting is done via Granular Synthesis, as mentioned above. Using granular synthesis does allow for some other interesting options though, such as Unfiltered Audio\u0026rsquo;s Sandman Pro VST.\nScreenshot of Eventide\u0026rsquo;s Quadravox VST, with pitch shifted delays Slapback delay # Slapback delay is just a short delay with only a single echo, no feedback. It\u0026rsquo;s often used on guitar, but it\u0026rsquo;s nice on vocals and drums too! Here\u0026rsquo;s a little example with Mutable Instruments\u0026rsquo; Elements as the source. The first few notes are the dry signal, then I bring it in.\nlooking at a snippet of this audio, you can see just how short the delay is, with the slapback being on the notes that have the double hits.\nDelay at 100%(+) feedback? # Most delays will let you adjust the number of repeats but usually what you\u0026rsquo;re doing is adjusting how much volume each repeat should go down by. If you set each repeat to not loose any volume at all, the delay will go on forever. (Which can be very bad if you\u0026rsquo;re adding new stuff to the delay - this gets really loud, really fast!!) but it can be a really fun sound to explore. I recommend giving this one a shot. Try some different delays and see what happens as you max out the \u0026ldquo;repeats\u0026rdquo; or \u0026ldquo;feedback\u0026rdquo; knob.\nSome will ever let you go above 100% to make each repeat get louder. This can get really crazy, so be prepared to quickly go \u0026ldquo;oh shit!\u0026rdquo; and turn it back down!\nTo see a good use of this in practice, check out My Secret Guitar Pad Patch from the 1990\u0026rsquo;s (Youtube, Dan Worrall), where he Inversely links volume and delay feedback.\nVintage Delays # Bucket Brigade Delays # Tape Delays # Oil Can Delays # Loopers # Loopers are most commonly seen in hardware and can be seen as a sort of mix between samplers and delays. Essentially you just tap in when you start playing, play what you want, then tap out, then, the loop of whatever you played will play back to you. There may be additional settings, such as a half speed effect.\nOften you\u0026rsquo;ll see loopers used for \u0026lsquo;Live Looping\u0026rsquo; performances, where each layer is looped and overdubbed to create a full song\nHere for example is a jam using the Ditto X4 looper (the box slightly blurry, closest to the camera), which is used to loop the guitar here.\nReverb # The DSP for reverb is a black magic. If you actually want to persue this, see https://www.youtube.com/watch?v=Il_qdtQKnqk then go read ALL of Valhalla DSP\u0026rsquo;s blog post, then realize making a good algorithm is just thousands of hours of trial and error. Reverb is the sound of a space. It\u0026rsquo;s the reflections of the sound waves off of everything around you - be it your shower\u0026rsquo;s walls as you sing or the vastness of a cathedral. It\u0026rsquo;s why singing into a well can sound beautiful (YouTube).\nIt used to be that to get good reverb in studios required literally playing in these spaces or recording the sound, piping it into a room made to have good reverb with a carefully placed speaker and mic, and recording the result.\nFortunately, today, we have really, really good digital reverbs.\nBetter, we have reverbs that can go places no reverb could before, letting you feel like you\u0026rsquo;re in a cave or (if sound could travel there) outer space. We can modulate the reverbs to make sounds that will blow your mind.\nRooms # You\u0026rsquo;ll often see reverbs listed as \u0026lsquo;room\u0026rsquo;, \u0026lsquo;cathedral\u0026rsquo;, \u0026lsquo;cave\u0026rsquo;, etc. These are trying to emulate the sound of playing in a closed but real space.\nPlate # ↑ See the above video, Why Huge Metal Plates Are on SO Many Songs (YouTube). There are plenty of plate reverb emulations. I particularly like Plateau in VCV Rack: Spring # Seriously, watch the above video, Why Huge Metal Plates Are on SO Many Songs (YouTube). Text is not the best medium for explaining how something sounds.\nConvolutional # When working with signals - which fundamentally is what making music is - there\u0026rsquo;s this mathematial process you can do called convolution. This is a bit hard to explain, so let\u0026rsquo;s start by looking at a drum hit\u0026rsquo;s waveform:\nOkay, now let\u0026rsquo;s really zoom in:\nWe have all these tiny dots indicating the volume at that moment. In most recording we\u0026rsquo;ll have ~44 thousand of these dots per second. These are the values we\u0026rsquo;re telling the speaker to move to produce the waves. Cool, right?\nNow, I want you to imagine we have only one little stem and dot. That\u0026rsquo;s a super brief \u0026ldquo;click!\u0026rdquo; though the speaker. This click is usually called an Impulse.\nWhen you hear this click in your room, it will cause the room to echo a bit, and even if your brain mostly filters it out - you\u0026rsquo;ll hear the various things the room (and the speakers, for that matter) are doing to that \u0026ldquo;click\u0026rdquo;.\nNow, if we make the assumption that the response to that click - what is really called an impulse response is:\nLinear - There\u0026rsquo;s a nice input-to-output relationship with regards to amplitude - A quieter input would just make the same reverb, but quiter Time-Invariant - The response to that impulse will be the same (or at least close enough, for reverb anyway) whever me make it We can record that result and use it as a reverb. How? Well think of each point as the volume of the reflections from the room of the original sound at that moment in time. It\u0026rsquo;s like a map for when to play delays though the world craziest delay effect. But, we need that effect we can plug it into - that effect is called a convolution.\nBut, let me back up just a second:\nBoth of these assumptions are probably not 100% true. If you blast your speakers hard enough with that click, you may make things on the walls literally shake - clearly that\u0026rsquo;s not the same. Similarly, sound technically cares about temperature a bit, so, if you\u0026rsquo;re change the temperature during the day, time invariace also breaks down, but within reason, the assumption works. Reverb is, for most environments, close enough to being linear, time invariant that it doesn\u0026rsquo;t matter. The same is true of the sound of most guitar amp\u0026rsquo;s speakers - they will also color the sound in a way that shouldn\u0026rsquo;t care about the volume (barring extremes) or with time (barring significant aging)\nBut, note I bolded \u0026ldquo;speakers\u0026rdquo; that\u0026rsquo;s because the amp itself absolutely is not linear. Most guitar amps intentionally distort at higher volumes, and this distortion changes as it\u0026rsquo;s pushed harder. This will be relevent in a moment.\nOkay, so, we have our impulse response. Usually, these will look (and sound) a bit like a drum hit if played normally, but they\u0026rsquo;re not intended to be played normally, the intent is to use them with convolution\nThe idea is you can take this new signal you\u0026rsquo;ve generated and scale it by the amplitude of each of those little points in your original recording and then keep adding these together. Basically, take your recorded impulse response and layer it on top of each point, scaled by the amplitude of that point.\nIf you recorded the impulse response of a room, it should sound like that room, and by adjusting how much you scale it you can choose how much of the effect of the room to apply. Of course, it doesn\u0026rsquo;t have to be the room you\u0026rsquo;re in. Somebody could send you the response for a cathedral, or a cave, or a parking garage. They could also send you the response of a guitar amp\u0026rsquo;s speaker. Or, someone could hand-craft a fake response to make a fancy delay. So long as the effect doesn\u0026rsquo;t have something in it that changes in time (like a phaser, modulated delay, vibrato, etc.) it can be recreated this way.\nOf course, this also opens up a really weird option: you can use any recording (as long as it\u0026rsquo;s reasonably short) for this. You can use the sound of a drum hit as a reverb! It actually works surprisingly well sometimes!\nBut - I did just say \u0026ldquo;(as long as it\u0026rsquo;s reasonably short)\u0026rdquo; - what\u0026rsquo;s up with that?\nWell, this if you\u0026rsquo;re making music with a sample rate of 44kHz (pretty typical) and the impulse response has 300 samples in it (still quite short) you\u0026rsquo;re asking your computer to do 13200000 multiplications a second. Now, that\u0026rsquo;s still not awful, but clearly, the longer the response, the worse it gets. If you have a 1 second response, that will be 44,000 * 44,000 = 1936000000 multiplications a second - again, on a modern computer its doable, just know it\u0026rsquo;ll eat your CPU.\nThis is one of the reasons why even if we technically could do a lot of effects via convolution, we often don\u0026rsquo;t.\nBut, even this isn\u0026rsquo;t totally true - if the response is long enough there\u0026rsquo;s a fancier way to do the convolution by using something called the FFT and transforming the both the impulse response and input signal into the frequency domain and then simply adding them together - don\u0026rsquo;t worry if you no idea what that means - The point is, we can replace all of that multiplications with a single addition! Sort of\u0026hellip;\nIn reality, this is how it will be done for any remotely large impulse responses, but it\u0026rsquo;s not all sunshine and rainbows, that FFT bit actually pretty expensive for a computer to do too, espically at high quality. Plus, to keep latency down, the FFT has to be done pretty rapidly, so, even with the fancy-math to avoid it being out right infesibale amount of computations, convolutional reverbs still tend to be on the computationally expensive side - if you\u0026rsquo;re working on a laptop and want to run a bunch of virtual synths and other effects to, you may not have the heavy lifting required to run one.\nStill, if you can get away with them, they do often sound extremely good. Usually you won\u0026rsquo;t get much control over them though as the reverb (or guitar amp speaker, or delay, or whatever) is basically baked into that recorded impulse response.\nShimmer # A bit out of order here, but in a few pages we\u0026rsquo;ll talk about how you can use an effect to add an Octave up to a sound, adding a lot more high-end and an almost-synth like, two-instruments playing at once effect.\nThere\u0026rsquo;s a fancy way to use this where you shove the octave up effect into the feedback-loop of the reverb, causing these fading-in-volume but rising-in-pitch (or less commonly falling) tails\nThis demo from Valhalla DSP (YouTube) does a good job of showing what this is capable of.\nInternals # If you\u0026rsquo;re feeling particularly interested in this and want to learn more, I strongly recommend checking out this video which explains a bit about how algorithmic (basically any digital but not convolutional) reverbs are made:\nChorus # Chorus does as the name implies, layering copies of the signal together to get a \u0026lsquo;denser\u0026rsquo; sound. To be a chorus (and not just increase the volume) the copies are slightly pitch shifted, delayed, or otherwise modulated relative to one another.\nChorus tend to come in a lot of different flavors, so even if you try one at first and don\u0026rsquo;t love it, try some others. Magic Switch from Baby Audio is free and sound absolutely fantastic. I also recommend checking out Boss\u0026rsquo;s Dimension C pedal - or a clone of it. It has a particularly nice sound. Eventide\u0026rsquo;s TriceraChorus - available as both a pedal and a VST - is also quite go\nSee Time-Varying Delay Effects on DSPRelated.com for more about how this works.\nFlanger # Flanger works by taking a very short delay* which slowly modulated delay time and mixing this back with the original signal. This will result in some phase cancellation effects and give a similar sound to a phaser. The delay time modulation rate and depth, and delay feedback are the most commonly exposed controls. Flanger is probably most commonly used as an effect on guitar.\n*note, that delay, in this context, means an actual time delay, just a buffer that makes sound take longer to get through if that makes sense. Of course, with feedback and mixing the original, this will have the same effect as a delay in the \u0026rsquo;echo\u0026rsquo; sense.\nFlangers sort of makes a comb filter sound too, as you can see in the Spectrum Analyzer on the bottom.\nThe \u0026lsquo;Pyramids\u0026rsquo; Flanger pedal from Earthquaker Devices. Warping # Bucket Brigade Delay is essentially a bunch of capacitors acting as the 'buckets' that are figuratively passed down the chain, moving from one bucket to the next each clock cycle, of course, this clock rate can be changed while it's running. The number of stages in a BBD determines how long of a delay you can get without having a massive determent to quality. "},{"id":185,"href":"/music/effects/trivial/","title":"Trivial","section":"Effects","content":" Trivial Effects # Tremolo # This is probably the easiest to understand audio effect. Put simply, fade the volume in and out automatically. This can be done at different speeds (really fast for a \u0026lsquo;deep\u0026rsquo; effect or slow for something pad-like) and with a bias so that the volume never completely cuts. It can also refer to a playing style where the same note is struck rapidly, leading to a similar effect. In VCV this can be done as simply as hooking up an LFO to a VCA\u0026rsquo;s CV input like we did here, but turning up the frequency of the LFO-2 module (note, that here there is no bias so the volume does actually cut out): Vibrato # Vibrato as an effect requires pitch shifting, which I suppose actually makes it akin to FM synthesis as in Chapter 2, regardless, it\u0026rsquo;s as simple as applying a, typically subtle, pitch \u0026lsquo;wobble\u0026rsquo; into the sound. On a guitar this may be done with a pedal but more simply just by bending the string back and forth with the fingers quickly or using a whammy bar. In eurorack or VCV you can just use the FM input and hook up an LFO\nIf your signal doesn\u0026rsquo;t have a way to directly modulate the frequency, it may be done by varying the time a signal takes to get though a delay line, simulating a Doppler effect - see Time-Varying Delay Effects on DSPRelated.com for more about how this works.\nPanning # Panning in general is just setting the side (left/right) that a sound is balanced on. Just slightly panning everything in a mix can even add a lot. Just like anything, you can also automate panning, but that brings up auto-panners, which are effects that do this rather quickly. Cableguy\u0026rsquo;s Pancake 2 VST is free and sort of the go to for showing this, though there are some tools that may be easier to use. You may also see rotary effects, these emulate older speaker systems that did an effect similar to this by physically spinning the speaker horns in a circle. It has a slightly different sound and is worth exploring in its own right\nWidening # While not trivial in how it works, the concept of widening is pretty simple- if you have a mono or otherwise very \u0026lsquo;centered\u0026rsquo; signal that you want to make feel bigger or just don\u0026rsquo;t want the same sound to come out of both speakers, widening is a good option. You may also want to consider using more extreme time based effects like delay and reverb though!\nChanging Phase # Here are four sine waves. They\u0026rsquo;re the same frequency (pitch/note) and the same amplitude (volume) but they don\u0026rsquo;t line up. That is, the peak of one doesn\u0026rsquo;t happen at the same time as another. The alignment of the waves is called their phase. If the peak of one wave perfectly aligns with the valley of another, those are 180° out of phase.\nOkay. Why does this matter?\nWell, if you have a bass line and a kick drum, and the two are roughly in the same frequency space, they might be 180° out of phase and cancel out - at least somewhat. That\u0026rsquo;s not going to sound good.\nNow, that is a bit of a contrived example, but the gist is, phase does matter, and all you have to do to change is it use a very, very tiny delay.\nDelay in an audio context can either mean just time between things or an echo effect. I just mean the time between things in this context! There are plenty of audio tools which will let you add fractions of a millisecond of delay for this purpose. It seems like something only the pros would care about, but it can make a big difference.\n"},{"id":186,"href":"/music/gettingstarted/","title":"Gettingstarted","section":"Musics","content":" Getting Our Hands Dirty # Music, like any creative endeavor, requires you keep your left and right brains equally talkative.\nLogical Mixing parts together Studying music theory Getting core components of the song laid out Practicing tecnique on an instrument Writing lyrics with good timings and structure Creative Using weird sound sources Combining effects Finding inspiration outside of music Adding fun frills to the song Writing vivid, emotional lyrics If you know that you\u0026rsquo;re a creative type, try to focus on the science and math and technique of things more on these pages and as you practice. Learn how sound actually works and interacts in your environment and how knowing these things well let you make better art.\nIf you\u0026rsquo;re deeply into math and science but want to get into music, still learn what you need but remember to squish that voice down sometimes and to try the weirder things. Stack 14 distortions on top of each other. Use a Kazoo as core element in your song. Try things, experiment, and keep the emotion you want to convey in mind as you work.\nWith that out of the way, let\u0026rsquo;s actually make some music.\nTo get started, we, uh, need something that makes sound. Now, the two of us have a bit of a conundrum here as I am to you no more than words on a page and you to me no more than a hypothetical reader. I don\u0026rsquo;t know what you\u0026rsquo;ve got for existing musical chops, let alone gear. So, I\u0026rsquo;m going to try to make as few assumptions about you\u0026rsquo;re setup as I can. This is, to put it mildly, not great.\nIdeally, I think you should learn music on something tactile. This could be a cheap MIDI keyboard or a starter guitar, but I can\u0026rsquo;t possibly write for every option you may want to start with. So, I will target something that, unless you\u0026rsquo;re reading this on a phone, I know you have: a computer with a keyboard. Of course, this means we\u0026rsquo;ll need some software. For this, I\u0026rsquo;m going to recommend you go download and setup https://vcvrack.com/.\nWhen it\u0026rsquo;s setup you should see something like this:\nThis has instructions, but, uh, wow point 1. assumes you know a lot from the bat. Ideally, you should be able to click the yellow text the top right, in the AUDIO module where it says \u0026ldquo;No device\u0026rdquo; and select your audio device and holy what the fuck is this:\nOkay, so, there\u0026rsquo;s clearly a lot of options here, and this is only in Windows. The actual list and possible drivers will vary if you\u0026rsquo;re on Mac or Linux.\nThe gist is you have a list of drivers, devices, sample rates, and block sizes to choose from.\nThe driver is how the computer talks to the sound making device. Not all are made equal. On Windows, generally, ASIO is better than WASAPI is better than DirectSound. By \u0026ldquo;Better than\u0026rdquo; I mean it should be less glitchy, lower latency (latency = how long does it take for something you to hear the result of something do on screen / pressing a key ) and, in some cases, allowing you to use a micophone/line in or not (DirectSound doesn\u0026rsquo;t let you.)\nThe device is, well, what device you want to use. On some computers, there may only be one option, but if you have monitors connected via HDMI, they may have built in speakers so show up as an option, as may a gaming headset, your webcam (if it has a built in microphone), etc.\nMaking matters more confusing, some devices will show up multiple times with only slight variances in names. On the computer in this screenshot, the speakers are hooked up to \u0026ldquo;Speakers (Realtek(R) Audio)\u0026rdquo; and not \u0026ldquo;Realtek Digital Output (Realtek(R) Audio)\u0026rdquo;. You may need to click a few until you find that you can get sound out. Just click one, mash some keys, see if you hear anything. If not, try another.\nThe Sample rate will ultimately determine the quality of your audio, but also how hard your computer works to make the sound. In nearly all cases when using VCV rack you\u0026rsquo;ll want to be using either 44.1kHz or 48kHz. When you pick a device, it should default to one of those two, just leave it on which ever it uses.\nThe Block Size is the trickiest setting here. In short, your computer processes audio in chunks, this is how big those chunks can be. If you let the computer work on bigger chunks at a time, it doesn\u0026rsquo;t have to work as hard BUT because those chunks are bigger, and so longer time-wise, there will be more latency (delay between you clicking a button and hearing the result). If you go too low, the audio will start to break up, sound robot-y, and just generally glitch out. This really means you need to keep lowering this value until it breaks, then just back off to the last setting before that happens.\nIf you still have issues, here\u0026rsquo;s a tiny bit more info to point you in the right direction:\nLinux On Linux you\u0026rsquo;ll want to use Jack https://wiki.archlinux.org/index.php/JACK_Audio_Connection_Kit with VCV for low latency audio. You may need to use a tool like Catia to actually connect the software to the device (VCV to System Out). Most modern distros use Pipewire, which eventually should replace Jack, but as VCV doesn\u0026rsquo;t work with it directly for now you\u0026rsquo;ll need to bridge Jack to PipeWire. This is bit of pain in the ass to setup, but, if you\u0026rsquo;re on Linux presumably you have some idea what you\u0026rsquo;re in for.\nFor more Linux audio info check out Making Sense of The Linux Audio Stack on Venam\u0026rsquo;s Blog.\nWindows It\u0026rsquo;s very unlikely that you won\u0026rsquo;t be able to get sound out at all on Windows, but it\u0026rsquo;s very likely that you won\u0026rsquo;t be able to get low latency sound or sound working with audio input (microphone). If this is the case you probably need to use the ASIO driver.\nIf you don\u0026rsquo;t want to spend any money, you can try downloading and setting up either https://www.asio4all.org (easier) or https://github.com/dechamps/FlexASIO (harder to use, more flexible, you may want to use this with it). Setting up either is outside the scope of this page.\nThe ideal way to solve this problem is to buy an audio interface with a good ASIO driver made by the manufacture. Interfaces by Focusrite, Presonus, Arturia, and NativeInstruments are all decent and should automatically install a stable, easy to use ASIO driver that just works. Avoid the cheap Behringer interfaces, those often don\u0026rsquo;t.\nMac CoreAudio, the audio system used on Apple Devices, should be setup and work for everything just fine. Unfortunately, I have no experience with Apple devices and audio. If it doesn\u0026rsquo;t work, you may want to poke around the internet for help. Alright, if you\u0026rsquo;ve made it this far, mashing keys on your keyboard in VCV rack should make noise!\nFirst thing\u0026rsquo;s first, let\u0026rsquo;s learn by just experimenting. You have a huge range of knobs in front of you, don\u0026rsquo;t you wanna turn em\u0026rsquo;? Go for it. ctrl + z is always there if you need it. Worst case, file→new is always an option. Just have fun. When you\u0026rsquo;ve gotten a vibe for what effect some knobs have or want to dive into what this chaos of virtual wires means, come back here.\nThe reason we\u0026rsquo;re starting in VCV rack (aside from it being one of the few free options) is it exposes a lot of the raw ideas and fundamentals of how music works behind the scenes, raw frequencies and modulation open to see.\nIn that default patch, er, hang on -\n- in VCV, the files and the project as whole is refereed to as a \u0026ldquo;patch\u0026rdquo;, this is because you plug wires together into a board similar to those used in old phone system where you\u0026rsquo;d patch two people together -\nWe start with a MIDI (Musical Instrument Digital Interface) input which outputs a \u0026lsquo;voltage\u0026rsquo; from the V/oct (Volt per Octave) output, which is fed into the V/oct input of multile VCO\u0026rsquo;s (Voltage Controlled Oscillator)\nThat hurt to read? Let\u0026rsquo;s break it down.\nFirst, you need to know something about VCV Rack, this software. VCV rack actually emulates real hardware systems called modular synthesizers.\nMore specifically, VCV emulates the Eurorack standard of modular synths. Skipping some finer details for a moment, the standard defines one really important, and that\u0026rsquo;s the idea of 1 Volt per Octave frequency control.\nThis is Stinkbomb\u0026rsquo;s hardware Eurorack. Real Eurorack hardware is incredibly expensive! In the real hardware, all of those wires are carrying a signals in the form of varying voltages. Some of these are varying really quickly so that they can ultimately be passed to the output and play a tone though a speaker.\nOthers are slow, often below what you can hear, and are used to sort of act as ghost hand that you can use to turn a knob for you, automatically, perfectly timed and never getting tired. Useful for when you want to turn more knobs than you can with two hands at once and at different speeds.\nOthers yet are carrying voltages that are mostly constant, only changing to a new value occasionally (but usually quickly), these voltages are then interpreted by a module that makes one of those moving waves to determine how fast that wave should move - it\u0026rsquo;s frequency. That is, we\u0026rsquo;re using these voltages to control an oscillator - hence the name VCO (Voltage Controlled Oscillator).\nNow, this is where the aforementioned 1 Volt per Octave comes into play. Remember on the last page I mentioned how each time you go up to a new octave you\u0026rsquo;re doubling or halving the frequency, so we want to visually compress that in the spectrum analyzer to make it easier to see? Well, the same idea applies here. On the modular synth the system can only really use values as low as -12 volts to as high as 12V, though for practical reasons, we often only use ±5V. If we had to double the voltage for each octave and we assume the first octave is from 0 to 1V, then the second would be from 1V to 3V, and we\u0026rsquo;d already have to go higher than 5V to get a 3rd octave. From a hardware perspective this is already not ideal, but from an ease of use perspective, it\u0026rsquo;s also annoying to constantly think about the doublings. It\u0026rsquo;s a lot easier if we just always cram an octave into 1V. This means the complexity of doing that exponential conversion has to happen in the hardware, but it frees it up to be a lot easier to use.\nOf note, we can always plug any output wire into any input. We could try to listen to these slow signals. We could use one of the really fast signals to control a knob as a \u0026ldquo;ghost hand\u0026rdquo; (and you should do this, it\u0026rsquo;s really fun!). This means we could use those really slow moving \u0026ldquo;ghost hand\u0026rdquo; signals to control our pitch if we wanted, it would just be interpreted as 1V/Oct.\nGenerally, in a 1V/Oct system, a stable 0v (the same as no input) signal is \u0026lsquo;Middle C\u0026rsquo; or C4 where \u0026lsquo;C\u0026rsquo; is the note and \u0026lsquo;4\u0026rsquo; is the octave number. This is only \u0026lsquo;generally\u0026rsquo; the case, as almost all oscillators will have a big ol\u0026rsquo; frequency knob you can use to change what 0V means.\nOkay, we\u0026rsquo;re almost there.\nSo, with VCV open, when you strike a key on your keyboard it should generate a new signal using this 1V/Oct system. let\u0026rsquo;s see this happen.\nIn the default patch you have open in VCV, you should be able to drag a wire from the port labeled in 2 on the SCOPE module and drop the other end on the v/oct port on the MIDI ▶ CV module. It\u0026rsquo;s okay that there are already other wires there.\nYou should now see an extra line in the Scope module. Even if it\u0026rsquo;s not a big change, playing a higher pitch note should make this line move up and a lower pitch note should make the line move down. (if you\u0026rsquo;re having a hard time seeing it, try going from z to p)\nOkay, this now brought up a few more questions, namely what the hell is a scope, but patience. We still haven\u0026rsquo;t talked about MIDI.\nWhen you strike a key on your keyboard VCV is interpreting that keypress as a MIDI event, and converting that MIDI signal to a virtual V/Oct signal.\nSo what\u0026rsquo;s up with this MIDI business? MIDI is a fucking old 1981 standard for how computers should and music hardware should talk to each other. It\u0026rsquo;s also often used to let multiple audio programs on your computer exchange information\u0026hellip; very limited information though. Just which key on the keyboard (musical, not typing) was hit, how hard, and a few extra signals for getting corse grained adjustment of a few knobs. With the exception of three important ones you really need to knob about Pitch, Mod, and Sustain - but, in time. Let\u0026rsquo;s get back on track.\nYou Press A Key VCV Receives this as MIDI event VCV converts this to an signal in the V/Oct standard. So, if you happen to press the C note on the 4th octave, you\u0026rsquo;ll get\u0026hellip; 0v, no change, but if you were to hit the C note one octave higher (C5) the note should be noticeably higher pitch and the output from the V/oct port would be 1V. In fact because of how our music system works, an octave is exactly a doubling in frequency so while \u0026lsquo;C4\u0026rsquo; is 261.63Hz \u0026lsquo;C5\u0026rsquo; is 523.25Hz). If you hit a C#5 note though the output voltage will be 1.08333V because there are 12 notes per octave (A, A#, B, C, C#, D, D#, E, F, F#, G, G#) and 1/12 is .08333 which is added to the 1V from being up one octave from middle C (C4)\nAlright. Fuck that\u0026rsquo;s complicated. So, to boil that into a digestible chunk, you press a higher key, a higher voltage comes out, lower key, lower voltage. Keys above C4 will output a positive voltage, keys below a negative voltage.\nSo we hit a key, voltage comes from V/oct on the MIDI-\u0026gt;CV interface and goes to the Voltage Controlled Oscillator, which, as it\u0026rsquo;s name suggests uses these voltages to control how it oscillates (moves). The V/oct input directly manipulates the frequency, but there\u0026rsquo;s also this big honking frequency knob just begging to be twisted. That knob can be used to make it so 0V corresponds to a different note. For example, if we right click the frequency knob to enter a value directly, and enter \u0026lsquo;440\u0026rsquo; Hz that would make 0V into an \u0026lsquo;A4\u0026rsquo; note (A is a common reference pitch, as it\u0026rsquo;s just multiples of 110Hz so it\u0026rsquo;s easy to remember) Now each key will just be \u0026rsquo;transposed\u0026rsquo; that is they\u0026rsquo;ll all be shifted over a few notes.\nYou can also turn this knob to something out of tune to get things completely out of the classical scale. The fine knob below does the same thing, but gives you fine control (obviously).\nLet\u0026rsquo;s strip this down to the essentials then.\nHover over every module in the patch except for the MIDI ▶ CV and AUDIO module hit delete or backspace to remove them. Then, right click the empty space and in the menu that pops up select a SCOPE. Drop that in. Do it again to add a VCO. Now, we need to wire things together. To start, let\u0026rsquo;s wire the VCO to the SCOPE so we can see the signal. Go ahead and drag a wire from the SIN output of the VCO to the IN 1 of the SCOPE. On the SCOPE drag the TIME knob all the way to the right (hold click and drag your mouse up) then click the button labeled TRIG. Now, try moving the FREQ knob on the VCO. You should see the wave in the SCOPE expand and contract to show you the frequency! But, we still can\u0026rsquo;t hear anything. Let\u0026rsquo;s drag a wire from the L/MON (left / mono) input of the AUDIO module to the same SIN output of the VCO. This cables should stack on top of each other. You should now hear a constant tone which you can control by changing the FREQ knob on the VCO. Connect the V/OCT output from MIDI ▶ CV to the V/OCT input on the VCO. You should now be able to press keys on your keyboard (assuming MIDI ▶ CV is still set to use the QWERTY keyboard) to change the frequency. The FREQ knob on the VCO still works, it\u0026rsquo;s just an offset applied to whatever is coming in on the V/OCT input. Connect a wire from the IN2 of the SCOPE to the V/OCT MIDI ▶ CV, again stacking cables. Turn up the GAIN 2 knob on the SCOPE a smidgen to make changes the change in the signal the SCOPE is getting from IN 2 more obvious. After approximately half a second, this should get very, very annoying. So, let\u0026rsquo;s make it only make noise when we play a key.\nRight click in the background and add a VCA Drag the wire connected to L/MON on the AUDIO module and move it to the middle socket, labeled IN on the VCA. You should no longer hear anything. Drag a new cable from OUT of the VCA to L/MON on the AUDIO module. You should have sound again. Try moving the yellow bars on the VCA up and down (it works the same as a knob). This should change the volume. Double click it when done to set the volume back to max. Connect a new wire from the GATE output of the MIDI ▶ CV module to the unlabeled, top input of the VCA. Note the line between this input and the yellow lines you were moving in the last step. When you do this, audio should stop again. Play some notes. You should only hear sound when a key is held, and the yellow bars are gray except for when this happens. You can still drag the now-gray bars to lower the peak volume, similar to how you can adjust the FREQ knob on the VCO even after the V/OCT signal was connected. Some explanation is due. The VCA is a Voltage Controlled Amplifier, though contrary to the name, it usually only attenuates signals - makes them quieter. Basically, it\u0026rsquo;s a volume control where you can use another signal to set the volume. The GATE output of the MIDI ▶ CV module sends a very strong signal whenever you hold a key, so it either fully \u0026ldquo;opens\u0026rdquo; the VCA (lets all the sound though) or closes it (lets no sound though) but we could use another signal. For example, we could use slower sine wave to control it:\nBasal here is just a VCO, it\u0026rsquo;s just from a collection of 3rd party modules for VCV rack.\nLFO-2 is from an older version of VCV rack, but is effectively the same as WT LFO in modern versions. It\u0026rsquo;s a Low Frequency Oscilator, which is just a special VCO that\u0026rsquo;s specialized for making very slow signals that are usually meant to be used to control other things, not be listened to directly.\nWhy don\u0026rsquo;t you give doing something similar to this a shot. Find an LFO and connect replace the control input on the VCA with it, like has been done in the above GIF. See what kind of sounds you can get. (Hint: To remove a wire, just drag off one end, and without putting it over something else it can plug into, let go. It\u0026rsquo;ll disappear)\n"},{"id":187,"href":"/music/gettingstartedcont/","title":"Gettingstartedcont","section":"Musics","content":" Continuing our Adventure # Picking up where we left off,\nThis lil\u0026rsquo; synth works, but it doesn\u0026rsquo;t give us much control, and unlike a real instrument, after we let go of the key it just immediately stops. Similarly, most real instruments have a either a bit of a pluck at the start or a more gentle fade in.\nThis leads us to the idea of envelopes. In music, you\u0026rsquo;ll often want to draw a shape that evelopes a signal. That is, it contains it and determines when it is active and how much. We want to envelope our volume signal - that is, we want to shape it more than the basic on/off that we have right now.\nOne of the most common shapes to use for enveloping is called the ADSR. This stands for Attack Decay Sustain Release and is called such because, well, it has those four stages.\nIn an ADSR, the Attack Decay and Release knobs set the amount of time the stage takes. So, with a long attack, the sound will fade in. With a long release, the sound will take a while to get loud - assuming you\u0026rsquo;re using the envelope to control volume, that is.\nThe Sustain sets the level the envelope will rest at as long as the key is held, and the Decay is how long, after the attack, it takes to get to the sustain level.\nSo, to be very clear, the Sustain is the odd one out. The Attack, Decay, and Release stages are all the amount of time, the Sustain is a level.\nSo, let\u0026rsquo;s put this to use.\nEnsure you have a setup match that in the 1st screenshot on this page. Right click in the empty space and add the ADSR module. (it doesn\u0026rsquo;t match the GIF, due to an update). Place it before the VCA Remove both cables going into the SCOPE. Right click the SCOPE and select initialize to reset it to default settings. Place a new cable going from the ENV output of the ADSR to the IN1 of the SCOPE Try pressing the PUSH button on the ADSR. You should see a signal on the SCOPE. Try changing how long you hold the PUSH button for. You may want to adjust the TIME knob on the SCOPE to the left to see the signal better. Drag the wire that is connected to the top of the VCA (coming out of the MIDI ▶ CV\u0026rsquo;s GATE output) to the GATE Input on the ADSR. Add a new wire going from the top input of the VCA to the ENV output of the ADSR (Stacking on top of the cable that\u0026rsquo;s going to the SCOPE). Try hitting some keys on your keyboard, You should now hear the effect of the ADSR on the volume. Try changing the sliders on the ADSR and playing new notes. Move the cable connected to the SIN output of the VCO to the SQR (Square) output of the VCO. Add a second SCOPE module (hover over the existing one and press D ) Setup the new SCOPE to view a fast moving wave by cranking the TIME knob and engaging the TRIG button. Connect the IN 1 of this second scope to the SQR output of the VCO. Try adjusting the PULSE WIDTH knob on the VCO and observe the view in the scope and sound while playing notes. Try connecting a wire from the PWM input on the VCO to the ENV output on the ADSR, then adjust the small knob directly above the PWM input on the VCO. This will change how much Pulse Width Modulation is being done by the envelope to the VCO. Adjust this small knob above the PWM input and setting on the ADSR to get different sounds. Try changing the base FREQ of the VCO to be lower pitch. You may want to adjust the TIME knob on the scope to be able to see the square wave well as you turn the frequency down. Wow, that sure got tasty in a hurry, right? Well, how about we see just how flavorful it is. To do this, we finally need to bust out the spectrum analyzer. Unfortunately, VCV does not have one built in. This means you\u0026rsquo;ll need to.\nGo to https://vcvrack.com Make an account, sign in, etc. Go to https://library.vcvrack.com/Bogaudio/Bogaudio-AnalyzerXL and press + ADD in the top left. (don\u0026rsquo;t worry, it\u0026rsquo;s free.) Go into the VCV software, at the top, login with you\u0026rsquo;re new account Update plugins, etc. Restart VCV. Right click in the empty space, and the analyzer should now be available. Okay, now that you have it installed,\nAdd the analyzer to your patch. Connect the top input the output of the VCA (stacking on the same wire that goes the L/MON input of the AUDIO module)\nPlay some notes and adjust the PWM and FREQ knobs of the VCO while looking at the result both on the SCOPE and on the ANALYZER-XL module.\nIf you can\u0026rsquo;t see everything on your screen at once, ctrl + + \u0026amp; ctrl + - OR ctrl + scroll-wheel can be used to zoom in and out. ↑ , ↓ , → ,← or holding the scroll wheel and dragging can be used to pan around Okay, let\u0026rsquo;s see how this responds if we add some vibrato.\nAdd an LFO and connect the SIN output tho the FM input of the VCO and adjust the knob above the VCO just enough so you can hear the pitch wobble - FM is Frquency Modulation, by the way, and is (skipping a few details) effectively just being added to the V/OCT signal internally to the VCO, that\u0026rsquo;s why it\u0026rsquo; adds pitch-wobble. Observe how at high rates it makes the spectrum analyzer a bit blurry, but at low rates we can see bumps wobble with the FM. [TODO] The music chapters are actively being rewritten (Jan, 2023)\nSo far we\u0026rsquo;ve done everything with a basic VCO which can only output either a Sine, Triangle, Sawtooth, or Square wave - and you should experiment with those outputs and see how each sounds - but there\u0026rsquo;s a whole world of other sound sources out there for us to explore, so now that you\u0026rsquo;ve gotten your toes wet with VCV and hopefully understand the fundamentals, lets move on to Sound Sources .\nReplace the VCO with a WT-VCO Get Some modules from the library Bog Analyzer Hora Snare Hora Hat Hora Deep Clocked Comp II Plateau Befaco Slew Befaco Dual AT Voxglitch Digital Seq Palette (Plaits) Topograph (For ppqn) Add a filter, high level explain LP, HP, BP + resonance Envelope and LFO the filter Quantizers Clocks \u0026amp; Sequencers Attenuation of V/OCT signals Slew pre and post Quantizer Drums Making a compressor with an envelope follower and VCA OLD CONTENT # Alright, we\u0026rsquo;ll come back to the VCO later, but let\u0026rsquo;s follow the signal path a bit further. The VCO has a wire coming from the Saw wave output into a VCF or \u0026lsquo;Voltage Controlled Filter\u0026rsquo;.\nFilters are a huge part of making good sounding music as often you\u0026rsquo;ll have a good sound but it\u0026rsquo;ll have too much low or high end and you just want to cut it out. This filter actually has 2 outputs, one for a \u0026lsquo;High Pass Filter\u0026rsquo; (HPF) and one for a \u0026lsquo;Low Pass Filter\u0026rsquo; (LPF) as the names imply, a HPF lets high frequencies though and cuts the low end and a LPF cuts the high end but lets the low though. LPFs are generally used more as usually it\u0026rsquo;s more desirable to cut the harsh highs out of a sound than the humming, thumping lows. This is exactly what has been done in the default patch here. The final basic (filters get really complicated) thing you should know about a filter is how they have a cut-off frequency. That is the point at which the filter starts cutting the sound. This is adjustable, so say with a Low Pass Filter we could set the frequency really low and only let though the lowest frequency sounds or set in nice and open to just cut out the really hissy stuff. We\u0026rsquo;ll talk about more complex stuff like resonance in a bit.\nThe need for this may seem a bit weird at first, as if we\u0026rsquo;re playing a note at exactly one frequency, say A at 220Hz, then why would we need to filter out anything? Well, most oscillators and real instruments alike will actually have multiple \u0026lsquo;harmonics\u0026rsquo;, that is it will play an A at 220, 440, 880, and so on with decreasing amplitude or even on other frequencies entirely that still have a musical influence on the signal. On the \u0026lsquo;VCO-1\u0026rsquo; Oscillator loaded into the default patch here you can lessen these harmonics by switching the ANLG (Analog) and DIGI (Digital) switch on the right. This is because this oscillator can emulate either an \u0026lsquo;ideal\u0026rsquo; digital oscillator which outputs a clean, sharp signal with less harmonics or an analog signal oscillator which includes a subtle amount of pitch drift and some smoothing of the output wave- of note, usually the analog characteristics, while technically flaws, are desirable.\nThe top VCO is outputting an \u0026lsquo;analog\u0026rsquo; emulating signal while the bottom is in digital mode. Look at how the Triangle output shape on the analog mode is smoothed out compared to the digital mode\u0026rsquo;s sharp edges\nYou\u0026rsquo;ll also notice there\u0026rsquo;s a third wire running into the filter though- into an input labeled \u0026lsquo;freq\u0026rsquo;. This input modulates the filter\u0026rsquo;s cut off frequency. You wont visually see the knob change but you will hear the filter\u0026rsquo;s cut off change based on the signal applied to this input but only if the \u0026lsquo;Freq CV\u0026rsquo; knob is turned up. The \u0026lsquo;Freq CV\u0026rsquo; knob is what\u0026rsquo;s known as an attenuverter (a portamento of \u0026lsquo;Attenuator\u0026rsquo; and \u0026lsquo;Inverter\u0026rsquo;). This knob, when facing dead center says \u0026rsquo;let nothing though\u0026rsquo; while all the way right lets the full signal (from the freq input) though, and all the way left lets the full signal though but inverts it first. Leaning right but not all the way will \u0026lsquo;Attenuate\u0026rsquo; or weaken the signal first. I think you get the idea.\nSo say we put the big \u0026lsquo;FREQ\u0026rsquo; knob dead center, and give the \u0026lsquo;FREQ\u0026rsquo; input jack wire carrying a very slow sine wave that goes between 0 and 10V, and set the \u0026lsquo;FREQ CV\u0026rsquo; knob all the way right: This will bring the cut off higher and higher from it\u0026rsquo;s starting position, and then bring it back to the starting level. If we instead turn the \u0026lsquo;FREQ CV\u0026rsquo; knob all the way left, it\u0026rsquo;ll bring the cut off frequency lower before turning back around and coming to it\u0026rsquo;s starting position. Putting it at a slight lean right will still do the same as we started with, but will have less of an impact, making the sound much less \u0026lsquo;jumpy\u0026rsquo; and tame. Really, that\u0026rsquo;s what attenuverter\u0026rsquo;s are for, taming an input signal.\nHere, I\u0026rsquo;m showing modulating the filter frequency manually as well as showing what resonance is- it boots the signal right at the cut off frequency\nHere, the input to the cut off frequency is modulated with an \u0026lsquo;LFO\u0026rsquo; or Low Frequency Oscillator, which much like the VCO outputs a simple signal, but in this case the signal is low frequency, usually below human hearing range:\nAlright, that\u0026rsquo;s fine and all, but the cable going input to the \u0026lsquo;FREQ\u0026rsquo; control on the VCF is coming from something called an \u0026lsquo;ADSR\u0026rsquo;\nSo the adventure continues. \u0026lsquo;ADSR\u0026rsquo; stands for \u0026lsquo;Attack, Decay, Sustain, Release\u0026rsquo; and it does exactly that. But before we understand the output of an ADSR we have to look at it\u0026rsquo;s input- \u0026lsquo;Gate\u0026rsquo; and \u0026lsquo;Retrig\u0026rsquo;\n\u0026lsquo;Gates\u0026rsquo;, in modular, are simply a positive (sometimes needing to be 5V or higher) signals that represent that something is happening. Usually, that a key is being held. And that\u0026rsquo;s exactly what\u0026rsquo;s going on here. When you hold a key the \u0026lsquo;Gate\u0026rsquo; output of the MIDI-\u0026gt;CV module is active. When you release it, the output goes off. You can see this by looking at the green indicator light where the gate output is on the MIDI-\u0026gt;CV module when you hold or release a key. \u0026lsquo;Retrig\u0026rsquo; is similar, though it only outputs a short pulse every time you press a key. This is handy because you may press a second key while already holding one key, meaning the gate output should stay on, but the retrig output will have sent a pulse each time you pressed a key (once when you pressed the key your holding, another time when you press a different key while still holding the original key).\nSo, back to the \u0026lsquo;ADSR\u0026rsquo; an ADSR generates a signal that looks like this:\nThat is, voltage will follow this shape over time. The \u0026lsquo;Attack\u0026rsquo; knob sets how long it takes to reach the peak point, the Decay knob set\u0026rsquo;s how long it will take to reach the sustain level, the sustain knob set\u0026rsquo;s at what level the sustain should be held at, and the release knob set\u0026rsquo;s how long the note should take to fade out from the sustain level after the key is released. Take note, the sustain knob controls a level, while the other three control time:\nAlright, so when the ADSR get\u0026rsquo;s a gate signal it\u0026rsquo;ll go though the Attack and Decay stages and wait at the Sustain level until the Gate is released or a Retrig signal is sent telling the ADSR to repeat the Attack and Decay stages.\nSo, this output signal is fed to two places, the first is the frequency knob we saw before. This will result in the frequency cutoff going high then coming down to a reasonable level, then cutting down to just low frequencies as a note is released. The other place the signal goes is into the mixer:\nThe mixer in this demo patch is super simple. It has 4 inputs, with one output. The sliders let you set the level of each input, and the \u0026lsquo;CV\u0026rsquo; input of each slider let\u0026rsquo;s you externally control the slider. Because the ADSR is fed into this input and the ADSR output is at 0V unless you hit a key the mixer actually mutes the signal until a key is pressed and then lets it play, fading out over the release period. The mixer also has one big volume knob ontop to set the master output volume of all 4 channels combined. Essentially the volume follows this shape of the ADSR signal over time. In times like this, the ADSR signal is called the \u0026rsquo;envelope\u0026rsquo; for the sound. Really, the mixer is just a combination of multiple of a simpler component though, the VCA or Voltage Controlled Amplifier. This name is a bit misleading though, as really VCAs are usually used to bring a sounds volume down, like an attenuator. To show the simplest case I\u0026rsquo;ll hook up a LFO to control a VCA\u0026rsquo;s level, in turn changing the level of the signal passing though:\nAlso, above you\u0026rsquo;ll see I used a 3rd party oscillator instead of the VCO-1 you\u0026rsquo;ve seen so far. Pictured is \u0026lsquo;Basal\u0026rsquo; from the \u0026lsquo;Vult-Free\u0026rsquo; collection of modules available on the VCV library page.\nTo get modules from the VCV library you\u0026rsquo;ll need to make an account on that website, add the module collections you want, sign in the VCV rack software, and update your modules. Once the modules are done downloading you\u0026rsquo;ll be promoted to restart rack and they should be installed. If you\u0026rsquo;re looking for a few packs to grab to get started, but not be overwhelmed, I recommend Valley, Bogaudio, Impromptu, Vult, Befaco, Alright Devices, Audible Instruments, Erica Synths, Hora, and MindMeld. This will still probably be enough to overwhelm you a bit, but it\u0026rsquo;s a really good starting place.\nWhen you\u0026rsquo;re looking to grow a bit: Aria Salvatrice, Blamsoft, Flag, Frozen Wasteland, Lindenberg Research, Geodesics, Instruo, Nysthi, Starling Via, Stoermelder, Wiqid, and ZZC are all very good.\nOf course, this list is far from exhaustive, there are a ton of other good modules in VCV, but these are the collections I find myself using the most. If yo\u0026rsquo;re down to pay for some modules, I really recommend VCV\u0026rsquo;s Parametra and Host, as well as Vult\u0026rsquo;s Premum and Compacts collections. Slime Child Audio\u0026rsquo;s Moog Subharmonicon inspired modules are great too. If you\u0026rsquo;re a fan of 808 sytle drums, Hora\u0026rsquo;s analog drums collection is worth a look. If you\u0026rsquo;re really itching for a better sequener and don\u0026rsquo;t want to use an external program, check out ZZC\u0026rsquo;s Phaseque or Geodesics+Vult Hexaquark.\nNote, that a few modules are not available in the VCV library, and instead you may need to install them manually. see Installing plugins not available on the VCV Library from the offical VCV manual for more information.\nFinally, the output of just the first channel of the mixer is fed into the scope so that when you press a key you can see the signal your generating. To understand this it\u0026rsquo;s easiest to just drag the cable coming out of the VCO\u0026rsquo;s \u0026lsquo;SAW\u0026rsquo; output to the VCO\u0026rsquo;s \u0026lsquo;Sine\u0026rsquo; Output. Now when you press a key instead of seeing a saw wave you should see a sine wave.\nFinally, I want to mention that at least by default this setup is \u0026lsquo;Monophonic\u0026rsquo; (Mono = One , Phonic = Voice) meaning that even if you hit 2 keys at once you\u0026rsquo;ll only hear the note from the last key you pressed. We\u0026rsquo;ll explore Polyphonic (Many Voice) and Paraphonic (Para = beside, or side by side) systems later.\nLet\u0026rsquo;s make a simple generative track, to start with we\u0026rsquo;ll need some drums. Here\u0026rsquo;s what we\u0026rsquo;ll be setting up:\nSo first, let\u0026rsquo;s break each module down by function. The uGraph module (2nd on left) is a generative trigger sequencer, it generates drum rhythms for us. It has it\u0026rsquo;s own built in clock, but an external clock signal can be provided (turn the clock knob left until it says Ext. then provide a clock input that\u0026rsquo;s multiplied by the rate specified in the clock res box, in this case it wants 4ppqn or peaks per quarter note, so, if you want to a 120 bpm drum line, you\u0026rsquo;ll want to send a clock signal that\u0026rsquo;s multiplied by 4. Some modules will sync on 1ppqn or 24ppqn, etc. So, just be aware that you may need to multiply your clock signal some times.) though here we\u0026rsquo;ll use the internal clock. This module sends out 6 triggers, where the three \u0026lsquo;accent\u0026rsquo; (Acc) triggers are a strict subset of the main trigger outputs, that is there will only be an output on Acc when there is an output on Trig, but not always. uGraph will generate the three trigger sequences such that the left most trigger output \u0026lsquo;fires\u0026rsquo; the least often and the right most the most often. This works well for setting up a common drum machine with kick, snare, and hat sounds so that the hats are frequent, the snare less so, and the kick a steady beat, but not overpowering. Of course, this isn\u0026rsquo;t how you have to use it, and you can always add more trigger output patterns in VCV simply by sending two uGraph modules the same clock. Again, for now one module is fine. Finally, it\u0026rsquo;s notable that this pattern will repeat, but a new pattern can be selected with the Map X and Map Y knobs.\nAlright, so uGraph is generating the drum triggers, think of it like the human swinging the drum sticks, but with only uGraph in there\u0026rsquo;s nothing to hit. so let\u0026rsquo;s add the basics. Grab a small Nysthi Mixers as pictures 2nd to last above and hook it up to an audio module as well. Then, grab the Erica PicoDrums module and place it in. Now, hook up two of the trigger outputs to the picoDrum\u0026rsquo;s TR1 and TR2 trigger inputs, take the PicoDrums output to the mixer. After turning down the mixer module\u0026rsquo;s master out a bit to make sure you don\u0026rsquo;t play too loud of a sound, hit \u0026lsquo;run\u0026rsquo; on the uGraph module. Currently, both of the drum sounds on the PicoDrum are set to the same sample, so you\u0026rsquo;ll want to move the big \u0026lsquo;ctrl\u0026rsquo; knob at the top to select a different sample on drum1, then switch to drum2 with the switch, and pick a good sample for drum two as well. You should now have a good drum pattern started!\nThe problem with the PicoDrum module is that it has some baked in drum sounds that can\u0026rsquo;t be changed (well, okay, the real eurorack version they can be, which actually makes it a good value, but I digress) but the sounds are still samples, that is they\u0026rsquo;re just audio files being triggered to be played back. So, why not use something where we can pick our own sample?\nYou\u0026rsquo;ll need some drum samples to get started, so just to get you started here\u0026rsquo;s a decent sample pack: https://soundpacks.com/free-sound-packs/nyc-drum-kit/\nDownload, extract, etc. that folder and in VCV place the \u0026lsquo;Player\u0026rsquo; module as pictured above. Right click the module, select \u0026lsquo;Load Sample\u0026rsquo;, and use one of the sounds in the folders. You should now be able to trigger the player module and get sound out of it the same as the PicoDrum module. You can mess with some of the controls to get a feel for what you can do with the player Module. If you\u0026rsquo;re having fun with that, you may want to look at the \u0026lsquo;Simpliciter\u0026rsquo; module from Nysthi for an even more advanced sampler (also check the \u0026ldquo;samples\u0026rdquo; section below).\nAll of this is cool and all, but we\u0026rsquo;re just playing back and manipulating sound files so far, so, let\u0026rsquo;s look at the next type of drum: synthesized drum. Synth drums can be made to sound very close to real drums (this is generally called physical modeling, you\u0026rsquo;ll hear the term a lot more for string synth sounds though) but can give sounds that no real drum would be capable of either. In the patch above I have \u0026lsquo;Meta\u0026rsquo; from starling generating a low bass drum sound, but you can generally tweak synth drums into whatever sound you want, albeit some module will be better at different sounds, for example Vult\u0026rsquo;s \u0026lsquo;Trummor\u0026rsquo; modules excel at kick and bass drums. You can also make synth drums from basically anything just by thinking about the sound a drum makes. Generally, a drum is just a sound with a really sharp attack and a pitch that changes at it releases, so, this, while not the best, is a decent drum sound:\nanyway, so now the last relevant part of the above patch worth understanding is the slew is just making it so we get a nice envelope generated by the Acc output, that slew is changing the pitch decay time on the synth drum (Meta) so that on accent outputs the low drum lasts a bit longer and has a slightly different sound. Just look at the signal on a scope in VCV if you don\u0026rsquo;t fully get it.\nA bit of an aside # Some people will try to get you to try various substances to be creative, to make better music, etc.\nIf you want to get high or drunk, go for it- but don\u0026rsquo;t let it turn into a creative crutch. You don\u0026rsquo;t need it.\n"},{"id":188,"href":"/music/instruments/esoteric/","title":"Esoteric","section":"Instruments","content":" The Esoteric # feedback only, no input. i love this instrument. pic.twitter.com/IR6lmxZGHJ\n\u0026mdash; 𝒆𝒎𝒎𝒂 (@HECKSCAPER) July 31, 2020 𝐡𝐨𝐰 𝐢𝐭 𝐰𝐨𝐫𝐤𝐬: pedal rig rundown \u0026amp; building a sound (Emma Essex)\nA neat on-guitar effects board (Instagram, ian.costabile)\nWhy To Modular With Guitar (YouTube, Knobs)\nOtamatone Metal - Rob Scallon\nTheorbo - The enormous 14 string lute (YouTube)\nDouble-sided Guitar Jam (YouTube)\nOctobasse: A really, really big upright bass (YouTube)\nAwesome Japanese Electric Harp!\nUsing a Violin Bow on a Guitar Sounds Incredible (YouTube, Music Is Win)\nCrazy Fast Robot Drummer (YouTube, Andrew Huang)\nShow Us Your Junk! Ep. 25 - Sylvia Massy of Studio Divine (YouTube, EarthQuaker Devices) \u0026hellip; She uses a pickle as a guitar effect\u0026hellip;\nDuesenberg Multibender - device to add 2+ string specific pitch bend arms to a guitar\n"},{"id":189,"href":"/music/instruments/perc/","title":"Perc","section":"Instruments","content":" Percussion # Theory # Before I even dive into Percussion, I think it\u0026rsquo;s necessary to point out how generic the term is. Just looking at the Wikipedia page for drum kit, you\u0026rsquo;ll see this: Drum Kit page on Wikipedia and clearly that\u0026rsquo;s still not an exhaustive list. Just off the top of my head I can see it lacks the Cajon or Taiko as acoustic instruments, let alone anything more specific than electronic drum, which can make for a class all its own.\nWikipedia defines Percussion Instrument as \u0026ldquo;a musical instrument that is sounded by being struck or scraped by a beater including attached or enclosed beaters or rattles struck, scraped or rubbed by hand or struck against another similar instrument.\u0026rdquo; but, frankly, I think that definition really sucks. I think a better definition would be any tool that be used to make a sound with a sharp attack, that is typically not pitched/tuned and is used to establish the tempo of the song. I confess that this definition is still bad, but hey, it\u0026rsquo;s better. Generally though, I think we all have a sort of intimate knowledge of what percussion is and I\u0026rsquo;m not trying to turn this page into one on the philosophy of music or human experience, so let\u0026rsquo;s jump back into my definition a bit- I said it (loosely) requires a sharp attack. What do I mean by that? Well, remember back when we looked at the ADSR in getting started?\nHere\u0026rsquo;s that original ADSR gif again, see how the first stage, the attack can vary in time. If we imagine this as the volume of the sound, one with a more gradual fade in, instead of a vertical line, will have a smooth fade in. This is not how most percussive sounds are used. Usually, a percussive sound has a very loud transient and, usually, a short decay. Basically, the drum hit\u0026rsquo;s hard, fast, and goes away fast.\nLook at this view of a bass drum hit on a scope. See how there\u0026rsquo;s this sharp spike, right as it first starts? Also, see how it only moves up and down a few times before fading out? Think about this like smacking the head of a drum, you get that sharp hit, then the drum head will oscillate back and forth a few times before coming to rest. What\u0026rsquo;s also of note is those peaks aren\u0026rsquo;t evenly spaced. It actually gets lower pitch as it fades out (albeit not by much here). A lot of percussion does this, changing in pitch over its short lifespan.\nIt\u0026rsquo;s also pretty common for percussion to have a noisy part to it, literally just \u0026lsquo;polluting\u0026rsquo; the entire frequency spectrum. That\u0026rsquo;s really obvious here with both the snare and open hi-hat sounds, where on the scope you can see the jittery-ness of the noise:\nIt\u0026rsquo;s also worth noting just how clean of a sine wave the bass drum is. This isn\u0026rsquo;t necessarily required of the lower pitch drums, but most bass sounds- drums or not- tend to sound muddy if anything but a pure sine wave.\nIf you\u0026rsquo;re wondering what the difference is between the snare and the hat given how similar they look in the waveform: the hat only really fills the 5khz to 20kHz range, with a peak around 6khz while the snare goes down to 320Hz (ish), with noise spreading up to 20khz as well, but with a strong peak at that 320Hz point. Kick in green, snare in orange, hat in pink Alright, so this is nice and all, but, like, this is a guide about sound and that\u0026rsquo;s a lot of pictures? Let\u0026rsquo;s dive in then. I\u0026rsquo;ve put together a VCV patch for you to learn on. It has a ton of notes built in and focuses on the sound design side of percussion, as we\u0026rsquo;ll come back to actually sequencing drums (making patterns of drum hits, or playing them with sticks, whatever) in a bit, but I think it helps just to get a feel for how much sound design can go into percussion.\nTo open this patch, you\u0026rsquo;ll need to have VCV with the packs BogAudio, Audible Instruments, Befaco, Valley, Vult Free, Fehler Fabrik, Starling Via, MindMeld, Hora Processors Free, Geodesics, Aria Salvatrice, Erica Synths, Stoermelder, and Submarine. All of these are free. The patch can be downloaded from patch storage here.\nSo just download this patch and poke around for a while. A big part of learning music is having a sort of mental catalog of sounds that you can make and how they can work together. The best way to build up this mental catalog is to experiment, that\u0026rsquo;s why while this patch is pre-wired, I encourage you to twist and turn every knob. After all, worst case, you just re-open the original file and start over. So experiment! Find weird sounds!\nOnce you\u0026rsquo;ve done that, go ahead and try to make your own drum sound using basic modules (Oscillators, VCAs, etc.), thinking about the characteristics of the sounds you made and what I explained above, if you need a bit of an example for that, go ahead and check out this patch.\n(if you need a little push, you might try out Befaco\u0026rsquo;s Percall, which makes it pretty easy to get drum sounds out of any oscillator)\nYou might want to go back to sound sources and look at subtractive and FM synthesis again if you\u0026rsquo;re still a bit rusty on how to make patches from scratch.\nThe patch can be downloaded from patch storage here.\nWhen you\u0026rsquo;ve had your fill come back and we\u0026rsquo;ll talk about some common percussive kits, that is sounds that you\u0026rsquo;ll find together either in an acoustic drum kit or on an electronic drum machine. Then we can wrap percussion up by briefly diving into making drum patterns- though that will be covered more in depth in Chapter 5, Sequencing \u0026amp; MIDI.\nWelcome back, Hope you had fun messing around in that patch! Let\u0026rsquo;s dive into percussion kits then.\nYour Standard Drum Kit # I mentioned right at the start that there are a huge range of common percussion instruments. There\u0026rsquo;s anything from the hexagonal drums on the giant drum sets of the 1980\u0026rsquo;s to the marching drums you see played on the field. While there are no rules in music and I\u0026rsquo;m a huge fan of doing things in new and original ways, it still helps to have an idea of which of these drums sounds are most commonly used together.\nWhen you think of drums, you probably think of the standard acoustic drum kit like is portrayed in that Wikipedia screenshot from the beginning, so let\u0026rsquo;s start by breaking that down into its parts. As we\u0026rsquo;re going through this, keep in mind it\u0026rsquo;s more the musical position that matters than the specific way that sound is produced, or as my friend Neurotypique put it:\nThe important part about breaking down a \u0026ldquo;kit\u0026rdquo; is that a snare is everything with approximately the same harmonic content but also that you use like a snare. Any burst of mid-hi frequency on expected snare hits can be the snare really - Neurotypique Bass Drum + Pedal This is the Big Ol\u0026rsquo; drum on the floor, the one that often has the band\u0026rsquo;s logo on it. Sometimes it\u0026rsquo;s called the Kick Drum, and it\u0026rsquo;s usually hit with a beater pedal.\nThis is the main drum everyone obsesses over, because it\u0026rsquo;s (usually) the one that people are going to tap along to and sets the tempo of the track.\nI do want to point out that it\u0026rsquo;s not just the drum that matters, but also the beater. Especially in metal, you\u0026rsquo;ll often see Double Bass Drum Pedals.\nKick Drum sample, from NYC Drum Kit @ Soundpacks.com Snare Drum This is the shallowest drum, usually about 6 inches deep. The snare is also used for rimshots, coming back to that in a bit. It\u0026rsquo;s also pretty common to add extra things to the snare to spice it up:\nAdding Effects to Your Snare Drum (Sounds Like A Drum, YouTube) Snare drum sample, from NYC Drum Kit @ Soundpacks.com Rimshot sample, from Live Percussion Sample Pack @ Soundpacks.com Floor Tom Your \u0026lsquo;Normal\u0026rsquo; drum set will have 3 Tom drums, these are big, deep drums. Of them, the Floor Tom is the biggest. See the video below to hear a Tom drum in action Toms (usually X2) The other two drums on \u0026lsquo;Normal\u0026rsquo; drum kit are toms too, but are typically a bit smaller, but not matched in size. Usually this is set up so you can have \u0026ldquo;Descending Toms\u0026rdquo; - more on this in a bit.\nWhy do drum sets have descending toms? (Low Volume Drumming)\nDeep, Detuned Tom Sounds S2E15 (Sounds Like A Drum, YouTube) HiHat Cymbals + Pedal The pedal here is used to close the two cymbals that make up the HiHat together. This gives it a shorter tail. Closed HiHat sample, from NYC Drum Kit @ Soundpacks.com Open HiHat sample, from Live Percussion Sample Pack @ Soundpacks.com Crash, Ride, Splash, and China Cymbals This is basically a big disc of metal made to flop noise around everywhere, right? Well, it turns out there\u0026rsquo;s a little more nuance to it than that. Here\u0026rsquo;s a really informative link and an interesting video comparing some Cymbals. My point is just that there\u0026rsquo;s more to it than a slab of metal.\nCymbal Types: Up Your Drumming Knowledge Effects Cymbal Comparison (Christian Baumgartner, YouTube) Sticks Don\u0026rsquo;t forget the obvious! The drum sticks themselves can be tapped together. Sticks sample, from Live Percussion Sample Pack @ Soundpacks.com Other Percussion Elements # Don\u0026rsquo;t forget that percussion doesn\u0026rsquo;t just have to come from stretched membranes and sheets of metal. Shakers, finger snaps, the triangle, gongs, bells, hang drums, claps \u0026hellip; this list keeps going. Don\u0026rsquo;t be afraid to add some spice!\nThe 808, 909, LinnDrum, and Oberheim DMX # Modern Drum Machines # Most modern drum machines actually have a bit more than drums. The Elektron Digitakt, for example, is a sampling drum machine that can take those samples down to single cycle wave forms and loop them, turning it into a synth- and a quite competent one at that.\nPlaying the Elektron Model:Cycles (Red Means Recroding, YouTube)\nWhy I like the Roland MC-707 (Red Means Recording, YouTube)\nDrum Effects # Sometimes Less is more # For as much as I\u0026rsquo;ve gone over all the different types of drums above, and the sea of percussion that lies below, I want to take a break and appreciate that sometimes you really don\u0026rsquo;t need all that much. Just poke around these videos. I tried to find the absolute best of minimal and maximal that I could.\nGiant # Minimal # Similarly, Big Drums VS Small Drums (YouTube) isn\u0026rsquo;t as simple as you think either\nOther Drum Content # 12 Tips I Wish I Knew as a Beginner Drummer (Stephen Clark, YouTube)\nOther Percussion Instruments # Bells and Carillons # Beatboxing # okay, technically this might belong in wind instruments. Fight me. Steelpan # Hangdrums \u0026amp; Handpans # Tambourine # Vibraphone # Vibraslap # Wood block # Xylophones \u0026amp; Glockenspiels # "},{"id":190,"href":"/music/instruments/strings/","title":"Strings","section":"Instruments","content":" Strings # Guitars # Picture of my character by Alex the Nerd Bird Acoustic, Electric, Acoustic-Electric? # Hollow Body, Solid Body? # Pickups? # Strings? # [TODO]\nNylon vs plain vs wound, metal types, coated. Gauges. https://blog.ernieball.com/strings/what-string-gauges-should-you-be-playing/ . This page does reference neck length, so keep that in mind too!\nMy recommendation, first and foremost, is try them. Strings are cheap, swap \u0026rsquo;em out, try each for a month, note your experiences before and after- how they felt, sounded, if they left your fingers sore, if pitch bending was fun, etc.\nStill, I will say generally I\u0026rsquo;ve found Ernie Ball Slinkys (the normal, greenish-yellowish package) are a good works-for-everything bet. If you\u0026rsquo;re playing something where you want more meaty low end, Ernie Ball Slinky Cobalts are worth a shot. If you\u0026rsquo;re looking to get more sustain, output, and outright aggression from your pickups, Ernie\u0026rsquo;s M-Stell line does well. Each of those is available in a variety of gauges. I\u0026rsquo;m not being paid to promote Ernie Ball here - they\u0026rsquo;re just good.\nTunings? # Standard (EADBGe), drop D, open G, DADGAD, Ostrich, etc. Why you\u0026rsquo;d want them.\nPicks, Slides, fingers, or\u0026hellip; chopsticks? # Classical Guitars? # 6-String # Bass # [TODO]\nActive Pickups, 3 vs 2 band EQ, string count, picking methods, slap https://www.reddit.com/r/Guitar/comments/muwb6/learning_bass_after_guitar/\n12-String # Extended Range # Fanned-Fretts # Fretless # Baritone # Lap Steel \u0026amp; Pedal Steel # Pianos # Clavinet # Dulcimers # Hammered # Harp # [TODO] + Pedals on harp\nGurdy # Banjo # Bass # Cello # What is the Difference Between Cello and Bass (Consordini, YouTube)\nViolin / Fiddle # Viola # Lute # Mandolin # Sitar # Ukulele # Concert, Soprano, Tenor, Baritone, Bass? # Gaohu # Guzheng # Koto # Theorbo # guitar, lute, dulcimer, dual/single string, acoustic, electric, electroacoustic\nguitar pickups, slides, kapo, tuning (equal v just), wound, physical modeling (Kurplus Strong)\nhttps://grunfy.com/scaler.html\nThe History Of Guitar (YouTube, Rob Scallon)\nTuning a Floyd Rose Guitar (YouTube)\nMy New 18-String Hurdy-Gurdy (YouTube, Patty Gurdy) (also see 5 System of a Down riffs on hurdy gurdy)\n"},{"id":191,"href":"/music/instruments/synth/","title":"Synth","section":"Instruments","content":" Synthesizers # I\u0026rsquo;ve already talked about FM, additive, subtractive, etc. in Sound Sources. Here I want to go into how they fit into a song, the idea of pads, leads, bass. As well as how a lot of famous sounds have been done and what some of the most famous synths are. I\u0026rsquo;d also like to cover some of why some newer synths are exciting, like the Hydrasynth, Continumm, Norand Mono, Subharmonicon, Polygogo,\nBack on the Sound Sources page you learned about the core elements of synthesis - different kinds of oscillators. Then, in the effects pages you got a good dose of filters and what makes them tick. Most synthesizers are really just a nice oscillator, filter, some envelope generators, and a couple LFO\u0026rsquo;s shoved into box - but if you get into synths enough, you\u0026rsquo;ll learn there\u0026rsquo;s some truly iconic sounds and rich history and cultural context that influences how we use and how we hear different synths and their most iconic sounds.\nThe many roles a synth can play # Synthesizers can be used for nostalgic, rapid arpeggios reminiscent of vintage video game consoles, lush pads played with complex chords to evoke the feeling of the 1980\u0026rsquo;s, or be used with complex modulations and aggressive wave-mangling to get the sounds of a huge variety of EDM flavors.\nAdditionally, synths can be played in many ways. There\u0026rsquo;s just as many well known, iconic synth sequences that have been programmed in (Such as the Roland 303 on Daft Punk\u0026rsquo;s DaFunk) and loop as there are amazing lines passionately played into a keyboard (Such as Van Halen\u0026rsquo;s Jump) and with the explosion in Eurorack, who knows how many songs are using generative techniques. Of course, now we can use a guitar to control a synth, among other more exotic interfaces.\nBasically, synthesizer\u0026rsquo;s can server any purpose and sound like anything and be played any way. That makes them really difficult to talk about.\nIf you\u0026rsquo;re interest in the history of synthesis in depth, you should check out BEST https://www.youtube.com/watch?v=oi0d2YqrOfQ\nIf you want the very, very short version\nAlmost all early synths were monophonic - you can only play one note at a time There\u0026rsquo;s \u0026ldquo;West Coast\u0026rdquo; and \u0026ldquo;East Coast\u0026rdquo; synthesis \u0026ldquo;West Coast\u0026rdquo; = Additive synthesis, complex waves, wave folders, lowpass gates, the \u0026ldquo;weird stuff\u0026rdquo;. \u0026ldquo;East Coast\u0026rdquo; = Subtractive synthesis, you\u0026rsquo;re classic waveshape on a basic oscillator + Filter combo. There are some very notable synths (Wikipedia) that have been cloned into oblivion now A small taste of synth history # Yes, I might have skipped your favorite\n1970 - The Moog \u0026amp; Minimoog # Moog modular\nMinimoog\n1976 - The Yamaha CS-80 # The CS-80 is a polyphonic powerhouse synth with every feature and then some. Ribbon control. Velocity sensitive keys with aftertouch.\n1978 - The Korg MS-20 # The MS-20 is notable today mostly for it\u0026rsquo;s filters, mostly it\u0026rsquo;s aggressive and dirty high pass filter.\n1978 - EDP Wasp # Notable songs:\nThe Wasp was a commercial success for the relatively small, British, Electronic Dream Plant but is mostly an obscure footnote as a full synth but it\u0026rsquo;s rather famous among synth-heads for it\u0026rsquo;s incredibly over the top CMOS filter, as mentioned previously on the BUTTON filters page.\n1978 - Prophet 5 # Notable songs:\n1979 - The Fairlight CMI # Notable songs:\n1980 - Oberheim OB-Xa # Notable songs:\n1980 - Roland 808 # Notable songs:\nWe already talked about the 808 - LINK\n1981 - The Roland TB-303 # Notable songs:\nThe (in?)famous 303 was a massive commercial flop, but is notable for\n1981 - The Roland Jupiter-8 # Notable songs:\n1982 - The Roland Juno-60 # Notable songs:\nThe Design of the Roland Juno oscillators (Stargirl Flowers\u0026rsquo; Blog)\n1983 - The Yahmaha DX-7 # FM is a pain in the ass, but some pro preset-builders made it shine.\n1986 - Korg Electribe # Maybe not the first, but the first popular groovebox.\n1995- Doepfer \u0026amp; Eurorack # 1997 - Access Virus # 2011 - Teenage Engineering Op-1 # The OP-1 is a battery powered groovebox-ish thing that\u0026rsquo;s still sort of in class of it\u0026rsquo;s own. It\u0026rsquo;s portable, plastic-y, and packed to the brim with weird ideas. You can sequence on it, but it\u0026rsquo;s really meant to be played by recording live into tracks and building up layers. It\u0026rsquo;s a mildly difficult workflow, but inspires some neat results.\n2014 - Xfer\u0026rsquo;s Serum # Wavetable synthesis\n2015 - Teenage Engineering Pocket Operators # 2018 - VCV Rack # Modular in software. Not quite as good as the real deal\nPresent day # The story of the synth is far from over. Behringer is rapidly making cheap clones of many of the vintage synthesizers mentioned\u0026hellip; for better or wose. Vacuum tubes, bucket brigade delays, and germanium are coming back into vouge.\nGroove boxes are getting more diverse and more focused. Boxes like the Digitakt offer sample based workflows while more focused boxes like the Model:Cycles are offering a hands-on approach to drums crafted with FM - a previously pretty difficult technique. Similarly, there\u0026rsquo;s more and more cheap assemble-it-yourself groove box combos like can be built with a system of Pocket Operators and Volcas.\nMeanwhile, YouTube has become full of \u0026ldquo;Synthfluencers\u0026rdquo; reviewing and selling gear, driving a massive synth economy more focused on the new and shiny than making good music.\nFortunately, there has been real innovation in recent years. There has been a huge push for expressivity in controllers, with polyphonic aftertouch (changing the pressure on each finger, per key/button after the fact) becoming more and more common. Some synths are pushing into microtonal (more than the traditional 12-notes per octave) and poly-rhythm territories - pushing the boundaries of what\u0026rsquo;s accessible.\nFinally, we\u0026rsquo;ve been seeing a push for DIY programmable boxes, where users can write the code directly. Along with this there\u0026rsquo;s becoming a larger and larger pool of code for musicians-turned-developers to pull from every year. Most notably is the open source code from Mutable Instruments and the many, many scripts for the Norns.\nSo You Want to Get Into Modular # 10 Important Questions for Modular Synth Beginners (mylarmelodies, YouTube)\nModular - Eurorack, 3U, \u0026amp; AE , semi-modular, VCV, etc.\nPrice! (Case, PSU, cables) Groovebox? Performance? What do you want to do with it? Do you need polyphony? Would a semimodular be better? "},{"id":192,"href":"/music/instruments/wind/","title":"Wind","section":"Instruments","content":" Wind # What is a Wind Instrument? # A wind instrument is a musical instrument that contains some type of resonator (usually a tube) in which a column of air is set into vibration by the player blowing into (or over) a mouthpiece set at or near the end of the resonator. The pitch of the vibration is determined by the length of the tube and by manual modifications of the effective length of the vibrating column of air. - Wikipedia Alright, I guess that\u0026rsquo;s sorta helpful. I mean, we\u0026rsquo;ve all made a loud sound down a cardboard tube as a kid, so it\u0026rsquo;s basically that.\nOkay, so what about the difference between woodwind and brass?\nWoodwind instruments are a family of musical instruments within the more general category of wind instruments. Common examples include flute, clarinet, oboe, bassoon, and saxophone. There are two main types of woodwind instruments: flutes and reed instruments (otherwise called reed pipes). - Wikipedia Modern brass instruments generally come in one of two families:\nValved brass instruments use a set of valves [\u0026hellip;] operated by the player\u0026rsquo;s fingers that introduce additional tubing, or crooks, into the instrument, changing its overall length. [\u0026hellip;]\nSlide brass instruments use a slide to change the length of tubing. The main instruments in this category are the trombone family, [\u0026hellip;]\n- Wikipedia So, uh, not super helpful. Reading a bit further though:\n[T]he term \u0026ldquo;brass instrument\u0026rdquo; should be defined by the way the sound is made, as above, and not by whether the instrument is actually made of brass. Thus, one finds brass instruments made of wood, like the alphorn, the cornett, the serpent and the didgeridoo, while some woodwind instruments are made of brass, like the saxophone. - Wikipedia So, let\u0026rsquo;s just not give a shit, instead, let\u0026rsquo;s take a look at some of the main wind instruments and the defining features of their sounds.\n[TODO]\npsst, if you like this, check out the more serious NPR Music Tiny Desk Concert Moonhooch did back in 2014 (YouTube) List of Wind Instruments # Accordion # Bagpipes # Bagpipes aren\u0026rsquo;t just for classical Scottish music, check out The SIDH - Iridium, it\u0026rsquo;s a basically EDM + Bagpipes and fucking amazing.\nBlown Bottle # Clarinets # Didgeridoo # Flute # Irish Flute # Harmonica # Kazoo # Melodica # Oboe # Ocarina # Piccolo # Organ # Recorder # Saxophone # Alto, Tenor, Baritone, Bass, Soprano\u0026hellip; Traffic Cone? # Sheng # Shō # Trombone # Trumpet # Tuba # "},{"id":193,"href":"/music/intro/","title":"Intro","section":"Musics","content":" Bang!. Zwoop. Bada-dap-bap. # Here\u0026rsquo;s a sine wave.\nI want you to try something. Put your foot back up on your heel and each time you see a new peak, tap the ground. Play a non existent kick drum to each new peak. (or just tap a finger on your desk)\nTo some people, keeping this beat is difficult. To some it will come naturally. Either is fine. This could be the tempo of a song, the metronome that everything is playing in time to, and it\u0026rsquo;s just a wave.\nBut what if we wanted to hear this wave? Well, this wave is (roughly) 1.2Hz. So, you should see a new peak just over once a second. Our ears start to be able to hear things around about 20Hz (20 peaks a second) and can hear up to (if you\u0026rsquo;ve kept good care of your ears and are lucky) about 20kHz (20,000 peaks a second).\nBut, wait, I just had you make a sound based on the above wave, and obviously you could hear that. (\u0026ldquo;No shit\u0026rdquo; I hear you say.)\nIn music, we generally want to think of frequency is three ways:\nThe frequency of events. Such as the tempo of the song. The fundamental frequency of a note. The frequency content of a sound. For the above wave, when used as a metronome for your non-existent kick drum you were doing (1.) but when you just thought about hearing the wave you were doing (2.) So, what\u0026rsquo;s up with 3?.\nWell, to gloss over the quite beautiful math and science, we can think of any wave we\u0026rsquo;re shown as having a different flavor.\nAt the absolute most boring center of our umpteen-dimension flavor chart (sweet, savory, spicy - it\u0026rsquo;s not just \u0026ldquo;flavor\u0026rdquo;) everything comes back to the sine wave like above. It\u0026rsquo;s the most basic. This is because if we look at any of the other waves we can always break them apart into combinations of sine waves at different frequencies and volumes. This is (3) and in musical contexts it\u0026rsquo;s a large portion of what is called the \u0026ldquo;timbre\u0026rdquo; of an instrument.\nBut, wait, if everything is just a combination of sine waves, what\u0026rsquo;s this \u0026ldquo;fundamental\u0026rdquo; business? The \u0026ldquo;fundamental\u0026rdquo; is just the lowest frequency in the wave. But this is really important, because that lowest frequency is (usually) what you\u0026rsquo;re ear will pick up on and associate as the note being played. This is why we can play the same note on a variety of instruments, recognize them as the same note, and yet they still sound different.\nOf course, when we listen to music, we don\u0026rsquo;t just listen to one wave making a neat tone, we want our wave to be able to change shape over time.\nBang! # The most fundamental way we can change a sound over time is to change it\u0026rsquo;s volume. If you clap, the sound may reverberate around the room a bit, sure, but mostly that sound is going to decay very quickly. The same is true of most drum noises.\nIf you pluck a string on a guitar it will vibrate for a while (unless you intentionally stop it or play another note on the same string) but it will still fade.\nOf course, this isn\u0026rsquo;t our only option. We can also change the frequency content of the wave itself.\nZwoop # We know our waves have different flavors, and that these flavors can even change over time. But sometimes two flavors can really clash but it be hard to know exactly why. Sure, we can view the waveforms like we\u0026rsquo;ve been doing above, but wouldn\u0026rsquo;t it be great if we could have something tell us how spicy our sounds really are?\nWell, you can! Introducing the flavometer Spectrum Analyzer. In this picture, our input is the pink wave on the left, and the spectrum analyzer, showing us just how spicy it is and how is on the right (the green graph)\nThe spectrum analyzer lets you dive in and see (3.) The frequency content of a sound. So, how do you read this thing? The vertical axis is how much of a frequency there is and the horizontal axis is what frequency you\u0026rsquo;re looking at in the range of human hearing. Note though, this plot is logarithmic. See how the scale isn\u0026rsquo;t a perfect grid? That\u0026rsquo;s what I\u0026rsquo;m talking about. You\u0026rsquo;ll see that the bottom scale goes from 0 to 100 with a big gap, then from 100 to 1000 the lines start to get closer and closer together until at 1000 this repeats until 10,000. This may seem weird, but it\u0026rsquo;s for two reasons.\nFirst, and probably more importantly, the way we perceive pitch is actually logarithmic. No, stop, don\u0026rsquo;t run away! It\u0026rsquo;s not that complicated.\nBoth of these notes are A. The keyboard repeats itself. But we know the blue one is higher pitch than the red one. The only difference is which octave the key is played at. I\u0026rsquo;ll get more into music theory and the division of notes on the keyboard later, but what you should know for now is that when we go up an octave, it\u0026rsquo;s a perfect doubling in frequency (similarly, down an octave means half the frequency).\nThe reason this matters to us for the moment is because as a natural consequence of this notes low down on the keyboard will be close together in frequency, while notes high up will be far apart.\nFor example, an A1 is 55Hz and a A#1 is 58.27Hz, so only 3.27Hz difference, but A6 is 1760Hz and a A#6 is 1864.66Hz, so 104.66Hz difference.\nThis means that by squishing the right side of the graph like we do above, we can actually have it align to how we perceive pitch relationships more easily because if it weren\u0026rsquo;t like this - if it were linear - almost all of the display would be used for high frequencies, well above where we\u0026rsquo;d normally play our melodies where vocals sit, etc. It just wouldn\u0026rsquo;t be useful.\nBada-dap-bap # Okay, so we know music is made up of these waves with different flavors and that we usually change this flavor over time - at least enough that it can decay out. But unless you\u0026rsquo;re considering the truly avant-garde, a single note being played isn\u0026rsquo;t really music. Soundscape or ambiance, sure, but not \u0026ldquo;\u0026ldquo;\u0026ldquo;music\u0026rdquo;\u0026rdquo;\u0026rdquo; in the traditional sense at least. Where most people draw that line is by the inclusion of repeated rhythmic structure.\nNote I said Rhythmic and not Melodic. You can have music that lacks note changes and instead only uses a repeating sequence of un-tuned drum hits, for example. A lot of rap and hip-hop will do this, yet some royal asshat\u0026rsquo;s will gate keep this because, frankly, racism. You\u0026rsquo;ll typically have both rhythmic and melodic elements. And, typically, each sound is doing a little of both and interacting with one another. But let\u0026rsquo;s think about what each really means.\nRhythm, at it\u0026rsquo;s core, is what time do you hit the note, but most people will also consider hard you hit it. If you read duh-duh DUH. You probably grouped those first hits and made the 3rd one both later and louder. That\u0026rsquo;s Rhythm.\nMelody, is your basic do-re-mi-fa-so-la-ti scale walk (or whatever is typical in your culture). You may not do it with any rhythmic complexity at all (each space equally in time, at the same volume, etc. ) but there\u0026rsquo;s still melody there. This can include more though, like pitch bends, vibrato (pitch wobble), etc.\nWhere you choose to draw the line of what to consider part of the melody or rhythm doesn\u0026rsquo;t really matter much in the end, what does matter is that you can use them to convey what you want to convey, be it a high energy mosh bit banger or a sad song about love and loss.\n"},{"id":194,"href":"/music/lies/","title":"Lies","section":"Musics","content":" I lied # Well, sort of. I haven\u0026rsquo;t told you anything that\u0026rsquo;s wrong, but I have been omitting something.\nThe software we\u0026rsquo;re using, VCV Rack, is very weird. It lacks many features that most people expect in a DAW - Digital Audio Workstation. We\u0026rsquo;ll talk significantly more about DAWs in a coming page, but I need to bring them up now because there\u0026rsquo;s some things that VCV absolutely does not do well that will make creating full songs that sound like music you\u0026rsquo;re probably used to unnecessarily difficult.\nThis should leave you with two questions:\n1. Why the heck did we start with VCV Rack then? # Three reasons:\nVCV is a lot \u0026ldquo;lower level\u0026rdquo; than working in a DAW. We\u0026rsquo;ll be making larger effects and sounds from their fundamental components, gaining a deeper understanding of how they work.\nIf for no other reason, you should care about this because the world of music technology is ALWAYS trying to sell you on a new tool (software or hardware) to make music but if you know how things work you\u0026rsquo;ll say \u0026ldquo;Why do I care, I can already do that!\u0026rdquo; instead of \u0026ldquo;I NEED IT\u0026rdquo;.\nMost DAWs are VERY expensive. There are low cost options - Reaper, for example, is $60. But, it\u0026rsquo;s also really hard to use. Most musicians use either Ableton Live which is $750 for the version you actually want(1) or FLStudio which is much more reasonable at $200 for the version that\u0026rsquo;s good enough for most users (+free upgrades for live, unlike Ableton Live).\nI\u0026rsquo;m not cool with asking you to shell out $200 for software to even get started. When we do need to use a DAW, I\u0026rsquo;m going to go with FL Studio (Despite being an Ableton user) both because they have a really nice trial where pretty much the only thing you can\u0026rsquo;t do is save your work and because unless you realllllly need some of Ableton\u0026rsquo;s niche features, it\u0026rsquo;s the better DAW anyway. mostly because the Ableton piano roll sucks.\nDAWs are complicated. Sure, learning VCV isn\u0026rsquo;t a walk in the park, but DAWs throw a lot at you very quickly. Most will let you immediately press buttons and get sound, sure, but the actual in depth usage of the features that make it worth paying for take some time to actually understand.\n2. What am I missing? # Timelines, Tracks, Automation, \u0026amp; Clips # [TODO] Screenshot\nIn you\u0026rsquo;re typical rock band you have five parts - Lead guitar, Rhythm guitar, Bass Guitar, Drums, \u0026amp; Vocals. Each of these parts will have at least one track on your timeline. If the same bit is repeated a few times, that can be put into a clip on the timeline, and that clip can be duplicated and moved around. You may decided you want to add automation, such as having the volume fade in and out.\nIn most software, these tracks can contain either actual sounds or, if you\u0026rsquo;re using a virtual instrument, they can re-generate the sound each time they play and so they only need to store the notes that the instrument should play. (2)\nSample \u0026amp; File Management # [TODO] Screenshot\nThis is something VCV does very, very poorly. Often, when making music you\u0026rsquo;ll want to use samples - pre-recorded sounds - and use them in various ways. Maybe it\u0026rsquo;s the vocals. Maybe you have some drum samples to load up into a drum utility that will let you finger-drum out a beat. Either way, you\u0026rsquo;ll probably be building up a good library of sounds to work with. VCV Doesn\u0026rsquo;t have a built in way to organize and dig though your sample library. Basically every other DAW does.\nPlugins # [TODO] Screenshot\nPlugins are virtual instruments or effects you can load into your DAW similar to the modules we\u0026rsquo;ve been loading up in VCV Rack, though unlike the modules each plugin is usually a fully featured, ready to use thing. Some plugins may emulate the sound of other instruments (guitar, piano, vintage synthesizers) some may be full, ready to use effects (Delays with various modes that automatically sync to the tempo, guitar amp emulations, full glitch-machines, etc.). Usually all of the knobs and settings in these plugins can be automated in the DAW itself.\nIn the majority of cases, plugins will load as another window on top of the DAW.\nVCV Itself is very strange in that if you pay for it, you can get it to either be a plugin (The primary benefit of the $100+ pro version - letting you load VCV into you DAW) or get it to open plugins (VCV acting like a DAW, using Host - $30(3)). You can also use Cardinal, which is a legally made \u0026ldquo;fork\u0026rdquo; of the VCV project which adds the ability to use what is effectively the same software as a plugin for free.\nSoon we\u0026rsquo;ll be going over some of what I deem to be the best-of-the-best plugins for you to use. They do vary wildly in price, from free to $400+. You can absolutely get away with only using the free stuff.\nSo, for now, I\u0026rsquo;m going to stick in VCV Rack. We\u0026rsquo;ll come back to DAWs soon, but I wanted to point this out because on the next page you\u0026rsquo;re going to be doing some stuff with samples, which has a pretty crappy workflow in VCV, and I don\u0026rsquo;t want you to think that is normal.\nAbleton Live has Into, Standard, and Suite versions. Intro has some weird limitations, and Standard still lacks \"Max4Live\" a tool you'll almost certainly want for doing many basic things in Ableton. Plus, Ableton will make you pay AGAIN for major version updates. In the case of drums being played back this way, usually each drum sound is associated to a note. It's a bit hacky, but makes sense in practice If you're thinking of buying Host, there's a downside you need to be aware of with hosting plugins in VCV. Due to the underlying structure of how VCV works, plugins loaded in VCV will incur some extra delay getting sound in and out of them. It's not enough that you're likely to hear it cause things to go out of sync, but it is enough to cause the phase of your waveforms to shift. This becomes a problem when you do somethig like split a signal so that it goes though a plugin loaded in Host and through a module in VCV then mix them back together. The resulting waves will have enough phase differences that they'll cancel out and generally just not sound like you want them to. "},{"id":195,"href":"/music/lyrics/","title":"Lyrics","section":"Musics","content":" 12 - Lyrics \u0026amp; Vocals # Lyrics and just sung poetry! - Some moron that has never made music Oh fuck directly off. This is poetry:\nThey thought there be seven and they're right. There is seven sins without I I come from a place that many do find Heroes and villains find me inside When they do what they do for family Regardless of who dies Blood is my name l o Many families have cried o r d i e n d once so dear tossed aside Blood is my name, the sin of o n d s undeserved I'm a sin that lurks unheard Religious and Righteous often mistaken Use my name as if it is not forsaken Do not think that blood is a bond to never be broken I find my way to bring many to do things that should never be spoken How should that be sung, pray tell? How long should each syllable be stressed? How long should each vowel be held? What about pitch? Should it be sung sweetly or with anger?\nPoetry is not lyrics.\nWhen you write lyrics, you need to keep in mind all of these things and more.\nHow do the words sound. The word \u0026ldquo;Silent\u0026rdquo; has an \u0026rsquo;eye\u0026rsquo; in it that cuts. \u0026ldquo;Canoe\u0026rdquo; is a kind of dopey word. \u0026ldquo;Blaze\u0026rdquo; can be spoken soothingly, as can \u0026ldquo;Devils\u0026rdquo;. \u0026ldquo;Rock\u0026rdquo;, like the object, is hard in the start. Longer words, \u0026ldquo;Forgotten\u0026rdquo; \u0026ldquo;iridescent\u0026rdquo; \u0026ldquo;lightning\u0026rdquo; - they can ask the vocalist to bend the pitch in certain ways naturally, intrinsic to how the words are spoken - unless of course they\u0026rsquo;re delivered in a chant.\nLyrics are not poetry.\nRhymes don\u0026rsquo;t have to be perfect. The length of a line doesn\u0026rsquo;t matter - the amount of time it takes to deliver and difficulty in hearing the correct words does.\nLyrics are not poetry.\nYou can convey some things words do not say well. A laugh. A line delivered with a crazed tone, or a somber longing.\nLyrics are not poetry.\nPoetry is an art form, delivering it another. Writing lyrics is an art form, delivering it is another.\nSinging and vocal presentantion is not something that can be easily be written on a page. You may hear what you want in your head as you write, the subtle vibrato here, the long belted performance-finishing pride there, vocal fry to add texture, a word sung with sexual desire in it - you can\u0026rsquo;t possibly write it all down.\nOkay, we get it. Lyrics are not the same as poetry! So how do I get better at writing lyrics? How do I get better at singing?\nFucking 👏 Practice 👏\nFull loop. Write lyrics. Sing. Modify lyrics. Write. Sing some more. Write. Sing. Sing it again. Read poety. Read some books. Draw what you're singing about. Go for a run. Sing. Drink some water. Sing. Try singing with effects. Write about how to use those effects in the Lyrics. See what your voice can do. Watch vocal training lessons on YouTube. Maybe pay for a vocal coach. Try using a vocaloid / synth voice program to write. Sing aginst drum beats. Sing agaisnt guitar. Sing for others to hear and let them critique you. Try vocal processing. Try no processing. Sing. Write. Sing. Write. Sing. "},{"id":196,"href":"/music/midi/","title":"Midi","section":"Musics","content":" MIDI in Detail # Musical Instrument Digital Interface, or MIDI is what it sounds like, the primary way to get data between devices digitally. Want to tell a hardware synth to play a sequence you arranged on your computer? MIDI. Want to play notes into your computer using a keyboard? MIDI. Want to sequence drums, with varying \u0026lsquo;velocity\u0026rsquo; on each hit? MIDI.\nSounds Great?\nFor the most part, yeah. Everything works together and you can make all your hardware speak the same language. Let your keyboard talk to your computer, your computer talk to your drums, now you can play the drums with your keyboard! Send automation from your computer to a parameter on your synth to vary the sound over time, whatever. MIDI is pretty much carries all the information about your music expect the audio itself.\nThe Catch? MIDI is outright ancient by technology standards, having come out in 1981. It\u0026rsquo;s so damn old, that it\u0026rsquo;s (mostly) a 7-bit standard. Worse, over time the standard has had extensions bolted on and so older devices may not work exactly as expected. Now, ideally, a musician shouldn\u0026rsquo;t have to know what this means and the gear should stay out of the way. Unfortunately, we\u0026rsquo;ve been sticking with this standard for so long that basically everything abuses it in one way or another to the extent you sorta have to know how it works. So, 7-bit, what does that mean?\nWell, it\u0026rsquo;s talking about bits, so 1\u0026rsquo;s and 0\u0026rsquo;s. For each message in midi, you get 7 bit\u0026rsquo;s of data. So, when you turn a knob it can range from 0000000 to 1111111, which, works out to be 0 to 127.\nThis means each knob, even if it feels smooth to you, only has 128 distinct levels whatever it\u0026rsquo;s talking to can receive. This is really bad. But, wait, it gets worse. This applies to almost everything in MIDI, so how hard you hit the keys and how finely you can set the volume with a physical slider. This really just isn\u0026rsquo;t fine enough control.\nHere, this sine wave is being forced down to 4-bits, making the discrete levels obvious. If you imagine this is what is happening to the knob as you turn it, you could see how this would limit your possibilities and might make setting the knob to a sweet spot difficult. Because of MIDI\u0026rsquo;s age and lack of resolution, there\u0026rsquo;s a whole fustercluck of things that have been done to make working with digital instruments work better over the years. Some you might see include\nMIDI Non-Registered Part Number (NRPN) is one way MIDI controllers can send higher resolution signals (14bit so, 0 to 16383) by putting two, 7-bit CC\u0026rsquo;s values together Open Sound Control (OSC) isn\u0026rsquo;t MIDI, but rather a competing standard that\u0026rsquo;s much higher resolution and can work over ip (wifi), but it\u0026rsquo;s not universally supported like MIDI Mackie Control Universal (MCU) is a fustercluck that has been bolted onto a lot of MIDI controllers. It mostly provides a \u0026lsquo;universal\u0026rsquo; mapping for common functions like mute, solo, track select, EQ and what not. It basically just sits on top MIDI. Midi Polyphonic Expression (MPE) is probably the most convoluted of the workarounds, but it will require some more explanation, so I\u0026rsquo;ll come back to this in a second. \u0026ldquo;Alright\u0026rdquo;, I hear you thinking, \u0026ldquo;MIDI is an old dumpster fire, what is it good for then?\u0026rdquo;\nWell, it\u0026rsquo;s pretty much still the only one you can sequence notes in your DAW, nearly all instruments interface with each other and a computer using MIDI, and MIDI controllers exist in about every shape and form you could think of- from a traditional keyboard to just a huge grid of knobs. MIDI\u0026rsquo;s age also means that it is ludicrously compatible, as you can plug in hardware from over 30 years ago and it will still just work.\nSo, let\u0026rsquo;s dive into the details and see how MIDI actually functions\nTypes of Midi Messages # Channels # While not a message in itself, it\u0026rsquo;s necessary to note that MIDI connections provide 16 channels of communication. Usually each device only uses one channel at a time. You can use this for multiple things: If your keyboard makes changing the active channel easy, you may want to setup a different instrument on each channel. With this you could switch between playing a piano or synth sound on channels 1 and 2 easily. The other primary use is if you have multiple hardware devices that receive MIDI messages and make sound, like synthesizers and drum machines. You can chain them together with MIDI Through (more on this later) and have each one listen for notes on it\u0026rsquo;s own channel while using less cables.\nNotes # MIDI notes range from 0 to 127, with the highest note, 127, being a G9 @ 12543.9hz and the lowest, note 0, being a C-1 at 8.176hz. Obviously this is more than the standard full 88-key piano.\nGiven human hearing starts at about 20hz, the lowest notes are inaudible except for harmonics assuming no octave shifting or other quirks. As such, these lowest notes are often re-purposed for control messages. Even if they\u0026rsquo;re not, a lot of sound sources will only respond to a limited range of these notes anyway.\nWhile MIDI does have an extension for supporting alternate tunings, it\u0026rsquo;s rarely directly supported. As microtonal and other non-12TET (12 True Equal Temperament) scales have become common, various tools exist to use MIDI pitch messages, which we\u0026rsquo;ll look at in a bit, to force notes to a chosen scale anyway.\nGeneral MIDI, one of various MIDI extensions (that often get ignored anyway) also defines a few specific instruments to belong to specific midi channels and program change messages (rarely used unless listening to midi files directly with soundfonts) one of these is a drum setting, which is really the only one that is still commonly used, and is generally close to the normal mapping you\u0026rsquo;ll see in tools like Ableton\u0026rsquo;s Drum Rack. If you buy an electronic drum kit or use a drum machine, it\u0026rsquo;s likely to at least try to respect this mapping from notes to drum sounds. Of course, you can still make any note map to any sound you like and ignore this altogether if you want.\nGeneral MIDI Drum Map Note, the cells in blue are the notes used by Ableton (and in turn many DAWs which copied them) for their Drum Rack device, which is typically shown as 4x4 grid of pads, with the lowest note in the bottom left. There is no requirement that you follow the general-midi mapping when assigning samples, but it is probably good practice to match it up as well as you can. If you can\u0026rsquo;t, try to at least make parts spit in the same area frequency wise- put high-pitch samples on the higher-pitch spots and so on. This will make changing kits much easier.\nKEY NOTE SOUND 35 B0 Acoustic Bass Drum 36 C1 Bass Drum 1 37 C#1 Side Stick 38 D1 Acoustic Snare 39 Eb1 Hand Clap 40 E1 Electric Snare 41 F1 Low Floor Tom 42 F#1 Closed Hi Hat 43 G1 High Floor Tom 44 Ab1 Pedal Hi-Hat 45 A1 Low Tom 46 Bb1 Open Hi-Hat 47 B1 Low-Mid Tom 48 C2 Hi Mid Tom 49 C#2 Crash Cymbal 1 50 D2 High Tom 51 Eb2 Ride Cymbal 1 52 E2 Chinese Cymbal 53 F2 Ride Bell 54 F#2 Tambourine 55 G2 Splash Cymbal 56 Ab2 Cowbell 57 A2 Crash Cymbal 2 KEY NOTE SOUND 58 Bb2 Vibraslap 59 B2 Ride Cymbal 2 60 C3 Hi Bongo 61 C#3 Low Bongo 62 D3 Mute Hi Conga 63 Eb3 Open Hi Conga 64 E3 Low Conga 65 F3 High Timbale 66 F#3 Low Timbale 67 G3 High Agogo 68 Ab3 Low Agogo 69 A3 Cabasa 70 Bb3 Maracas 71 B3 Short Whistle 72 C4 Long Whistle 73 C#4 Short Guiro 74 D4 Long Guiro 75 Eb4 Claves 76 E4 Hi Wood Block 77 F4 Low Wood Block 78 F#4 Mute Cuica 79 G4 Open Cuica 80 Ab4 Mute Triangle 81 A4 Open Triangle Ableton Drum Rack Mapping According to General Midi:\nHigh-Mid Tom (C2) Crash (C#2) High Tom (D2) Ride (Eb2) Pedal Hi-Hat (Ab1) Low Tom (A1) Open Hat (B#1) Low-Mid Tom (B1) Electric Snare (E1) Low Floor Tom (F1) Closed Hat (F#1) High Floor Tom (G1) Bass (C1) Side Stick (C#1) Acoustic Snare (D1) Clap (Eb1) Velocity # Every MIDI note also gets sent with a corresponding velocity message. If you strike a key hard, it\u0026rsquo;ll send a higher velocity value, soft, lower. If the controller doesn\u0026rsquo;t support this, typically the note will be sent with a velocity of 127 (the maximum value) on every note. There\u0026rsquo;s also a bit of strangeness where the note-off event (the release of a note) actually sends its own velocity as well. Typically, this is 0, though other values are possible.\nNot all instruments/plugins/software will respond to velocity, and some may respond in different ways. A piano emulation for example may actually try to replicate the different ways piano keys sound when hit with more or less power, while a drum sampler may only vary the volume or ignore velocity entirely.\nAftertouch # Aftertouch is a sort of continuous velocity message. It\u0026rsquo;s not nearly as commonly supported, but the idea is to send so that the pressure of your finger over time can change something about the sound. Unfortunately, aftertouch is usually shared by all the notes you\u0026rsquo;re holding at a given moment, and only the highest value (most pressure) is sent. Devices that send multiple aftertouch messages are significantly less common- this is partly because until MIDI 2.0 becomes more common, the only good way to do it is with MIDI Polyphonic Expression capable controllers, which send each note on a separate MIDI channel, and then abuse this to make each channel aftertouch message only be associated with a single note. This is a bit hacky, but has become a sort of bolted-on standard to MIDI, and so a lot of software (though far from all) supports it now. Probably the most recognizable MPE controller is the ROLI seboard, which I linked back in the Instruments chapter. MPE controllers tend to be on the very expensive side of things though.\nCC\u0026rsquo;s # MIDI Control Change messages are what they sound like. They\u0026rsquo;re used to represent turning knobs or moving sliders- controls. You can then move these knobs to control whatever you like, and with most DAWs you can record these movements to play them back or edit them after the fact later- just like with notes.\nGenerally, controls get mapped to whatever parameter you want using MIDI Learn. This is a feature in most software where you click the \u0026lsquo;Learn\u0026rsquo; button, click the parameter you want to control, and then move the physical control you want to map it to. Then, click the \u0026lsquo;Learn\u0026rsquo; button again to resume normal operation. Now that physical knob or slider or whatever will control the virtual knob/slider.\nHere I\u0026rsquo;m controlling various parameters of a patch in VCV rack using a MIDI CC →CV module, though the better way to do this is probably to use MIDI-MAP which let\u0026rsquo;s you map a virtual knob to physical knob without the wire, which is generally a bit nicer to use. I\u0026rsquo;ve only used the wire breakout module here as I think it makes it more clear what\u0026rsquo;s going on. Typically, you\u0026rsquo;ll also be able to record and edit your adjustments of MIDI CC\u0026rsquo;s after the fact. This is usually done in the same place as all other automation in whatever software you\u0026rsquo;re using, and typically in the same area that you place clips of MIDI note data, in most software that will look something like this:\nBecause MIDI CC\u0026rsquo;s are only 7-bit (like the nearly the rest of MIDI) the resolution is trash and many programs will actually interpolate (morph) between values. This prevents knobs from feeling like they\u0026rsquo;re clicky with only so many positions and instead makes them behave more like you\u0026rsquo;d actually expect, though not all software does this.\nThere\u0026rsquo;s a few special \u0026lsquo;reserved\u0026rsquo; CC\u0026rsquo;s, though often you can just override them to do whatever you want anyway. However, before we got to that list of reserved CC\u0026rsquo;s I want to take a small detour to understand just what the fuck an NRPN is.\nNRPN stands for Non-Registered Parameter Number, and is a weird tidbit in the midi standard where some control messages may actually use two messages to send one value. This is because MIDI is, as previously mentioned, fucking old and only 7 bits. Well, if we use 7-bits of one message to represent the higher bits (Most Significant Bits or MSB) and 7-bits of another to represent the lower bits (Least Significant Bits or LSB) we can get much finer resolution messages. By going from only having 7 bits (that is seven 1\u0026rsquo;s and 0\u0026rsquo;s) to represent our number to 14 bits, we go from only being able to represent numbers from 0 to 127 all the way to 0 to 16383. This makes knobs go from feeling like you\u0026rsquo;re snapping to discrete values to feeling smooth.\nUnfortunately, NRPN support is super fucked up and support for it varies pretty wildly from program to program, and few controllers actually support it. Still, it\u0026rsquo;s worth mentioning as until MIDI 2.0 picks up steam, we\u0026rsquo;re stuck dealing with using whatever hacks we can to get more resolution out of things. So, now, in this list of \u0026lsquo;reserved\u0026rsquo; MIDI CC\u0026rsquo;s you\u0026rsquo;ll see some CC\u0026rsquo;s have a +nn next to them, for programs that support NRPNs, this the CC\u0026rsquo;s that would be used in conjunction with the normal one to provide more resolution.\nCC Name Description 1 (+33) Mod Wheel One of the two wheels/touch strips on many keyboard controllers 7 (+39) Volume Sometimes this is per-track, sometimes it\u0026rsquo;s the master volume 8 or 10 (+40 or 42) Pan 0=Left, 127=Right, 64=Center 64 Sustain Pedal When high (\u0026gt;64) hold all notes played until the CC goes low. Usually a pedal for piano 65, 66, 67, 68 Portamento, Sostenuto, Soft, Legato These CC\u0026rsquo;s aren\u0026rsquo;t often supported, but provide the other pedal controls that some MIDI keyboards will have as foot pedals. Very few VSTs will respond to these correctly. 120 Mute Channel Mute, but sometimes acts as master mute, depends on implimentation 123 All Off Force all MIDI notes OFF, not always supported You\u0026rsquo;ll notice that all the extra resolution CC\u0026rsquo;s (these provide the LSB) are exactly 32 higher than the original. In fact, depending on the software you may be able to corolate any of the first 32 CCs to there +32 counterpart, 1 with 33, 2 with 34, and so on. Again, this is all relatively uncommon, but you should be aware of it.\nOf note, most software represents interal states with more than 7-bits of resolution, so moving the software knob will often let you get to more exact values if you need to get something between to \u0026lsquo;clicks\u0026rsquo; of the knob turn. Also, usually your DAWs internal automation routing will have more than 7-bits of resolution too, so if you make a curve or ramp for a software knob to turn itself, it won\u0026rsquo;t sound like it\u0026rsquo;s clicking to 127 discrete values.\nCC Feedback? # MIDI CC\u0026rsquo;s are, typically, a one-way communication. For most controllers, this is fine, as the knobs aren\u0026rsquo;t motorized and can\u0026rsquo;t move to reflect new values if you change a value with your mouse or automation effects the value. Though, this isn\u0026rsquo;t always true - Some controllers do actually have a ring of LEDs around knobs, motorized faders, or lights above the keys. In these cases, the device needs to both send and receive data. Not all software will support controllers that do this, but most will. It may be referred to as different things, for example, in Ableton Live if you enable \u0026lsquo;Remote\u0026rsquo; in the MIDI settings of an device\u0026rsquo;s input (output from Ableton) connection, it will send value updates to the controller so that parameters can be shown like this (see this Ableton help page for more info) in VCV stoermelder\u0026rsquo;s MIDI-CAT is the only way I know of to do this kind of feedback.\nSustain # In the above table, the Sustain on CC 64 is listed. This CC is particularly important as when it\u0026rsquo;s high, notes will continue to play as if the note off message never happened until it is let go. This is really fun to play with.\nIf you\u0026rsquo;re using a pino VST, there\u0026rsquo;s at least a small chance that CC\u0026rsquo;s 65-68 will work as intended to emulate the other pedals on a real piano as well.\nSometimes the sustain CC is used as a control that is assumed to be on a pedal and would only be wanted as a momentary action, such as a repeated striking of the note or enabling a very heavy effect. This is relatively common in music plugins that emulate other instruments. For example, in a guitar emulation, the sustain pedal may act as a palm mute switch instead.\nOn most physical controllers that offer a sustain pedal, it is attached via a 1/4\u0026quot; TS cable on the back. You can get sustain pedals for pretty cheap that work with this both \u0026lsquo;piano style\u0026rsquo; that look like traditional piano pedals, and synth style, that are flat switches. I\u0026rsquo;ve had better luck with the latter, as my Korg PS-1 Footswitch (Amazon) has held up rather well.\nPitchbend # Pitchbend is inherently a simple idea, play a note, move this wheel and the note will \u0026lsquo;bend\u0026rsquo; in pitch up or down, similar to a whammy bar on a guitar. There are some things you should know about how it works in MIDI though:\nThroughout this page I\u0026rsquo;ve been referencing MIDI typically only being 7-bit. MIDI pitch bend is the main reason for this \u0026ldquo;typically\u0026rdquo; as it is a 14 bit value, so it ranges from 0 to 16383 instead of the 0 to 127 of everything else. This is necessary as pitch bend is used for, well, bending the pitch of a note. If it only had 127 values, you\u0026rsquo;d be able to hear as it snapped to particular pitches. The pitch bend can go both ways, so a value of 8192 (half of 16383) represents no pitch bend. Confusingly, the range of the pitch bend varies by the software or hardware you\u0026rsquo;re sending the pitch bend message too. The \u0026lsquo;default\u0026rsquo; range is ±2 semitones; however, I\u0026rsquo;ve found that both ±12 semitones (1 octave up, and 1 octave down) as well as ±24 semitones are reasonably common as well.\nWhile the pitchbend MIDI message supports 14bits of resolution, may MIDI controllers will not actually read in 14 bits of resolution, so they will feel less smooth than the standard actually allows for. If you like to play with pitchbend a lot, this may be something you want to research before buying a MIDI controller.\nClock \u0026amp; Transport # In the last chapter, Sequencing \u0026amp; MIDI, clocks were shown briefly. Basically, the idea is to send the tempo around to every other device/module/plugin/etc. that needs it so that everything can stay in sync. It\u0026rsquo;s like the \u0026lsquo;click\u0026rsquo; the drummer feels internally that the rest of the band plays to.\nGenerally, this clock is displayed as your tempo, in Beats Per Minute, or BPM. There is some other subtle things you need to be aware of though. The biggest being Swing: most software will let you set in an amount of swing which makes the beat go duh duh-duh, duh duh-duh, almost as if the drummer is always a bit late on one note so rushes to catch up, but does this consistently.\nA clock driving a step sequencer in VCV Rack Clock # Imagine you\u0026rsquo;re back in the \u0026rsquo;80s designing the MIDI protocol. How would you impliment clocking? Would you send every device one message that is the tempo, followed by maybe an extra message for swing, or other different parameters? That seems pretty reasonable, though does fail if we want smooth transistions in tempo, and you\u0026rsquo;ll still need to compenstate for offsets in timing from signal latency.\nWhat you probably didn\u0026rsquo;t think is \u0026ldquo;Let\u0026rsquo;s just send a fuck load of clock ticks down the wire\u0026rdquo;.\nThis is exactly what MIDI clocking does. By default, it\u0026rsquo;s 24 pulses per quarter note (ppqn), and this is used to distribute clock around. This is a very, very stupid design. Yes, it\u0026rsquo;s the 80\u0026rsquo;s and even the idea of making music with computers - computers which had heavy hardware contraints mind you - was new, but come on, what the fuck?!\nAnyway, here we are. So, what are the implications of this:\nMIDI clock does not have built in time-correction. If there\u0026rsquo;s a 2ms delay coming out your computer, a 2ms delay for the device to process the midi input, and a 5ms delay on the audio from the device back into your recording interface, you\u0026rsquo;ll need to offset the input by -7ms. This is extraordianly awkward, as the device now needs to know future inputs. MIDI clock can have stability issues. If the tempo is 120BPM, that\u0026rsquo;s 2 notes a second, so at 24ppqn, 48 pulses a second, which comes out to be 1 pulse every 20.833 milliseconds. This will absolutely varry a bit, if we assume the clock varries even by ±1 millisecond that will thow us off to anywhere from 45.8 to 50.4 pulses a second, which equates to about 114.5 to 126.1 BPM. That\u0026rsquo;s a lot of varience for a pretty minor hickup in our clock signal. Even if it averages out, there\u0026rsquo;s still a good chance some of the beats will hit at weird times, causing phasing issues. See this video from Expert Sleepers (YouTube) to see how this actually looks. Just be aware this may cause you problems and that none of the solutions to the problem are any fun. Also, MIDI Through only makes the problem worse- more on that in a bit\nTransport \u0026amp; MMC # MIDI Machine Control or MMC is the part of the MIDI spec that defines the ability for devices to send and receive transport control messages. These include play, pause, stop, record start and stop, as well as fast-forward and rewind among others you can see In the Wikipedia article. Technically, these are sent as SysEx messages, which I\u0026rsquo;ll touch on in a bit, but unlike the broader use of SysEx messages, these messages are pretty universally supported.\nMidi Time Code # MIDI Time Code or MTC is what is used for devices to talk to each other and say what part of a song their at. Say you have a DAW playing most of your tracks and a drum machine taking care of drums, that is supposed to play different patterns at different times. You could send a midi note or program change or other message to change pattern if the device supports it, but having it change the pattern based on time code works a bit better. For example, if there\u0026rsquo;s a long section playing the same pattern and you seek to it, you may not end up triggering that special message to tell it to change. With MTC the drum machine could say \u0026ldquo;Oh, We\u0026rsquo;re 20 seconds in, I need to play the drums for this section now!\u0026rdquo; and, ideally, even catch up halfway though the pattern, so the drum beat doesn\u0026rsquo;t get off as you seek around to a different place in the song you\u0026rsquo;re working on.\nSo, how does it work? Get ready for a wild ride.\nMTC is actually based on SMPTE Timecode, so what\u0026rsquo;s that? SMPTE stands for Society of Motion Picture and Television Engineers, so SMPTE Timecode is, unsurprisingly, for video time codes. In video, each picture shown is a frame, and there were multiple standards for how many frames should appear per second- the FPS. Unlike in gaming, this is a fixed, standard number for video except that the standard varied by region for older, analog television. As such, MIDI clock is actually based on \u0026lsquo;frames per second\u0026rsquo; and there are multiple competing standards, but let\u0026rsquo;s work our way to that:\nIf you\u0026rsquo;ve ever used old game consoles (like the NES) with the composite video out, you may have encountered some of these standards, namely NTSC and PAL. In North America NTSC is standard, while across the pond you\u0026rsquo;d find PAL (and SECAM, but that isn\u0026rsquo;t relevant here). The biggest difference between NTSC and PAL is the frame rate -\nBut before we get to frame rate, we need to talk power line frequency - In most of North America the mains power from the wall is 60Hz, and pretty much everywhere else it\u0026rsquo;s 50Hz. This is relevant, as NTSC and PAL video each had a frame rate that was half of the power line frequency: 30Hz for NTSC and 25Hz for PAL.\nSo, now we\u0026rsquo;re almost there, there\u0026rsquo;s actually yet another complication, the time code could also be 24Hz (to match the 24FPS of film as was standard in theaters) or 29.97Hz because NTSC had to be slowed this slight amount to accommodate adding color to otherwise black and white video.\nAlright, so all of that is to say, MIDI timecode is based on one of four frame rates despite not actually having frames: 24, 25, 29.97, or 30Hz.\nThings only get weirder though, as technically, MIDI Timecode is based on the time of day and it repeats after 24 hours, so there\u0026rsquo;s a hard limit on tracks to 24 hours (not that you\u0026rsquo;d probably ever hit this anyway).\nNot yet satisfied with how much of a mess this is, MIDI timecode is actually broken into 8, 4-bit sized pieces that are then sent on every \\(\\frac{1}{4}\\) frame, but that means to send the full 32 bits for one time code, 2 frames actually have to pass, so the resolution is only to every 2 frames, or 12, 12.5, 14.985, or 15Hz depending on the video standard used. This effectively means when seeking you\u0026rsquo;re limited to somewhere between 0.0833 and .0667 seconds jumps.\nProgram Change # Program change messages are generally used for switching between presets on a device. They\u0026rsquo;re also used by General MIDI with some default settings for instruments to belong to a certain channel, which allows some media players to play back MIDI files with the correct instrument assigned per track, albeit these default instruments usually sound quite bad. This isn\u0026rsquo;t really used anymore, though it might be of interest if you\u0026rsquo;re trying to write music that\u0026rsquo;s supposed to sound like it\u0026rsquo;s from a 90\u0026rsquo;s video game.\nGenerally though, you\u0026rsquo;ll just use program change messages to alternate between presets of a hardware or software device. Keep in mind, these changes are usually abrupt, so if you only want to adjust two knobs or something, you may be better off using CC\u0026rsquo;s to smoothly transition from one state to the other.\nSysEX # System Exclusive Messages- typically just called \u0026ldquo;SysEx\u0026rdquo;. The name sorta says it all, these are messages that are specific to a given device (or software). It\u0026rsquo;s often used for firmware updates, though may also be used for configuration, uploading presets or sounds, and even just sending control messages on some older hardware. Usually, if your device updates via SysEx it will have a nice GUI updater, but if that fails you may have to use something else. On Windows, MIDI-OX is complicated, but probably your best bet. If you want to send SysEX from your DAW for live control, it may be complicated. Ableton supports it, but only using M4L, which is expensive. For other DAWS, YMMV. Renoise, for example, has decent support with 3rd party utilities like Guru providing hardware mappings for some popular synths. Meanwhile, Bitwig and FL Studio can\u0026rsquo;t send SysEx at all.\nMIDI\u0026rsquo;s Physical Connections \u0026amp; Throughput # So, there are multiple physical connections that MIDI data can run though- USB, TRS, and 5-pin DIN.\nMIDI over USB # MIDI can run over just about any USB connection you\u0026rsquo;re used to- micro, mini, USB-C, and often that chonky square one that printers still use. There are four things you should know about USB midi:\nTypically it\u0026rsquo;s two way. The usb connection will provide both MIDI to and from the connected device. USB devices have the concept of Host and Device. This means that with USB MIDI devices you can run into a situation where you may want to connect something that expects to have a USB device (like a keyboard) attached to it, but you want to connect a host (like your computer) and use it as a device. This may requrie you use an adapter. USB MIDI is much faster than the other MIDI standards USB MIDI can often lead to ground loop problems or noise in connected devices. You may be able to fix this by either using \u0026ldquo;Hum Destroyers\u0026rdquo; (Ground loop isolators) on the audio connections or using a USB power isolator on the USB connection. These don\u0026rsquo;t always work though. 5-Pin DIN # This is the old school way that MIDI works.\nThe connection is optoisolated this means that ground isn\u0026rsquo;t sent over the cable, preventing ground loops. This may be a fix if a device offers both USB and 5-Pin DIN midi. Despite being a 5-pin cable, only 3 pins are used The cable is not bidirectional- if the device you\u0026rsquo;re connecting needs to send data to something and get data back, you\u0026rsquo;ll need two cables TRS-A \u0026amp; TRS-B \u0026amp; TS? # There are 3 conflicting MIDI over normal-audio-jack \u0026ldquo;standards\u0026rdquo;. Fortunately, TRS-A (as shown in the figure above) has been made a real standard now and should be used exclusively on newer equipment. TRS-B and TS only devices are still out there though, so be sure to check Like 5-Pin DIN MIDI, MIDI over TRS is optoisolated, so you shouldn\u0026rsquo;t have to worry about ground loops TRS MIDI is also often used on guitar pedals, though it shouldn\u0026rsquo;t be confused with guitar pedal expression input or control voltage, which are both analog communication not digital like MIDI There are plenty of adapters out there to go between TRS MIDI and 5-Pin DIN, but again, make sure it\u0026rsquo;s the right TRS Standard (A/B) The cable is not bidirectional- if the device you\u0026rsquo;re connecting needs to send data to something and get data back, you\u0026rsquo;ll need two cables MIDI Through # From this,\ngraph LR A[Controller] --\u003e B(Device 1) A --\u003e C(Device 2) A --\u003e D(Device 3) To this:\ngraph LR A[Controller] --\u003e B(Device 1) B --\u003e C(Device 2) C --\u003e D(Device 3) MIDI though is a feature where there\u0026rsquo;s an extra MIDI port that just passes the input data along. Say you have your computer with one USB→5-Pin DIN MIDI adapter so you send that data first to a polyphonic synth, listening on channel 1, for playing chords and that synth has a midi though so you can connect that to the input of your next device, say a drum machine, and have that react to inputs on channel 2, and so on. This just allows for a much cleaner cable setup.\nMIDI though may or may not actually pass the output of the device too, so if that synth keyboard is acting as an input device to the computer (not playing sound as notes are sent to it from the computer) then it may or may not put those notes its playing out the midi-though, it just depends on the device. Here, I\u0026rsquo;ve shown a setup where the first device does have an input MIDI connection sending data to the computer, with a second connection. Most USB to 5-Pin DIN MIDI adapters will have one 5-Pin DIN Input and one 5-Pin DIN output. Meanwhile, many MIDI sound-making-device (synths, drum machines, etc) will only have an input and maybe a though, and many MIDI controllers (keyboards etc. that don\u0026rsquo;t make their own sounds) will only have a MIDI output, no input. What this means is often, if you\u0026rsquo;re going to be using MIDI though, you\u0026rsquo;ll want to have a device that you want acting as both an input and output first in your chain, followed by devices that only need MIDI Input.\nConfused?\nAlright, so, because 5-Pin DIN and TRS MIDI are both one way, the though acts only as an output, meaning you can chain devices but those devices will only receive data, not send it. Essentially, the main use of this is getting one USB→MIDI adapter to sequence many sound-making devices, and usually sharing clock among all of them.\nThe big other use of MIDI though is when you\u0026rsquo;ve got a device doing MIDI over USB, but the device has a MIDI output or though such that the device can act as USB →5-Pin Din/TRS MIDI adapter for another piece of gear.\nIn my setup I have a MIDI controller pedal that allows me to send whatever MIDI messages I want with my feet (handy when holding a guitar) and it is connected via USB to my computer, so that I can control any software effects I want to run my guitar though. This same pedal also has a 5-Pin DIN output, that will both output messages it generates and messages it receives though USB (acting as a though) and I\u0026rsquo;m sending that signal up to a multi-effect guitar pedal. This means I can use the controller pedal as a controller for both software effects and the hardware multieffect pedal simultaneously, but even better, it means I can send data from my software, though the controller pedal, and out to the multi-effect pedal. This makes for an extraordinarily flexible setup. It\u0026rsquo;s really nice for sending CC\u0026rsquo;s to the hardware pedal and software simultaneously, recording the CC automation, then playing it back if I want to do a second take or multi-track.\nThere is one final issue you may have with MIDI though that you should be aware of- as previously mentioned, some devices will just pass the MIDI input to the Though unaffected, even if that device can add it\u0026rsquo;s own MIDI data, others will add on their own output. In the former case, some devices will literally just connect the in to the though electrically, resulting in no delay, while some will buffer the midi signal digitally and output it again, this ends up adding a very slight delay. In the latter case, this delay is almost gaurenteed. The delay is really a concern as it ends up affecting the MIDI clock signal as well, which means the clocking can get more delayed with each MIDI though. This is typically not a problem in reality, as the effects are usually not perceptible, but you should still be aware of it.\nVirtual MIDI Ports # Virtual MIDI ports are quite handy, as they allow you to route MIDI messages between two software programs on your computer, mix multiple midi devices together, etc.\nArch Linux (should work in other distros too): Make a file called snd-seq-dummp.conf in /etc/modprobe.d/ and put options snd-seq-dummy ports=4 in it. You may also need to use the application a2jmidid with the -e flag to route MIDI though Jack Audio applications, though most programs can use Jack for audio and ALSA for MIDI. Restart, and now you should have more virtual ports. You can check by looking though /dev for more midi devices. There\u0026rsquo;s a lot of options here, as with all things Linux, so you should probably read some Wiki Pages. Depending on the complexity of what you\u0026rsquo;re trying to setup, mididings may be of use to you as well.\nWindows: use Loop MIDI by Tobias Erichsen\nMAC: Built in with Audio MIDI Setup, open that and goto \u0026lsquo;IAC Driver\u0026rsquo; then check \u0026lsquo;Device is Online\u0026rsquo;\nBandwidth # One thing you need to be aware of that a combonation of which of these physical connections you\u0026rsquo;re using and what the devices you\u0026rsquo;re using have for processing power will determine the maximum rate that you can push MIDI messages to a given device.\nIf you\u0026rsquo;re just playing the keyboard, you have nothing to worry about. If you\u0026rsquo;re playing the keyboard, twisting a few knobs, using the pitch-wheel, and sending clock data you might start pushing it. If you\u0026rsquo;d like to use MIDI data to send an LFO or an envelope, you might find that things just don\u0026rsquo;t work. If you imagine that you want a nice 10Hz sine wave MIDI CC LFO that uses the full 0-127 range, that means you\u0026rsquo;d need to send 128*2*10 = 2560 midi messages a second, each message needs 3 bytes, one to say the message is a CC, one to specify which CC it is, and one to send the actual data, a byte is 8 bits, so this means 24bits per message so we have 2560*24 bits per second = 61,440 bits per second. By default, the \u0026rsquo;lowest spec\u0026rsquo; default 5-pin DIN MIDI only supports 31,250 bits per second, we\u0026rsquo;ve already asked for about double that just by sending one LFO. Fortunately, USB Midi generally allows for significantly more data to pushed down the pipe, with some usb MIDI devices even requiring MIDI 3.0 which means these devices have a reason to need more than the ~480,000,000 bits per second USB 2.0 can do. This isn\u0026rsquo;t your Grandma\u0026rsquo;s MIDI.\nEurorack MIDI⇄CV # The Expert Sleepers FH-2 One common place to run into issues is with MIDI⇄CV.\nDoing MIDI to CV with an MPE controller is particularly difficult, so you should expect to need a nicer adapter that explicitly says it will work. Going the other way around, CV to MIDI, is even more complicated due to these bandwidth considerations. Even with the bandwidth of USB, CV→MIDI adapters will still top out at pretty slow LFOs (you absolutely will never be able to do CV→MIDI at audio rate!) and, if they\u0026rsquo;re really slamming the USB controller or OS level virtual MIDI devices, they can cause more extreme issues- lots of software crashing ahead for those that go this route.\nThat said, it does seem some devices are more user friendly than others. While my experience with Expert Sleepers FH-2 for CV→MIDI has been a headache, it appears the Befaco CV Thing and VCMC work much more smoothly. I suspect this largely comes down how much the MIDI output bandwidth is being limited.\nThe FH-2 appears to just try to throw as much data down the pipe as it can muster, while the Befaco modules seem to apply sane rate limiting- but that also means that they will not feel as smooth or support as fast of input LFOs.\nIf you can, you\u0026rsquo;re probably better off either using something like the ExpertSleepers ES-8, ES-9, or ES-3+ES-6 to take audio in directly and using software that supports using audio as modulation (some workarounds may be necessary, such as using envelope followers) or using one of the very few modules that impliment OSC (more on that later). Honestly though, doing CV→MIDI is a bit of a fools errand, especially for modulation (CCs). The only real practical use is if you really want to sequence something that doesn\u0026rsquo;t have a CV input with a eurorack sequencer, otherwise you\u0026rsquo;re better off just finding dedicated MIDI equipment that does the kind of input you want.\nOver Network # Look, I\u0026rsquo;m not going to say you can\u0026rsquo;t do wireless or networked midi. You definitely can. It\u0026rsquo;s just that there\u0026rsquo;s alway something that goes wrong. The \u0026rsquo;normal\u0026rsquo; way to do it is using RTP MIDI. This should work cross platform:\nWindows, use rtpMIDI by Tobias Erichsen Mac, use the built in network-MIDI tools Linux, use RaveloxMIDI Sometimes this works 100% perfectly, other times it\u0026rsquo;s a fucking nightmare. Best of luck.\nMIDI 2.0 # MIDI 2.0 is the new spec that aims to be both backwards compatible with the MIDI as described up to this point, but fix all of the massive clusterfucks that have arisn over the years- providing higher bandwidth, bi-directional communication, higher resolution controls, native support for MPE-style devices, better clock syncronization, profiles based on use case, etc. Basically, it\u0026rsquo;s not a total shit storm like what we have now. Unfortunately, MIDI 1.0 isn\u0026rsquo;t going anywhere any time soon, mostly because there\u0026rsquo;s already such a huge backlog of supported hardware and it\u0026rsquo;s cheap to impliment. So, MIDI 2.0 is the future we will hopefully slowly creep into.\nOpen Sound Control # I can\u0026rsquo;t belive it\u0026rsquo;s not MIDI!\nOSC is an alternative to MIDI you\u0026rsquo;ll often see used when either higher resolution controls (more than the 0-127 of MIDI) or network control (using your phone as a control surface over WIFI, for example) is needed. Support is a bit all over the place, as a lot of major DAWs don\u0026rsquo;t have built in support but can work with 3rd party tools, but there are very few hardware synths and controllers that use it, making it mostly useful for software controller implimentions that provide touch-screen knobs and faders - like Touch OSC for mobile devices, speciality controllers like using the Leap Motion for sending control messages, or over-the network colaborative jamming - where each player can send signals that other players can use, each from their own laptop. There are various OSC Modules for VCV Rack.\nMackie Control / HUI # Human User Interface Protocol (commonly abbreviated to HUI) is a proprietary MIDI communications protocol for interfacing between a hardware audio control surface and digital audio workstation (DAW) software. It was first created by Mackie and Digidesign in 1997 for use with Pro Tools, and is now part of the Mackie Control Universal (MCU) protocol. - Wikipedia So, MCU and HUI are technically different things, but they seem to be used interchangeably. But, what is it good for?\nMackie Control Universal (MCU) is a fustercluck of a non-standard developed by Mackie, a particular hardware manufacture, for one of their hardware controllers. While originally MCU was made for Apple\u0026rsquo;s Logic DAW, it eventually the control \u0026lsquo;standard\u0026rsquo; found its way into other DAWs. It mostly provide a \u0026lsquo;universal\u0026rsquo; mapping for common functions like mute, solo, track select, EQ and what not. It\u0026rsquo;s especially nice as MCU is 10bit (1024 values) and bidirectional - the controller can show the current volume or whatever on a screen easily- though it all still runs over MIDI, so devices using it mostly use USB MIDI. The specifics of how MCU works is sort of a nightmare to dig up, this thread is probably a good starting place should you have to look into it for some reason. The main take away is that HUI is used to provide this deeper integration into your DAW than normal MIDI provides alone, and that quite a few controllers now support it, for example \u0026lsquo;Launch\u0026rsquo; series devices from Novation, the Studiologic Mixface, and Behringer X-Touch, just to name a few. Just ctrl+f on these pages for HUI or MCU and you\u0026rsquo;ll see it. Most of these controllers have a focus on what would traditionally be at a large mixing console- per track volume faders, pan, eq, and track selection (which track you want to arm for recording).\nAbleton Link # Alright everyone, syncronize your watches!\nAbleton Link works in more than just Ableton, it\u0026rsquo;s a protocol for sending clock to multiple devices or software that makes synchronization relatively easy. It supports sending the clock and adding/subtracting an offset to correct for latency in whatever connection you\u0026rsquo;re using. It is not sent over MIDI or OSC or another existing music protocol. It\u0026rsquo;s its own thing that gets sent over the network. While some hardware has added support for Link, it\u0026rsquo;s still largely a software thing at the time of writing. There is even a link module for VCV Rack.\nIt is provided as a dual licensed standard, from the Link repo:\nAbleton Link is dual licensed under GPLv2+ and a proprietary license. If you would like to incorporate Link into a proprietary software application, please contact link-devs@ableton.com.\nMIDI Routing Hardware # [TODO] Blookas MIDIhub, MRCC - MIDI Router Control Center, Multiclock, Teensy 4.1 based 8in/8out interface\nHacky Bullshit # You Can Send MIDI over I2C if you Really Need To (Hackaday, DIYElectronicMusic)\n"},{"id":197,"href":"/music/musicpiracy/","title":"Musicpiracy","section":"Musics","content":" Piracy? # Plugins++ # Look, I\u0026rsquo;m not the police. I don\u0026rsquo;t really care what you do on your system. I\u0026rsquo;m not going to outright condone you to find pirated versions of music software, though- in part for liability, but mostly because you absolutely will get a virus. Some sites are more reputable than others, and if you\u0026rsquo;re careful, you can probably yoink at least a few things. Again, I\u0026rsquo;m not saying you should. But, I do understand why you might want to:\nFirst, yeah, some of the music software is ungodly expensive. DAWs are not cheap - I mean, Reaper is, but its UI is, well, it\u0026rsquo;s Reaper - and some software is nuts. You could easily drop $10,000 on Kontakt and libraries if you want to do orchestral music.\nBut, the bigger thing is just that a lot of music software has outright draconian DRM, often making it a hassle to reauthorize everything when you upgrade hardware or update your OS. The biggest offender of this is probably iLok, which often requires a hardware key. Just google \u0026ldquo;Ilok DRM\u0026rdquo; and you\u0026rsquo;ll find a lot of reasons a lot of people hate it.\nOne potential option is to only buy software that has been cracked, have the license, unused, and just use the cracked version. It\u0026rsquo;s not great, but I think it\u0026rsquo;s a happy middle ground.\nAnother thing you should be aware of is that some plugins will be missing presets, functionality, or just crash a lot if they\u0026rsquo;re pirated. Sometimes this results in plugin devs knowing you have the pirated version if you file a bug report. So, generally, don\u0026rsquo;t be that guy™ that files a bug report on pirated software.\nTracks \u0026amp; Albums # I don\u0026rsquo;t have much to say on this. If the artist is small, don\u0026rsquo;t be a jerk. Buy the music. Most musicians would rather you listen and not pay than not listen at all, so if you\u0026rsquo;re broke I say you do you. Just realize that often the sources of free music aren\u0026rsquo;t as good. YouTube (and songs downloaded with YouTubedl) will never sound as good as a high quality .wav or .flac from Bandcamp or a CD. Sure, sometimes you might find a torrent at good quality, but more often than not you get what you pay for.\nI think the worst I\u0026rsquo;ve seen in regards to this is downloading mp3s from Bandcamp album pages. They\u0026rsquo;re like 128kbps mp3\u0026rsquo;s and you can hear the high end sounding like trash in every single one. Don\u0026rsquo;t judge an album by its low quality demo, and buy the music you like if you can.\nOn this note, in general downloaded tracks will sound better than streaming though Spotify or Pandora or whatever, plus you won\u0026rsquo;t get stuck in the rut of whatever songs those services decide to push at you if you\u0026rsquo;re actively seeking new content from smaller artists.\nFighting piracy on your own work # Don\u0026rsquo;t.\nI get it, you worked hard, you spent money on equipment, time on development, whatever. But the thing is, usually anti-piracy schemes are more annoying for the paying customer than the pirate, and, frankly, piracy still benefits you (unless you\u0026rsquo;re absolutely massive to the point everyone knows about you) as it means more people are aware of your work.\nHell, upload torrents to pirate sites yourself so they\u0026rsquo;re in high quality, and just put a readme.txt saying \u0026ldquo;Hey, I uploaded this myself, it\u0026rsquo;d be cool if you support me if you like it\u0026rdquo;. Whether you\u0026rsquo;re making plugins or music or games or anything else, it\u0026rsquo;s probably not worth it to fight it with DRM.\nAlso, keep your prices reasonable and don\u0026rsquo;t fuck people by having like 50% off sales. If someone know\u0026rsquo;s they missed that and it\u0026rsquo;s back up to normal price, you bet they\u0026rsquo;ll want to pirate it.\n"},{"id":198,"href":"/music/psychoacoustic/","title":"Psychoacoustic","section":"Musics","content":" Psychoacoustics and Cultural Associations # When we hear music, we don\u0026rsquo;t hear individual sine waves and sum them up. We don\u0026rsquo;t hear instruments devoid of context, either- a ukulele carries a different cultural meaning than a mandolin. We also don\u0026rsquo;t just hear what comes out the speakers as plainly as basic frequencies. Our ears process what we here. Our ears take in the reverb of the room, ignore sounds before and after drum hits, find speech in sounds that weren\u0026rsquo;t meant to. All of this is to say when you make music, you\u0026rsquo;re not making music for somebody\u0026rsquo;s ears. You\u0026rsquo;re making it for their mind. Your goal should be to make them feel something, to make someone dance, or reflect, or feel excited, or love. You don\u0026rsquo;t do that by analyzing sound like a mechanical task, you do that by listening and hearing and reflecting on your art.\nSo as you read everything else on this page, keep in mind that, ultimately, what matters is not that your sound is mixed perfectly or that you have considered the effect of every possible audio format. What matters is that it conveys the emotion you want it to.\nWith that said, it does still help to know a bit about these things, as tools in our musical toolbox.\n[TODO]\nVolume Vs Db over frequency range Masking effect Headphones Are Not Stereo (YouTube, Dan Worrall) Cultural meanings When out of tune is desired The human ear\u0026rsquo;s frequency response (what frequencies we hear with what attenuation) Pitch isn\u0026rsquo;t linear - side effects The 10ms delay trick to make drums sound better "},{"id":199,"href":"/music/seqandmidi/","title":"Seqandmidi","section":"Musics","content":" Sequencing \u0026amp; Midi # MIDI In Detail covers the technical bits of MIDI in much more detail, but you'll still probably want to read this first if you don't know what MIDI even is. Sequencing # The definition of a sequence is pretty obvious, but don\u0026rsquo;t be misled by the name- a \u0026ldquo;sequence\u0026rdquo; is not always just a list of notes to be played one after the other. Sometimes there\u0026rsquo;s overlap, gaps (rests), bends from one note to another (legato) and almost always information about how hard a note is pressed and how long it should be held for are saved. To whet your appetite before I go more into the weeds, I recommend this video from Red Means Recording:\nStep Sequencing # The easiest to understand sequencing method is step sequencing. You\u0026rsquo;ll generally see two types of step sequencing: Pitch \u0026amp; Trigger. Let\u0026rsquo;s look at trigger, which is usually used on drums, first:\nDrum Sequencing # This should automatically loop, but there may be a slight delay when it does. The darker green dots just indicate the sequencer\u0026rsquo;s position when I took the screenshot Here, I\u0026rsquo;ve set up a simple step sequence in VCV rack, the gist is that on each clock pulse (beat) the sequence moves right by one step, until it loops back around. If the light is lit, that row will output a trigger.\nSo, on that top row, we have\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 X - - - X - - - X - - - X - - - Which, effectively, just means the bass drum will play on the 4th beat, endlessly. This gives the bass drum a super basic, repetitive pattern. If I had done every other beat, it would just be twice as fast. You can see how the other drums have more complex patterns, and you should be able to look at the screenshot above and see how that pattern matches the sound.\nThis setup for a step sequencer is almost painfully simple, and doesn\u0026rsquo;t leave a ton of options. Probably the biggest missing thing here is velocity, which means there\u0026rsquo;s not a way in this patch to adjust the volume of each hit(1). Rather than make this all about VCV, I recommend you take a look at the step sequencer in the Elektron Digitakt, which is almost obnoxiously powerful. My point here isn\u0026rsquo;t to convince you to run out and buy hardware, but rather to show that simple step sequencing, when done with care, can go a long way. For this, I recommend watching Beats From Scratch / Elektron Digitakt Minimal Techno Jam from Ihor on YouTube, which was feature on the percussion page as well. You almost certainly won\u0026rsquo;t follow everything going on, but you should see that he can adjust certain parameters and \u0026rsquo;lock\u0026rsquo; them to a step, like choosing only one step in a sequence to be a higher pitch.\nBefore moving on, I do want to help you actually make these simple step/gate sequences. For as simple as it sounds to make basic drum sequences, it\u0026rsquo;s really not. You\u0026rsquo;ll often end up making just really basic 4-on-the-floor techno (with exactly the bass drum as in the demo sequence above) or something that has at least one percussion hit on every step and gets too busy(2). The normal recommendation for this is this 260 Drum Machine Patterns book (that you can probably find PDFs of online) but Beat Dissected from Attack Magazine and this $10 physical / FREE .PDF Drum patterns book I think are better.\nVelocity is a big deal # If you trying to sequence drums the velocity (how hard/loud) of each hit matters more than you might think. A pattern that might sound outright terrible without velocity variation can sound great with it. If you think your drums are missing something, try changing up the velocity before you reach for adding more sounds.\nAs an example, here\u0026rsquo;s a simple drum pattern where the only difference is the velocity being constant or sequenced for the snare part.\nYour browser does not support the audio element. Your browser does not support the audio element. More info on drum sequencing # There\u0026rsquo;s a lot of good info on drum sequencing on YouTube. Watch, practice, repeat.\nHow to humanize Hi-Hats on any Drum Machine (Captain Pikant) Note and Value Sequencing # With a value step sequencer, each step has a corresponding knob (or slider) and outputs that knob\u0026rsquo;s value when it is the active step, so now instead of a binary on/off at each step, we\u0026rsquo;re setting a value.\nHere\u0026rsquo;s a little gif showing this in action. Here, the steps are simply descending in value, as you can see from the downward staircase on the scope as well as the knobs being turned down on each successive step.\nThese values could control anything. The most obvious is the pitch of an oscillator to make a musical pattern, but you could just as easily have them control other parameters too: filter cutoff, volume, amount of an effect, whatever.\nTo actually hear this in action, here\u0026rsquo;s a patch demonstrating multiple sequences working together. In this patch, the PGMR module is a multi-lane sequencer, which really just means that at each step there\u0026rsquo;s more than one knob, because there\u0026rsquo;s more than one output. (3) The main difference between this and just setting up four, small sequencers (like the ADDR-SEQ used in the gif) is that the steps are always locked together, you can\u0026rsquo;t accidentally have one sequence run faster than the other, or get out of sync - not that either of those are bad things, you\u0026rsquo;ll probably want to do both intentionally!\nHere, I\u0026rsquo;ve setup two simple synth voices, one on top, one on bottom. The green Pitch 1 Sequence controls the pitch of one voice, while the blue Pitch 2 sequence gets the pitch of the other. Similarly, each voice has a filter and there\u0026rsquo;s two sequence controlling the filter\u0026rsquo;s cutoff frequencies.\nSome of the complexity here comes from trying to make these values fit into shapes we want. For both pitch sequences (green and blue) they need to pass through a Quantizer first, which just makes sure the values coming out of the sequencer are actual notes, not just random pitches that don\u0026rsquo;t even correspond to a key on the keyboard. See in the bottom left scope how on the step between the TIME and TRIG knobs there\u0026rsquo;s both a blue line and a pink line? The pink line here is the value after the quantizer, and you can see there is a difference, so it is doing something.\nLooking at the second scope, you can see in pink the original signal coming from the Filter 2 sequence, and in blue the signal after passing through a Slew limiter which is making it have smoother transitions, instead of the sharp transitions (vertical edges) of the original sequence. This is just making the filter transition a little smoother. If we had done this to the pitch sequence after the quantizer we\u0026rsquo;d have a legato effect instead.\nGetting Some Variety # One thing you should notice pretty quick once you start playing with sequencers on your own is that they get incredibly boring. The repetition repetition repetition will drive you mad. Fortunately, there\u0026rsquo;s a ton of neat sequencers out there, and even most of the basic ones can be used in interesting ways to keep them moving. Even looking at the sequencer in the above patch, with only 8 steps, you can change the direction to make it run backwards or hook up other events to make it jump to a particular step.\nOne of the more common methods to add variety is too just to sequence your sequences (usually this is called scenes) which, while can be done by putting multiple sequences (4) through and sequencing that switch, is a bit tedious to set up. Instead, you\u0026rsquo;ll probably want to run something which does it more natively. Most DAWs support this idea pretty easily, but if you\u0026rsquo;re looking for something in VCV and willing to pay, the ZZC Phaseque is pretty nice. Another way to do it is using the Stoermelder 8FACE mk2 and any sequencer (like the PGMR used so far) but that setup is still a tad awkward. (or the Stoermelder Transit if you want to morph between sequencer states, but that\u0026rsquo;s sorta weird?)\nStep sequencers can also get pretty crazy with a lot of built-in features, so if you\u0026rsquo;re in need of some inspiration, there are plenty of options. Some will feature randomization and probability, others will feature per-step ratcheting/repeats, some will let you select steps on a grid with up, down, left, and right instead of just forwards and backwards(5). Step sequencing doesn\u0026rsquo;t have to be boring!\nPictured, L→R, T→B: Geodesics Entropia, Bidoo dTrOY, Mog Network, Impromptu Phrase Seq 16, Aria Salvatrice Darius, JW GridSeq, ZZC Phaseque (non-free), Slime Child Audio Polyrhythm Sequencer (non-free) all running in VCV Rack Piano Rolls # Probably the most common way of entering a sequence is using a piano roll\nPiano rolls get their name from player pianos, as they had actual rolls of paper with holes cut in them that represented the notes to be played. The gaps allowed for little pins of metal to push through and make contact, completing a circuit and driving electronics to hit the note, making it play on a real piano.\nClearly, we don\u0026rsquo;t want to be taking a hole punch to paper to make our music- we want to use a computer! But, despite how much everything has changed\u0026hellip;\nImage by Draconichiaro, CC BY-SA 4.0, From Wikipedia\nThe idea is still pretty much the same:\nTimeline # [TODO]\nBreaking The Loop (Patches.zone)\nrandom, sample/hold, probability, piano rolls, trackers, AI based, euclidean, trigger/gate/len, humanization\nCreating Melodies [Music Guides from Ableton]\nMelody Guide [edmprod.com]\nWays to turn tiny ideas into bigger tracks (YouTube, Andrew Huang)\nSong structure ABAB, ABBA, ABAC, etc.\nBpm changes, key changes, hooks, drops, \u0026lsquo;flavor\u0026rsquo; with added samples\nEuclidean Sequencing # Generative Sequencers # ORCΛ # Mutable Instruments Grids \u0026amp; Marbles # Turing Machines # Sequence Modifiers # [TODO] Geodesics Fate, \u0026hellip;?\nMIDI effects # Arp, velocity, pitch bend, mod, sustain, generative, legato\nMultitracking # Multitracking Synthesizers for Fun and Profit (YouTube, RedMeansRecording)\nVelocity is technically more than just volume, in a lot of circumstances it will actually change the tone too, in an attempt to emulate the difference in sound when you hit a drum head or pluck a string harder or softer. As with all things music, this isn't some hard and fast rule. If you want at least one sound on every step that's totally fine, but it's good to remember that empty space in a drum loop has its own character You'll also see PGMRX, which is just an expander adding steps. PGMR only has 4 steps by default, but that's not really enough for most things. You can chain as many PGMRX module as you like to get more steps. ...or a multi-lane sequencer like the Bogaudio PGMR sequencer that was used above These are actually cartesian sequencers, but they're still basically step sequencers "},{"id":200,"href":"/music/software/daw/","title":"Daw","section":"Musics","content":" Digital Audio Workstations+ # A Digital Audio Workstations is software that allows you to record and edit audio, host and play digital instruments, arrange the parts in a timeline, and mix the audio together. The most common DAWs you\u0026rsquo;ll see are Ableton Live (Often called just \u0026ldquo;Ableton\u0026rdquo; or \u0026ldquo;Live\u0026rdquo;) and FL Studio, but there are plenty of other options as well, many of which are listed below.\nThe definition of a DAW is a bit fuzzy, as tools like VCV Rack and Audacity- both of which we\u0026rsquo;ve seen previously- have features that make them very DAW like and can be used to make full tracks (assuming you have hardware instruments to record into Audacity)\nBefore you look at this list, I want to stress that every DAW has its issues.\n[TODO] why are none of these good\nDigital Audio Workstations or \u0026lsquo;DAWs\u0026rsquo; come in many flavors, so let\u0026rsquo;s look at the differences between the above in depth [TODO]\nTrackers, vs non liner, vs modular, etc.\nNOTE: this list is far from exhaustive. Instead, I\u0026rsquo;ve tried to list the main ones and some that I think are particularly cool. Also, you might want to see AdmiralBumbleBee\u0026rsquo;s Daw Feature Chart for a more analytical overview\nSession View Based: # Ableton Live Ableton Live # Ableton Live isn\u0026rsquo;t very stable (lacks plugin sandboxing), has a mediocre piano roll, makes modulation a bit of a pain. Its main feature is its popularity, as there is a ton of educational content, great hardware support, and a fair amount of Ableton specific plugins. As the name implies, it also works pretty well for live recording, and has the best audio stretching and quantization, meaning even if you play slightly out of time it\u0026rsquo;s easy to fix.\nlil\u0026rsquo; aside: Ableton makes organizing VSTs a tad awkward, so you should know it will follow shortcuts in the folder you set as your VST plugin directory.\nGOOD\nPopular Great hardware support Access to Ableton only plugins - Including Max4Live Great audio quantization BAD\nExpensive, paid updates Piano Roll sorta sucks Unstable (No plugin sandboxing) M4L devices needed to do many basic things Modulation is often awkward A lot of the UI is small How To Ableton Like a Pro (YouTube)\nBitwig Bitwig # Bitwig is basically Ableton Live but with some added features, and it\u0026rsquo;s more stable. Bitwig also has \u0026lsquo;The Grid\u0026rsquo;- basically a little built in modular synth system. It\u0026rsquo;s not like VCV, as it\u0026rsquo;s a bit lower level but it can still be used for Generative Music or doing complex routing, like fading between effects. It also has really easy to use modulation, basically letting you drop an LFO, envelope, etc. onto any parameter of a VST or built in device.\nGOOD\nMore or less the same as Ableton for the basics TONS of modulation options lil\u0026rsquo; modular synth built in Still good - albeit not Ableton good- hardware support Great audio quantization BAD\nExpensive, paid updates\nMPE works beautifully, though Not as many built in devices as Ableton\nBetter multi monitor support than Ableton\nNot as popular as Ableton\nLess support Can\u0026rsquo;t use Ableton specific devices Arrangement View Based: # FL Studio FL Studio # Fruity Loops Studio is a great DAW. If you\u0026rsquo;re more into hand arranging than recording your MIDI controller for writing songs: FL Studio is perfect. The piano roll is so damn good that it will make you hate the piano roll in everything else. Unfortunately, hardware controller support isn\u0026rsquo;t as good as Ableton, the UI is a bit cluttered, and audio quantization just isn\u0026rsquo;t there\u0026hellip; well? sorta. There is a paid plugin for pitch correction that kicks the ass out of everything else because it\u0026rsquo;s built into the already awesome piano roll.\nIf we\u0026rsquo;re being honest, FL is where most EDM producers get their start with a pirated copy. I\u0026rsquo;m not condoning the piracy, but I\u0026rsquo;m certainly not about to judge if you want to try before you buy. It\u0026rsquo;s a damn nice DAW, and if I didn\u0026rsquo;t have hardware that works particularly well with Ableton, I\u0026rsquo;d probably use it.\nGOOD\nOne time purchase, lifetime free updates FUCKING AMAZING PIANO ROLL On more expensive versions especially, the built-in devices are awesome Has a good mobile app, for working on the go BAD\nUI can get sorta messy Complex routing is a bit annoying A tad CPU heavy Audio recording is awkward as fuck Doesn\u0026rsquo;t play well with a lot of hardware MIDI controller support is meh lacks the CV/Gate abilities of Bitwig and Ableton Reaper Reaper # Reaper is incredibly feature full and probably technically the best DAW but its user interface is pretty bad and requires a lot of menu diving, to the point where in my opinion it\u0026rsquo;s totally unusable. It does offer the ability to view what you\u0026rsquo;ve put into your piano roll as actual sheet music and It\u0026rsquo;s hugely customizable, with multiple user-facing programming options- ReaScript and JSFX. If you\u0026rsquo;re already a highly technical user and don\u0026rsquo;t mind getting your hands dirty with code, need a sheet music view, or want something with incredibly low CPU overhead, Reaper is probably your best choice.\nGOOD\nCheap ($60 at time of writing) Free trial that doesn\u0026rsquo;t end\u0026hellip; but like, don\u0026rsquo;t be that guy. Highly customizable you can script literally everything. Stable as hell Low CPU usage Supposedly sounds better? Actual Notation editing MIDI (w/ MPE) and OSC support BAD\nSub menus with sub menus Option overload Almost total lack of built-in instruments and effects Kinda shit piano roll lack of built-in in support for common MIDI controllers Kinda Ugly, even with themes Garage Band Garage Band # Garage Band [TODO]\nProTools ProTools # ProTools [TODO]\nLuna LUNA # LUNA [TODO]\nModular Based: # VCV VCV # VCV isn\u0026rsquo;t really DAW, so lacks good ways to do automation and complex sequencing, at least without workarounds. For generative music, it\u0026rsquo;s still probably your best bet. That said, you can absolutely make awesome tracks in it, though they really need to be performed and recorded live. This means you may need to do multiple takes if you accidentally mess something up while playing.\nFor good performances, you\u0026rsquo;ll probably want a MIDI controller with a lot of knobs, which can be expensive or large. Ideally this could be done via banks of knobs that can be changed in hardware (like the Behringer BCR2000 and X-Touch Mini or Faderfox EC4) but this has also been reported to not work totally smoothly.\nVCV may also lead you down the path of Eurorack or a hybrid Eurorack and VCV setup, and that is stupid expensive.\nGOOD\nFree and open source-ish A crazy amount of free modules Cross platform (Windows, Linux, Mac) Can do things a real hardware rack can\u0026rsquo;t BAD\nPaid modules needed to host VSTs Less ideal for structured songs unless using an external sequencer Eats CPU, a lot of cool modules unoptimized It\u0026rsquo;s not really a DAW? Still no support to host VCV as a VST in a \u0026lsquo;real\u0026rsquo; DAW workarounds exist, but they\u0026rsquo;re often awkward Not 100% stable Reason Reason # Reason [TODO]\nVoltage Modular Reaktor Bespoke Bespoke # Bespoke [TODO]\nTrackers: # Renoise Renoise # Renoise is a neat combination of a modern DAW and old school trackers. This means there is no classic piano roll, but instead the notes are entered as text into a vertical display. Usually raw samples of audio are used as instruments, and this lets you do neat things like specify a sound to be played backwards, be rapidly rolled, panned per note, etc. Generally, trackers are associated with a few specific genres- most notably Chiptune and Jungle\nOpenMPT OpenMPT # Deflemask Deflemask # Deflemask [TODO]\nSunvox Sunvox # Sunvox [TODO]\navailable for free on desktop, paid on mobile\nAlmost DAWs # Audacity Audacity # Audacity, like VCV, isn\u0026rsquo;t a DAW. It\u0026rsquo;s really just an audio editor. It\u0026rsquo;s free and open source, and while the UI isn\u0026rsquo;t great, you\u0026rsquo;ll be hard-pressed to find anything better for doing quick edits or recording in a few clips. Full songs could be made in audacity, but it\u0026rsquo;s not made for that.\nGOOD\nFree and Open Source Opens very fast Runs on a potato Great for quick edits BAD\nNot really a DAW No VST support Basic as hell editing, only enveloping is audio level Kinda ugly, crappy UI Audacity, despite being FOSS, did recently change owners and they should be putting a lot more work into it. There have been some missteps with the community since this change, but overall it should bring good things in the future → Oscistudio Oscistudio # Oscistudio [TODO]\nBlockhead Blockhead # Blockhead is an audio editor/DAW still in pretty early development, but supporting some really cutting edge features. See the developer\u0026rsquo;s twitter for examples. It really supports some audio editing ideas I haven\u0026rsquo;t seen anywhere else. Even if it\u0026rsquo;s not to the point where you can make it your main DAW, it\u0026rsquo;s worth looking into just for inspiration.\n"},{"id":201,"href":"/music/software/livecoding/","title":"Livecoding","section":"Musics","content":" Programmable Music Tools # Before getting into this list, I also want to point out that there\u0026rsquo;s an endless number of programmable music sequencing tools which can be found built into VST plugins, larger audio software, and even video games. I\u0026rsquo;m particularly fond of the huge number of interesting sequencers for VCV Rack, such as Quad Algorithmic Rhythm Generator, Entropia, Fate, Marbles, and Orca\u0026rsquo;s Heart - just to name a few.\nThis list absolutely can not have everything. Still, I\u0026rsquo;ve tried to highlight some of the more novel ideas.\nIt\u0026rsquo;s also worth mentioning, there are very interesting hardware tools such as the monome norns, and Toroso T-1\nFinally, if you\u0026rsquo;re into VJ work, you may want to check out The big list of generative art tools in the Design section of this website. If you\u0026rsquo;re looking for hardware for this role, you may want to check out the hypno by Sleepy Circuits or the Critter \u0026amp; Guitari Eyesy.\nSonicPi Sonic Pi is a code-based music creation and performance tool.\nORCΑ Learn Orca Extra Tools for ORCA: Cassetter for ORCA Aioi - UDP to complex OSC for ORCA Pilot - 16 voice synth for ORCA Noton A minimal logic gates playground, written in ANSI C. Made by the same developers as ORCΑ Chuck Chuck is a programming language for real-time sound synthesis and music creation. It is open-source and freely available on MacOS X, Windows, and Linux. Chuck presents a unique time-based, a concurrent programming model that\u0026rsquo;s precise and expressive (we call this strongly-timed), dynamic control rates, and the ability to add and modify code on-the-fly. In addition, ChucK supports MIDI, OpenSoundControl, HID device, and multi-channel audio.\nMutateful Requires Ableton Live enables live coding in Ableton Live\u0026rsquo;s session view. Set up transformations that trigger whenever a source clip is changed, including arpeggiation, shuffling, and ratcheting/retriggering.\nPure-Data, Purr Data (a better fork), Plugdata (another fork) and Max (the one everyone uses in Ableton) Max is much friendly and more useful than Pure Data, though it\u0026rsquo;s also not FOSS.\nBoth are visual programming environments which are rather low level (much lower level than VCV Rack, for example) and so are less useful in a live context; however, they\u0026rsquo;re extraordinarily powerful for making your own instruments which you can play live.\nThe reason I\u0026rsquo;ve grouped them together is that both Max and PD share the original author, Miller Puckette; however, it\u0026rsquo;s very clear that PD has more or less stagnated while Max has grown\nThis gif was ripped directly off of https://cycling74.com/products/max Zerobrane Studio and Moonlet ZeroBrane Studio is a lightweight Lua IDE with code completion, syntax highlighting, live coding, code analyzer, and debugging support for Lua 5.1\nMoonlet: Lua live coding. It only works on Linux and Windows.\nTidalCycles Live coding music with Algorithmic patterns\nFree/open-source software\nTidal Cycles (or \u0026lsquo;Tidal\u0026rsquo;) for short is free/open source software written in Haskell. Tidal is using SuperCollider, another open-source software, for synthesis and I/O.\nPattern everything\nTidal Cycles allows you to make patterns with code. It includes a language for describing flexible (e.g. polyphonic, polyrhythmic, generative) sequences of sounds, notes, parameters, and all kind of information.\nKrill Krill is a livecoding environment inspired from TidalCycles I can\u0026rsquo;t find a demo! If you make one, let me know and I\u0026rsquo;ll put it here! Mosaic Mosaic, an openFrameworks based Visual Patching Creative-Coding Platform\nOvertone - Live Code Collaborative Programmable Music\nOvertone is an open source audio environment designed to explore new musical ideas from synthesis and sampling to instrument building, live-coding and collaborative jamming. We combine the powerful SuperCollider audio engine, with Clojure, a state of-the-art lisp, to create an intoxicating interactive sonic experience.\nVJ Ready:\nSynchronize your visuals and noise with ease. Overtone features seamless integration with both Quil, a Clojure front-end to Processing and ShaderTone, a Clojure version of ShaderToy an OpenGL GLSL shader programming environment.\nTweakable An alternative and fun way to make interactive music in your browser.\nFoxDot FoxDot - a Python-based language and editor for making music\nSiren (GitHub) Siren, is a tracker interface that embodies abstractions where programming is realized as the medium for pattern sequencing in a modular fashion. It is based on a hierarchical structure that consists of scenes and channels. Separate channels have independent patterns; a complete song consists of a master list of repeated patterns.\nSupported programming languages :\nSuperCollider Haskell/TidalCycles Extempore Lang \u0026ldquo;Extempore is a programming language and runtime environment designed to support cyberphysical programming\u0026rdquo;\nBespoke Software Modular Synth Music Pattern Generator Music Pattern Generator is an app to create musical rhythms. It sends MIDI data, so it won’t make any sounds by itself. For that you need to connect it to MIDI soft- or hardware that can handle MIDI data to produce sound. Nestup Nestup is an experimental markup language for musical rhythms. It\u0026rsquo;s specifically designed to break away from a fixed musical grid.\nThe name is a contraction of nested tuplets, which are hard to program on a piano roll but easy to notate with Nestup.\nAudulus Audulus is a modular music processing app with unequaled ease of use.\n"},{"id":202,"href":"/music/software/plugin/","title":"Plugin","section":"Musics","content":" Plugins # This page is a massive work in progress. Even the things that look done may be wrong. [TODO] break list up more\nSound Sources Vintage Synths Modern Synths Bass Synths Sampled / Acoustic Modeling Percussive Effects Dynamics Filter Reverb Delay Trivial Weird as fuck Misc Tools Organization MIDI generation This is probably where the most bias of any of the lists on this page will show as I obviously can\u0026rsquo;t list every possible plugin. Instead, I\u0026rsquo;ll list those that I think are particularly good both in terms of value and function. While the list below does have ranking (copper, silver, gold) everything I\u0026rsquo;m listing I think is good, even the \u0026lsquo;copper\u0026rsquo; ones!\nYou DO NOT NEED everything on these lists! Many of these plugins will have overlapping features, and as mentioned plenty of times before, your DAW probably has the majority of this functionality built in, as stated back in the start of the effects chapter: USE THESE FIRST. They\u0026rsquo;re lighter on CPU, fit into the DAW\u0026rsquo;s workflow better, and generally are good enough for most things. Check out I Made A Song Using Only Ableton Stock Plugins (YouTube, Composerily) if you don\u0026rsquo;t believe me.\nI have tried to put a pretty good mix of professional and weird, free and paid, and traditional and novel tools on this list. This means that some will absolutely not be to your taste. Some may be too sterile, or may be wacky and useless to you.\nVST? # VSTs are a really weird standard, for one, unlike most standards that are ratified by a collection of involved interests, VST is the child of a single company - Steinberg.\nGenerally, there are a few things you need to know:\nSome VSTs are distributed as VST2 others as VST3, obviously one is newer than the other. Unfortunately, not all DAWs support VST3 and worse, new applications by new devs have to be VST3 due to Steinberg no longer issuing new licenses. Generally, VST2 will be downloaded as .dll files while vst3 will be .vst3 VST3 does support a few extra features, and tend to perform better Some VST3\u0026rsquo;s can do neat stuff so that if multiple instances are loaded they can communicate together, this is useful for some mastering plugins. Some VSTs are 64 bit, some are 32 bit. Not all modern DAWS support running 32bit VSTs VSTs can do 1 (or a mix of) three things act as a virtual instrument (guitar, synth, etc.) act as a virtual effect (delay, reverb, etc.) act as a midi effect (arpeggio, quantizer, etc.) There are some other, not-VST plugin formats you may encounter, namely LV2 and Apple\u0026rsquo;s Audio Units, as well as the various plugins for particular DAWs, like Reason\u0026rsquo;s \u0026lsquo;Rack Extensions\u0026rsquo; or Ableton Live\u0026rsquo;s M4L (Max For Live) Devices.\nWhile VST3 does have a linux SDK, most plugins aren\u0026rsquo;t released for Linux. You may still be able to make it work using a bridging program like Yabridge.\nYou may also see VSTi or VSTfx, these aren\u0026rsquo;t anything new, \u0026lsquo;i\u0026rsquo; or \u0026lsquo;fx\u0026rsquo; just denote if the plugin is an instrument or effects plugin.\nEffects # Name (MFR) Description Screenshot Category Price in USD (approx) Vega's Rating Pro-Q 3(FabFilter) Extremely powerful, user friendly equalizer. Equalization ~180 3\nVarious Reverbs(Valhalla DSP) Plate, VintageVerb, etc. Supermassive is free and blends reverb and delay in a fun, experimental but very usable way. Reverb 0 or 50🆓 3\nDragonfly Reverb Amazing, free reverb Reverb 0🆓 3\nPeel(zplane) Easy to use tool for isolating parts in a mix - steep, stereo filtering [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nTriad(Unfiltered Audio) Noise Removal [TODO] Repair🎛 ~40 3\nSpecOps(Unfiltered Audio) Noise Removal [TODO] Repair🎛 ~40 3\nSandman Pro(Unfiltered Audio) Noise Removal [TODO] Repair🎛 ~40 3\nInstant Delay(Unfiltered Audio) Noise Removal [TODO] Repair🎛 ~40 3\nDent 2(Unfiltered Audio) Noise Removal [TODO] Repair🎛 ~40 3\nFault(Unfiltered Audio) Noise Removal [TODO] Repair🎛 ~40 3\nByome(Unfiltered Audio) Noise Removal [TODO] Repair🎛 ~40 3\nPortal(Output) Noise Removal [TODO] Repair🎛 ~40 3\nThermal(Output) Noise Removal [TODO] Repair🎛 ~40 3\nDesmodus(Noise Engineering) Noise Removal [TODO] Repair🎛 ~40 3\nXRuina(Noise Engineering) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nGatekeeper(Polyverse) Noise Removal [TODO] Repair🎛 ~40 3\nManipulator(Polyverse) Noise Removal [TODO] Repair🎛 ~40 3\nOcta/Qudravox(Eventide) Noise Removal [TODO] Repair🎛 ~40 3\nBlackhole(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nDecimort 2(D16 Group) Noise Removal [TODO] Repair🎛 ~40 3\nTekturon(D16 Group) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nX-Noise(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nMJUC(Waves) Noise Removal [TODO] Repair🎛 ~40 3\nAudio Sources # 🧱 = Some features behind paywall🆓 = Free version available💸 = Known to go on sale🧑 = Requries user AccountPrices listed with ~ indicate a range of prices\n🎛 = MPE compatible\nName (MFR) Description Screenshot Category Price in USD (approx) Vega's Rating Vital(Matt Tytel) Spectral Morphing Wavetable Synth Synth🎛 0 ~ 80🆓🧱🧑 3\nPendulate \u0026 Generate(Eventide \u0026 Newfangled Audio) Chaos Synths, Pendulate being the limited, free version "},{"id":203,"href":"/music/vcv/","title":"Vcv","section":"Musics","content":" VCV Rack Tips \u0026amp; Tricks # I am not affiliated with VCV or the Rack software in any way. Despite the mess in the VCV community, I\u0026rsquo;ve still put in a lot of time in the software and run a pretty large group chat on Telegram where it (alongside hardware Eurorack) is the main focus. In that chat, there\u0026rsquo;s been a few recurring questions, this page is just some of those questions and answers.\nHow do I protect my ears from loud sounds? # Put a ZZC SC-VCA or Bogaudio LMTR as the last module your sound passes though before going to the audio interface module. On the ZZC VCA, the big knob is master volume, the little knob controls at what volume it starts clipping out, limiting the volume. It actually sounds really nice as a distortion, too.\nHow does polyphony work in VCV? # VCV\u0026rsquo;s manual does have a page on polyphony but it\u0026rsquo;s kinda shit. Basically, it lets you with some modules carry up to 16 signals in one cable. There\u0026rsquo;s also modules made for working with this, like Merge and Split which let you take a bunch of mono signals and merge them into one polyphonic cable, or split the polyphonic cable into 16 individual outputs respectively. The polyphonic cables are easy to tell apart because they\u0026rsquo;re thicc.\nDo keep in mind, you\u0026rsquo;re still making the same patches as with mono. Just like in mono, if you don\u0026rsquo;t have something to stop the signal from an oscillator when you don\u0026rsquo;t want it to be playing, it will drone on. If you set 16 channel polyphony and don\u0026rsquo;t have something to gate the unused channels, they will just drone on, but now with 16 channels it might be like smashing 16 keys on the piano at once, which can be an ear rupturing experience. What you probably want is a VCA hooked up such that only the notes you\u0026rsquo;re hitting on your keyboard or using in the chord play, so make sure you hook up a VCA - the stock VCV one will divide it\u0026rsquo;s green bar so you can see all the polyphonic channels in the visualizer.\nWith a MIDI controller # Add a MIDI-CV module, right click it, and set Polyphony Channels to anything other than monophonic.\nIf you want to play with the mode you can too, what the modes do is documented MIDI-CV official manual page.\nIf you want to use MPE (with like a Roli Seaboard or Artiphon Instrument One) you\u0026rsquo;ll probably want to use the MoDllz Midi Poly + MPE module instead. The stock MIDI module has MPE mode now, though you should note that most MPE controllers also send a few CC\u0026rsquo;s along with the per-note aftertouch and velocity. You may need to use a second module for that.\nWith a Sequencer and/or Chord Generator # Use a merge module to get the outputs into a thick, polyphonic cable. You can sequence multiple notes in a chord directly, but it\u0026rsquo;s usually easier to use a chord generation module (like the Instruō harmonàig used here)\nSomething of note, Basal, the oscillator here does have a mono signal going into the MOD1 input, this is because if a mono signal goes into a module that\u0026rsquo;s running polyphonically, the mono signal will be applied to all the poly channels. You don\u0026rsquo;t need to duplicate the same signal into however many poly channels the thick wires are carrying just to hook up modulation, unless you want that modulation to be different on every channel. Speaking of:\nUsing Polyphony For Modulation # I like to use random modulation a lot, and Vult\u0026rsquo;s Caudal module is awesome for this, but it doesn\u0026rsquo;t have global attenuation and offsets, if you want to add that in you can set up a patch like this, using a Merge, Split, and the Wiqid 2at:\nBy doing this, you can either make a nice, random signal poly cable, great for keeping all the notes coming from a polyphonic source from being identical or you can run it through split, effectively just adding a global attenuator and offset to Caudal for quick control over your patch.\nWhen I send clock to [Module Name] it doesn\u0026rsquo;t work right! # Different modules have different clocking standards. Topograph, for example, needs an input clock that\u0026rsquo;s multiplied by 24 by default. You might see this written as 24ppqn which is peaks per quarter note. Strangely, μGraph, the smaller version of Topograph, defaults to only 4ppqn. The advantage to the higher clock multiplier is if you change your tempo, these modules can adapt to the new tempo more quickly, as they need to \u0026lsquo;hear\u0026rsquo; at least two clicks before they can lock on.\nIf you\u0026rsquo;re trying to send clock to external gear via CV-MIDI, you\u0026rsquo;ll probably need to give it 24ppqn too. Also, racks MIDI clock out is\u0026hellip; not great. It\u0026rsquo;s pretty unstable and can make some gear unhappy.\nMore on Clocking: # While you\u0026rsquo;ll often see Impromptu\u0026rsquo;s Clocked used as the main clock source on YouTube, I actually recommend using ZZC\u0026rsquo;s Clock and Div expander, especially since you can use the phase outputs they provide with FN-3 to get clock sync\u0026rsquo;d lfo\u0026rsquo;s very easily. Even cooler, if you use a sequencer on the Div expander and FN-3, you can get amazing clock sync\u0026rsquo;d modulation sequences. I also recommend keeping your clocking interesting. It you just have your sequencer be driven by a constant clock it might not be as interesting as you like. You can always use a gate sequencer as a \u0026lsquo;clock\u0026rsquo; source for your sequencer and have gates be triggered more rhythmically.\nIf you want some random clocking, try using Geodesics\u0026rsquo; Fate (which is also amazing at adding randomness to note sequences), Audible Instruments\u0026rsquo; Bernoulli Gate (Branches) or Random Sampler (Marbles),or Grayscale\u0026rsquo;s Permutation. Each has its own method of adding madness to clocking.\nor, if you\u0026rsquo;re feeling really spicy, there\u0026rsquo;s Arias Salvatrice\u0026rsquo;s Darius, which is basically a lot of Bernoulli Gates chained together Not yet available in V2 CV-MIDI doesn\u0026rsquo;t work # If you want to constantly update the note value you\u0026rsquo;re sending out of a sequence, you\u0026rsquo;ll need to tie the gate input high. Otherwise, the note will only change on each gate activation/trigger. Also, if your triggers are too short, some midi interfaces will miss the message too.\nHow do I add those labels onto modules? # Stoermelder Glue\nHow do I change my wire colors? # Submarine WM-101 or Colour Key\nHow do I add CV control of a knob that doesn\u0026rsquo;t have a CV input? # Stoermelder\u0026rsquo;s μMAP or CV-MAP. You\u0026rsquo;ll probably want to check out CV-PAM too, for getting CV from changing any other knob.\nHow do I get that fancy dimmed with bright lights effect I\u0026rsquo;ve seen in YouTube videos? # In V2, it\u0026rsquo;s built in: View→Room Brightness\nIn V1, this required using Modular Fungi Lights Off - right click it, set active, and drag the dim slider to whatever you want. Not all module\u0026rsquo;s lights use the system it does to know what shouldn\u0026rsquo;t be dimmed. While the stock VCV scope will stay dim, Modular Fungi\u0026rsquo;s Opsylloscope does work. Just be aware it uses more CPU\nVCV runs like shit # VCV needs a computer with a good CPU and not totally shit graphics processing. It probably won\u0026rsquo;t run super well on your laptop, especially with some of the more CPU-heavy modules, like Plateau. You might be able to get it to run better by going to Engine → Threads in the top menu, and selecting whatever says \u0026ldquo;most modules\u0026rdquo; by it. Though, in my experience, going one or two down from that can help on very powerful systems. If you\u0026rsquo;ve got 16 threads, 6 or 7 seems to be the sweet spot, for example. Also, because reasons, sometimes only using 1 core will work better than anything else, so try that too.\nAlso make sure you have Engine→Sample Rate set to something sane. I run at 44100 because I like to use CPU heavy modules and make big patches, but if you want a bit better sound VCV does actually benefit quite a bit from oversampling, just be aware setting this higher than 48000 will absolutely tank performance.\nIf you\u0026rsquo;re running Linux and extraordinary unlucky, you might be dealing with a bug that\u0026rsquo;s causing Rack to try to render at like 3000 FPS, which tanks performance and can crash your entire graphics stack to lock up. LibStrangle fixes the problem, though this seems to be fixed in V2.\nHow do I interface VCV with other software? # For 2.0 you have two main options. Shell out the money for Rack 2 Pro or use Cardinal. Rack 2 Pro lets you use the library and comes with support, Cardinal ships with modules baked-in (can\u0026rsquo;t easily add more), lacks support, but can run as a VST2, VST3, or LV2 plugin while Rack 2 Pro is limited to being a VST2 at the time of writing.\nIf you\u0026rsquo;d like to use VCV 1 \u0026hellip; at this point, don\u0026rsquo;t. I realize there\u0026rsquo;s some 1.0 only plugins, but every solution was always a bit hacky.\nFinally, there are non-VCV options, like Voltage Modular, Softube Modular, or maybe Reason Rack.\nIf you want to load VSTs inside of Rack, you\u0026rsquo;ll have to get VCV Host, which is not free. It\u0026rsquo;s also not perfect about plugin support, but it\u0026rsquo;s still by far the biggest bang for your buck you can add to rack, albeit the UI is a bit clunky at times and any module running through host will have some delay depending on the buffer size (iirc, it defaults to 128)\nHow do I interface VCV with Eurorack hardware? # Pretty much the only way to do it directly is with either the Expert Sleepers ES-8, ES-9, or with an audio interface that supports ADAT and the ES-3 and ES-6 or Boredbrain Optx. This is going to largely depend on your setup and what you\u0026rsquo;re looking for - if you want to hook up normal line-level gear to normal audio in\u0026rsquo;s and out\u0026rsquo;s using a traditional audio interface with ADAT is probably the better option. If you\u0026rsquo;re seeing this and going \u0026ldquo;Holy shit that\u0026rsquo;s expensive!\u0026rdquo; then, yep, welcome to eurorack.\nYou\u0026rsquo;ll also probably want a MIDI→CV interface. I like the FH-2, but there\u0026rsquo;s a million options out there. Mutable\u0026rsquo;s Yarns (or clones of it) is nice too.\n"},{"id":204,"href":"/other/advice/","title":"Advice","section":"Others","content":" I will dispense this advice now # Over the last few weeks I\u0026rsquo;ve joined a few new communities online, made a few new friends in meat space, and had a repeated conversation with my SO all about the same thing: \u0026ldquo;How can I be more like you?\u0026rdquo; (or, in one case \u0026ldquo;How can I be you\u0026rdquo; \u0026hellip; yikes.) This is a really weird question to get. It is simultaneously asking for life advice, placing me on a pedestal as some sort of ideal, and sort of diminishes both my personal quirks and personality and the beauty in everyone\u0026rsquo;s uniqueness.\nI also don\u0026rsquo;t want to just dismiss the question with some sort of feel good \u0026ldquo;Don\u0026rsquo;t be like me, be your best you!\u0026rdquo; or similarly useless empty talk, so instead I have to dig into the question and figure out what about me they\u0026rsquo;re envious of. In general, I think it\u0026rsquo;s these things:\nBeing talented at many hobbies Being very confident in myself Being Talented At (\u0026amp; finding time for) Many Hobbies # \u0026hellip; and being in many groups, having many neat skills, etc.\nI do a lot of things: Play guitar Noodle on synths Program in a variety of languages Make electronics projects Make digital art Write Longboard Fursuit Nerd about Conlangs Burn wood with high voltage Build keyboards Rice Linux and probably a dozen other things that just aren\u0026rsquo;t at the top of my mind right now. I\u0026rsquo;m not going to pretend to be great at all - or even any - of them, but I know from an outsider looking in my ability to do these things is often impressive. So, the first and most obvious question:\nHow the fuck do you have time for all of that? # This is a big one, and the answer is also the fuzziest because it depends on what you do already.\nI have more free time than those that accidentally spend a 4 hours of their week staring at TikTok, Twitter, Reddit, etc. because I \u0026hellip; don\u0026rsquo;t do that? To some extent, this is just a matter of realizing how much time is going to something that you may not want it going to. This, I think is more easily solved not by self-control but by addressing the root cause: interruptions.\nA while back I read Programmers, Teach Non-Geeks The True Cost of Interruptions (By Erik Dietrich) and I think it covers half of what I mean here, but the other half is not human interruption, but interruption from your tools. This can be as obvious as long delays as tools work (video rendering, program compilation, etc.) to as subtle as just being a slow typist. Identify and squish these interruptions with extreme prejudice. They don\u0026rsquo;t just slow you down by the cost of the task like this xkcd Implies: But rather, I think this is wrong because the equation isn\u0026rsquo;t \\[ T_{cost} = frequency \\times T_{task} \\] but is rather \\[ T_{cost} = frequency \\times T_{task} \\textcolor{blue}{\u0026#43; T_{exit \\char`_ alternate \\char`_ task}} \\] That is, if a task takes a second, you will find something else to occupy your mind for that time and there is an additional cost added in coming back from that task. If you know anything about operating systems or programming, this is the equivalent of the cost of a context switch, just on a human scale.\nThis is even worse if there\u0026rsquo;s no obvious cue that the task is finished and to resume so letting a 5 second distraction become a 15 minute one.\nFind these slow downs and find solutions for them. If an off the shelf solution doesn\u0026rsquo;t exist, make one. Even if the solution is mildly awful to adapt to short term, killing these time sinks will always pay off either in the amount of time saved or in your willingness to do the thing (that is, if you\u0026rsquo;re constantly not doing something because of a repeated micro-annoyance, fixing it may take more time, but it\u0026rsquo;ll make you actually do the thing again).\nLet me provide a few examples:\nTo work on this website, I regularly have to type blocks that look like this: ⟮⟮\u0026lt; smalltext \u0026gt;⟯⟯ whatever ⟮⟮\u0026lt; /smalltext \u0026gt;⟯⟯ to get something like whatever . Typing these out is annoying enough both in memorizing the format and in hitting the symbols that I set up espanso to make it so typing :small automatically turns into the above with the cursor between the two so I can just keep typing.\nI was slow at typing, so I put blank keycaps on my keyboard to learn to type correctly.\nAfter learning to type correctly, typing so much would cause pain which would distract me as I needed small breaks, so I got an ergonomic keyboard. No more little breaks necessary to prevent pain.\n(I do still try to do the every 20 min look at something 20+ ft away for 20+ seconds though) Using Windows default calculator is slow, so I use speedcrunch. If I need to do algebra or anything remotely complicated, I use sympy with a little script that prints out basic usage and defines a few symbols so I don\u0026rsquo;t have to remember how to do it every time.\nLongboarding to classes: Walking between classes everyday freshman year got very old, very fast. So, I learned to longboard. That saved a lot of time. Probably literal weeks of my life.\nSorting parts: Spending time to sort all of my electrical components makes me want to even make things, otherwise just finding the part takes is enough of a headache that I dread doing anything.\nHow did you learn all of that? # There\u0026rsquo;s already a learn-how-to-learn page on OpGuides, but to add to it:\nJust do the fucking thing. Start with a simple example, but bring it from start to finish as quickly as possible. This lets you learn the high level steps quickly without getting bogged down on the finer details. This is particularly important as if you haven\u0026rsquo;t done the thing from start to finish at least once and you try to make the really good version first, you\u0026rsquo;ll probably end up realizing halfway though you need to restart and now you\u0026rsquo;ve just wasted a ton of time compared to just making the dumb toy version first.\nConstantly fail. There\u0026rsquo;s this Edison quote \u0026ldquo;I have not failed 10,000 times—I\u0026rsquo;ve successfully found 10,000 ways that will not work.” and I think it\u0026rsquo;s really close to being profound, but misses the mark. I\u0026rsquo;d put it as \u0026ldquo;“I have failed 10,000 times, but I\u0026rsquo;ve found 100,000 hints to the correct solution\u0026rdquo;. They are failures, it\u0026rsquo;s just that failing is awesome and while the entire system doesn\u0026rsquo;t work, each time you probably made it so more of it does or gotten it to work more reliably.\nKnow what you don\u0026rsquo;t want to know. Part of learning many skills is to try a lot of things and for some say \u0026ldquo;Yeah, this isn\u0026rsquo;t for me\u0026rdquo;. Yes, every thing you may want to learn will have a skill bump where the first little bit is extra difficult, but being able to say \u0026ldquo;Wow, yeah, I thought I\u0026rsquo;d be into this but I\u0026rsquo;m absolutely not\u0026rdquo; and bail is important too.\nHave enough interests to rotate. Life is weird. At only roughly 80 trips around the sun, you\u0026rsquo;d think any interest should have enough to not get bored, but the simple fact is if you do something every day you\u0026rsquo;ll start to question if you even care about it anymore. \u0026ldquo;Should I just sell my all my guitars?\u0026rdquo;, \u0026ldquo;Do I even want to write code?\u0026rdquo;, etc. These thoughts will go through even the most confident person\u0026rsquo;s mind. While they can be healthy to consider occasionally (see the above point) they can also be tickets to the depression express. Having multiple interests to rotate between does two things:\nFirst, it gives you the opportunity to put something down when you\u0026rsquo;re not feeling it. Second, it lets you get cross-interest ideas. I like to program synthesizer software, write about my other interests, etc. Doing something for one interest will often provide interest for another in a positive feedback loop. Give it 60 seconds. If you\u0026rsquo;re trying to learn something new, give it a tiny bit of effort every day. Just 60 seconds, if that. Pick up the guitar, strum one chord. Open the IDE, write one line. That\u0026rsquo;s all. The effort of the context switch is typically the hardest hurdle mentally. This idea is mostly stolen from There are no more zero days (/u/ryans01) which is a really good read.\nPlanned (but not too many) \u0026ldquo;Fuck it\u0026rdquo; days. Roughly once every two weeks, I give myself a \u0026ldquo;fuck it\u0026rdquo; day where the most productive thing I do is shower. Otherwise, I wear PJ\u0026rsquo;s, watch anime, and fuck off. These are vital for recharging, but not for the reason you\u0026rsquo;d think: after about 6 hours I\u0026rsquo;m itching to do something. I try to not let myself as long as I can. It\u0026rsquo;s not that I need to relax, it\u0026rsquo;s that I need to remind myself why I don\u0026rsquo;t.\nSo you\u0026rsquo;re a workaholic? Sorta? I don\u0026rsquo;t see it as work though. Like I enjoy making music, programming, etc. just like I enjoy watching Anime. The difference is while watching anime I only get to reward the consumption part of my brain while on the other hand when making things like this post, a new song, etc. I get to fulfill both the consumption and creation side because I actively look for inspiration and do research while doing any of those things.\nIt gives purpose to the consumption and the rewards of creation - the victories at getting each step to work and the big pay-off at the end.\nSet scheduled goals, know you\u0026rsquo;ll fail. I have a huge list of things I try to do every week. Some of them only happen like once every 2 months. But I still try every week. I also usually have some monthly \u0026ldquo;I want to do this thing\u0026rdquo; goals or at least a theme \u0026ldquo;month of health\u0026rdquo; or \u0026ldquo;month of art\u0026rdquo; etc. Confidence # I\u0026rsquo;m very confident as a person, but I also know that saying \u0026ldquo;HEY KID HAVE YOU TRIED JUST BEING CONFIDENT?\u0026rdquo; is about as useful as a therapist asking \u0026ldquo;Have you tried just being less depressed?\u0026rdquo;\nStill, I want to share how I stay confident.\nBeing amazed by own body # I\u0026rsquo;m not really in great shape, I had to get Lasik to have even remotely useful vision without glasses, and like, humans are kinda derpy looking, right? Like, we\u0026rsquo;re just this big ol\u0026rsquo; fur-less sack of bones. It\u0026rsquo;s mildly gross.\nBut dude. Our bodies are fucking awesome!\nI can absolutely fly on a longboard, keeping balance, and stop on a dime trusting myself to slam a foot down and pull the board out from underneath myself.\nWhat our brains are capable of is fucking nuts. Just think about all of the amazing power to create that sits a few inches behind your eyes.\nWhen we trust our bodies - the complete and total trust that\u0026rsquo;s required to maintain balance on a bike or skateboard, or reliably hit notes on an instrument at high speeds - they\u0026rsquo;re capable of incredible feats.\nYou may think \u0026ldquo;But I\u0026rsquo;m [suboptimal in some way]\u0026rdquo; but even if that\u0026rsquo;s the case, your body is still doing some crazy shit - from your immune system to your eyes or ears. Even if one of them doesn\u0026rsquo;t work quite right for you, the ones that do, man, they\u0026rsquo;re awesome, right?\nIf that fucker can do it, then I can do it too! # Having an \u0026ldquo;If [he/she/they], then I can do it too!\u0026rdquo; attitude goes a long way.\nBeing able to see someone do a thing, think it\u0026rsquo;s impressive, and say \u0026ldquo;huh, fuck it, let\u0026rsquo;s try it!\u0026rdquo; and having the mental fortitude to get over the being-a-total-noob bump will go a long ways.\nTo some extent, I\u0026rsquo;m advocating for intentional overconfidence. Trick your brain into being able to look at somebody doing something at a pro level with years of training and go \u0026ldquo;Yeah, I can learn that in a weekend.\u0026rdquo; and into not being disappointed when you fail but going \u0026ldquo;Hell yeah, I\u0026rsquo;m already getting there!\u0026rdquo; when you do even the first step.\nThis has absolutely lead me to do some very dangerous things. I\u0026rsquo;m glad I did them, but, yunno\u0026rsquo; - don\u0026rsquo;t be too stupid. If you struggle with this, just take the advice of Baz Luhrmann - Everybody\u0026rsquo;s Free To Wear Sunscreen* and \u0026ldquo;Do one thing every day that scares you\u0026rdquo; *Yes, this is a remix, I like it more ╮(─▽─)╭ "},{"id":205,"href":"/other/conlangs/janolin/","title":"Janolin","section":"Others","content":" Thoughts on olin, Part 1 # Written by jan Usawi\nSo. Can you olin a potato?\nTonight (1), myself and a few others in the ma pona server got talking about the usage of the word olin (󱥅) towards actions, and whether or not olin can refer to love for anything other than a person. And my brain, in its normal spiderweb-weaving fashion, went running.\nAs much as I love using the odd preverb here and there (sike (󱥜) especially), olin preverb is one I’ve never gotten on board with—I love writing, but “mi olin sitelen” is not how I’d express that passion.\nkili pan (󱤚󱥋) (a sensible enough translation for potato?) li pona tawa mi (󱤴󱥅󱥠󱤧󱥔󱥩󱤴), taso that’s not olin. That much we all more or less agreed upon. But restricting olin to “people”—that seemed too limiting, too prone to the kind of semantic fuckery I’m not such a fan of (as opposed to the kind I love, because again, this is an essay on toki pona (󱥬󱦖󱥔).\nSo it seems I can’t olin potatoes, not by my nasin. The question quickly got posed, then—can one olin a potato? A specific one? How intense does one’s love for a potato have to get for it to be olin? How intense does one’s love for a person have to get for it to be olin?\nAt that, my mind went to Martin Buber (Wikipedia). What’s about to follow is a very incomplete summary of Martin Buber’s philosophy. I’m no studied expert on his work, and there is definitely much more to it than what I’m about to cover here.\nThe concept Buber is best known for is that of the I-It and I-Thou relationships. mi-ona—but perhaps more accurately, mi-ni—and mi-sina. An I-It relationship is subject-to-object; the individual meets with the “it” of the relationship insofar it benefits them, only ever really interacting with their personal concept of the object at hand. An “it” here could be a physical object—a tool, a vehicle, a toy, etc.—but just as easily could be a person. I recognize cognitively that the man who checks out my groceries is as full a person as I am, but that never alters the nature of our relationship, nor the fact that ultimately I’m looking to get something out of it—minimal conversation, some reassurance of my social standing, and my groceries. What I interact with is ultimately my own projection; I’m not relating to the Other that’s present here.\nIn an I-Thou relationship, two individuals meet. It’s subject-to-subject—no interference of expectations or judgements, no imposed structure or implicit content, just two holistic selves, together, in relation. Again, this can occur between two people—be they lovers or strangers on the train—but it doesn’t have to. One can have that same real experience—of one Self recognizing and appreciating and connecting to an Other—with trees and skies and tools and what have you as they can with a person. In my experience, I get there when I recognize that what I’m experiencing as a friend, a tree, etc. is just the series of hints that leads me to the entity underlying, one with an existence otherwise unrelated to my own—but here we are, together, inexplicably related anyway. An I and an I, and that numinous thing that is Both of Us.\nThe tree is no impression, no play of my imagination, no value depending on my mood; but it is bodied over against me and has to do with me, as I with it—only in a different way.\nLet no attempt be made to sap the strength from the meaning of the relation: relation is mutual.\nThe tree will have a consciousness, then, similar to our own? Of that I have no experience. But do you wish, through seeming to succeed in it with yourself, once again to disintegrate what which cannot be disintegrated? I encounter no soul or dryad of the tree, but the tree itself.\n- Martin Buber If I face a human being as my Thou, and say the primary word I-Thou to him, he is not a thing among things, and does not consist of things.\nThis human being is not He or She, bounded from every other He and She, a specific point in space and time within the net of the world; not is he a nature able to be experienced and described, a loose bundle of named qualities. But with no neighbour, and whole in himself, he is Thou and fills the heavens. This does not mean that nothing exists except himself. But all else lives in his light.\n- Martin Buber As an aside, because I’ve been thinking about how strange the online law-of-attraction scene has seemed to get recently and spider-brain has gotten very excited—I think this is precisely what ticks me off about their whole mindset? Both LOA folks and Buber agree k i n d a on the essential immanence of God, I’ll give them that, but like. The sort of LOA I’m talking about here is like the reality-shifting-it-girl brand, the kind that says that You Are God, full stop, and you can make anything happen in your reality by changing how you feel about yourself because your reality is a reflection of you. External relationships have nothing to do with it. I don’t even mean that they’re irrelevant—I mean they’re incompatible with the framework. There’s no moral weight attached to manifesting major changes to a specific person without informing them or receiving consent, because that person doesn’t exist outside of you as far as they’re concerned. I’ve seen LOA bloggers go on about how everyone else doesn’t have free will and it’s just the w o r s t brand of solipsism. From an I-It/I-Thou perspective, it’s kinda no surprise that so much energy in the community is spent on manifesting material gains and romantic attractions. There’s no room for an I-Thou relationship of any kind and that’s kind of the whole point of their methodology and it kinda breaks my heart. ᵃʰᵉᵐ anyway It’s this that makes me hesitant to say that olin is a matter of personhood, or a matter of intensity. No matter how excited I get over a birthday gift, I’m still relating to the gift as it relates to me, and therefore, as an It. Hell, I’m even relating that way to the person who gave me the gift—however much I love them, the spur of that joy is usually the fact that they’ve given me something. I think I’ve have had interactions with tarot decks of mine that were closer to I-Thou than that.\nSo, currently, my thoughts on olin are that it has less to do with anything unique to personhood and more to do with the proximity to or potential for an I-Thou relationship. Actual I-Thou experiences tend to be rare, as Buber describes them, owing to the fact that actively pursuing one with something or someone tends to it-ify that entity, so I wouldn’t say that for me, olin is only I-Thou connection. But my understanding of olin is definitely colored by this framework.\nCan I olin potatoes 🥔🥔🥔? Not as a concept, no, not as a food that tastes good or provides nutrition or is fun to cook or represents something about luck or humble resourcefulness or even love. These things are conditional, they’re material, they’re hinged upon my own narrative and benefit. But the potato 🫱🥔🫲 in my hand I wish, I’m writing this section from a small restaurant just off my college campus and I’m not sure? that they make anything that has potatoes in it), that exists, that is a full being in its own right? Who’s to say there can’t be olin there?\nLanguage is by necessity vague, but the word \u0026ldquo;love\u0026rdquo; is almost painfully so, loaded as it is with multiple, sometimes contradictory, implications and contexts. But my experience with toki pona, a language that’s readily arguably much more vague, is entirely different. This is a language where I can say that tomo mi li lete lili and a plain response of “o kepeken len” reads as kind and sweet with no need for additional clarifiers; the fact that we are speaking in toki pona is the clarifier. This is a language where “sina pona tawa mi” is no less loving (in the colloquial English-language sense) than “mi olin e sina.” And so, I feel more freedom to get clear on what exactly I mean by olin, to make space within my usage of the language for personal philosophy and experience, and to communicate these distinctions in a pona manner.\nI can love writing because of what role it plays in me and my life, but I can only really olin the potato 🥔 (or anyone/thing else, for that matter) because it is, and so am I.\nAt least, as long as I know that the potential for such a connection exists, as long as I am open to it (which, for Buber, is the way to start an I-Thou relationship), then mi la, there is olin.\nThere’s more I have to say on the matter—if olin isn’t just for people, is olin just for jan? Is olin subjective or objective in this nasin? How does this interact with solipsism? With mereological composition? With the concept of pona?\n—but I wanted to keep this post at least somewhat concise. Expect more speculation and analysis on this in a part 2.\nTill then, I’ll close out with one more Buber quote that I’ve been chewing on as I write this:\nFeelings accompany the metaphysical and metapsychical fact of love, but they do not constitute it. The accompanying feelings can be of greatly differing kinds. The feeling of Jesus for the demoniac differs from his feeling for the beloved disciple; but the love is the one love. Feelings are “entertained”: love comes to pass. Feelings dwell in man; but man dwells in his love. That is no metaphor, but the actual truth. Love does not cling to the I in such a way as to have the Thou only for its “content,” its object; but love is between I and Thou. - Martin Buber as of starting to write this, I’ve just crossed over into August 29th, 2022 "},{"id":206,"href":"/other/conlangs/neography/","title":"Neography","section":"Others","content":" USAWI # Additionally, I want to stress (pun intended) how important the International Phonetic Alphabet is. For the uninitiated, the IPA is the weird symbols you’ve seen in dictionaries that tell you how to pronounce a word. For example, the word “knife” would be represented with /nīf/. This is confusing, since your later examples use the IPA and not dictionary phonetic notation.\n“Artistic languages” are those made primarily for their aesthetics or making a world feel more fantastical. Usually these are used for TV, novels, comics, or other entertainment media.\nProbably a better way to define this. What unites the aesthetic and worldbuilding facets of an artlang is that they’re, well, made for art, for artistic purposes (whether that’s the more common fantasy worldbuilding or something more abstract like the IS language, which I think may be a good example to include here as an artlang that isn’t a naturalistic lang or fantasy lang).\nThis has lead me to not feature many of the beautiful scripts that are heavily inspired by existing, natural Arabic, Asian, or braille scripts because I may not be the best judge of their quality. Agree with you on this point, but it made me realize there’s nothing about Hangeul on here?? I may be biased but like I feel like that’s a required one to include lol\n[6:27 PM]ariaddox: I still want to take another pass-through with the bigger picture in mind, but overall the page seems kinda clumsily structured in a particular way. Like the flow between the bigger sections makes a lot of sense, but within those sections the amount of time spent on different topics and the order those topics go in feel kinda off. I can say more specifically what stood out to me most in that respect when I read through again (which I think I\u0026rsquo;m gonna do rn)\nOf course, the number one reason to make a new script is for a new language that needs a way to represent a possibly novel phonetic inventory (the list of sounds it uses) or needs to reflect the culture it’s being designed around if it’s for an art lang such as Klingon or Na’vi As you can imagine, there’s many more of these, but maybe Nailscript got you thinking, there’s another use here: hiding messages. We’ll talk about this more when we get to “why you might want to do this yourself” section.\nNot sure these paragraphs are needed, this is information you’ve included and/or can work in either earlier or later. Flexibility: Western Music Notation\nSo, at this point in the article, we haven’t really transitioned into talking about “non-languages” like music notation, and the section on domain-specific notation isn’t until later. The other two sections on limitations are still language-related (emojis as communication and texting styles), so this feels jarring as an example. I think it would be a disservice to my readers not to mention just how unhinged some of these can get. Some of the most interesting I’ve seen are:\nThis doesn’t feel like it belongs in a section that’s primarily about programming languages, I would move this to the section on what conlanging is or why someone might do it—which, right, reminds me—I like your list of reasons someone might want to make a conlang, but of the three base categories you list earlier (artlang, auxlang, engelang), only one of them has an entry in that section. International/zonal communication and testing linguistic hypotheses/design challenges (and making elaborate jokes) are major reasons for making a language or script that are distinct from just conlanging for the joy of it. A few sentences or a paragraph on heartlangs would also be good to include here. How does this tie in to the current AI boom?\nThere’s not a lot in the first half of this section about conlanging or neoscripting; while this ties in to some of the topics brought up earlier, this is the section where the article seems to be veering away from what it started out about. I’d rearrange this to put the more conlang-y bits first or take out the less conlang-y bits entirely. There’s also some interesting stuff to link about LLMs creating conlangs; K Kleins video on trying to conlang with ChatGPT comes to mind, as does a paper I’ll have to track down on whether or not AI-generated conlangs have a tendency to follow Zipf’s Law (I believe their conclusion was that they do). More Powerful Tools and Languages For Interoperability\nI know that a lot of this website is about programming but, again, parts of these sections feel like they’re more about technology interacting with existing language than with the idea of language construction. I like the paragraph about how CD no longer really means compact disc, though. Why are we not pushing boundaries?\nSimilarly, there might be a bit to say here that ties in to even conlangs and neoscripts that don’t push the boundaries as much as Timescript or ColorHoney; the diacritic vs. digraph vs. neoscript pros and cons come up often in Conlang Critic, and even though Unicode is usually enough to make things like diacritics feasible (usually—looking at you, Poliespo), it still can make them significantly less convenient to type. There are some tools out there for conlanging (PolyGlot, akrantiain, lexifer, etc.) but many are either abandoned, extremely difficult for the less technically inclined to setup and use, or very limited.\nMy experience has been a good bit broader than that—the number of conlanging tools out there is certainly relatively pretty small, but idk, it doesn’t feel like “some.” You list lexifer as an example in a way that makes it seem isolated as a tool, when it’s like one of about 5 phonology/word generation tools I know. I would at least highlight more explicitly some tools that aren’t abandoned/difficult/super limited; Vulgar has its own problems but it’s not exactly any of those, and Lexicanter’s a really robust free tool I’ve started using recently that’d be worth a shoutout. When we think about language as any expression starting in the mind of one person and being passed to another and the influence of each choice along the way we can think about it a system instead of disparate parts.\nI’m not sure we don’t already think of it as a system instead of as disparate parts, unless there’s something else you mean by this. The conlangs and neoscript communities have been thinking about these things for a lot longer than the AI Large Language Model crowd and almost all creative endeavors could benefit from trying to absorb even a fraction of what conlangers and neographers have to offer.\nNo notes, very good concluding paragraph. I think the bigger thing I half-said in the .txt is that the transition from \u0026ldquo;this is about conlanging\u0026rdquo; to \u0026ldquo;this is about language and technology through a conlanging lens\u0026rdquo; (or however to best phrase that) isn\u0026rsquo;t made very clear, it feels like it\u0026rsquo;s snuck up on me almost. I\u0026rsquo;d either make that transition more explicit, make the language/tech parts more explicitly about conlanging, or both [7:13 PM]Vega: Ahh, that\u0026rsquo;s fair. What did you think about those parts in general (sorry, I can\u0026rsquo;t open the message.txt on my phone) [7:14 PM]Vega: *those being the tech bits [7:18 PM]ariaddox: Yeah most of my notes on them were about how they fit into the broader article; as stand-alone ideas though I really like the points you bring up. I\u0026rsquo;m with you on defining language pretty broadly and you\u0026rsquo;re really thorough about defending that, and I think really thorough overall in considering a bunch of different places linguistics and technology can impact/inform each other. Some sections leaned more on terminology that I\u0026rsquo;m less familiar with and I had to go back through and reread through those, which I think is mainly only an issue insofar as this is an article for a conlanging audience as well\nNeography \u0026amp; Conlangs:\nConstructed Information Exchange # What I want to explore on this page is the why someone might want to Construct their own language (conlang) - and/or make a new - or I guess you might say neo - script, and what we can learn from prior work. This includes everything from scripts and languages made for fantasy novels to programming languages, musical notation, and other fields that rely heavily on symbolic input methods. Then, because this site mostly caters to tech-centric audience, I want to tie it all together by looking through it all with a technology focused lens:\nSome Linguistics Context # At risk of turning this page into a linguistics lesson, I want to provide just a tiny bit of context and a mental nudge to recall that, yeah, language is incredibly diverse:\nSure, some languages may order things differently than English (orangeadj. catn. or gaton. naranjaadj.? ) or have grammatical gender, but there is a lot more to consider:\nWhat sounds are in the language? Does the language convey information in pitch or tone? (Like asking a question in English) Is this conveyed in the writing system (vietnamesetypography.com)? How many words for different colors are there? How precisely is time conveyed grammatically? Past, Present, Future? Far Past, Past, Immediately Past, Present, Immediately following, This day, This week, In this lifetime, Far Future? Are there any unfamiliar grammatical cases? Word length / Compounding Does the language go full German or Icelandic, or are words short and rarely to never compounded? Is the language written left to right, top to bottom?(1) Obviously, this is glossing over whole subjects and intricacies that linguists have spent lifetimes on and that I am absofuckinglutly (Hey, look at that, an infix) not qualified to talk about. My point is that there\u0026rsquo;s a lot of ground to be covered and explored for conlangs and neoscripts.\nAdditionally, I want to stress (pun intended) how important the International Phonetic Alphabet is. For the uninitiated, the IPA is like the weird symbols you\u0026rsquo;ve seen in dictionaries that tell you how to pronounce a word. For example, the word \u0026ldquo;knife\u0026rdquo; would be represented with /nīf/. This can be useful for everything from differentiating between accents and heteronyms (for example \u0026ldquo;tear\u0026rdquo;, like from your eye, is /tɪɚ/ while a \u0026ldquo;tear\u0026rdquo; like in fabric is /tɛɚ/ (at least for most English speakers)). Like any skill, it takes practice to be able to read \u0026hellip; sounds? words? Mouth positions? \u0026hellip; This is hard to talk about \u0026hellip; written in the IPA, but it\u0026rsquo;s absolutely worth learning.\nIf you want to get into conlanging, neoscripting, linguistics, or even just want to learn a new natural language, understanding the IPA will make your life easier.\nThe fantastic YouTube channel languagejones has just started a series about how to learn the IPA at the time of writing, and if you\u0026rsquo;re here I imagine you\u0026rsquo;d enjoy following along.\nThe official chart of the IPA from the International Phonetic Association, CC BY-SA 3.0 Exploring Existing work # I already have a page on this website about toki pona , one constructed language or \u0026ldquo;conlang\u0026rdquo; that I particularly enjoy. Being in its community I\u0026rsquo;ve been introduced to many interesting ideas in the conlang and the adjacent constructed scripts (conscript) communities - also sometimes called \u0026ldquo;neoscript\u0026rdquo;, I assume to avoid the existing usage of the term meaning to enlist in the armed services\nIn these communities, I have seen some absolutely unhinged ideas:\nOf course, most of what\u0026rsquo;s on display here isn\u0026rsquo;t this ridiculous. Some of these neoscripts are for conlangs - fully new languages that need their own writing system as no existing system would even work.\nSome only make new symbols for existing alphabets - like BurgerScript.\nSome dramatically challenge the idea of what it means to \u0026ldquo;write\u0026rdquo; something.\nSome are used for building a world and culture in a fictional story: like Elvish in Lord Of The Rings.\nSome are an attempt to make a writing system that fits an existing language better than systems used today.\nSome are made to allow for sharing or concealing messages in mediums that wouldn\u0026rsquo;t normally be thought of as places thoughts could be recorded at all.\nSome exist for the art of absurdity, with competitions to make the most cursed conlangs and neoscripts imaginable.\nConlangs # There are a few categories of conlangs:\nThose that try to act as \u0026ldquo;a global language for all\u0026rdquo;, formally called \u0026ldquo;International auxiliary languages\u0026rdquo; or IALs \u0026ldquo;Engineered Languages\u0026rdquo; usually try to make a language that\u0026rsquo;s all about making it as good as possible given some restrictions or intended use case. Arguably, IALs fall into this category. \u0026ldquo;Artistic languages\u0026rdquo; are those made primarily for their aesthetics or making a world feel more fantastical. Often these are used for TV, novels, comics, or other entertainment media. You\u0026rsquo;re probably familiar with more art langs than you realized, some of the more commonly recognized include:\nQuenya (Elvish), Sindarin (Elvish), and Khuzdul (Dwarvish) were made by J. R. R. Tolkien and used in The Lord of the Rings.\n            Dothraki and Valyrian by David J. Peterson, made for Game of Thrones, expanded into a full language from the bits in George R. R. Martin\u0026rsquo;s A Song of Ice and Fire.\nKlingon by Marc Okrand, made for Star Trek\nNaʼvi by Paul Frommer, made for Avatar\nOf course, those only account for the very highest tip of the iceberg.\nFor the purposes of this page, I\u0026rsquo;ll mostly talk about engineered languages as it\u0026rsquo;s harder to talk about what makes a given art lang interesting without turning into an art snob.\nLet\u0026rsquo;s look at a few languages quickly, just to see what exists:\ntoki pona - The language with only ~130 words. It puts all of its points into minimalism and works much better for real conversations than you\u0026rsquo;d think. Esparanto - The grand daddy of all International auxiliary languages, it now has 60,000 speakers. Kēlen - An attempt at a verb-less language. It also has a beautiful ceremonial alphabet which is more woven than it is written. Lojban - An attempt to make a language without syntactic ambiguity - that is, any sentence can only mean one thing. Fixing the Lesbian Vampire Killers problem. Are they? Lesbians that kill vampires. Killers of lesbian vampires. Lesbian vampires that are killers. Of course, I can\u0026rsquo;t reasonably explain how each of these languages works or why they\u0026rsquo;re interesting in only a few sentences, so I encourage you to click on those links!\nMoving on, let\u0026rsquo;s look at some scripts. To get started, I want to explain what kinds of writing systems exist then look at scripts that have particularly interesting applications - that is, scripts which exist because the typical writing systems don\u0026rsquo;t work well where they\u0026rsquo;re used.\nTypes of Writing Systems # Imagine you\u0026rsquo;ve sat down to make a writing system for a spoken language, but you know nothing about other writing systems. There\u0026rsquo;s a few approaches you might take. You might assume:\nEach sound should have a symbol (A Segmental system) Each Syllable should have a symbol (A Syllabic system) Each word should have a symbol (A Logographic system) You could, of course, mix some of the above - many natural languages do. You also might decide to leave some things out all together. For example, an Abjad is a writing system where the alphabet omits vowels. Ths wrks bttr thn yu mght thnk, and some natural languages do this (Arabic, Hebrew, Syriac).\nIf you want more in depth reading, see https://neography.info/writing-systems/.\nWhy look at both? # While it\u0026rsquo;s possible, and quite common, to only make a new writing system (using an existing language) or make only a new language (using an existing writing system) the two are still linked quite deeply. In part this is because if a language has a phonetic inventory (the list of sounds it uses) not seen in a natural language it may be easier to make a new script than not.\nBeyond that though, most people with the creativity to make language - particularly if it\u0026rsquo;s an artlang - want to have the vibe of the script taliored to reflect the vibe of the language.\n(Somewhat) Practical Neoscripts # There\u0026rsquo;s one of these you probably already know of, as you\u0026rsquo;ve probably seen a fair number of 7-segment displays in your life, and you\u0026rsquo;ve probably seen them used to represent Latin characters:\n󿜿 󿜆 󿝛 󿝏 󿝦 󿝭 󿝽 󿜧 󿝿 󿝯 󿝷 󿝼 󿜹 󿝞 󿝹 󿝱 󿜽 󿝶 󿜅 󿜞 󿝴 󿜸 󿜫 󿜷 󿝫 󿝳 󿝧 󿜱 󿜭 󿜇 󿜾 󿝪 󿝾 󿝉 󿝮 󿜛 󿝙\nNow, you could probably debate if this is a new script or just a font, since clearly the intent is to show Latin characters - but because of the limitation being so severe, I think it might count, albeit barely. This is an important distinction though, because we don\u0026rsquo;t want to consider every different font a whole new writing system!\nSo, more true to the actual spirit, lets start with HexCasting, a Minecraft mod which requires the user learn to write spells into this hexagonal grid,\nOkay, neat, sure, but maybe it\u0026rsquo;s a contrived example. It\u0026rsquo;s solving a problem that could\u0026rsquo;ve been done by just letting the user type out commands (albeit that would be less fun). So, what about working around a real limitation\u0026hellip;\nPixelscript exists for people working on pixel art. At extremely low resolutions, there\u0026rsquo;s just not room to add a normal signature and have it be legible anyway (2). Unlike with the 7-segment display Script/Font, this doesn\u0026rsquo;t try to look like an existing alphabet.\nFrom omniglot.com. Text is \u0026ldquo;All human beings are born free and equal in dignity and rights. They are endowed with reason and conscience and should act towards one another in a spirit of brotherhood.\u0026rdquo; which is Article 1 of the Universal Declaration of Human Rights Of course, there are other cases of fitting in writing when the tools or space for doing so are limited. A good example of this is Nailscript:\nAgain from omniglot.com, and again this is Article 1 of the Universal Declaration of Human Rights It simplicity in construction, compactness, and use of the 3rd dimension as nails lay over one another really pushed my intuition for what a script could be.\nWhen I tried writing my name I did realize you might want to wear ear protection when using this script!\nDecisions, Decisions\u0026hellip; # Languages and scripts have to make certain trade offs. None of these necessarily make any language or script \u0026ldquo;better\u0026rdquo; than any other, but if you have a goal in mind, there are areas where designing either to meet those goals may be difficult:\nFlexibility - Can you say what you actually mean? This can be a lack of vocabulary Ambiguity - Can what you\u0026rsquo;ve said/written mean more than one thing? This includes everything from the existence of sarcasm to homophones Cultural differences - Will someone from a different culture still get the same meaning? Of course, none of these are strictly bad things.\nMaybe you want a language that prioritizes simplicity, like Toki Pona Maybe you want a language that\u0026rsquo;s full of double entendres for writing poetry or lyrics Maybe you want cultural differences to be embedded in a language to make a point about two groups of people in a story. Flexibility: Western Music Notation # Sometimes people will say that \u0026ldquo;Musical notation is a universal language among musicians\u0026rdquo;\nand, uh, I have to call BS. It might be true that most musicians can read it, but that doesn\u0026rsquo;t mean it\u0026rsquo;s well suited to representing their art. It\u0026rsquo;s great fine if you want to convey the idea as expressible by the instruments of western traditions for classical arrangements, but it\u0026rsquo;s not universal, as I\u0026rsquo;m sure anyone who plays music with microtonal elements, complex timings, or where the timber of the instrument can be adjusted over time can tell you.\nFor example, here\u0026rsquo;s a track that uses microtonality. This look incredibly visually noisy. To some extent that level of visual noise is going to be present in any system with this level of flexibility, but that also doesn\u0026rsquo;t mean we couldn\u0026rsquo;t do a lot better. More over, reading music is a bit difficult to learn. This has lead to the \u0026ldquo;universality\u0026rdquo; of the notation being a lie as most any guitarist will be familiar with tabs:\ne|---------------------------------------------------------------| B|---------------------------------------------------------------| G|-----------------------------------2---------------------------| D|------------------2------4---5--4-------5---4--------2---------| A|---------------------------------------------------------------| E|---------------------------------------------------------------| e|---------------------------------------------------------------| B|----2--3--2--2-0-----------------------------------------------| G|--4--------2-------------0--2------0---------------------------| D|-------------------0---2------4--2---4--2-4--------------------| A|-----------------2--------------------------5---7--------------| E|---------------------------------------------------------------| Part of the theme for the Halo games, ripped from ultimate-guitar.com, which is a dumpster fire of a website which I will not link directly to. Which can have various flavors of markings, including using ~ for vibrato, putting X\u0026rsquo;s above the lines for palm mutes, / for sliding from one fret to another, etc. It\u0026rsquo;s a bit crude compared to sheet music and requires your guitar\u0026rsquo;s tuning match the one listed, but it\u0026rsquo;s quite easy to read.\nBut music today is often made in a piano roll,\nand has historically been made in trackers,\nIn either case, the notes can carry a lot of added information - pitch bend (now sometimes per-note) and multiple data streams to represent the virtual turning of knobs. That interface is a writing system of sorts - you could even argue different input devices and instruments, as long as they\u0026rsquo;re just giving a computer digital data, are really just different writing utensils.\nThere have been some efforts to make new music notation systems Hummingbird and Clairnote both make changes (which may be good or bad, depending on who you ask) to the existing common music notation system, but don\u0026rsquo;t really attempt to totally reinvent the wheel. Dodeka goes a bit further, but mostly feels like an advert for a piano that just flattens the keybed. Regardless, I think there is value in at least trying to make a system easier to read and write even if it doesn\u0026rsquo;t improve the overall flexibility.\nI should also point out there are other musical notation systems from cultures I am less familiar with. The Musical Notation Wikipedia page shows some of these, but I\u0026rsquo;m not even sure how to go about research most of these in depth. This also ties into how the term \u0026ldquo;music theory\u0026rdquo; isn\u0026rsquo;t very good at describing modern music so much as the harmonic style of 18th century European musicians (Adam Neely, YouTube).\nIt seems like the shared, universal language isn\u0026rsquo;t all that shared or all that universal - let alone flexible enough to convey what we need.\nI\u0026rsquo;m also not going to pretend that I know enough to take my own crack at making something that\u0026rsquo;s better outside of maybe one niche use case. Tantacrul recently made a video where he very persuasively argues that while what we have has it\u0026rsquo;s flaws, it\u0026rsquo;s currently pretty much the best option there is. He rightfully pointing out that while a lot of digital music is produced in a piano roll today, no musician would want to try to read that as notation live to perform a piece, and has similar rebuttals for other points I\u0026rsquo;ve made. He also points out that many, many, many tech bros have thought \u0026ldquo;Hey, I can do better\u0026rdquo; without actually understanding why things are the way they are often resulting in them making notation systems which are dramatically less flexible or usable.\nI\u0026rsquo;m not sure what a new language for expression music would like nor do I know how software for writing it would maintain a reasonable degree of usability, but I did find some interesting existing tools that give it a good shot:\nKarya \u0026ldquo;One way to look at it is a 2D language for expressing music along with an editor for that language.\u0026rdquo; Jird \u0026ldquo;Jird is a little language for writing and hearing music in just intonation. It uses ratios to express frequencies, durations, and volumes.\u0026rdquo; Somewhat related, SMuFL is standard used to display musical notation - it\u0026rsquo;s basically just a really clever way of (ab)using fonts and I think it\u0026rsquo;s neat.\nAmbiguity: Emoji + Dialects # Okay, but, what about Emoji? 🤔 Well, yeah, they\u0026rsquo;re a writing system. They may not be incredibly precise if the exact symbol you need doesn\u0026rsquo;t exist, but they can be rather information dense.\n👔💼🔜🏠👉👌 👨‍❤️‍💋‍👨 🍑🍆❓\nIs a pretty clear message.\nClearly talking in only emoji wouldn\u0026rsquo;t really be ideal, but it\u0026rsquo;s still wrong to discount it outright as a conlang/writing system (or would it be a natlang?)\nBut, it does have a massive problem: it doesn\u0026rsquo;t display consistently on different platforms. It boggles my mind that it\u0026rsquo;s a crap shoot for if 🏳️‍⚧️ is a trans flag, or a trans symbol followed by a white flag (⚧️🏳️). Pride or surrender? Similarly, the Windows operating system is cool with gay pirates, 🏳️‍🌈🏴‍☠️, but no country flags will render correctly (though it is possible your browser will compensate, here\u0026rsquo;s a US flag: 🇺🇸). More complicated yet, will the Taiwan flag (🇹🇼) render if you\u0026rsquo;re in China? Doubtful.\nThis means the medium itself isn\u0026rsquo;t reliable.\nWe can more-or-less equate this with dialects or jargon. If you read the word \u0026ldquo;Biscuit\u0026rdquo; you may be thinking of a cookie or a scone depending on which side of the Atlantic you\u0026rsquo;re on.\nCultural Differences: Tone markers \u0026amp; txting styl # If I\u0026rsquo;m in the car with someone and they ask me to send a text for them, I get uncomfortable because I don\u0026rsquo;t know how they text.\nThink about texting someone young that you\u0026rsquo;ve texted every day for years, they probably don\u0026rsquo;t normally put full stops/periods at the end of sentences, so when they text\nHey. We need to talk.\nThat\u0026rsquo;s a different text from\nHey we NEED to talk\nWhich is different from\nhey we need 2 talk\u0026hellip;\nI think most people would find any of the above alarming, but 1. probably has you going \u0026ldquo;Ah shit.\u0026rdquo; while 2. has you frantically trying to figure out why and hoping that it\u0026rsquo;s not something you did, while 3. might have you concerned about their happiness. Tom Scott has a good video on this.\nSome languages do have honorifics and formality - such as tú vs usted in Spanish or how Korean can even change verb conjugation,\nI really hate languages that do this in this particular way. The common rule of this traditionalist respect your elders attitude directly conflicts with my strongly held beliefs that people earn respect independently of position of power or age. Hell, I\u0026rsquo;m likely to respect some one in a position of power less than one without it unless they\u0026rsquo;ve proven to me that they\u0026rsquo;ve earned that position rightfully. but a conlang could do something new and instead encode something like the speaker\u0026rsquo;s view of the listener into the verb. For example, there could be a new punctuation mark, lets make these up real quick as a very low effort bodge onto English:\n𑙧 → The speaker is experiencing a high energy negative, emotion in relation to the primary action ⁝ → The speaker is experiencing a low energy negative emotion in relation to the primary action ᥄ → The speaker is experiencing a low energy positive emotion in relation to the primary action ! → The speaker is experiencing a high energy positive emotion in relation to the primary action Now, let\u0026rsquo;s make some new sentences:\nI woke up late this morning𑙧 The speaker is grumpy, presumably having missed something by over sleeping I woke up late this morning⁝ The speaker is bummed to have lost part of the day I woke up late this morning᥄ The speaker is thankful to have slept in I woke up late this morning! The speaker has more energy than usual and has extra for the day some \u0026ldquo;bring it on\u0026rdquo; attitude. Could there be ambiguity in these? Of course. It\u0026rsquo;s also likely people would either be lazy and not use them (defaulting to just a period) or would use other \u0026ldquo;hacks\u0026rdquo; like we already do to imply sarcasm or tone, ranging from the less-than-ideal tone markers (Which work absolutely perfectly /s) or just quoting out a word like in \u0026ldquo;You sure do have \u0026lsquo;interesting\u0026rsquo; taste in romantic partners\u0026rdquo;. These also don\u0026rsquo;t cover every option or even fully fix the problem in the \u0026ldquo;Need to talk\u0026rdquo; example - to do that we\u0026rsquo;d probably need to double or triple the number of punctuation options to indicate if it\u0026rsquo;s directed at the listener, a 3rd party, or strictly internal - at which point it probably makes more sense to make verb conjugations instead of attaching it the sentence as a whole…\n… have I mentioned that language is complicated?\nCultural Differences Bonus Round: Gender # He/Him She/Her Xe/Xem/Xyr Ze/Sir Fae/Faer They/Their \u0026hellip;\nDifferent people have a different level of acceptance of different pronouns\u0026hellip; because something-something culture war? Regardless, conlangs may provide different pronouns, often either adding one for non-binary individuals or just using a unified, un-gendered pronoun. (3)\nIf this sounds difficult, just remember, the correct way to refer to someone in any language is whatever they want you to use, just like in English!\nIf you want a deep dive into pronouns, I recommend this video from Language Jones (YouTube).\nIf you\u0026rsquo;re interested in some of the data relating to how these pronouns are used check out https://www.gendercensus.com/results/2022-worldwide/\nWhy Someone Would Make Their Own Language (or script) # Before we get in to any of the concrete reasons, it\u0026rsquo;s important to acknowledge someone may make a conlang or neoscript for no other reason than the joy of the act of creating. Still, most people will have an end goal in mind or a challenge in the design. Let\u0026rsquo;s look at some motivations.\nHiding Messages # Hiding messages is an art form of itself, and can have a myriad of different requirements:\nMaybe you want any onlooker in the know to be able to decode the message Maybe you want it to be difficult to see there\u0026rsquo;s a message at all Maybe you want it to be obvious there\u0026rsquo;s a message and make it difficult to decode This does start to go into a conversation about steganography (Wikipedia). (4)\nSteganography is the practice of representing information within another message or physical object, in such a manner that the presence of the information is not evident to human inspection. In computing/electronic contexts, a computer file, message, image, or video is concealed within another file, message, image, or video. - Wikipedia I have even made a tool for hiding binary data into the least significant bits of .WAV files (and it\u0026rsquo;s even GPU accelerated!), and I suppose that means you could do something like stack ideas, using one of the few-pixel fonts with a binary data visualization tool like hobbits (pictured) but that\u0026rsquo;s a bit meta. Example image from the Hobbits GitHub repo To avoid losing the topic of this page though, there are a few scripts which fill this function. Babuk, for example, can be used to hide messages in a game of Go.\nArguably Morse code could be lumped into the \u0026ldquo;for hiding messages\u0026rdquo; category too, but it\u0026rsquo;s often pretty obvious.\nBetter Serving Disability # Vision: Braille \u0026amp; Screen readers # Screen readers # I don\u0026rsquo;t have much to say about screen readers as I have little experience with them; however, it\u0026rsquo;s notable that text-to-speech engines are rapidly advancing and this may make them better at handling uncommon inputs and conveying emotion or stress, especially when content authors properly mark up their content to support it. The AI boom may have its downsides, but I\u0026rsquo;m all for better assistive tech!\nBraille # It\u0026rsquo;s not reasonable to expect that people with vision disabilities always have their ears occupied by whatever they\u0026rsquo;re reading or be listening out loud and potentially disturbing others. Also, it\u0026rsquo;s not exactly practical to have every sign include an embedded speaker repeating the same word forever. So, braille exists.\nBraille is mostly just a font, but there are some special rules, mostly for contractions to make common words shorter.\na-z0-9: ⠁ ⠃ ⠉ ⠙ ⠑ ⠋ ⠛ ⠓ ⠊ ⠚ ⠅ ⠇ ⠍ ⠝ ⠕ ⠏ ⠟ ⠗ ⠎ ⠞ ⠥ ⠧ ⠺ ⠭ ⠽ ⠵ ⠚ ⠁ ⠃ ⠉ ⠙ ⠑ ⠋ ⠛ ⠓ ⠊\nBeing that I\u0026rsquo;m not vision impaired and that I can\u0026rsquo;t read braille, it\u0026rsquo;s hard for me to know what is good or bad about it, but, I do know there\u0026rsquo;s a real problem with the cost of braille displays. Even the least expensive option I could find was ~$700, but that one only displays 20 characters at a time. I also don\u0026rsquo;t know if there are programs to make these devices more affordable. If you know more, please reach out to me! I\u0026rsquo;d love to hear about your experience.\nI had the probably-too-obvious question of why not just not use a single character \u0026ldquo;display\u0026rdquo; that changes under the finger - or even better - let it encode to each finger, resting on the keyboard, like \u0026ldquo;bumping\u0026rdquo; the key in the home row? From what I gather, it\u0026rsquo;s a bit too hard to feel it when it changes dynamically compared to being swiped across the finger? I did find someone else had the same idea back in 2007, but it doesn\u0026rsquo;t look like it went anywhere.\nWhile I don\u0026rsquo;t think it\u0026rsquo;s overly practical, I do like the concept behind this typeface which can be read as braille or Latin characters.\nDeaf: Sign Languages # There is a common misconception that sign languages are somehow dependent on spoken languages: that they are spoken language expressed in signs, or that they were invented by hearing people. [\u0026hellip;] Instead, sign languages, like all natural languages, are developed by the people who use them, in this case, deaf people, who may have little or no knowledge of any spoken language.\nAs a sign language develops, it sometimes borrows elements from spoken languages, just as all languages borrow from other languages that they are in contact with. [\u0026hellip;]\nOn the whole, though, sign languages are independent of spoken languages and follow their own paths of development. For example, British Sign Language (BSL) and American Sign Language (ASL) are quite different and mutually unintelligible, even though the hearing people of the United Kingdom and the United States share the same spoken language. The grammars of sign languages do not usually resemble those of spoken languages used in the same geographical area; in fact, in terms of syntax, ASL shares more with spoken Japanese than it does with English.\n- Sign Language on Wikipedia Of course, there are constructed languages with sign languages where there is a stronger tie though. The example I\u0026rsquo;m most familiar with, and have seen people conversing in, is luka pona by jan Olipija which is derived from the previously mentioned toki pona .\nAnd, just like with non-sign based conlangs, there\u0026rsquo;s attempts to make an International Sign Language which looks about as successful. International Sign isn\u0026rsquo;t totally a conlang though, as it\u0026rsquo;s more of a Pidgin.\n- oh, right, Pidgin:\nFundamentally, a pidgin is a simplified means of linguistic communication, as it is constructed impromptu, or by convention, between individuals or groups of people. A pidgin is not the native language of any speech community, but is instead learned as a second language. - Pidgin on Wikipedia Bridging the worlds of conlangs and sign languages a bit further, the most fully developed equivalent to the IPA for sign languages - the Sign Language International Phonetic Alphabet, or SLIPA - was developed by David Peterson, the same David Peterson that made Dothraki and Valyrian.\nSame language, new system # Intriguingly, some neoscripts use an existing language but instead of just mapping the letters to new symbols change the way we think about a \u0026lsquo;character\u0026rsquo; all together.\nExample text in Fontok. Again, this image is from omniglot and is Article 1 of the Universal Declaration of Human Rights Of these, I particularly like fontok which adds a significant number of characters as each sound (not character) in English is given its own symbol. Of course it doesn\u0026rsquo;t hurt that text written in fontok is breathtakingly beautiful. Similarly, I\u0026rsquo;m a big fan of this unnammed script by u/mastefka (5):\nOf course, if you go looking you\u0026rsquo;ll find many others. These vary in their intent. Some writing systems aim to be international, mostly by giving a symbol to every letter in the IPA. Clearly, this comes at the cost of adjustments that best suit any given language.\nWorld Building \u0026amp; Art # I suspect that almost all who stumble into the world of conlangs and neoscripts is first introduced to their existence though works of fiction where a constructed language plays a big part - be it on of J. R. R. Tolkien\u0026rsquo;s from the Lord of the Rings trilogy and related works, such as Quenya (which is written in Tengwar),\n            This font is Fairfax HD by KreativeKorp, which is licensed under the open font license It is used for all of the conlang displays on this page which are not static images. Some of the examples on this page are also copied directly from that page. or Orwell\u0026rsquo;s Newspeak.\nIn The Art of Language Invention by David J. Peterson - the guy who made Dothraki for A Song of Ice and Fire / Game of Thrones - discusses how Dothraki wasn\u0026rsquo;t just a jumble of foreign looking language ideas but was informed by the culture of its fictional speakers and built up around their ideas and values. This same attitude applies to the script which is on omniglot as well. This is a pretty common among nearly all languages made for world building: like natural languages, they\u0026rsquo;re influenced by the culture of the people they\u0026rsquo;re invented to be used by.\nI find it interesting that this can be true for both scripts and languages.\nLanguages can evoke cultural context in many ways, but some of the easier to consider points include:\nHow are different classes of people portrayed? Are any/all genders and species treated equally in language? Are classes of people (slaves? kings?) given less expression (ex: no gender for slaves) Are there words for specific good or bad things that don\u0026rsquo;t exist in natural languages because they\u0026rsquo;re not very common? For example in a fantasy novel with magic, maybe people feel a different kind of exhaustion when they\u0026rsquo;ve used a lot of magic. This may use a new word rather than \u0026ldquo;tired\u0026rdquo; that more directly states the cause and sideeffects. Has the language adapted around some large event as a time base? For example, an extra tense could be added that\u0026rsquo;s specifically for before, after, or during some major war. Scripts can be reflective of the culture\u0026rsquo;s priorities. Do they value something easy to write due to a lack of easy tool use? Scar, for example, looks to be a good option for creatures lacking the dexterity afforded by fingers. Does the language need to be used by both machines and biological life? 12480 might work for that.\nOr, a script can intentionally mislead for artistic reasons:\nChiri was invented by Jay Tamar for the webcomic \u0026ldquo;Passing Human\u0026rdquo;. [\u0026hellip;] The language juxtaposes a flowing script with a harsh sound to represent the beautiful surface but deadly interior of the Chiri society.\n- Chiri on Omniglot.com Of course, even for humans just having a new script and language alone can go a long way.\nInterestingly, even the discussion of language itself can be moving and artistic, as anybody who has seen Arrival (2016) can attest to,\nArrival Spoiler: The movie revolves around humans trying to communicate with aliens that can only talk by making these floating ink rings. More fundamentally though, a script with meaning only to the author can still be beautiful. The calligraphy and attention to detail can still be inspiring even if the viewer doesn\u0026rsquo;t know the full meaning. Hell, sometimes not knowing the meaning can be a statement in itself - making a script that looks like an existing language for commentary on a culture isn\u0026rsquo;t unheard of. Some artistic pieces will use a new writing system just because it\u0026rsquo;s beautiful, and that\u0026rsquo;s enough.\nConlangs aren\u0026rsquo;t restricted to use in the pages of stories or on the screen either. If you look for it there is an astonishing amount of incredibly well produced music made in many different conlangs.\nMy favorite conlanging musician is jan Usawi. They release some absolute bops that are sung in toki pona:\nsina by jan Usawi On top of this, some tools which effectively have their own language for interacting with them can inspire new art because of the limitations or paths of least resistance of the language. On that note,\nWhat We Can Learn # Domain Specific ~Languages~ # In programming, there\u0026rsquo;s this idea of domain specific languages. These are programming languages that don\u0026rsquo;t really do everything - instead they do one thing really well.\nWhy are there different programming languages anyway? I realize that not everyone reading this may know a programming language so you be a bit confused as to what makes a language \u0026ldquo;domain specific\u0026rdquo; or even what it would mean for a programming language to not be domain specific.\nFor general-purpose programming languages - that is, languages which are meant to be able to be used to solve most any problem there\u0026rsquo;s a whole host of reasons a programmer may pick one over the other, but more often than not the reason that dominates is where will the code be running.\nFor example, if you want to write code that runs on the web, you\u0026rsquo;re more-or-less stuck using JavaScript because it\u0026rsquo;s the only language that can modify elements on the page. If you\u0026rsquo;re writing code to run on a small microprocessor like would be in a smart-lightbulb or in your mouse or keyboard, that will probably be written in C because it\u0026rsquo;s likely the only one that has official support for generating instructions the processor understands.\nAssuming you still have more than one option after deciding where the code will run, you might be limited by other restrictions such as:\nHow fast does it need to run? For example, you may have to use a harder-to-write but faster-when-running language like C, C++, Rust, or Go because you need to crunch a lot of data. Do you need to use code written by others? For example, AI stuff is mostly stuck in Python because other AI stuff is in Python All of this is to say there are different languages because there\u0026rsquo;s trade off to be made. Some prioritize speed of execution, some prioritize being easy to write and read, some prioritize compatibility with many systems.\nWhat makes domain specific languages different is they\u0026rsquo;re focused not on where they run or how fast they run (although they\u0026rsquo;re usually quite fast) but instead on what data they process. There are DSLs for checking if text matches a given pattern, drawing diagrams, describing how hardware logic should be wired up, or - as mentioned above - describing a musical compositions so that it can be rendered to sheet music.\nTypically - but now always - DSLs are embedded into a general purpose programming language to do the heavy-lifting where doing it with the more general purpose language would be much more work.\nThe most famous two are regex (Wikipedia) for processing text and SQL (Wikipedia) for working with databases. I think you can apply that idea can apply in other niches too. If you think about speech vs writing vs signing vs braille and how each can have multiple co-existing (or competing) standards / systems, it\u0026rsquo;s really not a stretch of the imagination.\nMy friend jan Usawi recently made a fantastic language called Rhapsodaic which is detailed on this website, but as a TL;DR: Rhapsodaic, as a core design philosophy, values preserving emotional meaning over all else\u0026hellip; and I mean all. It means the actual meaning might will be ambiguous, but you\u0026rsquo;ll definitely know how the speaker is feeling and it can be said more accurately than in most any other language. It\u0026rsquo;s also very pretty as a script.\nWhere I see it as particularly interesting is using it along side a native language to either add context or clarity to something that\u0026rsquo;s already written or have it be intermixed, mid sentence, with the native language as necessary - similar to how Regex and SQL are used in programming, sprinkled into other code written in a more capable but less in specific purpose language.\nFrankly, I find it remarkable how well this analogy work out. Both programming DSLs and some engineered conlangs (such as Rhasodaic) share the common attributes of being purpose-driven, having a specific grammar and syntax, and - provided enough experience with them - are more concise for their application than the more general purpose alternatives.\nThis really got me thinking about what else we could do to make specific languages for talking or writing about different subjects. Arguably this is already common as systems for expressing trade knowledge are common,\nMusician → musical notation\nElectrical engineer → circuit schematics\nChemical engineer/Chemist →chemical drawings\nBut if we think about each of those, there are tools for working with them to make it easier than writing/drawing them by hand,\nMusicians can use digital audio workstations or musical composition software which allows them to playback the music as they alter the composition.\nElectrical engineers will use schematic entry software and simulation software such as circuitjs\nChemists have various tools for entry, like chemdraw\nOf course, there are many tools out there and I don\u0026rsquo;t think it\u0026rsquo;s unreasonable to consider each a different dialect, some more closely related than others.\nBringing this back around, what if we made software packages for language entry? Something that does more than just grammar and spell check but rather helps us consider how to think about complex ideas. Definitely not like Grammarly, sorta like Chat-GPT, but really I\u0026rsquo;m thinking about more tools like prosodic (GitHub)\n################################################ ## welcome to prosodic! v1.5 ## ################################################ \u003e\u003e [0.0s] prosodic:en$ When I was a young boy 000001\twhen P:'wɛn S:P\tW:H 000002\ti P:'aɪ S:P\tW:L 000003\twas P:wɑz S:U\tW:L 000004\ta P:eɪ S:U\tW:L 000005\tyoung P:'jʌŋ S:P\tW:H 000006\tboy P:'bɔɪ S:P\tW:L \u003e\u003e [7.43s] prosodic:en$ /parse text parse meter When I was a young boy when|I|was.a|YOUNG|boy wswwsw Or Catala which is more-or-less used the other way around: to translate legal documents into an intermediate semi-human readable format for verification of the ideals behind the law that can then spit out code in typical for working with data as outlined by the laws. The obvious use case being for taxation.\nI think there\u0026rsquo;s still a lot of room for advancement here. For example, imagine if we could have a sort of \u0026ldquo;craft an emotion\u0026rdquo; dialogue that can help people write Rhapsodic?\nBut, I do want to wrap back around to that programming idea briefly. There are some programming languages that are pretty radically different in the way we input and output information, so while they may not be \u0026ldquo;writing systems\u0026rdquo; in the traditional sense, I think they\u0026rsquo;re worth a look in this list.\nOpen SCAD is a tool for making 3D models (typically for later 3D printing) that uses code to define the shapes Geometry Nodes\nLigatures? Old school ASCII art fonts. Emoji + unicode, Visual programming (node based)\nZoia, VCV\nI think it would be a disservice to my readers not to mention just how unhinged some of these can get. Some of the most interesting I\u0026rsquo;ve seen are:\nMpiua Tiostouea: \u0026ldquo;The language of time travelers\u0026rdquo; tiduna,xal: A language with only adjectives where speakers require a potentially infinite amount of mouths. Both of which I\u0026rsquo;ve embedded the video showcases for here. Additionally, I thought these were quite neat:\nG̊riǵe T̊s\u0026rsquo;́ê\u0026rsquo;êt̊i: A language spoken that can be spoken without a voice box θͬæͬɐ̃ͬχ̓ɤ̞̃ɐ̃ͬlͬ: 🥐🥖 Math # Knowing the audience for my website, you were probably mentally screaming above that I didn\u0026rsquo;t mention the most obvious domain with it\u0026rsquo;s own language: Math.\nPersonally, I think the definition of what should be considered language should be pretty board. It clearly includes this text itself and most of the writing systems above. It obviously includes speech, braille, sign language, and I think most would agree that both math and music constitute \u0026ldquo;language\u0026rdquo;.\nNow, this isn\u0026rsquo;t to say there aren\u0026rsquo;t some definitional lines. I don\u0026rsquo;t think I\u0026rsquo;d consider a video a language - a medium on which multiple different languages can be expressed, sure - but not a language itself. The line can get blurry though, especially as you dive into data visualization and interactive content.\nRegardless, I think it\u0026rsquo;s worth considering how interesting math is as a language. I could tell you about how it\u0026rsquo;s a \u0026ldquo;universal language\u0026rdquo;, but is that even true? Probably more so than for music, but not entirely: some languages alive today do use base 20 to varying degrees - French only kind of does, while Dzongkha, for example, is true base 20 - but if we ignore that, different symbols for the same things, and any system that\u0026rsquo;s just modern math but without ⠀⠀⠀⠀ then, yeah, universal I think is fair. When the Cosmic Calls were made in \u0026lsquo;99 and \u0026lsquo;03, we made some new symbols for displaying mathematics, but sent a message that we thought could be reconstructed to unambiguously show that intelligent life had sent the messages. I highly recommend reading about it (PDF) .\nWhat makes this interesting is the scope of what mathematical notation can convey in ways that most natural languages really struggle to do cleanly. For anything even remotely complicated to be understood it is to difficult for most mere mortals to process math without writing down anyway. For example if I say,\n\u0026ldquo;One method for computing pi is to take the square root of twelve time the infinite sum, from zero to infinity, of the fraction whose numerator is the quantity negative one third raised to the index of the sum and whose denominator is the doubled index of the sum plus one.\u0026rdquo;\nI would think most people would have to write it down to have the slightest idea of what I just said, where if you\u0026rsquo;re already used to reading mathematical notation,\n\\(\\pi ={\\sqrt {12}}\\sum _{k=0}^{\\infty }{\\frac {(-{\\frac {1}{3}})^{k}}{2k\u0026#43;1}}\\) \\(\\LaTeX\\) was used to format this math, it's pretty much the language for typesetting math digitally. is comparatively simple.\nGoing a bit meta, the math above is rendered with \\(\\LaTeX\\) . This means we have a pseudo-programming language, so depending on how you look at it this is language used to write a different language. I don\u0026rsquo;t think that disqualifies either as languages (or at least writing systems) after all, if you have Google Translate translate something from English to Spanish, (and it works) it\u0026rsquo;s not as if we think of the result as just \u0026ldquo;modified English\u0026rdquo; - it\u0026rsquo;s Spanish.\nYet, there is still some fun to be had in this line of thought. If I type out\n\u0026ldquo;Hello World\u0026rdquo;\nThat string of text is transferred across the great series of tubes in a binary encoding. Does that make binary - or any base for that matter - it\u0026rsquo;s own language? What if we have some agreed upon meaning for the binary, like we do for Unicode for text? Is it a writing system, a language in itself, or neither?\nDoes showing an audio spectrogram qualify as a writing system? I think it can. Someone trained to do so could absolutely look at waveform or spectrogram of a recording to understand what was being said - this idea has been taken further, see Elektrum (omniglot.com) but, say you literally show the raw spectrum, should that count as a script if others were trained to write it by hand? Is having others be able to write it by hand necessary for that definition?\nThis quickly devolves into interpreting encodings as their own \u0026ldquo;language\u0026rdquo; which, like, I guessssss could have an argument made for, but it\u0026rsquo;s a stretch. Still, I think there\u0026rsquo;s value in the metaphor, and especially for the technically inclined, thinking about encodings and APIs as forms of communication and taking inspiration from the conlang and conscript/neoscript community can only stand to bring about clever, innovative ideas in storage, compressing, representation, and elegance. I think that\u0026rsquo;s an idea worth being open to, even if only in some double-think way where you don\u0026rsquo;t actually believe it.\nHow does this tie in to the current AI boom? # I don\u0026rsquo;t know if tools like ChatGPT will be something we all use every day. I also don\u0026rsquo;t know if I like it. I have a big ol\u0026rsquo; blog post about it, Does It Still Count As A Tool? , of which the TL;DR is that I like computers to be deterministic and to feel in control, but using natural language makes me feel like I\u0026rsquo;m losing some of that, but I also appreciate its utility.\nI do wonder if there\u0026rsquo;s room (or necessity) for changes to languages and scripts to fill in some gaps here? Maybe we could use new language ideas to get more utility out of the models.\nOne idea that comes to mind for me is putting tone indication or other elements into the UI, that way the model can convey at least some of the emotional and facial cues that are so important to face-to-face communication.\nAI systems could incorporate symbols or icons to indicate the tone of their responses. For example, a thumbs-up symbol could represent a positive or affirmative tone, while a warning sign could indicate caution or a serious tone. These visual cues help users quickly grasp the intended tone of the AI\u0026rsquo;s message, even without relying on punctuation or writing style variations. I think applying this the other way could be interesting too. What if we had bots to tell us what the tone of a received message probably is? As an accessibility tool that could be useful. Going a little into black-mirror territory, this could even be used to intentionally filter things. If the text to be shown is interpreted as being overly persuasive and so likely to be advertising, it could be rendered in a different font so the user can be trained to know to take it with a gain (or heaping pile of) salt. This could get pretty nuts.\nIt\u0026rsquo;s also worth considering how conlangs can be used to abuse large language models. For example, my friend Cadey Ratio went to DefCon31 and figured out xe could get the model to repeat misinformation by talking to it in toki pona or Esperanto.\nThere could be some neat ideas that spring from using LLMs for creating new conlangs or understanding nearly-dead nat-langs. One idea that I really like is having an LLM make a reasonable language that no human knows but which could be analyzed from context to try to learn on the fly. This could be useful for a video game, for example, so that it\u0026rsquo;s a different language every play through. I think this could a great way to make rougelikes more fun.\nWhile I don\u0026rsquo;t want this to devolve into a why LLMs are cool/not-cool, I think it\u0026rsquo;s notable that they are allowing people to do things they may otherwise lack the skill to do or do quickly - like what the BlenderGPT or Spellburst can do. While these are interesting, I think there\u0026rsquo;s a lot more to come, if people can open up to using it for more than a chat bot , search, summarization, and essay writing utility. That is, if people can come up with more actually new ideals for how to use them, and I think exploring using conlangs and neoscripts with LLMs might at least be a baby-step in that direction.\nFinally, ignoring the conlang-centric-ness of this page for a moment, Maggle Appleton\u0026rsquo;s LM Sketchbook concepts are the first things I\u0026rsquo;ve seen where an LLM could really actually make even non-fiction writing significantly better and really acts like a tool instead of trying to replace the author outright.\nCompletely new forms of expression # Language and the symbols we use to communicate influence the way we think and how we approach problems. If we think of instruments as a writing utensil of sorts, the difference between a guitar and a piano are more than just their sound it\u0026rsquo;s how we interact with them leading to some expressions being easier and harder.\nI\u0026rsquo;ve already mentioned Rhapsodic allowing for much more emotional expression than existing languages (albeit at the cost of other functions) but I also love how the musical sequencing programming language ORCΛ pushes boundaries of creative expression in music. I\u0026rsquo;d love to see more tools like this applied to other interests and artistic endeavors.\n\u0026hellip; something about 5D chess may fit here, since we can sort of think of chess as a language?\nMore powerful tools # If I can get you to buy the idea that programming languages are just domain specific languages in the context of broader human language, that would mean that we can consider unconvential not-what-you-normally-think-of-when-you-think-about-programming-languages-languages as languages too, at least if you squint a little.\nBy this I mean things like Blender\u0026rsquo;s Geometry Nodes or Pure Data,\n[TODO nested PD, Geometry Nodes screen shots]\nAdditionally, there are countless tools that allow events to be scripted with Lua or another embedded programming language. What would it look like to apply concepts from natural languages (and maybe a little LLM magic) to these tools?\nIn programming, one thing engineers have to deal with a lot is naming functions and data. We sort of end up creating our own little languages for each project, where a foo_bar_comparator takes in a foo and bar. What a foo and bar even are, as a concept, is defined by the programmer and eventually we end up abstracting these ideas so much that new things just \u0026hellip; exist. We accept the names as new terms.\nTake things like \u0026ldquo;the internet\u0026rdquo; or \u0026ldquo;a CD\u0026rdquo; - even if we know what CD stands for (Compact Disc) we don\u0026rsquo;t think of it as that anymore. It\u0026rsquo;s just\u0026hellip; a CD. The internet isn\u0026rsquo;t some vast network of inter connected computers it\u0026rsquo;s just the internet. We\u0026rsquo;ve abstracted these ideas to the point we just accept them as broad concepts, becoming new words in their own right.\nIf we lets users do this as they work calling groups of complex ideas a new term and letting them work with these components, we can expand upon this natural process of levels of abstraction.\nTaking this further, each user can optimize their typing using text expansion software. This means doing things like replacing commonly typed words and phrases with smaller strings of letters. For example, you could make it so that typing \u0026ldquo;brb\u0026rdquo; replaces those letters with \u0026ldquo;be right back\u0026rdquo;. This can be taken to extremes like the Compress tool from Erik Schluntz helps you do. Or you could go all in and learn Stenography, which is more-or-less the same idea on steroids\nBy allowing users to really dig in and extend the functionality of programs by defining new concepts that make sense in their workflow and then letting them reuse those ideas later tools that are made to be general purpose can evolve with the user\u0026rsquo;s needs and experience to become more powerful for exactly how they use it - this is what \u0026ldquo;power users\u0026rdquo; of most any program always want.\nLanguages For Interoperability # While I\u0026rsquo;ve beaten the \u0026ldquo;universal language\u0026rdquo; dead horse already (music, math) I do think language can serve as a method of allowing for interoperability so long as you restrict it enough - like programming languages or configuration languages (JSON, YAML, etc) do. A good example of this is the Theme Format from Hundred Rabbits where a simple SVG is used as a drag \u0026amp; drop color theme system for most of the applications they have developed and a growing list from others. This is particularly clever because it means the list of colors for the computer is also an image format that can be displayed in any browser, making for already built in previews.\nHundred Rabbits also often makes their applications speak amongst each other, usually over UDP, allowing for creative applications such as using their music sequencer, ORCΛ (as shown above) to control their vector act tool, Dotgrid (6) where you just send the same command you\u0026rsquo;d normally run, but over the network. Making these sort of languages of communication between applications that are meant to be human readable I think is an idea more software could stand to take to heart, and is the same reason why so many Linux users feel so at home in the terminal: text is used as a common way to exchange data quickly between programs and it does use a learned vocabulary of command commands, like any other language.\nHuh? I realize I got very technical there, so let me explain. Imagine you have a program called read. All this program does it output the text of the file provided to the display, so you could run the command\nread my_short_story.txt\nNow imagine you have a command called replace which replaces one word with another in any text piped into it. By piping, I mean it can take the output of a previous command and pass it to the next one. To do this operation, lets use the | character. So, we could run\nread my_short_story.txt | replace teh the\nto correct any mistyped \u0026ldquo;teh\u0026rdquo; into the word \u0026ldquo;the\u0026rdquo;.\nNow imagine you have a whole suite of more intersecting commands, ones that let you look for patterns like using [bc]at to find the word \u0026ldquo;bat\u0026rdquo; or \u0026ldquo;cat\u0026rdquo; but not \u0026ldquo;rat\u0026rdquo;, or letting you count the number of lines, or convert the file into a PDF. You can make these large chains out of existing programs, which is pretty sweet. This is more-or-less how using a command line on a MacOS or Linux system works.\nWhy are we not pushing boundaries? # Defaults are powerful. It\u0026rsquo;s why United States v. Microsoft Corp. in 2001 was a problem in the first place. It\u0026rsquo;s why making it take even one more click to not accept cookie on a website works. The easiest, quickest option is what most people use, and when more people use it, it becomes harder to justify trying something new. Is QWERTY the best keyboard layout? I use Dvorak, so for me the answer is no, but every time I sit down at somebody else\u0026rsquo;s computer and try to type it\u0026rsquo;s incredibly disorienting. That\u0026rsquo;s the cost of not using the default.\nSo, while there are quite a few reasons things aren\u0026rsquo;t changing all the rapidly, the biggest is defaults. When it became easy to type Emoji, people used them. If there were a dedicated key for ≠ or ± on your keyboard, you\u0026rsquo;d probably use them more and programming languages wouldn\u0026rsquo;t have to use != for \u0026ldquo;not equal\u0026rdquo;(7). This goes for many other symbols (‽,←, →,√,°,¡, all come to mind) and I know it to be true because I can directly type those symbols on my keyboard. For input devices, I\u0026rsquo;ve already written a good amount on this though, see The Way We Interact With Computers Sucks: The Physical . Of course, this assumes people even know there\u0026rsquo;s alternative options in the first place. If a default is really ingrained then you may not even recognize it as something that could have an alternative.\nSimilarly, for many things not using the default would break compatibility with something. There are millions of computers out there that still today are running Windows 98 because they\u0026rsquo;re driving some industrial or medical equipment manufactured 20 years ago. Would it work on Windows 11? Maybe. Does anyone want to risk the downtime of trying? Hell no. Similarly, there are many cases when someone has made something that is miles ahead of everything else, but breaks all compatibility assumptions in the process. I\u0026rsquo;d love to run a Linux system using Cat9 and Durden, but the early adopter cost is too high.\nFor conlangs or anything requiring more than simple character rendering, there has to be application support. While some things Unicode becoming standard more-or-less everywhere has helped (We can finally, reliably, know that using the ◌́ for Résumé will actually work almost everywhere) some natural scripts and many, many conlangs need features that are either difficult to implement such as:\nHaving previous characters change depending on the next Like Arabic does: هذه جملة مثال Using a variable height line to connect words, like Sticks Having each word in a sentence being drawn on a line so that a space is not a space, like in Ogham: ᚛ᚁᚔᚃᚐᚔᚇᚑᚅᚐᚄᚋᚐᚊᚔᚋᚒᚉᚑᚔ᚜ Combining some characters (or whole words) into single characters Being animated, like Timescript Using color for meaning, like ColorHoney Using a grid, like Eganes, Griddy Script, or Betamaze Among many other, much weirder things. Not all text fields will support everything. If someone is writing a novel and they don\u0026rsquo;t have an easy way to make a font for their conlang that can render nicely in the text editor they\u0026rsquo;re using - or, worse, something the publisher can\u0026rsquo;t print - they might choose to use something that\u0026rsquo;s easier.\nIf natural languages aren\u0026rsquo;t even supported very well, asking for good conlang support is obviously not going to be a priority for anybody. Computers may be amazing, but the success of standards does sometimes limit innovation.\nYou know pen and paper still exists, right? Well, yeah, no shit. But humans like sharing their art and especially for relatively small communities with little to no local groups being able to interface digitally is a big deal. Obviously this is true for conlanging and neography communities. To do that they need tools with support for making complicated scripts that use lesser-used features you might find in various font and rendering standards like OpenType in a way that is affordable (font creation software ranges from awful and free to mediocre and expensive as hell) and intuitive. There are some tools out there for conlanging (PolyGlot, akrantiain, lexifer, etc.) but many are either abandoned, extremely difficult for the less technically inclined to setup and use, or very limited.\nReflecting on change # I think it can be easy to see conlangs as useless beyond art (Which, again, is enough to justify them on its own). Sure, if we count some programming languages as conlangs and consider some of the scripts that have specific applications - like for pixel art - we could salvage a few as \u0026ldquo;useful\u0026rdquo; but I think it\u0026rsquo;s also important to remember that all languages evolve pretty rapidly and we just sort of accept it. Some of what we\u0026rsquo;re used to now looks almost conlang-like if you squint at it right:\nEmoji Hashtags tone markers (/s) memes These things aren\u0026rsquo;t really any one language - many of them keep their meaning regardless of the language they\u0026rsquo;re mixed in with. They\u0026rsquo;re conlangs used as domain specific languages that we sprinkle into our conversations. I don\u0026rsquo;t see how using a little toki pona or Rhapsodaic should be any different, if we could do so as easily and create enough cultural awareness for their meaning.\nConclusions # I wrote this page both as an introduction to conlangs and as a \u0026ldquo;here\u0026rsquo;s what is possible if we think about language holistically\u0026rdquo; thing, the former point is really summarized by this meme. They stand on their own merits as incredibly works of artistic expression and that is independently more than enough to motivate their study I think.\nStill, I want to put a bow on the more technical point I was trying to make:\nWhen we think about language as any expression starting in the mind of one person and being passed to another and the influence of each choice along the way we can think about it a system instead of disparate parts.\nEach language has a syntax that prescribes word order and sentence structure, a writing system (or multiple), a script (or multiple), and a way the script is written (be it by hand or into a computer).\nA language may be for conveying general purpose ideas (English, Spanish, what you think of when someone says \u0026ldquo;language\u0026rdquo;) or it might be for a specific purpose - be it programming, music, etc.\nWhile languages themselves are tools, the tooling for using the language is just as important to its usefulness.\nOur tools are not perfect and, especially given the rise of large language models and developments in user interfaces (such as the proliferation of node-based editors), may be seeing significant changes soon.\nThe conlangs and neoscript communities have been thinking about these things for a lot longer than the AI Large Language Model crowd and almost all creative endeavors could benefit from trying to absorb even a fraction of what conlangers and neographers have to offer.\nBefore I wrap up, I want to say there\u0026rsquo;s an insane number of scripts I was unable to link here that I thought were more than deserving of being featured. It\u0026rsquo;s also notable that the only language I speak fluently is English, so my ability to even appreciate the scripts and conlangs more heavily rooted in other cultures is significantly more limited. This has lead me to not feature many of the beautiful scripts that are heavily inspired by existing, natural Arabic, Asian, or braille scripts because I may not be the best judge of their quality. If you\u0026rsquo;d like to see more, I highly encourage you to dive into this yourself and take a stroll though the conscript world without my biases filtering it.\nResources # Obviously this page is littered with links to omniglot.com and I can not express enough gratitude to Simon Ager for all the effort that must go into maintaining such an incredibly large resource.\nAdditionally, both r/conlangs and r/neography have some great posts and is awe inspiring to scroll through each.\nIn writing this page I read The Art of Language Invention By David J. Peterson and if you want a jam packed resource on the linguistic skills and concepts that go into conlanging, I can\u0026rsquo;t recommend it enough. It is more of a text book than a gentle stroll though conlanging though.\nIf you\u0026rsquo;d like more sort of overview of the conlanging culture, existing languages, etc. - similar to my goals with this page - you may want to watch the documentary Conlanging: The Art of Crafting Tongues which, unlike this page, actually had a budget. It\u0026rsquo;s a fantastic watch and acts a sort of language focused behind-the-scenes look into a few of the biggest franchises which have used conlangs on screen.\nOther links you may want to check out include:\nhttp://www.skyknowledge.com/perssonsscripts neography.com A special thanks to these people for helping me revise this page:\njan Usawi Phlegm Digital interopability with natural languages that arent Left-to-Right, Top-to-Bottom is spotty. Many programs and websites struggle with support, which is unfortunate. FWIW, I think KFG may be a better choice if you're working at only a moderately low resolution, as while it's still not a text anybody can read super easily, it's more recognizably text at all, and the differention between glyphs makes it a hair easier to read. Not to be confused with Stenography, which is the process of writing in shorthand. Most commonly today this term is used to talk about how court reporters use special keyboards.Also not to be confused with Stegography, the process of writitng with the tail of a Stegosaurus. Some natural languages have more than two genders for pronouns too! Notes for use (By u/mastefka): There are two forms for each vowel: a diacritic mark and a letter form: • The diacritic mark always precedes the consonant that it appears above. • As well, only two vowels can stack over a consonant; in words like “beautiful,” the “ea” are written as diacritics and the “u” is written in its letter form under them. • Words that end in a vowel must be written in letter form as the don’t have a vowel to precede. Likewise if a word ends in two vowels, such as “free” a diacritic can be written above the letter form to finish out the word. • Words that begin with a capitalized vowel, are written with the letter form, such as the first word of a sentence. Words that begin with a vowel anywhere else in a sentence can be written as a diacritic over the consonant that follows it. • Proper nouns that begin with a vowel use the letter form, but there’s no change to any proper nouns that begin with a consonant. • Consonants that double (little, bubble, barrel, summer, etc) simply have a line draw under it, or through the tail of the letter has one. I can't seem to find documentation on doing this anymore, but I know I've done it before ¯\\_(ツ)_/¯ Some languages do use extra symbols. Notable examples are APL and languages that decended from it, like Uiua. Others are a bit less extreme, like how you use atomics in Raku. Uiua is particularly notable for having a reasonable way for writing the uncommon symbols. "},{"id":207,"href":"/other/conlangs/rhapsodaic/","title":"Rhapsodaic","section":"Others","content":" Rhapsodaic # Rhapsodaic is a personal philosophical conlang where the morphemes are few, the analogies are many, and the pronouns are sometimes also adverbs.\nIt’s a language that prioritizes conceptual content over material content; all its root words refer to emotions, and anything else can only be described in relation to those emotions. It’s a tool I’ve made and used to process hard feelings, find novel ways of conveying hard-to-phrase experiences, gain new perspectives on things I’ve taken for granted, and connect with others over the radically different ways we see ourselves and the world(s) we occupy. It’s a language I used to keep to myself, before teaching and sharing it at length with a small group of friends as part of a presentation for the 10th Language Creation Conference. And now, it’s out on the internet for anyone to learn, use, and explore. I hope you have fun doing so—though more specifically, the S1F-S2W-A3 kind of fun, which you\u0026rsquo;ll have to read on to learn more about\u0026hellip;\n-jan Usawi Presentation at lcc10 # This video is jan Usawi\u0026rsquo;s presentation from the 10th Language Creation Conference. They showcase the basics of Rhapsodaic, speak about a translation and language-teaching experiment they conducted with friends of theirs using the language, share their takeaways from the whole experience, and respond to some questions and comments:\nLanguage Reference # Stems # Stems are the root words of Rhapsodaic, They fall into 9 groups, the first 8 of which thematically subdivide by 3s.\nThe following table is a generalized summary of the meanings for all 27 stems. Think of the following word lists less as defining the stem and more as collectively pointing towards the meaning of the stem; if the combinations of stage and subdivision or the word lists give you additional ideas, you may incorporate those as well.\n1: Familiar: 2: Dangerous: 3: Wondrous: Group Core Meaning Mundane, supportive, and/or within a given boundary Threatening, harmful, and/or crossing a given boundary Beautiful, transcendent, and/or beyond a given boundary Symbols S1 The discovery of something new, the comparison of facts and ideas Curiosity, interest, realization, uncertainty, learning, contemplation Analysis, judgment, suspicion, skepticism, graveness, incisiveness Insight, clarity, understanding, recognition, wisdom, disillusionment S2 The dissonance between what is and what could be, the stoking of longing and resistance Melancholy, frustration, bitterness, disappointment, loneliness, discontent Defiance, anger, justice, fixation, obsession, resistance Freedom, rebellion, vigor, dynamism, possibility, strangeness S3 The confrontation of the core of the matter, the facing of one’s fears Fear, anxiety, insecurity, nervousness, deference, shame Discomfort, wrongness, horror, malice, deception, taboo Courage, power, influence, boldness, capacity, chutzpah SC The recovery from the experience, the releasing of obligation Hope, rest, tenderness, comfort, relaxation, recovery Sorrow, grief, fury, injury, vulnerability, catharsis Compassion, care, welcoming, acceptance, warmth, empathy C1 The journey out towards the Other, the exploration of one’s desires Connection, intimacy, togetherness, admiration, infatuation, respect Indulgence, fascination, pain, intensity, intoxication, addiction Pride, willpower, magnetism, self-love, creativity, passion C2 The pursuit of one’s determined goals, the drive for greater things Achievement, anticipation, pursuit, success, competency, effort Exhaustion, exertion, stress, overwhelm, fatigue, pressure Flow, ease, inspiration, confidence, determination, enthusiasm C3 The testing of what one has learned, the evidence of one’s strengths Calm, perseverance, stillness, patience, persistence, readiness Hostility, defensiveness, stubbornness, demanding, adamance, cessation Faith, peace, resolution, trust, authority, conviction CS The retrospection on the journey thus far, the finding of value in every step Play, wonder, fantasy, daydreaming, imagination, nostalgia Levity, humor, laughter, surprise, frivolity, mischief Presence, equanimity, fulfillment, gratitude, joy, value A Attitudinal stems (these generally don’t refer to specific emotions, but rather to “amounts” of or attitudes towards those emotions) Awareness, detachment, existence Aversion, rejection, excess Attraction, desire, lack For those who are curious, the labels for the first 8 stems are abbreviations based on the alchemical phrase “solve et coagula.” Connectors # Any word has at least 2, and sometimes 3, stems with connecting lines between them.\nIn a 2-stem word, the second stem adds onto or modifies the first.\nIn a 3-stem word, the first 2 stems are analyzed as a 2-stem word and the third stem modifies the combination of the first two.\nThere are 3 noun connectors, and 3 verb connectors.\nNouns Name Description Symbol Agent Witness Recipient Verbs Name Description Symbol Past Present Future The three noun cases are fairly fluid. They are less about who the subject or object is in the English-language sense than they are about who/what is on the causing end, the receiving end, or somewhere else in the dynamic of the sentence.\nHere are a few example sentences:\nI (witness) am a student. I (agent) punch the punching bag (recipient). I (agent) give the box (witness) to my friend (recipient). I (agent) walk through the foyer (witness). I (agent) reach out to feel the wind (witness or recipient). I (witness, potentially even recipient) feel the wind (witness or agent) around me. I (recipient) hear you (agent). Questions and commands use the same verb tenses as statements — a command may use the straight present or future tense as if it were an imperative, or be rephrased as a statement (i.e. “I want this from you.”)\nBoth nouns and verbs can function as modifiers (adjectives, adverbs, etc.) to either nouns or verbs; this is denoted by a hyphen between the noun/verb and its modifier. As is the case within single words, modifiers always follow their modifieds.\nOther than this rule about modifiers always coming after what they modify, word order is relatively free. As an English speaker, subject-verb-object is likely most familiar to you, but rearrangements of this structure are permitted if they make sense to you, and encouraged if you feel like they add useful nuance.\nThe attitudinal stems, in a way the others don’t, generally have different meanings when places as the first or second stem in a word.\nAs a reminder, here are the A1, A2, and A3 stems respectively:\nA1 - Existance # Explicit awareness or existence of ⠀⠀ “I’m aware that I am angry.” “Angry is definitely how I’m feeling.” ⠀⠀, which is regarded neutrally/which just exists “I’m angry, but I’m not attached one way or another to the experience.” “I’m just plain angry.” A2 - Excess # An excess of ⠀⠀ compared to what is desired or expected “I’m feeling too angry.” “I’m more angry at this than I thought I’d be.” ⠀⠀, which does exist and which the referent or author does not approve of and/or wishes to end or decrease “I’m angry, but I don’t like it.” “I shouldn’t be feeling angry, but I am.” A3 - Lacking # A lack of ⠀⠀ compared to what is desired or expected “I’m not feeling angry enough.” “I want to be angry.” ⠀⠀, which does exist and which the referent or author approves of and/or wishes to maintain or increase “I’m angry, and I think this is a good thing.” “I want to keep feeling angry.” These, too, can combine.\nHow might you convey the idea at the core of the sentence “I do feel right in being angry about this, but this much anger is overkill” in a three-stem word?\nDiacritics # By default, all words refer to emotions. To refer to things that aren’t emotions, a diacritic can be added above or below the connector. This shifts the word from meaning “the given emotion” to meaning “a ⠀⠀ that feels, elicits, or otherwise is associated with the given emotion,” with the blank filled in as follows:\nName Description Symbol Emotion Place Physical or metaphorical locations Time Stretches of time, situations, or events Action Actions, things one can do Experiance Sensations, experiences, and their causes Animate 3rd Person People, animate or sentient entities Inanimate 3rd Person Objects, things 1st Person Writer or quoted speaker 2nd Person Reader or addressee The animate and inanimate 3rd person diacritics are fairly flexible in their usage. If you want to ascribe something agency or personhood, you can use the animate diacritic to describe something that may more literally be considered inanimate, and vice versa.\nNouns do not carry any information about number, and can be treated as either singular or plural.\nVerbs can take all the same diacritics that nouns can. Meanings can include copulas (she is a friend), existentials (it is morning), verbs of action (I laughed at it) or of state (are you feeling cold?), to causatives (I made him tired “I tired-ed him”).\n3-stem words can also take diacritics. If a diacritic is placed above or below the entire word, the meaning is taken to apply to the full combination of stems (as detailed in the Connectors section). Diacritics can also be placed on individual connectors within a 3-stem word; in this case, the diacritic (or lack thereof) above/below the first connector applies to the combination of the first two stems, and the diacritic (or lack thereof) above/below the second connector applies to the third stem.\nWith all these rules set aside, there’s still plenty of room for nuance and variability. At this point, the difference between one potential way of phrasing or another is all about subtler implications in meaning than it is about grammar. This is a language to play around with; if there’s something you want to do with it that this reference doesn’t clearly explain, see if you can make the existing building blocks work in your favor to do it. It’s what I do.\nExample Sentences # Toggle Saturation\nOriginal Text: \u0026ldquo;I’m a shooting star leaping through the sky like a tiger, defying the laws of gravity\u0026rdquo; Alt: I, the freshman who everyone thinks looks like a bully for some reason, am giving a speech on following your dreams in the school auditorium, and it’s jostling everyone’s sense of defensiveness and commitment to this idea that they have to respect the authority they feel their peers have over them Lit. \u0026ldquo;I, of enthusiastic joy, and related to a being of furious strength, act in a determined but playful way in a place characterized by curious possibilities, and act in a way that evokes a sense of mischievous rebellion, towards the source of a sensation of calm and wise firmness that evokes a similarly acted-upon experience of trust in connections.\u0026rdquo; "},{"id":208,"href":"/other/conlangs/tokipona/","title":"Tokipona","section":"Others","content":" toki pona! 󱥬󱦖󱥔 # This page will test your UTF-8 support and ability to load in weird fonts. It works on my computer ╮(─▽─)╭ toki a! toki pona is a constructed language created by Sonja Lang in 2001. First things first- what\u0026rsquo;s a constructed language? Think like Quenya (which is written in Tengwar) from JRR Tolkein\u0026rsquo;s Lord of the Rings:\n            This font is Fairfax HD by KreativeKorp, which is licensed under the open font license It is used for all of the conlang displays on this page. Some of the examples on this page are also copied directly from that page. To not leave anyone feeling left out, LOTR also used Cirth, here\u0026rsquo;s a sample of that\n \nor Dothraki* from Game of Thrones:\nShieraki gori ha yeraan!\nTranslated: The stars are charging for you* Dothraki has its own writing system as well; however, from what I can tell there are no good fonts supporting it and I don\u0026rsquo;t want to embed an image for it. Constructed languages or \u0026ldquo;conlangs\u0026rdquo; tend to come in many varieties, ranging from the very-pretty-but-nearly-useless, to the very-ugly-but-nearly-useless. From an artistic perspective - ignoring toki pona\u0026rsquo;s writing systems(1), just the actual sound and \u0026ldquo;vibe\u0026rdquo; of the words - toki pona is\u0026hellip; middling? Like, it\u0026rsquo;s not the prettiest language when spoken aloud and the majority of the time people just use the Latin (\u0026ldquo;normal\u0026rdquo;) alphabet, so, why then am I devoting a page on my website to it?\nWell, let me answer a question with a question: if you were making a language, what would you do? How many words would it have? What sounds would the language use? For context, English has - according to multiple Google results that are all very wrong for a huge variety of reasons - 171,146 words and 44 phonemes (that is, distinct sounds).\ntoki pona? ~140 words and 14 phonemes, all of which directly correspond to a letter. This means each letter always makes the same sound. This is actually a bit tough for an English speaker to get used to. More on that in a bit though.\nNow I hear your eyebrows raising and your thoughts of \u0026ldquo;Wow, okay, that sounds totally useless\u0026rdquo;\nWell, not really. Due to some clever grammar and the general flexibility of the language - letting some words be nouns, verbs, and adjectives depending on how they\u0026rsquo;re used - it\u0026rsquo;s generally quite easy to describe complex-ish thoughts with toki pona just by appending enough adjectives and using context.\nBut, okay, it\u0026rsquo;s a simple language. Still who cares? There\u0026rsquo;s been semi-popular intended-for-actual use languages before. Esperanto is a thing after all and has, uh, checks notes, 2 million? (I call 🐂💩) speakers. (2) Similarly, the internet briefly got on a Lojban kick, though far as I can tell it has somewhere around 20 actually fluent speakers.\nCompare this to toki pona, which based on my own highly scientific definitely not pulled out of my ass estimate has roughly 600 fluent speakers.(3)\nThe thing is, I\u0026rsquo;ve been active on the discord and nearly every night there will be a group of people hanging out in the 🔊 toki pona taso (toki pona only) voice chat. So, there\u0026rsquo;s clearly people to talk to. Similarly, every time I\u0026rsquo;ve popped into any of the toki pona VRChat worlds, there\u0026rsquo;s always been people hanging out already.\nBut that\u0026rsquo;s a lot of words to say \u0026ldquo;This language is easy and at least some people speak it\u0026rdquo;, but I think misses the bigger point:\ntoki pona\u0026rsquo;s community is freakin\u0026rsquo; awesome. For example:\njan Misali puts out very, very nerdy jokes about measurement systems alongside conlang content and some very, very obscure memes. jan Usawi makes some absolute bangers, most in toki pona in full, but some in both English and toki pona. There are, of course, many, many more musicians. Here\u0026rsquo;s a YouTube playlist from jan Misali with 52 toki pona songs from various artists. Here\u0026rsquo;s a kick ass song from Echo Heo. Want more? How about olin li tawa jan ale lon by Ae. Dschorsaanjo or o sina olin e mi by WJ4278. Every year, toki pona day rolls around and it\u0026rsquo;s a huge event, here\u0026rsquo;s a recording of this year\u0026rsquo;s. I remember fighting to defend our place on the r/place canvas. But while those things are cool I don\u0026rsquo;t think it quite conveys what I want to stress more than anything: the toki pona community is full of the brightest, most passionate, deeply quirky, esoteric, and just full of life people I have ever had the pleasure of hanging out with.\nBeing in voice chat with them feels like I\u0026rsquo;m with my people. The community is full of nerds (in the endearing way) pushing the boundaries, and - being nerds pushing boundaries - , they\u0026rsquo;re directly influencing culture and making new technology. This can be as technically-mundane-but-still-really-cool as Minecraft\u0026rsquo;s built in toki pona support (!!!),\n(Though, it also has Esperanto. Plus it has Pirate Speak and LOLCAT among a few other joke languages too.) to as impressive as creating fonts (so, many, fonts. It\u0026rsquo;s nuts.) for a section of unicode unofficially reserved for conlangs and making custom, novel touch keyboards for input.\nUltimately, I love toki pona not for the language, but for the people.\nOf course, most people aren\u0026rsquo;t willing to devote the time it takes to learn a language (even a simple one) just to hang out in a new community, so I do want to point out that you\u0026rsquo;re still getting some of the traditional benefits of learning a language. Sure, you won\u0026rsquo;t be able to speak to as many people as something like [Insert big language you don't know here] or get translator gigs (probably) but you will still gain that extra head space and new way to see the world that comes with a new language. If you\u0026rsquo;re like me (that is to say mono-lingual and low on time and motivation to learn a traditional language) then this is a good fit.\nOkay, so I\u0026rsquo;ve just told you it\u0026rsquo;s an awesome, easy to learn language. 120 140-ish words, 14 phonemes. You\u0026rsquo;ll often hear people say\nYou can learn toki pona in a weekend! And, like, okay, maybe you can memorize the 120 140-ish words that fast, but knowing words doesn\u0026rsquo;t mean you know a language. Plus, that\u0026rsquo;s a lot to memorize really quickly.\nWhy toki pona isn\u0026rsquo;t easy to learn.* # * from the perspective of someone who only knows English ** and who is still very much so a noob.\nVowels always make the same sound. \u0026ldquo;a\u0026rdquo; is always /a/ and \u0026ldquo;e\u0026rdquo; always an /e/. Compare this to English, where vowels can sound different in each word, like how the \u0026ldquo;o\u0026rdquo; in \u0026ldquo;dog\u0026rdquo; /dɔɡ/ is different from the \u0026ldquo;o\u0026rdquo; in \u0026ldquo;home\u0026rdquo; /hoʊm/. It\u0026rsquo;s really hard to turn off the part of your brain that wants to apply these English vowel rules, though it\u0026rsquo;s still easier than learning the more complex phonetic rules of most natural languages. Grammar \u0026gt; Vocabulary. It\u0026rsquo;s one thing to memorize 120 140-ish words, it\u0026rsquo;s another to be able to string them together in the agreed upon way to make an actual sentence. If in English I said \u0026ldquo;red get in car town travel\u0026rdquo; you\u0026rsquo;d rightly say what the actual fuck. So, do not gloss over \u0026ldquo;li\u0026rdquo;, \u0026ldquo;e\u0026rdquo;, \u0026ldquo;pi\u0026rdquo; and \u0026ldquo;la\u0026rdquo;. You can\u0026rsquo;t - not it\u0026rsquo;s hard, you literally can\u0026rsquo;t - convey precise, exact meanings in toki pona. The language needs context. So you need to learn by reading and talking in places with context. Very minor: adjectives come after nouns - it\u0026rsquo;s toki pona, not pona toki (toki = language, pona = good, toki pona = good language. Though most people will translate it as language of good.) Less minor: you\u0026rsquo;ll be breaking up complex thoughts into many simple sentences instead of long, complex ones. If, like me, you write long, free-flowing sentences that, via prepositional phrases, extend much longer than a sentence should in any language, you\u0026rsquo;ll find it difficult to switch to the short, stubby sentence structure of toki pona. How to learn toki pona # I can not possibly stress how much I am not the person to ask this, as - and I can\u0026rsquo;t repeat this enough - am a noob myself. However, I have read the shit out of intro materials and figured out the hard way how not to learn toki pona.\nFirst things first, while everyone adores Sonja Lang for making toki pona, her original book on it (Amazon), is\u0026hellip; meh?(4) The best guide I could find now is https://devurandom.xyz/tokipona/. If you want a video guide, that page does mention jan Misali\u0026rsquo;s 12 days of toki pona lesson series, but it doesn\u0026rsquo;t mention that it is currently being slowly remade and updated, so while incomplete, you can learn some from the new series, and of course the old videos are still there .\nWhile going through that, having the one page toki pona cheat sheet made by blinry one page toki pona cheat sheet v2, edited by jan Sa and released under CC0(!!!) has been a massive help for me when trying to parse out sentences or needing to ctrl+f a certain word. This dictionary is super nice too.\nAt least at first, your biggest problem will be vocabulary. The best way to learn the words is to use flash cards from AnkiWeb - a flashcard website. First, you\u0026rsquo;ll need the software though. Download it from https://apps.ankiweb.net and/or your phone\u0026rsquo;s app store (Mac/Win/Lin/iOS*/Android) (I really recommend mobile, as the full desktop interface is awkward for flash cards but the * is there because the iOS version is expensive)\nAndroid Download the unofficial app from Google Play, open it.\nTap the plus button in the bottom → Get shared decks.\nIn the search bar, enter \u0026ldquo;toki pona\u0026rdquo; and select the top result \u0026ldquo;Toki Pona (with reverse and linja pona)\u0026rdquo;. Scroll down, hit download, it will ask if you want to download a file. Hit yes. The app should automatically try to open the file, though it may prompt you to actually open it with the AnkiDroid app, if it does, obviously select it as the app.\nIt\u0026rsquo;ll take a moment to import, after it does, you\u0026rsquo;ll see the new deck.\nBy default, the app is set to only show you 20 cards a day, which is why it looks like the 122 card deck you just downloaded only has 20. Long press the deck name, select \u0026ldquo;custom study\u0026rdquo;, and \u0026ldquo;study a random selection of cards\u0026rdquo; and just enter a really big number. You\u0026rsquo;re good to go.\niOS ╮(─▽─)╭ It\u0026rsquo;s $25, and while I don\u0026rsquo;t mind supporting devs, I don\u0026rsquo;t own any iOS devices and, frankly, that\u0026rsquo;s pretty steep. Unfortunately, the other big iOS app for toki pona flash cards is also littered with in-app purchases. The latter especially feels like a slimy money grab to me for software that can be shit out pretty quickly, so \u0026hellip; use the desktop version of Anki I guess? Mac/Win/Lin Download the desktop software, open it and set it up, then download this deck and drag and drop the .apkg file into the interface. The interface is awkward, but keyboard shortcuts are everywhere. Space to flip and then advance cards works quite well.\nBy default, the program is set to only show you 20 cards a day, which is why it looks like the 122 card deck you just downloaded only has 20. Noodle around the interface and you can set it up to make all the card available every day if you want. You can also set UI scaling if everything is tiny.\nIf you just dedicate yourself to the vocab and getting the grammar rules down for a few weeks, you\u0026rsquo;ll at least be able to read and write toki pona, even if you still sometimes need to look up words and not all your sentences are perfect.\nFortunately, the toki pona community is very welcoming and aware of the challenges in learning, and more than willing to check translations and that you conveyed what you intended.\nThe next big problem is speaking it. As mentioned before, the pronunciation is a bit odd if you only speak English. For this reason plus the generally fantastic vibes of the community, I recommend joining ma pona pi toki pona, the toki pona discord, right away. This will give you a chance to talk to people and ask about how to pronounce words. If you just need to hear a specific word, the toki pona appendix on Wiktionary has audio samples of every word\u0026hellip; though some of them are sub-par at the time of writing.\nSpeaking of, there\u0026rsquo;s also https://wikipesija.org/, the toki pona Wikipedia clone, that has a fair amount of cool stuff on it.\nClosing thoughts # toki pona is pretty neat, I guess you could even say it\u0026rsquo;s a good language (🥁 ba dum tss) but more than anything it\u0026rsquo;s a language of good people. The things these people are doing range from moving artistic expressions of art and music and poetry to technical achievements- like creating novel input methods, using otherwise unallocated unicode space, and even getting their language to be a part of Minecraft. I know it\u0026rsquo;s not something I want to miss out on.\nmi tawa toki pona does have it's own writing systems. This can be input in two ways: The easier method is to use a font which converts words to their associated glyph as you type them, like linja sike does.\nThe second is by using a font that uses the ConScript Unicode Registry or CSUR. This is more complicated to set up, but it prevents all toki pona words being rendered as the glyphs, instead only displaying those that the author intentionally typed that way.\nBoth methods will require a font to be installed, though the CSUR fonts will need a secondary input system, as you\u0026rsquo;ll need to be able to type keys that don\u0026rsquo;t exist on your keyboard. This can be a mild pain to set up. Fortunately, there\u0026rsquo;s a good guide for setting things up to use CSUR fonts and input.\nYou\u0026rsquo;ll see these writing mostly used for places where space and style are important, such as titles of papers, album covers, etc.\nWhen it does work, it is very pretty though:\n󱤿󱥔󱤧󱤼. translation: the good ways are many / There are many right ways of doing things. 󱥤󱤧󱤬󱥒󱥏. translation: Light is beside darkness. 󱦚 󱦛󱦀 Sorry esperanto fans, but the language sorta sucks too. Like, it's sexist in design, is overly complex, and just ... bad. See this jan Misali video as to why. This number really depends on where you draw the line of fluency. The toki pona discord has a role system, on which close to 300 people have self-identified as advanced speakers, and over 1000 as intermediate. Assuming some of those people have lost interest and so lost skill with the language (which must be the case, as there's many more reactions to the bot taking the begineer role than there are people in the server), but that there's some people who speak toki pona but aren't on the discord, I think 600 is reasonable guess. It's not a bad book, but it has aged since being published in 2014 and there are some things the book doesn't cover super well. If you get into toki pona, I do still recomend showing your support and nabbing a copy. "},{"id":209,"href":"/other/coolhardware/","title":"Coolhardware","section":"Others","content":" Cool Hardware # LTP-305G/HR 5x7 LED Matrix displays \u0026amp; Driver, article on (Hackaday)\nalso see the redot project for a modern clone\nCore Memory Shield for Arduino by Jussi Kilpelainen on Tindie\nA somewhat ridiculous precision voltage source\nturns out placing 900 resistors does not get you banned from SMD assembly service after all 😇 pic.twitter.com/3iu3zL5TLi\n\u0026mdash; Marco Reps (@MarcoReps) December 31, 2020 Backup of the above tweet on archive.org List of nixie tube types: https://justanotherelectronicsblog.com/?p=228\nDIY Particle Detector\nWilliams Tube (Wikipedia)\nSlow Motion optical illusion picture frame kit on Tindie\nUSB-C PD Breadboard programmable PSU\nOttercast (Hackaday) - a Chomecast audio clone\nPinJig Soldering tool - failed kickstarter\nA \u0026ldquo;Breathing PC\u0026rdquo;\nSensel Force Haptic Touchpad\nFurbymin Theremin SOA DC27 by Harbinger LTD\nImplementing a CPU Using 555 Timers and Logic Synthesis (Hackaday)\nAlso 555 related, there\u0026rsquo;s this Atari Punk Console made using vacuum tubes\nAnd This project which uses 555\u0026rsquo;s to drive RGB Leds in interesting patterns - No μC!\nMercuray Arc Valve\nDelay-Line Memory\n21 Segment Displays\nDuga radar\nPhoto by Ingmar Runage, CC BY 3.0 also see this Tom Scott video (YouTube) about it AT\u0026amp;T\u0026rsquo;s \u0026ldquo;Long Lines\u0026rdquo; microwave tower network\nPhoto by Spencer Harding DIY \u0026ldquo;Blackhole 6000\u0026rdquo; warm air generator (German)\nAshlyn Black\u0026rsquo;s Linear Feedback Shift Register board\nThe \u0026ldquo;WiFi Cactus\u0026rdquo;\nAlso see this PCIe -\u0026gt; 12x mPCIE carrier board\n7-color E-ink screens\nRope Core Drum Machine\nISA over TPM\nThe Analog Thing analog computer\n"},{"id":210,"href":"/other/fediverse/","title":"Fediverse","section":"Others","content":" The Fediverse, ActivityPub, \u0026amp; The IndieWeb # If you\u0026rsquo;re as active in the same nerdy online circles I am, you\u0026rsquo;ve probably heard all three of these terms. There\u0026rsquo;s also a good chance you\u0026rsquo;re confused how they\u0026rsquo;re all related. Well, let\u0026rsquo;s fix that:\nThe Fediverse # The fediverse (a portmanteau of \u0026ldquo;federation\u0026rdquo; and \u0026ldquo;universe\u0026rdquo;) is an ensemble of federated (i.e. interconnected) servers that are used for web publishing (i.e. social networking, microblogging, blogging, or websites) and file hosting, but which, while independently hosted, can communicate with each other. On different servers (instances), users can create so-called identities. These identities are able to communicate over the boundaries of the instances because the software running on the servers supports one or more communication protocols which follow an open standard. As an identity on the fediverse, users are able to post text and other media, or to follow posts by other identities. - Wikipedia Alright, that\u0026rsquo;s a lot to dissect, so let\u0026rsquo;s break it down.\ninterconnected servers [\u0026hellip;] independently hosted [\u0026hellip;] can communicate with each other\nSo, basically, a bunch of people are running their own servers but they can talk to one another because they\u0026rsquo;ve agreed on a standard.\n[\u0026hellip;] create so-called identities\nso, make an account\nThese identities are able to communicate [\u0026hellip;]\nbut this account is recognized by other servers.\nSo, what this is getting is that you might have something that\u0026rsquo;s less like Twitter where everything is on one centralized network and more like email. You can have an @gmail.com, an @hotmail.com or make your own - I could (but don\u0026rsquo;t) have an @opguides.info.\nAlready based on that simplified explanation this has a few benefits:\nYou can be host your own server if you really want, so you can control your data You can be a part of a server that has as tight or loose of rules as you want. Don\u0026rsquo;t want racists hanging around, then don\u0026rsquo;t let them. There are many fediverse services. The most well known one being mastodon which is basically a Twitter clone BUT the weird thing is there are multiple instances. So, like email, you might have an account at https://merveilles.town or https://chaos.social/about or something else entirely, but regardless of what you use they can communicate.\nMastodon has many great instances - more on that in a bit. The bigger picture is that federation can be used for something like a YouTube clone (which is what PeerTube is), streaming audio (which is what Funkwhale is), being-a-better-insta-than-insta (which is what PixelFed is), event planning (see Gath.io), and quite a few other things if you go looking. The point being, for each of these, an (optionally) unified identity can be used and the server you use (or host yourself) can choose who to federate with (talk to). This means it:\nIs censorship resistant\nAllows you to join a community that doesn\u0026rsquo;t allow the things you like\nLets you control your data as much as you want to.\nIt\u0026rsquo;s a win-win-win. In most systems, these sound contradictory. How can something be censorship resistant, but still have communities with whatever rules they like? Well, the key word there is communities, and that it is plural. These communities are still separate, it\u0026rsquo;s just that they can federate if and only if they want to.\nIf a server is full of racist jerks, nobody will federate with them. They can post all they want on their server, but their reach is limited. Yes, this makes echo chambers worse (in both directions) but, it\u0026rsquo;s a hell of a lot better than the alternative.\nAlright, so, this is cool but whenever somebody talks about all of this fediverse stuff, this is only part of the picture. So, next let\u0026rsquo;s talk about\u0026hellip;\nActivityPub # The website for ActivityPub, activitypub.rocks says:\nActivityPub is a decentralized social networking protocol based on the ActivityStreams 2.0 data format. ActivityPub is an official W3C recommended standard published by the W3C Social Web Working Group. It provides a client to server API for creating, updating and deleting content, as well as a federated server to server API for delivering notifications and subscribing to content.\nSounds exciting? Dive in!\n- activitypub.rocks Which, uh, I don\u0026rsquo;t know if sounds exciting so much as it sounds like a description of a Rockwell automation retroencabulator.\nSo, in English, it\u0026rsquo;s a way for services/websites to talk to each other \u0026hellip; which is a form of the above-mentioned federation. So, basically, it\u0026rsquo;s one way that things can federate. It\u0026rsquo;s the protocol.\nWhile not the best analogy, it\u0026rsquo;s not totally wrong to say that ActivityPub is the language things talk to each other in (usually) while the act of talking to one another is federation. So, with the fediverse being the universe of these things that are all talking together, ActivityPub is the way they (usually) talk.\nSpeaking of both Federation and ActivityPub, usually the IndieWeb will also get mentioned, so\u0026hellip;\nThe IndieWeb # The IndieWeb is a people-focused alternative to the \u0026ldquo;corporate web\u0026rdquo;. - indieweb.org Uhh, wow, that doesn\u0026rsquo;t tell us much. The website goes on to say basically everything I said about what the fediverse is in the first place. The main thing I want to point out from that website is actually this:\nYou are better connected # Your articles and status messages can go to all services, not just one, allowing you to engage with everyone. Even replies and likes on other services can come back to your site so they’re all in one place.\n- indieweb.org Which is basically a fancy way of saying when you do something on your own website, it should automatically post links to all the things, and your website should automatically fetch the replies from all the things.\nIf you\u0026rsquo;re being pedantic, this means that this website isn\u0026rsquo;t technically part of the indieweb in full, as it doesn\u0026rsquo;t post links out automatically, it only fetches replies via webmentions using brid.gy. (1) Along with that, clearly a big part of the indieweb is being independent, so, big corporate websites, even if they fit everything else don\u0026rsquo;t count.\nPutting it all together # Let\u0026rsquo;s go backwards then, by letting me pretend this is an FAQ between two of my characters:\nWhy would I want my site/service to be on the IndieWeb? You want your site/service to be able to interact with other sites services Why would I want my site to be able to do that? See how at the bottom of this page reactions to it on Twitter, Lobste.rs, various mastodon services, etc. all show up? That\u0026rsquo;s using something called Webmentions which is something that\u0026rsquo;s part of the indieweb movement. It lets things be connected without me needing to post it in any one of those places directly. This means I\u0026rsquo;m still in full control of this website, you\u0026rsquo;re still in full control of your accounts, but you can talk about this website and people can see that conversation regardless of the platform you\u0026rsquo;re using (2). Why would I care if I don\u0026rsquo;t have a website/server? Even if you\u0026rsquo;re not making your own content on your own platform, it still means you can interact with other people\u0026rsquo;s content without needing to use their platform, that you can join a community that better suits you, and that you don\u0026rsquo;t have to miss out on anything or be discussing things in a bubble. Huh? You like Twitter but not that side of Twitter? Then you can use Mastodon. Mastodon is part of the fediverse, which is made up of indieweb servers, which all federate with each other. You could join a server like eldritch.cafe which is\nFor queer people, feminists, anarchists and their sympathizers. Mainly French, but other languages welcome\nor sunny.garden which is\n[\u0026hellip;] a community for indie creators who draw, paint, sculpt, write, design, program, play, sing or build, their friends and family, and anyone else who thinks that sounds like a nice place to be.\nBut whatever server/community/instance you join, you can interact with users on another, unless they block one-another, like if there were a wowireallylovebeingracist.club, the servers can choose not to work with them.\nSame concept, different target for the other things listed in the first part of this page, or even me with this IndieWeb site choosing to ignore certain websites for displaying reactions.\nWait, you just talked about the indieweb and the fediverse, but not activity pub. Yep. That\u0026rsquo;s because it (usually) doesn\u0026rsquo;t matter to a user. Yes, a good-portion of the time the fediverse works using ActivityPub, but this is transparent to the user. Then why bring it up? Because ActivityPub and Federation are becoming synonymous. So, if you see a site/platform say it supports ActivityPub that\u0026rsquo;s probably the same thing as supporting federation. Basically, it\u0026rsquo;s because people will talk about it and if you don\u0026rsquo;t know you\u0026rsquo;ll just be confused. Why is this terminology so confusing? Feckin\u0026rsquo; hell, right? In short, if you\u0026rsquo;re using Mastodon, you are:\nOn one of many websites that is interconnected in a way that is refereed to as being federated, where all of these federated sites together are called the fediverse. Using Activity Pub behind the scenes when your mastodon instance talks to another. This happens all the time as your toot (the equivalent of a tweet) propagates though all the federated instances. If, while using Mastodon, you talk about a site like mine, which is (arguably) part of the Indieweb this site will pick up on it and show your comment automatically.\nIf you then go to use a PeerTube instance like \u0026hellip;\nThe following link is to a specific PeerTube instance. From what I can tell, most PeerTube instances have an abundance of NSFW and unsavory content. My experience with Mastodon has been great, peertube\u0026hellip; ehhhhhhh. \u0026hellip; video.qoto.org you can use that mastodon identity to follow a channel on PeerTube. Of course, you could also just make a second account on video.qoto.org or any other peertube instance, but you can just use the one you have from mastodon because federation.\nI\u0026rsquo;m still confused. Reading An Introduction to the IndieWeb (Chris Aldrich) and Why ActivityPub is the future (blog.joinmastodon.org) may help you gronk some of it, but, yeah, it\u0026rsquo;s a bit confusing, especially since it\u0026rsquo;s a pretty radical change in the entire way we thing about the internet working. But wait, there\u0026rsquo;s more! # While this article is supposed to be about the fediverse, activity pub, and the indieweb, it would be incomplete without mentioning the overall point of all of this: trying to return to a time when the internet wasn\u0026rsquo;t dominated by monolithic, global-scale systems. These are good for some things, sure, but they\u0026rsquo;re really suck for others. A few other things are helping with this:\nWebrings # A webring (or web ring) is a collection of websites linked together in a circular structure, and usually organized around a specific theme, often educational or social. They were popular in the 1990s and early 2000s, particularly among amateur websites.\nTo be a part of the webring, each site has a common navigation bar; it contains links to the previous and next site. By selecting next (or previous) repeatedly, the user will eventually reach the site they started at; this is the origin of the term webring.\n- Wikipedia Which, is exactly what this website is a part of. Rather than put the button to go to the next website though, I\u0026rsquo;ll just link the list: https://webring.xxiivv.com. Being a part of a webring is basically a part of having an indieweb website now.\nDecentralized networking # While it\u0026rsquo;s sure as hell taking its sweet time to get there, there\u0026rsquo;s some really neat projects that are trying to make the backbone of the internet decentralized. The idea here is that it\u0026rsquo;s a bit weird that if you were to instant message your neighbor that it has to go over your cell carrier\u0026rsquo;s or ISPs network instead of your presumably-close-enough Wi-Fi routers just \u0026hellip; talking. It\u0026rsquo;s almost a little too obvious to the point that it sounds dumb it doesn\u0026rsquo;t work this way already.\nTo various degrees and in different ways, project like yggdrasil, ipfs, cjdns + hyperboria, and beaker among many, many others are trying to make this future a reality.\nThe not http-web # When you go to a website and do (almost) anything, all of the content is severed over the Hypertext Transfer Protocol (or HTTPS, the secure variant). HTTP is great, it\u0026rsquo;s allowed us to make the bad as internet we have today. But, it can sometimes be a bit too freeing. That freedom is why we have a lot of websites which sucks for screen readers, are full of obnoxious ads, etc. So, there are alternatives.\nThe big two are Gopher and Gemini, and at risk of pissing people off by treating them like they\u0026rsquo;re the same thing, they\u0026rsquo;re both very limited. You can display text, images, etc. but the way those websites actually arrange the content and show it to you is up to your browser. The websites themselves only provide the content, they leave it up to the browser to decide how to display it. If you want to try out a browser, see Castor and noodle around. (or maybe bombadillo if you\u0026rsquo;re a TUI person)\nIf you want to know more in a not incorrect and at least less-simplified way, give Gopher, Gemini and The Smol Internet (Tales From The Dork Web #22, Steve Lord) a read.\nWebmentions don't always use ActivityPub but often do. This is enough into the weeds that I don't know all the details. If you do and want to submit something explaining it on this page it would be welcome. ...ish. The way Webmentions work is weird. Generally anything using ActivityPub will work, but some things that don't can also be made to work and that's still called a WebMention. This post isn't meant to get to technical about how they work, and frankly I don't know. "},{"id":211,"href":"/other/funlinks/","title":"Funlinks","section":"Others","content":" Other cool things that I want to promote but don\u0026rsquo;t fit elsewhere, so I\u0026rsquo;m making this list here: # Audio \u0026amp; Podcasts # Brimstone Valley Mall \u0026ldquo;The year is 1999. Lurking somewhere between Hot Topic and the food court, five misfit demons from Hell kill time inciting sin in a suburban shopping mall. When the lead singer of their band goes mysteriously missing, the demons only have two weeks to find him before they play the biggest gig of the millennium - or face the wrath of Satan herself.\u0026rdquo;\nThe Magnus Archives Videos # This video about Anime and the blending of cultures (YouTube) is quite good. 🍻, Instantly Age Alcohol - Ultrasonic Treatment (Though Emporium on YouTube) 🥚 The Egg - A Short Story (Kurzesaght on YouTube) LIFE BEYOND II: The Museum of Alien Life (YouTube, MelodySheep) is a neat video with fantastic CGI about potential alien life. Wild House Pilot \u0026ldquo;A Wolf, a Panther and a Tiger are the friendly roommates of this Wild House. They live in a wicked world with ambiguous moral codes, in which everyone is an idiot and nothing really works\u0026rdquo;\nThe Complete Guide to Magnet Implants (YouTube, The Thought Emporium) is a bit outdated now, but as someone with one in my hand, I clearly found it informative. You Are Two (YouTube, CGP Grey) is about people that have had the link between each half the brain split Not a video, but see @Foone: You Want to know how bullshit insane our brains are Tech Icons: Cliff Stoll (YouTube, AT\u0026amp;T Tech Channel) \u0026hellip; I jsut love Cliff Stoll, he\u0026rsquo;s like the ultimate cute grandpa that\u0026rsquo;s also obsessed with Klien Bottles. 🐜 \u0026hellip; 🌎→ Metric Paper (YouTube) Robot Sumo Wrestling (YouTube) Fiction # 17776 - 🛰 🏈 📅🌌 This Furry Visual Novel. is neat, albeit a bit cheesy. Killing Hitler (Reddit Writing Prompt Response) Voice of the Ilk (Wiktopher.ca) I don\u0026rsquo;t know, Timmy, being God is a big responsibility A story about Minecraft\u0026rsquo;s ending story (which itself is beautiful) Nature # Stones on are.na \u0026hellip; I just think they\u0026rsquo;re neat 🥔 Hey, and while we\u0026rsquo;re at it, how about growing Moss too. Or even Mushrooms in a Bucket. Spacebuckets are a thing if you\u0026rsquo;d like to grow other plants indoors. \u0026ldquo;A Space Bucket is a DIY indoor garden that is made by stacking plastic containers alongside lighting (CFL or LED) and airflow (PC or other fans). It is an enclosed growth chamber that can be used to garden many kinds of plants\u0026rdquo;\n\u0026ldquo;The /r/SpaceBuckets Subreddit is our main forum\u0026rdquo;\nSimilar, but like 100x more high-tech, Encapsulated Environmental System Tech # Durden and Arcan offer a new take on the how we use computers. It\u0026rsquo;s not production ready, but super weird and interesting. The blog of Szymon Kaliski features tons of cool projects involving creative code, art, music, etc. Gear Cutting \u0026ldquo;The gear template generator program is a program for printing paper templates for cutting out gears\u0026rdquo;\nThis Quiz from AV Husky on weird connectors is fun if you\u0026rsquo;re into retro tech. - Answers here A WiFi-enabled power supply in a AA battery form factor, designed for sex toys Cyberdecks for High-Tech Low-Lifes (Tales From The Dork Web) and ARM \u0026amp; x86 Team Up in No Compromise Cyberdeck (Hackaday, Tom Nardi) will open your eyes to what would\u0026rsquo;ve been if Laptops weren\u0026rsquo;t the primary form of portable computer. Installing Windows and Linux into the same partition (motorailgun, GitHub Gist) IoT Hacking and Rickrolling My High School District (WhiteHoodHacker) CSC218 - Software Precognance The Cursed Computer Iceberg Meme Basilisk collection (ⁿᵒᵗ Wikipedia) Harder Drive: Hard drives we didn\u0026rsquo;t want or need (suckerpinch, YouTube) Cory Doctorow talks about Big Tech, Crypto, and sci-fi (The New Yorker) Inspiration # \u0026ldquo;No 0 Days\u0026rdquo; (Reddit) Baz Luhrmann’s “Sunscreen Song” — The 90s’ Most Unlikely Hit, with Avery Trufelman (Switched On Pop) Music \u0026amp; Synthesis # The Geological Phonograph is an interesting idea for a synthesizer. Simulating an Entire Car Engine - yes, it makes noise (AngeTheGreat, YouTube) Analog Fractals with 1930\u0026rsquo;s Technology (YouTube) Sounds of the Mandelbrot Set Pink Trombone - Bare Handed Speech Synthesis Games # A mix between Minesweeper and a Bullethell (tic-80, Artemis Minesweeper) Hexagonal Chess (tic-80, HexChess) While I\u0026rsquo;m at it, their 5D Chess With Multiverse Time Travel too.\nA weird asteroids clone (tic-80, Ship\u0026rsquo;em up) I thought I made a hard game and then speedrunners totally destroyed it. Here is what that feels like. (Zukalous, Imgur) \u0026lsquo;Free Games\u0026rsquo; tag on Rock Paper Shotgun shows off some neat stuff History # Leonardo da Vinci\u0026rsquo;s Notebooks Maps # Historical US Topographic Map explorer or Oilslick Topographic Map Authagraph World Map: True Representation Of The Continents And Oceans An Orbit Map of the Solar System (Tabletop Whale) Fandoms \u0026amp; Cultures # Finding Community, and Freedom, on the Virtual Dance Floor (The New York Times) Jsting-F\u0026rsquo;s awesome electronic Fursuit A Thread from @foone about how cat girls can wear headphones Misc # TEXTREME - a juicy text processor, with a rhythm mode (Itch.io) I Spent 11 Years Working on This Line Rider Track by David Lu The Night I Met Einstein (Jerome Weidman, Reader\u0026rsquo;s Digest) A Twitter Thread about PayPal blocking all transactions with the word \u0026ldquo;Tardigrade\u0026rdquo; Letters About Soap Operation Mindfuck Vol. 4, a video from rC3 (YouTube) The Best Things and Stuff of 2020 (Fogus\u0026rsquo; Blog) Floor796 uwu, are you looking at my source https://www.youtube.com/watch?v=o9l4EiYFZjg\n"},{"id":212,"href":"/other/hci2/contradictions/","title":"Contradictions","section":"Others","content":" Chapter 4: What points contradict? # Having Low Level Access and High Level Usability. # Yeah, this is always a problem. It\u0026rsquo;s always been the dream to be able to describe in \u0026rsquo;natural language\u0026rsquo; what you want and to have the computer parse what you want, inferring intent, and do whatever you want for you, but naturally, this will never be totally possible. This point is only conflicting in the sense that it can be overwhelming- if a user has access to work in something as high as natural language and can manipulate those instructions all the way down at the assembly level, that\u0026rsquo;s a lot of open space. Ideally, each layer of the abstraction would be open to tinker and modify for the sake of getting the solution to work correctly, to pipe data around at any level, or to add functionality in its most natural language: Some tasks are better suited to describing what\u0026rsquo;s needed in English, some are easier to do down in the dirt.\nMaking everything open this way may sound complicated, but if the UI were presented right, it could just be a stack of abstraction that propagates up and down. Changing the assembly could change the source could change the natural language description. Better, the cost of this could be lowered if each layer is only shown and edit-able at request, and that layer just bypassed until needed. Of course, this would mean being able to make a set of languages that can be can go from higher level to lower level yet have a middle language introduced mid-stack without changing the meaning. This is complicated. It\u0026rsquo;s like asking for a fast python interpreter that can be run directly or spit out C, then have that C code be editable with its changes reflected back into the python code. I\u0026rsquo;m aware of how complicated of a problem that is. Add a natural language description above the python level in the above and it just got much, much more complicated. Still, I think this is something we should aim for.\nLatency/Speed vs Things That Are Inherently Heavy # I\u0026rsquo;m asking for a lot of inclusion of AI/ML tech into the OS and day-to-day use, yet also asking for much, much faster response times in general. To some extent, hardware with dedicated silicon for AI/ML will make this better, but regardless, there\u0026rsquo;s no way around how much this conflicts. I think the only way to fix this is to recognize what latency is and isn\u0026rsquo;t acceptable.\nAs mentioned above in Presentation of Information -\u0026gt; Updates after Initial Draw, there are some things that are particularly egregious to the user from a UI timing perspective. Waiting on the computer sucks, sure, but having to babysit the computer while you wait on a prompt that could easily be given preemptively or make sure a task doesn\u0026rsquo;t time out is completely unacceptable.\nBut even just directly looking at speed and latency, there\u0026rsquo;s still a ton of room for improvement. Why does the root file system not retain at least an index of other file systems to let you browse while an HDD spins up or a network connection is established? Why do so many damn things have s u c h l o n g animations that have to complete before the user can continue? But most of all, can we please stop building programs with electron or other things that are just full browsers for one program? Use literally anything else. The best way to lower latency is to use as little code as possible, good data structures, good libraries, and good tools. I said it contradicts to keep latency down when doing things that are heavy, but a lot can be done to make so much of what we use day to day substantially lighter to begin with no loss in functionality. I understand why projects use Electron, but if you must please just use Flutter or Neutralino or Sciter or Ultralight even a game engine. Just, not something so heavy unless you need it? Please?\nThis Input Lag (danluu) article really puts into numbers how big of a deal this is.\nCustomizability vs Defaults # I\u0026rsquo;m writing this at @292.78 on Day 15 of 12,022. I\u0026rsquo;m typing on a Dvorak, split, ortholinear keyboard in a Markdown document using Arch Linux instead of M$ Word on Windows.\nAnd It\u0026rsquo;s fucking awesome.\nThing is, nobody else can use my computer. Moreover, if anyone were forced to learn all these weird formats and behaviors instead of what they\u0026rsquo;re used to, they\u0026rsquo;d give up. What people are used to, that is the defaults make a huge difference.\nDefaults have a lot of power. There\u0026rsquo;s good reason that (for a while at least) Microsoft had to inform users about browser options. What comes ready to use and presented to the user from the start is much more likely to get used than something a user has to go out of their way to get.\nSimilarly, the ability to even make choices in the first place matters a great deal. For example, on modern versions of Windows, you\u0026rsquo;re pretty much stuck with the stock shell (desktop+file manager) as alternatives are either pretty similar to what\u0026rsquo;s there already or mostly dead.\nThe question then becomes what things matter to choose? I think ideally everything should be open enough to be replaced, but that doesn\u0026rsquo;t fix anything if options aren\u0026rsquo;t given. At the same time, Systems like Arch Linux will likely never have mainstream appeal exactly because none of these choices are made for the user. At the end of the day, most users want a system that just works. They don\u0026rsquo;t want to have to choose between a list of 5 different firewall providers, hundreds of desktop environments, and login managers, and shells, and so on. So, defaults have to be chosen.\nFortunately, so long as people have the option to change things if they want to, they can approach a system that works well for them. For me, that\u0026rsquo;s Linux, i3wm, Dvorak, and a bunch of weird hardware. For a lot of people, it\u0026rsquo;s probably just exactly how Windows is now, with a few minor tweaks.\nEverything is in the browser now anyway? # Above I said that all of this should be in the OS and not just browser extensions as people still use a lot of non-browser tools, and I think saying that was rather dismissive. It is definitely true that when using a computer today, the vast majority of your use will probably be in-browser. The problem lies in that \u0026lsquo;vast majority part\u0026rsquo; - that\u0026rsquo;s likely because in general people spend a lot more time-consuming than creating, and the browser is built for media consumption.\nOn the other hand, most creative software - be it for writing, art, video, music, etc. - is not browser based because, well, it sucks for that. Maybe that will change as WebAssembly makes things faster, but I don\u0026rsquo;t see it happening, so I think we still need full OS integration for it to really matter. Plus, browser based usually implies a monthly, recurring bill - software as a service (SAAS) - which is bullllshiiiiit.\nThe other point to make here is the browser probbbbabbllyy isn\u0026rsquo;t the best place to implement a lot of what I\u0026rsquo;ve mentioned so far given a lot of it is performance sensitive, works with private information, and relies on deeper tie in to the OS - something which for security’s sake the browser shouldn\u0026rsquo;t really be capable of.\nOn the other hand, one of the things I mentioned repeatedly was portability. Browsers actually have this working pretty damn well at this point, syncing beautifully between devices compared to how things are on Windows or Linux (I wouldn\u0026rsquo;t know about mac ¯\\(ツ)/¯)\nUnification vs Diversity # Or why \u0026ldquo;I wish everybody used Linux!\u0026rdquo; is probably not the wisest thing to say.\nTo keep this short, if everybody used Linux, there\u0026rsquo;d be less incentive for Linux to compete with Windows. If everybody used Windows, M$ wouldn\u0026rsquo;t have incentive to further their OS. Boiled down, competition is a good thing.\nThat said, there are limits to how much diversity (in the context of computing) is a good thing, too. If I search the Arch User Repository for \u0026ldquo;i3lock\u0026rdquo; there are 28 results + original they\u0026rsquo;re all forked (1) from. And, okay, not all 28 of those are actual forks, but you get the point. There\u0026rsquo;s a lot of work being duplicated on open source projects, instead of just everybody working together to make one, really good thing.\nAnd, yeah, this provides more choices, but does anybody want to research 28 choices for anything to figure out which is best? Especially when most of them are super similar? With desktop environments on Linux at least each is typically novel enough to fun to look at, but if it\u0026rsquo;s something boring, like the given screen-locker example, really?\nfor the non-technical people: A fork is just when you take an existing project and add your own features on top, usually with a rename. If I don't also keep my project up to date with the original, they'll diverge in features even more significantly with time. "},{"id":213,"href":"/other/hci2/digital/","title":"Digital","section":"Others","content":" Chapter 2: The Digital # Alright, now onto the fun stuff, I think I\u0026rsquo;ve established that the physical side of how we use a computer is sub optimal, but what about how we actually do the things we do day to day? I think, for the most part, these things can be put into a few categories:\nFinding and Accessing shit Looking at shit Storing Shit Transferring Shit Making Shit Finding and Accessing Information Sucks # Search sucks # If you\u0026rsquo;re like most people, you probably use Google Search, but also don\u0026rsquo;t like Google Search. Google\u0026rsquo;s search makes the entire top of the page ads, tracks you, and is just generally a bit invasive, but, you still probably use it instead of DuckDuckGo because the results often get you to what you\u0026rsquo;re looking for faster.\nTo some extent things have gotten better as it is gotten easier to search directly from the search bar, with more browsers supporting setting the search engine by a prefix in the url bar, so if, for example, I want to search Wikipedia and directly go to an article, I can just put a \u0026lsquo;w\u0026rsquo; before what I search:\nAnd this definitely helps, but it\u0026rsquo;s also not enough.\nSearch now regularly returns a number of results that is completely unprocessable by the human brain\nSo, what can be done about this? Well, there\u0026rsquo;s already a fair amount of advanced search options:\nBut I honestly think these more or less miss the point of how people want to search, not to mention they\u0026rsquo;re not super easy to remember. Being able to take things out in large swaths is often rather helpful, so why are there not options like NO_SOCIAL to get rid of all social media results.\nOn a similar note, Ask HN: Is there a search engine which excludes the world\u0026rsquo;s biggest websites? was posted a while back, and I agree with idea: often I can find better information on smaller sites, so I think there should be an option to just say NO_10K to drop the top 10 thousand most popular sites from the search results. I don\u0026rsquo;t know if this is really the right way to do this though. Fortunately, I do think the resurgence of Webrings is improving that a bit.\nFinding something when you don\u0026rsquo;t know the word for it exactly can be challenging too, especially if the correct term is also shared with something else (like looking for skateboard trucks but only searching the word \u0026lsquo;Trucks\u0026rsquo;). This wouldn\u0026rsquo;t be so bad, but sometimes trying to filter out the incorrect results doesn\u0026rsquo;t work either, because of unforeseen overlaps. Unfortunately I don\u0026rsquo;t know of a solution to this problem, as it\u0026rsquo;s one of conveying intent with context, something which has been a problem much longer than the existence of search engines.\nOften, I find what I\u0026rsquo;m looking for faster by just going to as close of a topic as I can think of on Wikipedia and poking around links than I can by directly searching.\nIt\u0026rsquo;d also be nice to have the ability to just set a list of bad sites. Like, please never ever show me any results from Pintrest.\nThinking more into the future, I would very much like to see a world where data searching is context aware. For example, say I\u0026rsquo;m searching for a data sheet for an old vacuum tube and I have a schematic of an old amplifier open in another tab, I would love if the browser saw the context and changed the label in the schematic into a link to this datasheet. Furthermore, it would be great if it crawled the web and finished finding datasheets and linking them, possibly well before I even got to that page in the first place. I know we don\u0026rsquo;t have the tech to do this yet, especially not as a general purpose tool, but I like to think about the future. ¯\\_(ツ)_/¯\nAnother point is the summery of information and omission of the irrelevant info. Say I were to look up bits in a byte, I don\u0026rsquo;t necessarily need the historical context as to why bits are named bits and bytes, bytes, though even though I didn\u0026rsquo;t search it, presenting that a nybble is 4 bits, and how to tell endinan-ness is more relevant, unless I had recently searched historical information or stated I wanted that explicitly. In my opinion we should be less concerned with finding relevant results and more concerned with discarding the irrelevant, though making the verbose available.\nI also think that bringing people together, potentially anonymously, based on search and knowledge could be extraordinary valuable. If as I\u0026rsquo;m looking up \u0026lsquo;How to do X\u0026rsquo; and somebody else is looking up \u0026lsquo;How to Do Y, an advanced topic from X\u0026rsquo; it would be fantastic if we could talk, albeit unobtrusively to the person being requested. It seems to me that searching is desperately lacking a social element and ranking system. How great would a simple Reddit like upvote system on any given search be? What if browsers added a comment system that was hosted though some sort of distributed network and tied to each page so people could leave comments on any site regardless of if the site has comment functionality built in? (Yes, I know this is ripe for spam and abuse, but let me dream\u0026hellip;)\nGoogle also needs to quit their shit with information cards:\npic.twitter.com/FPQnLW60Vt\n— Randall Munroe (@xkcd) December 1, 2020 Archive.org backup of tweet And it\u0026rsquo;d be great if something could actually be done about big sites like Pinterest and Quora gaming Google.\nThere is some progress being made here, as Google Says AI Generated Content Is Against Guidelines; however, a user on Hacker News had an interesting take on this:\nThis internal tension between chasing AI tooling and avoiding AI-generated content is just a prelude to the bigger shift of search engines getting reinvented around generated results instead of found results. Fast forward 10+ years and for knowledge-related queries search is going to be more about generated results personalized to our level of understanding that at best quote pages, and more likely just reference them in footnotes as primary inputs.\nThese knowledge-related queries are where most content farms, low quality blogs, and even many news sites get traffic from today. If the balance of power between offense (generating AI content) and defense (detecting AI content) continues to favor offense, there will be a strong incentive to just throw the whole thing out and go all-in on generated results.\nBig question is how incentives play out for the people gathering the knowledge about the world, which is the basis for generated results. Right now many/most make money with advertising, but so do content farms, and more generated results means more starving of that revenue source. For a portion of info that people want to know (e.g. factual info, not opinions, guidance, etc), Wikipedia is an alternative fact- and context-gathering model, but if search relies on it more, it will strain Wikipedia\u0026rsquo;s governance model and become more of a single point of failure.\nReally interesting stuff ahead.\n- npunt on Hacker News Finally, I do want to end on a positive note: Google is trying to show why results are ranked how they are, and that\u0026rsquo;s actually pretty cool - though it does still seem that search results are getting worse, at least according to Hacker News users. Fortunately, there are interesting search engines, both general purpose like you.com and more specific, like lieu for searching the XXIIVV webring or the data-oriented WolframAlpha. There\u0026rsquo;s also the neat Hypersearch extension which does make google search at least a bit better. Speaking of, the author of Hypersearch has a great blog post on the subject: If Google sucks then why is everyone still using it?\nPay-Walls suck # Look, it\u0026rsquo;s not that I don\u0026rsquo;t think journalists shouldn\u0026rsquo;t be paid. They should be. It\u0026rsquo;s just that having everything behind a paywall blows. There\u0026rsquo;s not any fun solution to this. Ads suck too. Nobody wants a web full of micro-transactions, and the idea of news sites mining crypto while I read bothers me too. So, let\u0026rsquo;s just ignore the news sites for a second, and instead, focus on the much more offensive situation: academia and scholarly articles (not that they\u0026rsquo;re all good to begin with (YouTube, DefCon 26))\nIt\u0026rsquo;s no secret that access to academic articles is fucking expensive. JSTOR alone is $200 a year for only 85% of the content, some individual articles are well above $20 to read despite a huge portion of it being publicly funded in the first place, yet somehow these sites wonder why so many sites are turning to Sci-Hub.\nYou Pay to Read Research You Fund. That\u0026rsquo;s Ludicrous (WIRED)\nBut it\u0026rsquo;s so much worse than that. Tons of information services are subscription based. So, the costs add up way worse. While it may seem like a bit of a stretch, I think it\u0026rsquo;s pretty reasonable to call Netflix, Hulu, etc. all information sources as they often host documentaries. Yet, if we look at The Cost of Every Streaming Service Per Month (TheStreet), and assume just the most popular ones, so Netflix, Prime Video, and Hulu, it\u0026rsquo;s already at $418 a year. Is it really any wonder why people are piracy again? Even if you subscribe to the theory that Piracy is a distribution problem and not a price problem, the pay walls are still the problem, as each service has it\u0026rsquo;s own incentive to hoard as much exclusive content as possible and make their platform better than others for the price. This means that each platform runs on it\u0026rsquo;s own standards and cross-compatibility is a real PITA. There are now websites and apps that specialize in just telling you which streaming service has what. Like what in the fresh fuck.\nAs an aside, if you want to get around paywalls you can use Switch your user agent to Googlebot, and that will usually immediately let you through.\nAuthentication and Authorization Suck # Authentication is the sign in- the verifying you are who you say you are\nAuthorization is what the user and service can do, or what \u0026lsquo;permissions\u0026rsquo; you grant the service and what you\u0026rsquo;re allowed to do on the service.\nAuthentication: # I\u0026rsquo;ll bet cold, hard fictional cash that you\u0026rsquo;ve put off turning on two factor for a service you don\u0026rsquo;t give two shits about.\nI\u0026rsquo;ll double my fictional money to bet that you have a junk password you use by default everywhere you don\u0026rsquo;t give a shit.\nHell, I\u0026rsquo;ll go all in betting on saying you\u0026rsquo;ve authenticated with quite a few services by just using the\nLOGIN WITH SOCIAL MEDIA\nbutton, though possibly only because it was the only way to login to that service at all.\nUnfortunately, all of the above are probably not the best decisions.\nThe top two points combined mean someone can find your password in previous security breaches (haveibeenpwned), and then just login in, easy as that.\nUsing a social media login means that if you ever lose access to that account, either because Facebook or Google or Twitter or whatever decide to ban you or because you manage to forget you \u0026lsquo;master\u0026rsquo; password and lock yourself out, you\u0026rsquo;ll be locked out of everything you logged into those services with. Not to mention if someone manages to break into your Facebook or Goggle or Twitter or whatever they\u0026rsquo;ll be able to login to any of those services too.\nAnd look, I\u0026rsquo;m guilty of all of the above too. Sure, a password manager helps with this, but that\u0026rsquo;s still annoying too as sometimes you just need to quickly sign in on a device for a few minutes. As of right now there\u0026rsquo;s just no good solutions that are secure, easy to use everywhere, and fine gained enough to let the user give permissions as they want, and not give extra permissions they don\u0026rsquo;t want to.\nAlright, so just follow the normal advice and use long passwords?\nxkcd #936 Yeah. No. Well sorta. Okay, let me explain. Yes, you should use long passwords for exactly the reason this comic explains. But really, we need to stop using passwords outright. They just sorta suck.\nInstead, we should go to Single Sign-On, like the above \u0026ldquo;Login with Social Media\u0026rdquo; example, but the user should be able to trust and change the identity provider with ease, to avoid the \u0026lsquo;Facebook banned me\u0026rsquo; issue.\nThe real shitty part is a lot of services already support something like this, letting you setup sign in with Single Sign-On via your own identity server, but it\u0026rsquo;s usually limited to enterprise users.\nThat said, you can self host Single Sign-On (like the way \u0026lsquo;Sign in With Google\u0026rsquo; works), keycloak, Dex, Gluu are options for doing this. It\u0026rsquo;s just that basically no online services will let you use your self hosted service without an enterprise account.\nSo, for now, users get fucked. There\u0026rsquo;s really not any good options.\nThat said, some things have gotten better, Webauthn provides a much better way to authenticate with many services, including some that can provide Single Sign-On identities, often via those little USB keys which are hugely better than the typical user name and password paradigm.\nNote, those USB security keys have updated in standard. The newer ones which support WebAuthn are a bit more expensive and less common. The standards are confusing to understand, but the TLDR is you want something that supports WebAuthn/FIDO2.The older standard, U2F, is a two factor system while the FIDO2/Webauth keys can outright replace passwords on the service If you really want advice on what to use for your personal, daily password storage needs I think keepassxc is probably the best option at the moment, though it\u0026rsquo;s still a tad awkward.\nFor advice on security and privacy see the Security \u0026amp; Exploitation and Privacy pages. Authorization: # Character owned by Vega, art by Shade Put simply, we need easier to use, fine grain authorization settings that can\u0026rsquo;t be bypassed. I should be able to tell a program, website, or app that I don\u0026rsquo;t want to give it my location, and then, if it asks anyway it should be fed garbage. Refusal should also not stop access to that service(1). Similarly for storage, microphone, contacts, etc.\nNewer versions of Android actually do this really well, including the ability to only grant those permissions for that session. This is amazing. It\u0026rsquo;s not perfect, far from it. Like, Bluetooth requires location permissions and, unless you\u0026rsquo;re on a rooted phone, there are some permissions the user can\u0026rsquo;t even give. That\u0026rsquo;s a load of shit, but I\u0026rsquo;ll come back to that.\nContent Linkage sorta sucks # Search is the biggest scam in UI now. It almost never works. How do you find stuff that is not in your top 10 results of mini snippets? We need more explorative interfaces taking advantage of context and association. pic.twitter.com/RC1BEekf3X\n\u0026mdash; Marcin Ignac (@marcinignac) June 4, 2021 Archive.org backup of the above tweet Screenshot from the homepage of Obsidian.md The digital world doesn\u0026rsquo;t have to be lonely pages indexed like a book, why are we treating it as such? Today each page can point to any other page in a beautiful web of interconnected information, where each topic has lines of association spanning such that no two pages are unconnected. Wikipedia sort of has the simplest form of this, but what if we had systems so capable of automatic understanding - not just tagging - of information that any new info could propagate though that web naturally. Social linkage to people in the same graph, even if anonymous, could help connect people that together, due to their very specific knowledge, drive man kind further. I should clarify to, I literally mean a web/graph, possibly in 3D, relating and indexing information, possibly like these 3D views of Wikipedia: (though the data should probably be served \u0026lsquo;raw\u0026rsquo; so that other presentation methods can be developed, as this definitely wouldn\u0026rsquo;t be ideal for actually reading the content)\nWikiGalaxy: Explore Wikipedia in 3D (wikiverse.io is very similar and worth checking out too) Obviously this overly linked system is something that people would need to get used to. Until the advent of the WWW we\u0026rsquo;ve read information linearly, page by page. The web has allowed this tree traversal style of navigation so that any missed topic can be reviewed, but generally this is a system where the tree only builds down, to simpler information, from the current node. @azlenelza It seems weird to think about an algebra book where it suddenly references multidimensional calculus, but this is exactly what I\u0026rsquo;m implying. In my education there was uncountable times I had to learn something because \u0026lsquo;it will be used later\u0026rsquo; with no explanation as to how or why. Linking back up the tree allows for information traversal in both directions, eliminating this problem.\nPresentation of Information Sucks # This section is about how we view information, the presentation of words on a page, graphs, and information in general. To start, I want to look at something a little bit different.\nThis is the home page for a project called Gemini, which is a sort of alternative internet, but, wait, hang on\u0026hellip;\nThese are both that same page, loaded in different browsers. Why do they look different?\nWell, Gemini does something you may thing strange: It let\u0026rsquo;s the browser (client) handle the look of the page. It only serves the raw text. That\u0026rsquo;s it. That\u0026rsquo;s all you get.\nNow, I do not think this is a good idea for the general web. But, I do think as an idea, it can give us some valuable insights.\nPut a pin in it for now though, let me jump ahead into Dark Patterns:\n\u0026lsquo;Dark Patterns\u0026rsquo; # A dark pattern is \u0026ldquo;a user interface that has been carefully crafted to trick users into doing things, such as buying overpriced insurance with their purchase or signing up for recurring bills\u0026rdquo; - Wikipedia That\u0026rsquo;s the definition from Wikipedia anyway. I think it\u0026rsquo;s a bit better put as \u0026ldquo;Dark Patterns are what happens when UI designers are a bag of dicks\u0026rdquo;\nThis Site has a lot of really good info on Dark Patters, and I recommend heading over there and then coming back over here.\nOh, cool, you\u0026rsquo;re back.\nThe biggest dark pattern that drives me nuts is a bit of what that site calls \u0026lsquo;Confirm Shaming\u0026rsquo; and a bit of \u0026lsquo;Misdirection\u0026rsquo;, I\u0026rsquo;m talking about sites that do this\nDO THE THING HERE\nor don't and watch the world burn\nwhere the design is actively pursing an agenda. But it's not just those. Even ones that look semi reasonable can still be annoying if they don't include the action directly. The affirmative action should be stated on the button that triggers it and both actions given equal weight to the user.\nDon't Do Action Do Action for example\nLeave Items in Place Delete Items Note here by Action I literally mean to include the verb. Delete. Replace. Print. Etc. Yes or No is not good enough.\nWith destructive or irreversible actions, such as deletion (not recycling), given a confirmation dialogue, and if particularly important, a dialogue that require meaningful user input, like this prompt when deleting a repo on GitHub\nAlright, so back to Gemini: Making more things like it wouldn\u0026rsquo;t totally solve this problem, designers could still totally chose to make the text confirm shame, but by letting more elements be controlled by the user (or their browser), we could at least do a little bit better by letting that ensure options to confirm or deny are given equal weight and that they are colored appropriately.\nIt\u0026rsquo;s not like this system couldn\u0026rsquo;t be abused still of course, and there will always be a balance between the user trusting the service and it\u0026rsquo;s UI and the beauty of that UI, but I think we could stand to go a bit in the direction of Gemini.\nMisleading Information # Global warming relies on the theory that we are destroying ecosystems. There is no evidence that we could destroy ecosystems. - Rush Limbaugh, recipient of the Medal Of Freedom. Yes. Misinformation online is a royal fucking shit show. There\u0026rsquo;s no way to possibly preserve total free speech, not that free speech is always perfect, and also have a system that doesn\u0026rsquo;t spread misinformation to the extent that people stop vaccinating their kids or thinking that COVID is a hoax. I\u0026rsquo;m not trying to address that problem. If I could, I would. But I honestly think that\u0026rsquo;s a genie we can\u0026rsquo;t really put back in the bottle now.\nInstead, I think we could do some things to make it a bit harder to spread stupid, false information by making it a bit harder to present data in misleading ways. Sure, the data itself may still be bad, but, we can make an attempt to increase transparency and display data accurately. How? Well, first, go have a look at some comically bad graphs (Statistics How To).\nA lot of these come down to graphs that purposefully play with axis or do other bullshit with the express intent of tricking you.\nSo, fuck their formatting. We should do it the Gemini way: Let the client handle the data display, and make the graphs interactive. If it\u0026rsquo;s a two bar chart with one bar at 54.5% and one bar at 55.0%, that should be what the user sees first and only then can zoom in.\nThis is already easy enough to do with something like https://d3js.org/, but it would need to be on the client side, and the server would just have to send the raw data + a preferred way to render it (bar chart or whatever), otherwise the problem is still there. Over time standards could grow to support more display formats. This would have the side effect of making it easier to author data and make web pages in the first place.\nThis also makes it easier to compare data sets, as now the client actually has access to the source data, or at least the data that drew the graph.\nThis practice could be incentivized too, as news, shopping, and review sites that use it could do so as a way to build trust with their users, and, probably more importantly for adoption, shit on their competitors that don\u0026rsquo;t do the same.\nFor those that still don\u0026rsquo;t, it might be possible to spin up a system with some machine learning to extract data from graphs in static images, and then re-display them as dynamic content.\nThis may not ensure the data is good, but at least it makes progress in increasing how we can trust data to some extent.\nThis could have extra uses too. Having something that could take two 2D graphs with a common axis and turn it into one 3d graph would be incredible, particularly if that data could come from multiple sources across multiple domains. Combine this with the ability to change the type of graph and this could help expose otherwise non obvious trends. After all, some of the best discoveries come from random people making cross disciplinary connections.\nBeyond that, content moderation needs improvements too - I don\u0026rsquo;t even mean fake news or porn here (Though we could stand to have better nsfw tagging on most social media). I mean the bullshit reviews on Amazon or the fake products when shopping online (mostly fake electronics). If those services are going to be allowed to make stupid amounts of money, they should be required to do at least a tiny bit of consumer protection. Hell, Amazon was even selling Negative Ion/Anti-5g Products Are Actually RADIOACTIVE (The Thought Emporium, YouTube).\nInformation Overload # Yes, I see the irony in a post this long. Bobby Mikul, Times Square :CC0 \u0026ndash; Source Information overload is increasingly becoming a problem. As more and more information is accessible at our fingertips and more advertisements have the opportunity to be beamed via any one of a number of surrounding screens directly into our retinas we need a way to filter it down to levels the human brain can cope with and digest.\nThis is a complicated subject, on one hand, it\u0026rsquo;s amazing to have an infinite wealth of information. On the other, an ever growing amount of that information is shit and irreverent, and eats away at our very limited mental processing time for the day, we can only ingest and actively pay attention to or throw out so much information, and when much of the information we seek to avoid (ads) are actively doing everything in their power to demand attention from our brains, be it with sex appeal, bright colors, or even humor, it\u0026rsquo;s an uphill battle. So what can we do? Well, a good start would be to legally limit advertising to be less distracting from normal content and make the advertising more easily distinguishable from the real content. But I don\u0026rsquo;t think that\u0026rsquo;s enough. I think if we\u0026rsquo;re going to make systems that have machine learning to get better and better at sucking our time we need to put in just as much effort to making design that promotes health and consumption in moderation.\nAn example of this is Netflix\u0026rsquo;s \u0026lsquo;Are you still watching?\u0026rsquo; while this was implemented on their end to prevent unnecessary usage of data, it has the side effect of letting a user know they\u0026rsquo;ve been on the couch longer than should probably be advised. I\u0026rsquo;m not advocating for interruptions at every corner, just affirmative action by the user before bombardment with data. I do think as much data as possible should be linked to or aggregated, but force me to see more than what I request plus some surface level information. For something like YouTube this might mean playing a playlist is fine, but don\u0026rsquo;t start playing another \u0026lsquo;related\u0026rsquo; video when that list is over.\nBeyond that, keeping the design minimal but powerful. I think markdown is a great example of this. Users aren\u0026rsquo;t as dumb as people seem to think, we can, and do, learn the ways to make interaction with the things we use daily faster, so make the \u0026lsquo;speed limit\u0026rsquo; as fast as it can be while lowering the need for menu diving and learning to do complex actions. Putting a frequently used option into a menu that needs to be clicked at all is much slower than assigning it a keyboard shortcut.\nBut, okay, back to information overload: The biggest problem is still that there\u0026rsquo;s just too much. I don\u0026rsquo;t really think there is a solution, maybe Banning Outdoor Ads like Brazil\u0026rsquo;s Largest City Did, would be a start. Maybe requiring that the Terms of Service for any service a user signs up to be a limited length and actually commendable would help. But I just don\u0026rsquo;t know. I think the world has just simply progressed to a point where FOMO has gotten to a point where missing out is just a fact of life as 500 hours of content are uploaded to YouTube every minute.\nWhat I do know is that trusting the YouTube or Facebook or Twitter algorithm to decide the content I see is incredibly dangerous, but that the alternative is overwhelming.\nMeanwhile, legislation that has been passed to try to fix some of this often results in other issues, like all the \u0026lsquo;Can we give you cookies?\u0026rsquo; prompts on websites: Why The Web Is Such A Mess (Youtube - Tom Scott)\nImagine: drag to select text, pinch to summarize, vertical unpinch to generate alternatives, *inspiration*, record new sentence to replace the old one\nAnd voilà, you\u0026#39;ve explored multiple directions on the landscape of meaning and rewrote a sentence in just a few moments\n4/4 🧵 pic.twitter.com/LlcmcY3kpw\n\u0026mdash; Azlen Elza (@azlenelza) November 25, 2020 Backup of thread on Archive.org Updates after Initial Draw # Fuck your shit. Compute first, then display.\nThis may be the most irritating thing I encounter with modern computers. Our brains and bodies, as much as we may wish them to, don\u0026rsquo;t respond to stimuli right away. So, when I search for something, go to click something, and then while I\u0026rsquo;m moving the mouse to click the screen updates and a different link or icon is now in the spot I meant to click it\u0026rsquo;s really fucking annoying.\nWindow\u0026rsquo;s built in search, especially with web results on, is a huge offender on this but Google and other search engines do it too.\nIt\u0026rsquo;s not just search either, I\u0026rsquo;m sure everyone has encountered this in various places.\nAll you have to do is not change shit until you\u0026rsquo;re done computing the answer, and then only change it once. This is about as simple as it gets and it avoids magical re-arranging menus that make everyone lose their shit.\nEverything needs to be more damn responsive # Fuck your 𝒻𝒶𝓃𝒸𝓎 animations. I love eye candy, and a little bit is fine, but I shouldn\u0026rsquo;t have to wait as a menu slowly drops down with some pretty animation. If I\u0026rsquo;ve used that menu before I probably already know where I want to click, and now because I expect to be able to do so instantly I just clicked whatever is behind it. Fuck that. If the animation is masking some load time, sure, but as soon as it is loaded, quit it, and show the damn content. If the animation is necessary to avoid suddenly flipping from black to white and blinding users, again, I get it. But it doesn\u0026rsquo;t need to take more than 100ms.\nAdvertising # If I have to spend more than a fraction of a second to process what is being shown to me is an ad, it should be fucking illegal. If you want to put ads mixed into the content, then it should be required to be a lot of a lot more visually obvious.\nOriginal:\nEdited:\nHere the original at least has some color differentiation (Using the Boost app to view Reddit) but on the official Twitter client I actually have to stop and look to avoid accidentally clicking an ad link. That\u0026rsquo;s some bull shit.\nYunno what else is bullshit? The fact that all of these ads are \u0026lsquo;personalized\u0026rsquo; to the point that collecting crazy amounts of information on individuals is expected and almost inevitable online, even with a pile of tracking blocking extensions and a DNS blackhole like pi-hole. This could, and should, be a rant of it\u0026rsquo;s own (and is, again, see the Privacy page) Being spied on by our own devices is 100% not okay and it\u0026rsquo;s one of the biggest reasons that they way we interact with computers sucks.\nStoring Information Sucks # Storing your data blows. Users have to contend with backups, backups for you backups, bitrot, file size vs compression, what file system to use, how to make backups actually convenient, mirroring information between systems with limited bandwidth, etc. But to start somewhere let\u0026rsquo;s look at archival:\nArchival # Digital archival on \u0026lsquo;cold storage\u0026rsquo; sucks. For one, that cold storage is often either a PITA to attach in the first place, Usually using either using a slow USB interface, an expensive and far-from-universal thunderbolt one, or, if you want to go very bulk storage, requiring a specialized PCIe card which is meant for servers which brings along it\u0026rsquo;s own pile of issues.\nBut even once you have everything attached, most of the time backups are pain to run. You can always do the lazy copy-and-replace-existing method, but that\u0026rsquo;s painfully slow as it has to check all the current files instead of just doing the logical thing and comparing two indexes, but, of course, most file systems don\u0026rsquo;t support this index based method. Sure, there\u0026rsquo;s software to add it, like Bvckup, but most that I can find is paid or not something I would trust. Right now, the best thing I can find is using rsync, as I have a script with a bunch of lines like\n1 rsync -a --delete -P --exclude={\u0026#39;.local/share/Steam\u0026#39;} /home/vega /run/media/vega/BigOlBackup and, yeah, that works, but it requires a reasonable degree of tech-savvy-ness\nUsing Git (or GitAnnex) is of course an option, but that has a higher barrier to entry to learn than seems reasonable. At the same time having actual file versioning needs to be a thing, something better than having untitled.docx, untitled.docx,untitled3final.docx, and untitled3.5.finaler.docx, even if it is still storing the file in full (though hopefully compressed) behind the scenes.\nBut, on the note of indexes, why are tools to provide a disk-offline index not better. From what I can find, catcli and Virtual Volumes View are the main two options, and both are bit out of the way to use, compared to just having it be natively in the file browser.\nPhone ↔ PC is the fucking worst. # MTP needs to die a very painful death. USB Mass Storage, that is, devices that show up the same way a flash drive does, are infinitely easier to work with. On Android, with large folders, I\u0026rsquo;ve found adbfs, a tool that lets you do file transfer over Android Debugging Bridge, to be much better than MTP, but, really? No \u0026rsquo;normal\u0026rsquo; user should be expected to use that. Hell, a lot of people are just uploading files to the cloud and then downloading them on the target device because it\u0026rsquo;s easier. There\u0026rsquo;s also a growing number of apps that let users to transfers over wifi by hosting an Samba server on the phone, but why would something wireless be better? It\u0026rsquo;s absolutely crazy that things have gotten this bad.\nAlso, while I\u0026rsquo;m bitching, can we please stop removing the SD card slot ( and headphone jack )from phones? I like being able to take my full music collection with me.\nWe\u0026rsquo;re using ancient formats # Look, jpeg and png are perfectly fine formats. For 2000. It\u0026rsquo;s 2022. HEIF (or BPG) really should be standard. Instead, it\u0026rsquo;s a motherfucker because M$ is too damn cheap to include the HEVC extensions which it relies on it without either having the user pay $0.99 (or claiming to be the OEM) because a collection of jackasses have it patented so hard and require licensing fees such that it may as well not exist. HEIF/HEIC or BPG I think have a good chance because of the preexisting hardware acceleration, but other formats like hific, which uses GANs to do compression, look promising too.\nAs a note about why I wrote about HEIF/C in particular, most phones are capable of storing images in this format now, and IPhones do by default, which is a real PITA if an apple user emails these pictures to a Windows user.\nOf course the same applies in other formats. .flac is replacing .wav for high end audio, but why not Direct Stream Digital (DSD)?\nAll the best formats are a pain in the ass format shifting sucks, opening them sucks, patents suck People use some really, really shit formats A lot of formats are needlessly complicated and not human or computer readable to anyone but the software vendor Bit rot? # xkcd #1683 Data on the internet gets compressed, saved, recompressed, resaved, upscaled, re-colored, and deep-fried pretty quickly.\nThis combined with more traditional bit rot, where errors result in flipped bits, is a massive PITA.\nSure, tools like Waifu-2x help with the first problem, but using AI-up scaling to fix the loss of data isn\u0026rsquo;t ideal. For actual bit rot, tools exist to detect bit errors in most formats and you could always use a better file system that does check summing, but both of these require more technical skill than most people have.\nWhile not exactly related, data accumulation and near-duplication (think having two pictures with one having just a 2px cropped off the top) is a big problem. Trying to sort though a mounting of images, text, or audio files can be nearly impossible if put off for too long, making good digital hygiene a must despite the fact that nobody ever tells anybody how to have good digital hygiene in the first place. (don\u0026rsquo;t ask me!) AI tools to tag and identify images and audio help, but those tools are still limited and often only work well on uncompressed data, so no .jpgs or .mp3s for you. Plus, a lot of them upload your data to get processed (privacy concerns) or just don\u0026rsquo;t work on some data (good look tagging all the pictures in your homework folder)\nWith all of this combined, keeping your files in order, not corrupted, and not having duplicates becomes a growing issue.\nStorage Hardware and File systems suck. # The hardware issue is mostly a side effect of trying to market technical differences to people who ultimately just want a place to drop their files. A normal user shouldn\u0026rsquo;t have to know what all the various specs of a HDD or SSD mean to know what to buy.\nThat said, holy shit do manufactures suck at this. Everything from Western Digital redefining \u0026lsquo;RPM\u0026rsquo; to Western Digital uses SMR on NAS drives, DRAM-less SSDs and Bait-and-switch in regards to SSD performance.\nSMR, or Shielded Magnetic Recording, has a few issues that make it problematic for Network Attached Storage (NAS) systems using multiple disks, particularly if the NAS is running ZFS, a common file system made exactly for this use case. So Western Digital doing this was well and truly a massive fucking problem for people needing to store a lot of data.\nBut the issues go beyond that. While a bit controversial, I think literally any modern filesystem (BTRFS, ZFS, or even EXT4) is much better than the mess that is NTFS, yet, Microsoft only officially supports NTFS, FAT(/32), and ReFS- all of which sorta suck.\nThere is no fucking reason everyone - Microsoft, Apple, Linux, etc. - can\u0026rsquo;t fucking agree on something and avoid the massive fustercluck that is using FAT32, a filesystem that can only store files up to 4GB, as the only common system that \u0026ldquo;just works\u0026rdquo;.\nNote, you can use BTRFS on Windows, using 3rd party tools. This seems to be stable enough and has some real advantages for dual-booters. Technically, the same is true of EXT2/3/4 too, but I don\u0026rsquo;t trust it to not eat my data.\nIdeally, we\u0026rsquo;d be using Logical Volume Managment so that the entire filesystem can have snap shots, partitions could be resized, or use multiple physical disks\nI also don\u0026rsquo;t get how in 2022, some systems are still booting off of spinning rust? Hell, why are we really using it at all. Yes, I know the price per GB is much lower, but we\u0026rsquo;re talking about something that is so sensitive to vibration that Shouting In The Datacenter is a problem. This is extra dumb when you consider a lot of computers or game consoles will be right next to speakers and subwoffers. Every time I pickup a laptop with an HDD and I can feel the inertia of the disk it makes me cringe.\nCloud Storage is a terrible idea # To keep the core of this issue brief: The cloud is just someone else\u0026rsquo;s computer. You can never be certain of what they\u0026rsquo;ll do to your data.\nYou can\u0026rsquo;t be sure they won\u0026rsquo;t have some random DMCA complaint take something down.\nYou can\u0026rsquo;t be sure they won\u0026rsquo;t suddenly increase price and essentially hold continued access to your data at ransom\nYou can\u0026rsquo;t be sure they won\u0026rsquo;t mine your data for targeted advertising\nYou can\u0026rsquo;t be sure your data won\u0026rsquo;t accidentally be public because of bad security.\nJust don't put your data in the cloud.\nCharacter owned by Vega, art by Talon Creations and Vega That said, I will admit two valid uses:\nCollaborative Editing. GSuite is actually pretty cool. Backup but only if the service is only backup and you already have at least an on site backup. For example, I think Backblaze is actually a pretty neat service and it seems like they do things reasonably. The ship you a hard drive option here is what makes it make sense to me. Note, I\u0026rsquo;ve never actually used Backblaze. But 1. still has issues, especially if the format the collaborative documents are saved as are only valid on that cloud platform. Think like .docx for Word, but what does GSuite use? Can you be sure it\u0026rsquo;ll work offline?\nI\u0026rsquo;d also like to mention the idea of distributed computation here as well, as It can be used for both the storage of and computation on data. I think that having a true distributed system in place, one where all users contribute compute and storage for it\u0026rsquo;s use, makes sense. The obvious ask is to get it to be self sufficient. This brings up the idea of balanced usage to contribution, I think the easiest solution is to simply use a system of computational debt tied to each user account. If the user is creating more computational debt than the average debt the system can sustain then that user should be handicapped in bandwidth accordingly. This does sort of bring us full circle in \u0026lsquo;can I just trade debt with someone, or sell them my computational time\u0026rsquo; such that we\u0026rsquo;re back to crypto based services again though, and I really don\u0026rsquo;t like this idea for two reasons:\nThis system needs real time computation and bandwidth, and these vary in value just like how electricity peak hours cost more. This incentives simply paying for compute time instead of actually contributing computational power to the network like it actually needs, which in turns creates an incentive for people to do this at scale annnndd look at that we\u0026rsquo;re back to centralization. The biggest problem with this is that home Internet users very rarely have symmetric connections, so people would probably be very pissed off if their download speed were suddenly tied to their upload speed. This could be offset by building up credit, as previously mentioned, but that has the issues, as previously mentioned. I suppose there could simply be a credit cap, but setting that would be exceedingly awkward as a logical number to use would vary by user and how they use the system.\nI do hope that someone has a better idea than me for the future of distributed computation, because I really can\u0026rsquo;t see any good solutions despite wanting it to be part of the future.\nI\u0026rsquo;d also be remiss if I didn\u0026rsquo;t mention Boinc, a tool you can use to donate unused computational resources from when your computer would be otherwise idle to good causes such as Searching for Extraterestial Life or Folding protiens to look for cures to various diseases.\nUnfortunately, in response to criticisms, like this one, of cloud storage a lot of providers of \u0026ldquo;Personal Cloud\u0026rdquo; devices have cropped up. Though, headlines like “I’m totally screwed.” WD My Book Live users wake up to find their data deleted and If you have a QNAP NAS, stop what you\u0026rsquo;re doing right now and install latest updates. Do it before Qlocker gets you might go to show why that\u0026rsquo;s also a pretty fucking stupid idea.\nTransferring Information Sucks # I mostly mean networking, but things like flash drives too. The Internet Sucks # Well, okay, the internet is honestly fucking awesome. But some of it is designed horribly and some of it is nowhere near as good as it could be because of users making stupid choices.\nTo start with, let\u0026rsquo;s look at how horribly shit was designed. As a start, I recommend reading IPv6 Is a Total Nightmare — This is Why by Teknikal, it explains the issues with both IPv4 and IPv6 beautifully. There are other issues with the web, like the fact that neither DNS or IP were designed to be encrypted (and so private) by default, so instead we\u0026rsquo;ve had to patch on fixes like https. Of course, there network security problems are found regularly, such as Nat Slipstreaming, a nasty issue that made the rounds recently.\nThere are also issues of access. In the US at least, most places are part of an ISP regional monopoly. Often they\u0026rsquo;ll argue that you do have options, such as satellite internet. However, this is complete and total bull shit. You do technically have the option, sure, but this option is slow, usually has data caps, and just generally sucks. If you\u0026rsquo;re in a rural area, you\u0026rsquo;re lucky if the copper in the ground is still good enough to get you something fast enough to watch a YouTube video. Then, on top of all this BS, the ISPs regularly get caught for doing shit to your traffic, whether it be injecting ads, terminating connections early, blocking services (often torrenting), not letting you forward ports, etc. Oh, and then they try to charge you for a modem you don\u0026rsquo;t even have- thankfully that was just made illegal.\nTLDR: ISPs are evil.\nCentralization Sucks # At the time of writing, a lot of decentralized services are hopping on the cryptocurrency train. This is really fucking stupid. So, while projects like Lbry, Dat, IPFS, and the Beaker Browser are cool, until the space cools down a bit and stops thinking Crypto is a good idea I\u0026rsquo;d recommenced proceeding with extreme caution. Most services on the Internet are Centralized. When you get on Facebook, you\u0026rsquo;re connecting to Facebook\u0026rsquo;s servers. YouTube? YouTube\u0026rsquo;s servers. And so on.\nWhat if, instead, when you watched a video it downloaded it to your computer (at least for a little while) and then, when the next person wanted to watch it they got it from you. As more people watch a video, the number of people who have it grows, and so it\u0026rsquo;s faster for the next person to get it. This is a system that naturally scales. It\u0026rsquo;s also resistant to censorship (which is both good and bad). A slight variation on this is the idea behind PeerTube. Similarly, there\u0026rsquo;s mastodon as an alternative to Twitter.\nBut we can do better. With tools like ipfs or cjdns we can replace the entire back-end, the internet itself, with something that is inherently decentralized and peer-to-peer.\n↑ Note, this video has a part 2: Decentralize 02 / VoluntaryNet: The Digital Public Square\nTransferring Your Profile Sucks # Say you want to move off of Twitter and go to Mastodon, how do you do that? Well, there are options. You can run a bridge account and have toots from Mastodon get automatically posted to Twitter and just leave a pinned tweet saying you\u0026rsquo;ll only reply over on Mastodon. But, wouldn\u0026rsquo;t it be better if you could import all of your tweet history?\nWhat if you get a new computer, wouldn\u0026rsquo;t it be nice if setting it up was as easy as just copying over a settings file that has everything you want, all your programs, configurations, accounts logged in, etc? Sure, you can get close by using a few \u0026ldquo;super accounts\u0026rdquo; like signing into Chrome, Steam, etc. but then your both trusting other services with your passwords and all your data.\nI think this comment points to a better idea:\n[\u0026hellip;]\nSwitchable \u0026ldquo;user profiles\u0026rdquo; instead of \u0026ldquo;user accounts\u0026rdquo;, which are an artifact of giant shared computer systems. User profile just contains personalized settings and can be located anywhere, including removable media so you can take yours to other computers. If you want to keep things safe from others, encrypt them. Otherwise there are no permissions except those applied to applications themselves. - AnIdiotONTheNet comment on the Re-Thinking the Desktop OS Hacker News Submission For this, I think Solid, a project by Sir. Tim Berners-Lee, the guy behind the World Wide Web, is a decent implementation of this if it were to gain enough traction to actually be used.\nSolid\u0026rsquo;s central focus is to enable the discovery and sharing of information in a way that preserves privacy. A user stores personal data in \u0026ldquo;pods\u0026rdquo;, personal online data stores, hosted wherever the user desires. Applications that are authenticated by Solid are allowed to request data if the user has given the application permission. - Solid Wikipedia Article But the point I\u0026rsquo;m trying to convey is that right now setting up a new device or logging into a service sorta blows. The user profile needs to be secure, user-owned, and decentralized. For those that know Linux, it\u0026rsquo;s what making your ~/.config folder into a git repo should be like.\nSpeaking of \u0026ldquo;Your Profile\u0026rdquo;\u0026hellip; # While, yes, advertisers collect a bunch of information about you to advertise to you in a profile that you can\u0026rsquo;t control and that sucks, others have spoken about that extensively, probably most entertaining for this Data Brokers: Last Week Tonight with John Oliver. But, most people also have some intentionally public online presence, where they have some information they\u0026rsquo;ve decided they want people to be able to find. The comfort with this varies from person to person, but for many it may include age, birthday, gender, name, place of work, and a few hobbies.\nYou\u0026rsquo;d think this would be easy enough to get right.\nIt\u0026rsquo;s not.\nFirst of all, let\u0026rsquo;s pick on gender selection.\nIf you make a website or app and do this:\nPlease select your gender:\nMale\nFemale\nTrans You can go fuck yourself. \u0026ldquo;Trans\u0026rdquo; is not a gender. If someone is trans, they are now identifying as a different gender than the one assigned at birth. If you really must know, this can be a box, but, it\u0026rsquo;s also probably none of your fucking business. What you should probably have is something either asking for preferred pronouns, or, if you absofuckinglutly must have their gender and know if they\u0026rsquo;re trans (which, uh, no, you probably don\u0026rsquo;t.) then proceed with caution. Otherwise you may end up in one of @Foone\u0026rsquo;s many Twitter Threads making fun of bad UI choices.\nEven with names, this is easy to fuck up. Like Google+ (now dead) wanting only \u0026ldquo;real names\u0026rdquo; which is a privacy disaster and has real issues for some people with uncommon or long names, and it\u0026rsquo;s even worse for those with either weird characters or no last name. (Different Cultures are a thing, remember.)\nBasically, anticipate there being someone, somewhere that doesn\u0026rsquo;t fit nicely into your design. Someone will have a name with a substring that contains a curse word when interpreted in a different language. An intersex person may sign up for your website and be neither Male or Female while also not being trans or gender fluid or anything else you anticipated.\nAs a user, this means we really, really need to be able to fully control our profiles. Let people enter their own preferred pronouns, names, etc. Don\u0026rsquo;t make it a checkbox.\nLocal Backups By Default # Most web pages are reasonably small, especially if you ignore java script crap. Why do browsers not just backup all web pages we go to (on desktops and laptops where storage is a non-issue) ? This would provide the benefit of being able to do a local text search of everything browsed recently as well as backups in case the page goes offline or moves.\nThere are tools that do this already (like Archivebox) which can be automated but it\u0026rsquo;s still not user friendly to normies. There are also sites like Wayback Machine and Perma.cc that will save copies of websites for you and provide a link that should always work, even if the website goes down or the address changes, but again, this is a bit of a pain. It also can lead to copyright issues for these services.\nWhy can’t you easily search all of the text you read on any screen (desktop + mobile) over the past day? It’s strange how much obvious, low-hanging fruit of this form still exists. - Patrick Collison (Stripe CEO) Physical Interaction # I also think the boundaries of physical and digital should be more blurred. I\u0026rsquo;d love if I could set a book on my desk and search though it for an idea or concept by mere image recognition of the cover, or if it\u0026rsquo;s an unknown book at least being able to digest any pages shown to it explicitly. Say a section was highlighted? It would be great if that were automatically added to a personal journal file of sorts for future reference, especially if related data were automatically associated with online sources, or links made to people who are interested in similar subjects.\nThe Screenless Office (Screenl.es) and Dynamic Land both show this idea pretty well.\nCreating New Information Sucks # Or, People Will Only Make Stuff That Is As Good As The Tools They Have\nNote the \u0026ldquo;Will\u0026rdquo; and not \u0026ldquo;Can\u0026rdquo;. A very talented musician can make a shovel sound good, a talented photographer doesn\u0026rsquo;t need a good camera. But in general that\u0026rsquo;s setting the required bar of talent - and therefore time - higher. The better and more efficient our tools are, the better content people can make without putting in more time than they\u0026rsquo;re willing to.\nA better camera won\u0026rsquo;t make you a photographer, but it might be the difference between unusable pictures and a saved memory for someone with less skill.\nI think I\u0026rsquo;ve generally made the case that our tools suck so far, but here\u0026rsquo;s where I think things can get really interesting. I\u0026rsquo;ll break this up into multiple problems:\nWe Need Faster Input # WYSIWYG (pronounced wizzy-wig) or What You See Is What You Get editors (usually for text and images) are those that do their best to make sure that what you see in the software directly relates to what you\u0026rsquo;d get if you printed it out or sent it to someone else - Like Microsoft Word. Unfortunately, it\u0026rsquo;s often true that WYSINWYW What You See Is Not What You Want. That is, controlling software like Word is a massive pain in the ass. So While WYSIWYG sounds great in theory, it\u0026rsquo;s often hard to use, a menu-dive hell, and is slow compared to something more limited like Markdown. Markdown is what this website uses, in a nut shell\nYou write text like this\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Title normal text, **something in bold**, and a *title* in itilics. * a bulleted list item * and another `some code` | and | a | little | | ------- | ---- | ------------- | | table | with | some | | content | for | demonstration | \u0026gt; a quote And it turns into this\nTitle # normal text, something in bold,\nand a title in itilics.\na bulleted list item and another some code\nand a little table with some content for demonstration a quote\nThe advantage here being that once you\u0026rsquo;ve memorized the special characters for formatting, they\u0026rsquo;re really, really fast to type. Plus, if you want to change the style of the content you can just change the way it\u0026rsquo;s rendered - for this website that\u0026rsquo;s defined with the CSS (the \u0026ldquo;style sheet\u0026rdquo; of a website) but in an exported document to PDF a given markdown editor probably has a dozen different themes to choose from.\nThe biggest problem with markdown is that you need to take that text with the special formatting characters and render it. This, historically, meant that you\u0026rsquo;d have a pane of text you write in and a different pane where you see what the final document should look like. This is confusing and eats all your screen space. Fortunately, tools like Typora, Marktext, and Obsidian.md all have the ability to render things in the same window as you type, making it feel totally natural.\nBut, alright, that\u0026rsquo;s a lot about editing text, what about for editing pictures? Making Videos?\nWell, I think a large part of that comes down to having tools with AI assisted tools. If you can put in natural text saying \u0026ldquo;Perform red eye removal\u0026rdquo;, \u0026ldquo;blur the background\u0026rdquo;, or \u0026ldquo;add film grain\u0026rdquo; that\u0026rsquo;s already a huge leap forward, but with actual object recognition in the photo, it\u0026rsquo;s reasonable to expect we may be able to say something as specific as \u0026ldquo;remove the dog in the bottom left\u0026rdquo;. Plus, as full realistic image generation tools get better - see DALL·E 2 - \u0026ldquo;make this picture look like it was taken at night\u0026rdquo; may become something you can do.\nEven for original digital art, there\u0026rsquo;s a lot that can be done, for example see PaintingLight which can automatically shade/light digital art.\nFor video, the same ideas apply. Some of this is already being done by https://runwayml.com (though their pricing is a bit high given it\u0026rsquo;s browser based).\nWe Need Tools that Scale With the User # On one hand, I really hate baby sitting users that don\u0026rsquo;t want to learn how to use software - espically software they use every day - on the other, I know not everyone is capable of remembering how to use the deepest features of Word (or, have mercy, Blender) and often just want to do something quickly.\nRight now, this problem is largely solved by just having a bunch of different products depending on what a user needs. Just need to quickly draw over an image to circle something? MS Paint will probably work fine. Want to do digital art? You probably want Krita. Photo Editing? Photoshop Affinity Photo will work well.\nThis isn\u0026rsquo;t great, in part because it means that work is being duplicated, but also because it means the UI for actions common to all three isn\u0026rsquo;t the same. We need software that can open, initially, with the bare basic features (The MS Paint equivilant) but can have things added and removed as needed, and profiles with different configurations saved.\nThis also comes with some responability on part of the developer to provide great documention, user extendability (Let users write their own plugins in Python!), and to have good in-software help. That last point is worth the hassle of development. Having the ability to hover over a button for a bit and it telling you what it does is much, much better than digging through docs to find it.\nWe Need Interopability # Say you\u0026rsquo;re working in Krita making some digital art and want to load your file into Affinity Photo to use it\u0026rsquo;s lighting system on your art. Well, you can do this. One option would be to export the file from Krita as a final render, probably as a .PNG, trust that you wont find anything you won\u0026rsquo;t have to go back and change, and do what you need to do. Another option is to abuse the .PSD format (Photoshop Document) which is, uh, not a good format. This would preserve the layer structure which will allow for more advanced editing, but is clearly not great.\nSo, I\u0026rsquo;m just arguing for standardized file formats, right?\nCharacter owned by Vega, art by Shade Standardized file formats, where possible, do help. But I also realize why we don\u0026rsquo;t have them. Sometimes you want a new feature that just doesn\u0026rsquo;t have a place in the current format. If we wanted a generic format that worked everywhere, the format would effectively have to be able to include arbitary binaries in it to work on everything. So, uh, that doesn\u0026rsquo;t work.\nInstead, what I\u0026rsquo;d like to see is software that does three things to work around this:\nFirst, actions should, as much as possible, be non-destructive. This means they can always be reversed and or taken out of a chain of actions performed.\nSecond, software should assume that it does not have a lock on a file,\nThird, actions taken in software should be a log of events to recrate the final product (caching expensive actions as possible), not the actual result.\nIf you combine these three things, it would mean that multiple programs could actively work on the same file at the same time. They just have to look through the shared log file and perform their actions in order according to the log.\nNow, if you wanted to work on the same file in Krita and Affinity Photo, you could literally edit it simultaniously in both. Changes would just propogate for as much of the standard the two have in common. This works best if one program supports a sub-set of the other (as in, if Affinity supported everything Krita did, and more - but not Krita supporting some things Affinity doesn\u0026rsquo;t and Affinity supporting some things Krita doesn\u0026rsquo;t) but even if that isn\u0026rsquo;t the case, it\u0026rsquo;s reasonable to just document the places the overlapp fails and still see this as a win.\nTo be clear, I know this is a pretty utopian idea. It assumes that multiple organizations will actually standardize, that they can play nicely with interprocess comunniciation, and that people actually keep their software up to date to keep up with standards that will naturally evolve. Still, I think this is the way forward. Integartion and simultainous workflows in multiple programs just opens up so much possibility. Hell, if this was done there\u0026rsquo;s no reason two artists couldn\u0026rsquo;t work on the same piece simulatiously. Imiganie, two artists working on the same piece (though probably in different layers) able to work together.\nI also know copyright and patents are an issue with this idea. Let me dream. We Need Tool Composition # As an alternative to the file format clusterfuck, it may be better if programs themselves composed nicely. If you\u0026rsquo;re a unix nerd, you may see either of these two ideas as \u0026ldquo;The Unix Phillosophy\u0026rdquo;. Regardless, my point is that if each primary task someone wanted to do (writing, photo editing, text editing, etc.) had a good, base program different vendors - both free and commercial - could focus on providing extensions to it or making bridges to their own software and allowing for them to work together.\nAs a motivating example, say you want to write a fantasy book. You\u0026rsquo;ll want something for writing the actual text (duh.), something for mapping how characters know or are related to one another, a tool for making the outline, something for generating a world (land masses, religion, history, etc) and documenting it, etc.\nEach of those tools could exist as independent software, sure. But they could also exist as plugins for a base, generic program that these tools snap into so that they can share data. For example, maybe the world generation tool could generate a map that has labeled cities, then, whenever that city is mentioned in the text or outline, it would appear as link for the author to store notes about what\u0026rsquo;s happened there.\nIdeally, each piece of software would still be able to be function independently, but when ran together they could communicate and comfortably snap together into a better user interface with shared interactivity.\nArguably, this should actually be the job of the Operating System to provide this backend on which things can request to hook together and each program could expose generic interfaces, like a text editor saying \u0026ldquo;here\u0026rsquo;s my main text box, feel free to look through it for words to turn into links\u0026rdquo;, and all open programs could say \u0026ldquo;Yeah, I want to do that\u0026rdquo; - of course, provided the user wants to give programs permission to do so.\nAll of this would hopefully mean that any extension written for one program would work for another, and any program could talk to another. For example, currently the realm of music software has a little bit of this with VSTs and MIDI. but it still leaves a lot to be desired.\nI\u0026rsquo;d actually like to take it a step further though and ask that all data of any kind use a common enough format that it can be processed with any extension/program written with this API in mind. Imagine if you could use a synthesizer as a static generator for image manipulation, or color management controls as an EQ.\nSeriously. This idea just blows my mind. If we let data get re-intrepted as things it\u0026rsquo;s not supposed to be, the options are nuts.\nBoth would and should behave in strange way, and it\u0026rsquo;s this very lack of defined behavior that could lead to interesting art forms. I\u0026rsquo;d love to see a \u0026lsquo;Master\u0026rsquo; API that works across all formats and ideas with a common data type that allows for program⟺program, program⟺extension, program⟺hardware, etc. communication even in long, complicated chains. After all, if you\u0026rsquo;ve taken a signals and systems course you know that basically any data can be treated as a signal.\nAs for what this would actually look like, having an operating system which presents - as a core to the functionality - some sort of node based programming system would work. While I don\u0026rsquo;t actually know how to use it, I think Enso demonstrates this concept fairly well:\nIf you\u0026rsquo;d like to try it, you\u0026rsquo;ll want to watch The tutorial video on YouTube.\nImage taken from the Enso GitHub Repository though there are plenty of other examples, like the node editors used for making shaders or programming in Unreal Engine.\nPotentially this could also plug into the entire OS as well, making it so an image manipulation program\u0026rsquo;s extension could for example modify anything output to the screen in real time, or an audio program could effect the output of anything. For developer\u0026rsquo;s this may even offer more power, making possible things such as inter-process communication (think pipes, like $ls -la | grep png) a matter of connecting two nodes, or reading disk information such as activity, space, or even writeback and inode information, this would literally allow any one piece of information to be accessible to any other. This does have obvious permission issues, but unix permissions should already have this under control. If something like this could also be tied into the previously mentioned internet search and socialization \u0026lsquo;web\u0026rsquo; without massive security concerns the potential use cases are as simple as getting color information from an image hosted online to as complicated as remote access or distributed computing.\nThis has already been tried to some extent with Pipeworld (GitHub), which bills itself as a \u0026ldquo;Dataflow \u0026lsquo;spreadsheet\u0026rsquo; desktop environment\u0026rdquo;. There\u0026rsquo;s a demo of it on YouTube here, though you have to be pretty nerdy to fully appriciate it.\nThis also does already exist for some workflows. For example, video synthesis (while quite nieche) has Syphon which many video synthesis applications support for realtime frame sharing with minimal overhead.\nSlightly more impressive from a more technical side is that you can reverse search for methods using an expected input-output pair\nFor example if you type in \u0026#39;eureka\u0026#39;, \u0026#39;EUREKA\u0026#39; it will return the method \u0026quot;asUppercase\u0026quot; which performs that string operation!https://t.co/9DpmCuV9hf\n\u0026mdash; Azlen Elza (@azlenelza) March 16, 2021 Oh, and our systems are fucking racist and suck for anyone with special needs. # Racist, how can a computer be racist? # Well, okay, this depends on the definition of \u0026lsquo;racist\u0026rsquo; I guess, but there\u0026rsquo;s definitely some issues. There\u0026rsquo;s the more mundane and debatable stuff such as using \u0026lsquo;Master/Slave\u0026rsquo; to denote device control schemes or using the terms whitelist and blacklist for allowed and dis-allowed lists respectively, but those are all results of human naming decisions.\nThe bigger issue is with AI. There have been a ton of stories now where facial recognition software, used for test taking or by government and police, have built in racial biases as a result of learning the same racial biases that made up the data sets to begin with. This is, to put it extremely mildly, not great.\nSpecial Needs? # Well, yeah. How often do you see more common needs like color blindness accounted for, let alone issues like screen readers. If anything, some of these things are getting worse. For example, web design is becoming more and more JavaScript heavy, which can often result in screen readers just not being able to process much of the text on screen. Meanwhile, applications that everyone is expected to use are becoming complex enough, with more and more rarely used features being shoved into sub-menus that it\u0026rsquo;s harder to interact with them in non traditional ways.\nSure, we\u0026rsquo;re making better hardware to tackle these issues, but a lot of it is pretty expensive.\nThere\u0026rsquo;s also the problem of making computers accessible to people with metal handicaps. And I\u0026rsquo;ll be honest, this one\u0026rsquo;s rough. Just like how power tools are an extension of our ability to do physical works, computers, I think, are naturally an extension of the mind. If a subset of users have less capable minds to begin with, it\u0026rsquo;s going to be really hard to design around that.\nI\u0026rsquo;m not the best to talk on these issues to begin with though as for the most part my body and mind don\u0026rsquo;t impede the way I work or require special tools. So, instead I\u0026rsquo;ll link to some other articles:\nSoftware development 450 words per minute\nChapter 3 of \u0026lsquo;Buliding Accessible Websites\u0026rsquo; by Joe Clark (I think this is written a bit\u0026hellip; bluntly. I don\u0026rsquo;t agree with everything here. That said, it\u0026rsquo;s still a good resource)\nAccess # While not an issue strictly pertaining to race or disability, there\u0026rsquo;s certainly a bias for those groups to also be poor or in worse circumstances that limit their internet connection or hardware\u0026rsquo;s speed. The solution? Stop making shit so fucking bloated. If you\u0026rsquo;re developing on a high end computer with umpteen cores and enough ram to store the English-only copy of Wikipedia (2) make sure to at least try it on something else and see if it still works.\nWe basically don\u0026rsquo;t even own our computers anymore # Like many things in this far-to-long article, this could be post on its own, but I do think it\u0026rsquo;s necessary to bring up the fact that there\u0026rsquo;s an on going war against general purpose computation. If you\u0026rsquo;ve got an hour to kill (or half an hour if you can tolerate 2x speed), this video is basically required viewing:\nA few notes on this video.\nSOPA, the Stop Online Piracy Act, is mentioned because at the time it was a big deal. Thankfully, it was indeed stopped.\nIllegal Numbers are a thing, and the history of them is incredibly interesting\nThere are also issues on ownership, for example:\nAmazon Sued For Saying You\u0026rsquo;ve \u0026lsquo;Bought\u0026rsquo; Movies That It Can Take Away From You and Microsoft Is Closing Its Ebook Store and Taking the Books With It\nNot to mention the fact that updates keep changing how IOT devices work, making them more \u0026ldquo;needy\u0026rdquo; as they display more notifications and interupt the user more in a plea to get used (so they can harvest even more data).\nDigital Conclusion # So, clearly there\u0026rsquo;s room for improvment with how we interact with software and the core experiance with how we find, access, look at, store, transfer, and create digital content. Some of what I\u0026rsquo;ve sugessted here may seem far fetched and all but impossible, but the same feels true if we consider how advanced smart phones would seem in 1999 or some of today\u0026rsquo;s AI content generation still seems, as it gets better at generating life like images and holding convincing conversations.\nI\u0026rsquo;m not the first to think on this subject by any means, Programs are a prison: Rethinking the fundamental building blocks of computing interfaces by Robert Lechte is a particularly good example of other thoughts on this same subject.\n... unless that service is based around that permission, like denying a recording app access to a microphone. Currently 17.5Gb - https://dumps.wikimedia.org/enwiki/20201001/ "},{"id":214,"href":"/other/hci2/intro/","title":"Intro","section":"Others","content":" The Way We Interact With Computers Sucks. # ASCII art morphing by Tim Holman What do you see when you sit down to work?\nIs your space actually comfortable?\nDoes your keyboard feel like it was actually designed for human hands?\nHow do you access information?\nHow do know that information is reliable?\nHow do you store information in a way you can retrieve it easily later?\nDo you have good tools for making content?\nIf you\u0026rsquo;re reading this, I\u0026rsquo;d wager that you\u0026rsquo;ve at least thought about these things a little. Maybe you\u0026rsquo;re a Linux user, deep into the tiling window manager rabbit hole. Maybe you already have a fancy keyboard, monitors surrounding you on all sides. But I\u0026rsquo;m here to tell you that no matter how hard you\u0026rsquo;ve tried, what you\u0026rsquo;re using still probably sucks.\nI think we, as individuals and as business, need to invest more in our work spaces, probably well beyond what most people would even consider. I\u0026rsquo;m not talking about adding a third monitor or giving everyone an artistic environment. I\u0026rsquo;m talking about setting up a work environment that\u0026rsquo;s conducive to productivity as instead of merely being the medium on which it takes place, the work environment should actively contribute to finding, accessing, retrieving/storing, consuming, and creating. - where data can be anything: art, documentation, code, whatever.\nPlease, throw out your preconceptions about what this means right now.\nI absolutely do not think this means that we should all strap VR headsets to our faces, no matter how much money Facebook (or Meta, whatever.) throws at that future. I also don\u0026rsquo;t think it means sticking to the normal keyboard and mouse for as much as we do now either. Maybe something like Dynamicland is the future, but I\u0026rsquo;m also not about to bet on any particular technology. So, what is this then?\nThese pages are about acknowledging what we\u0026rsquo;re doing wrong, why we\u0026rsquo;re doing it (mostly because it\u0026rsquo;s cheap and normal) and how we can do better to make real, human oriented (Yes, I know that term sounds like marketing speech) ways of using technology. Ultimately, this is just a really long post about HCI.\nHCI? # Human Computer Interaction or HCI is an interesting topic to me. So many people spend a crazy amount of time in front of a screen , you\u0026rsquo;d think we\u0026rsquo;d have some damn good hardware and software to use while we further deepen the permanent butt-shaped indentation into our seats, but alas, instead most people use ˢʰᵘᵈᵈᵉʳ Windows.\nBack in late 2018 I wrote the first version of this post and basically everything in there has been restated here but better. Since then, I\u0026rsquo;ve talked to many others about this, read many other blog posts, and just generally done a lot of new things with computers and learned a lot, so here\u0026rsquo;s HCI2: Electric Boogaloo.\nThere are 6 chapters to this post, they should be accessible in the sidebar, but just in case → 1 The Physical 2 The Digital 3 What Is Needed? 4 What Contradicts? 5 Radically Changing 6 Wrapping Up "},{"id":215,"href":"/other/hci2/physical/","title":"Physical","section":"Others","content":" Chapter 1: The Physical # Computers aren\u0026rsquo;t just about software, websites, and programs. As the most powerful tool that most people have access to and often one that we spend many hours a day looking at, it makes sense that we make working with that tool comfortable, straight forward, and healthy. In general, we\u0026rsquo;ve mostly sucked at this, and while some things are getting better (monitor resolution) some things have gotten significantly worse (keyboards). Furthermore, the desks we sit at and the air we breathe while working is in need of attention too.\nOur Input Methods Suck. # What the fuck is this shit?\nWell, this shit is membrane keys. They use a lil\u0026rsquo; membrane of flexible plastic to make a button that when you press completes a circuit. They feel like mush and generally suck to type on. We can do much, much better:\nOkay, cool, a mechanical keyboard. Now at least each switch is, well, mechanical. There\u0026rsquo;s a spring and actual feedback to your fingers and ears when you hit a key. But the keys are still arranged horrendously and it\u0026rsquo;s not at all fitting for human hands. So\u0026hellip; What next?\nAlright, so this is what I use. For me, this is great. It\u0026rsquo;s still attainable and usable by mere mortals without infinitely deep wallets(1) and using software as it exists today, but I think that\u0026rsquo;s largely still because it\u0026rsquo;s the furthest edge you can go from normal before things start being a royal pain in the ass, and don\u0026rsquo;t get me wrong, It\u0026rsquo;s not that there\u0026rsquo;s not some PITA incurred from using this weird of a keyboard. Switching to a traditional keyboard will always feel weird, other people can\u0026rsquo;t easily use your computer (not sure this is reallllly a downside\u0026hellip;), configuration still basically requires you understand the basics of C programming, and some things that expect keys to be in certain places (games) will often be awkward.\nBut, that\u0026rsquo;s not where I want to go with this blog post. There\u0026rsquo;s plenty of people that have gone on for like 20 pages about how amazing QMK and the Ergodox are, I want to go deeper.\nLet me start by lubing your brain up a little.\nThis is Dasher, a software keyboard using predictive text that should sort of blow your mind. Cool init\u0026rsquo;? Now, your thoughts probably went something like this\nWhat the fuck am I looking at? Oh damn that\u0026rsquo;s really cool, I want to try it. Oh, hmm, but honestly even with tons of practice I can still probably type faster on a normal keyboard\u0026hellip; And Yep, that\u0026rsquo;s about the right conclusion. End of story, let\u0026rsquo;s all go home, blog post over.\nBut wait?\nWhat if \u0026ndash;\u0026gt;insert your preferred mechanical keyboard here\u0026lt;\u0026ndash; wasn\u0026rsquo;t the best possible typing experience? What would something better look like?\nHere is where our story really begins. You have to start asking some questions that sound like you just smoked a bowl, please feel free to read all of the following with the mental voice of a stoned dude saying \u0026ldquo;Like, man, \u0026quot; before each point:\nWhy do we even need to type? What is it we want to input in the first place? What makes something good as an input device? Effectively, Just keep asking Why\u0026rsquo;s and What\u0026rsquo;s until we\u0026rsquo;re at the core of the question.\nSo, let\u0026rsquo;s start at the top:\nQ: Why do we even need to type?\nA: We don\u0026rsquo;t. We can draw, dictate, or use any of a number of other methods. Typing is convenient because it can be kept semi-private, is tactile (assuming you\u0026rsquo;re keeb isn\u0026rsquo;t a 💩), and generally fast enough to keep up with the speed of thought if you know how to touch type.\nQ: What do we want to input in the first place?\nA: Text (in multiple languages), Links, Images, Diagrams, Code, Commands? Dates? Our wandering thoughts? Spur of the moment ideas? Everything. Keyboards happen to be a decent input device for some of these things, and tend to pretty much suck for others. (Come on, make art by typing in RGB values for every pixel. 𝐼 𝒹𝒶𝓇𝑒 𝓎𝑜𝓊)\nQ: What makes something good as an input device?\nA: Now I\u0026rsquo;m asking myself a hard question. It\u0026rsquo;s easy to list off good qualities of the familiar: Tactile, Responsive (low latency), Customizable, No αɯƙɯαɾԃ movements, keeps the users hands and arms (Assuming they have hands and arms!) in a natural position, characters laid out well for the user\u0026rsquo;s language (and able to be switched live). But how do you get down to the core of this question without just listing traits of \u0026lsquo;goodness\u0026rsquo; in existing things, what actual goals should we strive for. Should it be one unified device? (Hint: Touchscreens are great, but no.) What goals out weigh others? Is ergonomics more important than tactility? Can there even be a defined list that makes an input deice good?\nNo.\nThat\u0026rsquo;s why this topic is so interesting. My hands are not your hands. I play music, make art, write stories (and blog posts) and code. Part of the reason I got an Ergodone keyboard (the spit keyboard shown above) in the first place is because I was starting to experience some nasty hand cramps that were particularly bad if I was switching between guitar and typing a lot. I was willing to try just about anything, which I did. I switched to Dvorak(2), an alternative keyboard layout. That didn\u0026rsquo;t do the trick so I tried the ergodone (still using Dvorak, my layout is here) and haven\u0026rsquo;t looked back. But that\u0026rsquo;s left a few interesting points, ignoring the obvious reason of price, why are people still using something seems to be obviously worse - in a word: Familiarity.\nFrankly, fuck that.\nWe can do so much better. Our phones have auto correct and limited text expansion, why do our beefier systems not do something a thousand times better with their superior on board resources? We could at least make it easier to grab text out of screenshots- But why are we not doing natural language processing so that I can verbally or textually describe to you a graph or math equation without needing to have committed to memory some archaic set of \\( \\LaTeX \\) symbol names (3)? Why are so many fields limited to ASCII, or maybe UTF-8, giving us those sweet, sweet emoji 🔥🔥🔥💯💯💯💯 when we could have something that allows text, diagrams, pictures, videos, etc.\nWhy are we limited to only buttons on our keyboards anyway? I have a BDN9 macro pad that has encoders which I can use to input keystrokes too, this lets me map knobs to functions that makes sense, like pageup/down, volume up/down, brush size in an art program, etc.\nThe BDN9 is roughly $50 if you want one Also, if you\u0026rsquo;re the kind of person that needs to write long walls of text with minimal formatting, you might want to check out stenography:\nMore than Just the Keyboard: # Mice and Touch pads and track balls # Take your hand off your phone screen or mouse for a second and hold your hand in front of your face. Wiggle you fingers, move your wrists. With that last instruction what did you do? Did you rotate your hand, move it up and down, or twist it? Now, consider how each of your fingers possess such fine motor controls. Is a mouse really made to take advantage of this?\nWhat would be better? Clearly pointing with a mouse is actually already pretty good. If you just need more functions a gaming mouse with a plethora of buttons goes a long way, but I think that\u0026rsquo;s more of a stop-gap. What could we do better?\nWell, There\u0026rsquo;s already the Leap Motion\nThe leap motion hardware is basically just two cameras without an infrared filter and some infrared leds.\nThe Leap Motion software does an actually really good job of using this information to reconstruct the finger positions in software.\nand the Lexip 3D mouse - https://www.lexip.co\nNote, This mouse, the Lexip pu94, is a complete disaster and the result of what is effectively a failed kickstarter. The windows drivers are broken, I\u0026rsquo;m currently working on a custom Linux driver for it but like, yeah. Don\u0026rsquo;t buy one. However, using the Leap for everything would require you hold your hands out to point - something that anybody who ever owned a Nintendo Wii can tell you gets very tiring very quickly - and the Lexip PU94 would be far to awkward to use daily.\nSo, I honestly don\u0026rsquo;t know what the pointing device of the future looks like. Maybe it involves a mix of a mouse, finger tracking, eye control, and joysticks? The use of WiiMotes for projection mapping shows that there is room for using different devices for different kinds of input though. Maybe it\u0026rsquo;s more like the non-game uses the Kinect has gotten over it\u0026rsquo;s post-lifetime? I\u0026rsquo;m not really sure.\nAs for issues with current tech, mouse acceleration and touch pad responsiveness, and touch pad dead zone are all big problems and, like, I don\u0026rsquo;t understand how that\u0026rsquo;s a problem in 2022?\nTo give credit where credit is due, there have been minor changes that are trending positive, such as Logitech\u0026rsquo;s MX Master Line with the infinite scroll wheels, and a general trend for reducing latency and increasing customization options of higher-end mice.\nUnfortunately, the drivers for configuring these options are still largely proprietary and anything but standardized, meaning making integration between brands and OS built-in support all but impossible. Of everything listed up to this point, I actually think this is the biggest problem. Without a consistent, extendable interface about the best that can be exposed is awkward hacks where joysticks are mapped as if they\u0026rsquo;re on a full game controller or keys just mapped to a macro of keyboard keys or existing but unused keys like the F13 though F24 keys (yes, those still exist in your OS even you can\u0026rsquo;t type them) or scroll lock. This is a massive problem. More on that in a bit.\nSee also: The ThinkPad Trackpoint Mouse Foot Controllers # MorningStar MC6, a MIDI foot pedal that\u0026rsquo;s highly customizable and has inputs for connecting analog expression pedals (the green thing on the left). 10/10 recommended\nStinky Footboard - it\u0026rsquo;s effectively a 4-key mechanical keyboard for your feet. The driver for this product sucks, so I swapped the controller out for a promicro running QMK.\nBoth of the above are great. Being able to use my feet to control my system really allows for a lot of flexibility; however, your feet can only do so fine-grained control. Unlike keyboards where our fingers are great at hitting a bunch of individual keys, we\u0026rsquo;re better at hitting smaller buttons or controlling pedals (think pressure sensitive like a gas pedal) with our feet. So, with that in mind, you only get a limited number of inputs you can practically control, so those inputs really need to count. That\u0026rsquo;s the problem. They really don\u0026rsquo;t.\nEven with all the power that using QMK gives and all the configuration options exposed in the MC6\u0026rsquo;s config editor, they lack one big thing: Context sensitivity.\nEssentially, if my inputs are limited, there\u0026rsquo;s a limited number of solutions. The MC6 does offer multiple pages of inputs by stepping on two buttons at once to either page up or page down, but that\u0026rsquo;s not as good as just sending messages to the device to let it know that I\u0026rsquo;ve switched what I\u0026rsquo;m doing and that it should switch it\u0026rsquo;s active page/profile/whatever accordingly, the problem there is that has to be set up manually. With context sensitivity in theory devices could change the way they behave to be optimal for what you\u0026rsquo;re working on. Right now I have the Stinky Footboard set to control media playback (⏯️, ⏭️, ⏮️, 🔇) but that\u0026rsquo;s currently all it is set to, and that seem like a bit of a waste. Sure, I could set up multiple profiles, but without them being context aware that\u0026rsquo;s a bit of a moot point. And, alright, I think the original driver software for it as well as the software for most of my \u0026lsquo;gaming\u0026rsquo; peripherals supports checking what the running program is, but that seems like a really bad solution and instead should be something the OS handles by letting the devices send generic button up/down events and doing ALL of the mapping in software.\nThe other relevant point would be the ability for inter-peripheral communication - basically, your mouse should be able to \u0026rsquo;talk\u0026rsquo; to your keyboard and vis-versa. This becomes a bit redundant if as mentioned above all the mapping and meaning of buttons is defined in software, but the point would be that a key-combo could change your mouse\u0026rsquo;s DPI, or holding a button on your mouse could put your keyboard into a one-handed mode.\nPen Tablets # Honestly, most pen tablets are reasonably good. Not all of them have great latency, map super well between the pen\u0026rsquo;s nibb and the actual pointer on the screen, and the majority don\u0026rsquo;t support touch, which probably isn\u0026rsquo;t ideal, but in general they do the job well enough, or, would, if you only counted the hardware.\nUnfortuantely, everything needs software. This sucks, as the hardware is actually reasonably competent, while the software is largely so incredibly god awful that it is somehow impressive. While I realize this is totally anecdotal, one pen tablet I\u0026rsquo;ve used on Windows the driver software is so bad that it actually randomly takes over as the focused application about once every 15 minutes, meaning whatever line you were in the middle of drawing just stops and you have to click on the program again to keep going. But, like, even with more competent driver stacks there\u0026rsquo;s like 6 different options for pen pressure: Wintab, Windows Ink, the option to \u0026lsquo;Use the device as a mouse pointer\u0026rsquo; \u0026hellip; It\u0026rsquo;s so incredibly confusing and the required options per application vary wildly. To make matters worse, most of the drivers completely shit themselves if one display is scaled for HiDPI and another isn\u0026rsquo;t. On Linux, ironically, I\u0026rsquo;ve actually had very good luck with pen tablets.\nBut even then most don\u0026rsquo;t handle pressure in a way that\u0026rsquo;s customization in a good way. Many rely on software to do pressure-mapping, which just isn\u0026rsquo;t great (despite what I said above) as It\u0026rsquo;s often a serious pain in the ass to get it set 𝘫𝘶𝘴𝘵 𝘳𝘪𝘨𝘩𝘵 so that you don\u0026rsquo;t get crazy pressure jumps. Worse, even if the driver has in-driver calibration, you still usually have to tweak it more in the specific art/drawing/art application so now you have TWO pressure maps and it begins to feel like trying to balance a double pendulum.\nI do still think there\u0026rsquo;s more room for improvement in the hardware too. I think Microsoft\u0026rsquo;s Surface Studio 2 actually had some really interesting and innovative ideas albeit it\u0026rsquo;s a weee bit on the extremely expensive side at 3,500 USD. I also think the HP Sprout did some really neat things too. Unfortunately, I highly suspect both will suffer from poor long term support.\nI also think there\u0026rsquo;s room to allow for workflows that rely more on the physical, possibly something like Dynamic Land or even just the iskn Slate or Repaper (Note, I tried the slate and it really, really sucked. But the idea was interesting.)\nAudio And Video # Your webcam is shit. You know how I know? Because it\u0026rsquo;s a webcam. Even the everybody\u0026rsquo;s go-to, the Logitcech C920, is shit(4). You know what else is shit? Your microphone. When you type on a laptop it sounds like damn earthquake, and if you get comfortable and lean back in your chair you suddenly get quiet. Maybe you have a gamer headset? Cool, the boom mic sounds about as good somebody screaming through a cardboard tube.\nBut, better cameras do exist, and, if you\u0026rsquo;re willing to shell out the cash, you can get a decent mic. Unfortunately, either way they have a problem.\nThe default settings are still shit.\nOn webcams you have auto-white balance, auto-focus, auto-gain, etc. and everything it tries to do is awful. On a laptop where it will legitimately be in a different setting regularly, that\u0026rsquo;s some-what forgivable, but on a desktop webcam? Like, the only variable here is if there\u0026rsquo;s a window letting light in. Make calibration easy and give me a white-balance slider. Please. Or just make better cameras and let the open source community make better drivers. I assure you there are plenty of rage-filled nerds willing to make your product not suck so hard.\nRight now, my best webcam is my phone running droidcam. I have the (at time of writing) $80 logitech C920 webcam. A device which is meant to ONLY be a camera. It has one job. Yet, this awkward hack using my phone looks MUCH better. Otherwise, if you have money to throw at the problem you can Use a \u0026ldquo;Proper\u0026rdquo; Camera as a Webcam (Laurence Tratt)\nYour mic is also shit for the same reason. When doing audio mixing for a video or podcast there\u0026rsquo;s some basic things that will almost always be in the mix chain: A noise supressor, A De-Esser, A Compressor (or multiple), and an Equalizer. For the most part, the settings on these things can be determined pretty algorithmically, or, better, a database of settings for hardware can be created and maintained - You\u0026rsquo;d still need to adjust for your voice (particularly for if you have a low or high pitch voice) but it could massively help.\nIf you\u0026rsquo;ve gone out and gotten an expensive mic or audio interface to plug you mic into, you may have decided to get one that connects to the computer and is powered by USB. This is really, really dumb. I think every audio device I\u0026rsquo;ve ever used that connects via USB has had some sort of noise issues because of the USB power. Stop it. Isolate the power and use a real power supply and some real filtering. Please.\nWhy is USB Power so bad? It isn\u0026rsquo;t universally bad. It\u0026rsquo;s just usually bad. Skipping over the technical details about how the USB spec treats power and ground, how differential signaling works, and all of that noise there\u0026rsquo;s one pretty obvious thing to pick on: Phantom power. A lot of microphones need a low current, 48V DC offset to be applied to them to work. So, think about it, this means you need to take the 5V in from USB and boost it all the way up to 48V (a nearly 10x boost), keep that 48V DC power super clean (no ripple in the voltage) and you only get the 500mA or so from the USB port to do it. Meanwhile, in that same power budget, the processor in the audio interface, DACs, ADCs, and OpAmps all need to run. It\u0026rsquo;s just not practical. Also, consider that most of those parts will need both a positive and negative voltage rail usually at +12 and -12, so, now you\u0026rsquo;re taking 5V and you need to make three different voltages that are quite \u0026ldquo;far away\u0026rdquo;. This all sounds rather backwards to me. Though, probably the most obnoxious thing that results from this is the inability to route audio in any reasonable way. Linux and Mac it seems have this done semi-well, Mac with Core Audio and Linux with Jack, but on Windows if you want to use a nice mic to talk on VOIP you better hook up your mic on the first input on the audio interface or you\u0026rsquo;re shit outta\u0026rsquo; luck my friend.\nI\u0026rsquo;ll expand on this thought later, down in the Your Audio Sucks Section.\nFinally, nobody has ever wanted their notifications to show up when sharing their screen. Why are notifications not deemed as a sort of \u0026lsquo;draw over\u0026rsquo; element by default?\nApplication Specific Controllers (MIDI Controllers, Video Editing, etc) # First of all, this is done in a stupid way in most circumstances(5). There is no reason you should have single use hardware that sends specific commands that are not programmable by the user. Like I said above, let\u0026rsquo;s do all the mapping in software. This lets features be added later and users make better use of their controllers.\nBut, let\u0026rsquo;s look at some of what exists, and why I\u0026rsquo;m saying this. While other devices exist to pick on, I\u0026rsquo;m gong to focus on MIDI controllers as they\u0026rsquo;re what I know.\nFirst though, for those unfamiliar, what is a MIDI controller? MIDI, or Musical Instrument Digital Interface is a bloody ancient standard that\u0026rsquo;s still (mostly) 7-bit and let\u0026rsquo;s you send control messages about actions on a controller made for music, often a piano keyboard, so, something like Key C4 Down, Velocity 8 or twisting a knob may be on a MIDI Control Channel (CC) and will be like CC43 changed to 127. Obviously in 2022 having a 7 bit standard is a bit archaic (something I\u0026rsquo;ve ranted about previously here ) and it\u0026rsquo;s a rather stupid that it\u0026rsquo;s taken until earlier this year for the improved MIDI 2.0 standard to even be ratified, but I digress.\nMIDI controllers come in all shapes and sizes, from a grid of RGB buttons to traditional keyboards to just a large array of knobs, so, naturally people took notice, and MIDI can therefore be used to control things it was never, ever meant for. People often try to use it to control video editors, 3D modeling software, and generally anything that Adobe(6) makes.\nPictured here are the Novation Launch Key MkII (The big keyboard), Launhpad MkII (the 8x8 grid), the Roli Seaboard Block, and two Roli Lightpad Blocks. (7) The Roli equipment uses MPE, a \u0026lsquo;standard\u0026rsquo; that abuses the hell out of midi and does things with it that were never intended.\nSo now we have a crazy amount of controllers using a shitty standard instead of something that actually exposes more data and allows for finer control being used in ways that abuse the protocol instead of just exposing raw button down/up events and knob twists to the OS.\nNote, I\u0026rsquo;m being careful to say button up and down events instead of button press. This is because it makes a lot more sense to exrpess the events as raw as possible so the OS can do things like detect a double-press, long-hold, etc.\nVoice Control # The first thing I want to point out is how incredibly English centric voice control is. I only speak English so I lack any more to say on the subject, but come on.\nNext, why can my phone do voice control but my computer either can\u0026rsquo;t or just really sucks at it. I know you can use OkGoogle from Chome, That Cortanna is a thing, and that there\u0026rsquo;s multiple open source projects that implement voice control. But, they all sorta suck. None of them can do much beyond just setting a timer or working with a limited set of supported applications in a way that fails more often than not.\nIf anything, I think Alexa is a bit ahead of the curve on this making it semi-easy to add custom actions, but does anybody actually have Alexa For PCs installed on Windows?\nI want voice control that can actually -do- something. Not 15 competing standards. It\u0026rsquo;s okay if they all implement the same standard protocol, but unless there\u0026rsquo;s a standard that all programs can start tieing into and it\u0026rsquo;s given real, time saving capabilities nobody will use it. This mostly comes down to needing much, much better natural language processing - something that GTP-3 has shown is possible - and having a way for applications to define accessible inputs and outputs. Think the Unix Philosophy where things can be piped and IO redirected but applied to larger applications and controlled via voice or text entry.\nObject Tracking # What if everything you did was an actionable input? What if you could finger-drum on your desk and get real drum sounds, have your computer pause a video if you get out of you chair, or give the user a warning if they\u0026rsquo;ve been sitting with a bad posture for a long time? Between the Kinect, Leap Motion, and Tobii Eye Tracking we\u0026rsquo;re staring to get close to this.\nI think https://dynamicland.org has a lot of interesting thoughts on this idea and if this vision of the future interests you, you should check it out. ReacTable is another interesting concept in the relm of pyhsical computing too.\nI do think in the future we\u0026rsquo;ll stop using the basic screen + keyboard + mouse combo and see more \u0026lsquo;smarts\u0026rsquo; integrated into everyday things and our work flows. I really like the idea of having a desk with a camera and projector above it to highlight objects and interact with what it can see- scanning documents, giving feedback on technique with crafts, whatever.\nGame Controllers # Re everything above. Something something make sure they\u0026rsquo;re rechargeable, ergonomic, and simply fun to use. My award for Not Sucking™ goes to the Steam Controller and my award for Best For People With Three Hands™ goes to the N64 Controller.\nRFID Tags # I have RFID tags from Dangerous Things in each hand, I have an RFID based access card for my University, and my parking lot uses RFID tags for entry. Ignoring the obvious security problems with RFID authentication, It\u0026rsquo;s also just not great to have people carry around a card when their phones can already act as an RFID device anyway, it just makes for a very mis-placeable access token which seems rather stupid. I\u0026rsquo;ll talk authentication more in a bit.\nDocument Scanners # I will not take this opportunity to rant about printers, no matter how much I want to.\nTo keep this short: Higher default DPI, options to output via OCR (Optical Character Recognition) directly to the document so you don\u0026rsquo;t have to even store the original document, built in de-noising (remove the dust specs), live scanning of paper via camera for things like helping with math.\nWhat\u0026rsquo;s worse is half this shit already exists, and it is shit. # Want to look up \\( \\LaTeX \\) Symbols? Done. Want to have Optical Character Recognition on your screenshots? Textshot has that covered. But while I could go on with this list, the big problem is of integration.\nWhile having an OS like Linux that is tweakabe to the nth degree is unmistakably fucking incredible. I also shouldn\u0026rsquo;t have to. I should be able to use any computer and trust the OS to have built in methods for getting text from a picture, to trust the OS will let me remap keys so that tapping the shift keys types perentheses or that I can bind the keys to type arbitrary Unicode. The OS should have a local - don\u0026rsquo;t you fucking dare collect all of this data - store of everything I\u0026rsquo;ve looked at so I can go back and search for \u0026ldquo;mostly purple images\u0026rdquo; or \u0026ldquo;links clicked on October 12th\u0026rdquo;. And like, there\u0026rsquo;s about a dozen different chrome extensions that try to do this under the very stupid assumption that essentially all of that interaction will be in browser.\nOur Physical Environments Suck # Your Chair Sucks # Did you get a gaming, racing chair that cost about $100 off of ebay? Yeah, you\u0026rsquo;ll regret that one soon enough.\nEven if you got a normal office chair, if it wasn\u0026rsquo;t exorbitantly expensive it probably sucks. I did like two weeks of stressing about finding something good and thankfully finally got a good recommendation from a friend, but otherwise it\u0026rsquo;s like $500 SteelCase chair or having a bolt poke though the seat\u0026rsquo;s foam until it\u0026rsquo;s leaving a permanent indentation into your butt.\nIt\u0026rsquo;s not like we even need innovation here, (as proven by the influx of hot garbage \u0026lsquo;gaming\u0026rsquo; chairs) we just need something affordable that\u0026rsquo;s not garbage or plagued by fake reviews or reviews from another product attached to the new listing (Fix your shit amazon.)\nThe chair on the right is the one my friend recommended, here\u0026rsquo;s a link to it on Amazon\nBut, I\u0026rsquo;m here to talk about the future, so what do I think can be better than anything I\u0026rsquo;ve even seen? Well, a good start would be threshold latches. Nicer office chairs often have a lock for allowing leaning back or not, but it\u0026rsquo;d be great if it was \u0026rsquo;locked\u0026rsquo; until a pressure threshold so you can lean back and stretch without un-locking and necessitating re-adjusting the chair, a sort of temporary unlock done by just leaning back harder.\nBut the biggest reason your chair sucks? It\u0026rsquo;s a chair. I\u0026rsquo;m not advocating for a treadmill desk, or sitting on one of those big ball things, I\u0026rsquo;m simply saying having the only reasonable way of interacting with our second-brains being in a seated, unmoving position does nasty things to our bodies. While it would make more sense to adapt our peripherals and input methods, it\u0026rsquo;s worth considering how we may re-shape our seats to work with us. A little while ago \u0026ldquo;I built a lay down desk\u0026rdquo; was trending on Hacker News, and it\u0026rsquo;s something I\u0026rsquo;d considered before too, but I want to think bigger: What if our desk and chair acted as one piece of furniture, one that was flexible between sitting, laying, and standing positions, and the chair bent to an appropiate shape to match the position of the desk? Design doesn\u0026rsquo;t have to be static.\nYour Desk Sucks # or \u0026lsquo;why the fuck is it so hard to find a deep desk with a keyboard tray\u0026rsquo;\nI\u0026rsquo;ve gone though wayyyy to many desks. What I\u0026rsquo;m currently using is a nice big un\u0026rsquo; with a surface that is 5\u0026rsquo; x 2'4\u0026rdquo; and it\u0026rsquo;s still. not. big. enough. (for reference, a \u0026rsquo;normal\u0026rsquo; cheap desk seems to be ~3\u0026rsquo; x 1'8\u0026quot;). So I\u0026rsquo;ve had to put two desks in an L-shape.\nI know that I can pick from pleanty of L or U shaped desks on amazon, but most will be seriously lacking in depth and be less than study, so my 2-desk concoction is the best I can do without making one- which I do intend to do at some point.\nAnd, alright, I admit, I\u0026rsquo;m not a typical computer user. I have enough devices hooked up that lsusb gives me 36 lines of output(8), I have 3 monitors + a pen display, and my desk is also home to a whole host of lab equipment, a eurorack setup, and other various things.\nSure, It does actually have a decent sized keyboard tray unlike most where they just expect you to put the keyboard and mouse on top of the desk like some sort of monster, but that tray is still on the small side if I were to use a normal full size keyboard (with numberpad). Worse, if I use a normal keyboard my hands tend to hit the sides of the keyboard tray (where the slides attach). I\u0026rsquo;ve seen a ton of wooden desks with this issue. Just move the rails back like 2 inches and angle it. Please. A lot of desks also skimp on the height of keyboard that can fit in the tray. This is a fair trade off, as the better this is the closer it is to your legs when sitting, but still, I\u0026rsquo;ve seen multiple where the feet on the keyboard can\u0026rsquo;t be raised to make typing more comfortable otherwise the keyboard tray can\u0026rsquo;t be closed. My desk actually sits in a pretty good sweet spot on this, but\u0026hellip;\nI still think my desk sorta sucks.\nHear me out. First of all, I have a bad knee. Not like I\u0026rsquo;m walking around with a cane bad, but more like if I sit in one position for more than ~20 minutes and then move it I get a sharp pain like someone just drove a hot knife directly into it, but it only lasts a second. Yunno\u0026rsquo; what would be a major help with that? A sit / stand desk (height adjustable) desk.\nBut that won\u0026rsquo;t work for me, and probably a lot of other nerds reading this for one big reason. Wire. Hell. Like, maybe you\u0026rsquo;re thinking \u0026ldquo;Pssh, what, so you have like a dozen cables down there, power, display, USB mouse/keeb, and audio\u0026rdquo;\nHa. No.\nI won\u0026rsquo;t try to list it out, but Oh. My. God. A sit stand desk wouldn\u0026rsquo;t be possible because that wire hell is truly untameable in it\u0026rsquo;s current state, so, we\u0026rsquo;re gonna take a brief detour from the desk stuff:\nYou Are Now Entering: The Cable Abyss.\nI could rant to you about how USB-C with it\u0026rsquo;s 42 different standards is a god damn nightmare, and that\u0026rsquo;d even be pretty relevant here. But that\u0026rsquo;s not the rabbit hole I want to fall down right now, instead I want to introduce you to my friend, MIDI.\nMIDI Is a fucking shit of a standard. It\u0026rsquo;s 7 bit, ancient, and the \u0026lsquo;standard\u0026rsquo; (9) cable for it has (ᵈᵉᵖᵉⁿᵈᶦⁿᵍ ᵒⁿ ʰᵒʷ ʸᵒᵘ ˡᵒᵒᵏ ᵃᵗ ᶦᵗ) 3 more pins than it even uses. By all metrics it fucking sucks. However, They did do one thing right.\nThis beautiful port:\nImage © Shira Wolven 2020, used with permission This, is a midi through. On most gear, it\u0026rsquo;s accompanied by (at least) a MIDI IN, so, you can take your MIDI info in, and then, because a single midi cable carries 16 channels, chain other gear on.\nFrom this,\ngraph LR A[Controller] --\u003e B(Device 1) A --\u003e C(Device 2) A --\u003e D(Device 3) To this:\ngraph LR A[Controller] --\u003e B(Device 1) B --\u003e C(Device 2) C --\u003e D(Device 3) And, okay, so what? Well, I\u0026rsquo;ll tell you what. This is rad as hell. I currently have 3 6\u0026rsquo; Display Port cables running from my desktop on the floor up to my displays on my desk. The monitors are 4k and get pissy if I go over a 6\u0026rsquo; cable, so with my tower on my right, the left-most monitor has to have this perfectly 45\u0026rsquo; cable making the connection, so I can\u0026rsquo;t even organize the cables in the first place. But what if I could just route all of that to one monitor then piggy-back each one going forward?\nI\u0026rsquo;m not going act like this doesn\u0026rsquo;t have issues. I get it. There\u0026rsquo;s questions of signal integrity, making sure everyone follows the same standard (obviously can\u0026rsquo;t do that\u0026hellip;), and realistically it would probably mean adding more conductors and increasing cost. I get it. But I also see a ton of other benefits, especially if we made that same monstrosity of a cable capable of a fair amount of power. The same 12V ATX PSU in the desktop could justifiably power the monitors, giving us the efficiency gain inherit in using 1 PSU over the god only knows how many fire hazards that are currently on chained power strips down there.\nDeparting Cable Abyss Hell, Back to your Regularly Scheduled Ranting\nWhere was I? Ah, right. Desks.\nNext is adequate space for interruptions. While I\u0026rsquo;m a strong proponent of separating a space\u0026rsquo;s responsibilities (not eating where you work, not working where you consume media, not consuming media where you sleep, etc.) I understand that sometimes it\u0026rsquo;s necessary, and there\u0026rsquo;s nothing worse than not having a flat surface to put your bowl of soup on.\nSo, why are desks with pull outs (as pictured on the right) not more common?\nMore practically though, as mentioned before, it\u0026rsquo;s ideal if the mouse and keyboard weren\u0026rsquo;t in the way of desk space that would otherwise be used for physical craft, note taking, art, etc. So I think three spaces total are ideal: one for primary input devices- today that\u0026rsquo;s a mouse and keyboard; a second for papers, a main project, etc; and a third that is easily accessible added for the interruptions and side projects in life.\nIn summary\nDesks need a lot more surface area L or U shaped desks seriously help with this We need keyboard trays that are longer, and often taller Sit/Stand needs to come down in cost, be available in L and U shapes Desks need built in wire management Desks need to have pull outs As a final note, I realize not everyone has space for a massive desk, but in that case, I think things like this folding desk (YouTube, DIY Persk) should be more common.\nFurther reading:\nThe Complexity of Building a Lie Down Workstation (altwork)\nYour Audio Sucks # There\u0026rsquo;s a huge range of audio systems. You might not be able to have speakers at all and have to use headphones, maybe you have an awesome setup running Dolby Atmos like Deadmau5\u0026rsquo;s where the room and speakers have been engineered so he can virtually drop an instrument on the sound stage wherever he wants.\nBut nothing like that is even needed in order to make things suck less.\nHow many times have you watched a YouTube video where the speakers voice had far too much bass or was masked by a high pitch whine? How many streams have you heard where there\u0026rsquo;s some hum or annoying background noise? I\u0026rsquo;m sure you\u0026rsquo;ve turned up your audio because something is quiet only to have your ears ravaged as soon as the audio is fixed in the stream.\nAll of these things are totally fixable using a mix of hardware and software.\nBefore I get into all the following, I\u0026rsquo;m not saying all of these things should always be in use. For example when somebody is making music all of this obviously needs to be able to bypassed. Why the fuck do we not have a system-wide limiter? # And not just a dumb decibel limiter, but a loudness (Wikipedia) limiter. There\u0026rsquo;s no reason there shouldn\u0026rsquo;t be a toggle-able limiter to protect your ears\nWhy the fuck do we not have per-stream audio compression? # Not file-compression but volume-compression. the \u0026lsquo;make loud sounds quieter and quieter sounds louder\u0026rsquo; kind. Generally this is something the music industry over-uses and it doesn\u0026rsquo;t sound great on music, but for voice it can make a huge difference for keeping things understandable and not distracting. Ideally this would be done before the content is ever published or sent though the network, but that won\u0026rsquo;t always be the case. So, you should be able to easily take any audio stream (say, a YouTube video playing in a tab) and apply a compressor to it.\nThis is particularly helpful when you consider input streams (your mic) as generally having compression on your mic will make it so that as you change the distance between you and the mic the volume stays more consistent, and also just sounds better in general.\nWhy do we not have live Speech to Text? # Not all systems will be able to do this live without completely shitting the bed because of lack of processing power, but as our graphics cards are now including specific hardware for doing AI/ML based computation, there\u0026rsquo;s no reason we shouldn\u0026rsquo;t be using in the OS for the sake of grabbing the text out of all audio that goes in or out of the system. (of course, storing it securely and locally, nobody wants to wiretap themselves)\nWhy is Audio and Video Not Routable? # Alright, so this is mostly a dig at Windows, where everything is Garbage. Mac has CoreAudio which is pretty cool, and Linux can mostly do this for audio via Jack Audio and work is being done to make something for both audio and video with Pipewire.\nThis is a screenshot of \u0026lsquo;Catia\u0026rsquo; - a graphical program for audio routing with Jack Audio. Here I just have pulseaudio set to use my first two outputs as my speaker outputs (Sink -\u0026gt; System) , and the first input (my microphone, which is mono) set to be the input to the stereo \u0026lsquo;virtual microphone\u0026rsquo; that pulse audio provides to applications (System-\u0026gt;Source). All the orange and green stuff is for MIDI devices, which catia can also route.\nThe reason this is necessary is with routable audio and video you can do things like route your webcam\u0026rsquo;s video first though software that does some video effects, then to a recording program and to a streaming program easily. Sure, this can be done anyway right now, but it often means creating a \u0026lsquo;virtual\u0026rsquo; webcam in the middle, and this scenario was already a fairly basic one. If you add in the aforementioned limiting and compressing as options you can see where this starts to matter.\nWhy are we not calibrating our audio devices? # While it may seem like it at times- with big fancy tube amps, planar magnetic headphones, and silver cables for that hi-fi sound- audio is not black magic. It\u0026rsquo;s math. More over, while everybody\u0026rsquo;s ears are a bit different, the frequency response that most people want from their devices is more or less known. No device can perfectly meet this, at least not at a cost a mere mortal can afford. As that linked article details, this isn\u0026rsquo;t super straight forward anyway, as your head and ear size, room acoustics, etc. all mater. But here\u0026rsquo;s the thing:\nComputers are really stupidly powerful. We can make our audio quality better, even on sub-optimal equipment. I\u0026rsquo;m going to gloss over most of the math, but the gist is by putting a special microphone with know frequency response at the desired listening point and doing a frequency sweep from each speaker (or headphone) and all the speakers at once we can math out each speaker\u0026rsquo;s (or headphone\u0026rsquo;s) frequency response and phase cancellation characteristics, then, being careful not to cause resonant peaks or really obnoxious phase shifting effects, use a parametric EQ to get the speakers (or headphones) as close to ideal as possible.\nOf course, the better the starting point the better this correction will work. You won\u0026rsquo;t make some cheap iFrogs sound like Senheisers, but you might make them better.\nThere is software that does some of this, but I really think it needs hardware acceleration (hell, maybe an FPAA) and to be more common.\nYour Displays Suck # I\u0026rsquo;m going to assume that if you\u0026rsquo;re reading this you\u0026rsquo;re probably using at minimum a 1080p, 60hz monitor. And like, yeah 2073600 is a ton of pixels. If you assume the normal 8-bit per R-G-B (24bit color) then you get ~2.98Gbit/s which is already pretty impressive if you think about it, but then consider that even cheap single board computers are starting to be capable of 4k, 3840x2160 which at 60hz is ~11.94Gbit/s and, alright, that\u0026rsquo;s already undeniably really cool. But, unfortunately, super not enough and already causing problems.\nIf you\u0026rsquo;re like me and running 4k @ 60hz, you\u0026rsquo;ve likely had at least some issues as a result of this. Lower quality Display Port (10) cables can cause occasional flickering, you\u0026rsquo;re probably limited to 6\u0026rsquo; DP cables. The reason I bring all of this up at the start is because I want to fully acknowledge that every extra bit we try to push down that pipe is pushing that even further and making it even more expensive.\nBut, let\u0026rsquo;s go to more day-to-day concerns, the things that suck even assuming everything is working fine.\nThe first thing is obviously resolution.\n4k is far from normal still. 1080p just is not enough. It\u0026rsquo;s super easy to see the individual pixels from even a comfortable distance and text is pretty unclear unless sub-pixel rendering(11) is used, but that makes things even worse because not all displays use the same sub-pixel layout.\nAnother problem with resolution is that ohmygod does scaling suck. A ton of applications, especially older ones, were made with the assumption that you\u0026rsquo;d be viewing everything on a 1080p or lower resolution. In general the move to 1080p actually wasn\u0026rsquo;t felt as much because the size of our displays increased with their resolution, increasing work area but keep the application size roughly the same. The problem is with the move to 4k we\u0026rsquo;re dramatically increasing pixel density at often the same screen size, so everything is ᵗᶦⁿʸ. Software scaling in the OS is pretty universally garbage, with some applications scaling in a way that looks super blurry, some being double scaled as both the OS and the application try to compensate, and some applications just not scaling at all. Because this is inherently a complaint about legacy support there\u0026rsquo;s no easy solutions here. Using 4k instead of other higher-than-1080p resolutions helps, as integer scaling (scaling exactly 2x) is an option as 4k is exactly equivalent to four 1080p screens stitched together, so you can just map 4-pixels in hardware to 1-pixel of what\u0026rsquo;s trying to render\u0026hellip; or you could, if we hadn\u0026rsquo;t already tried to use aforementioned sub-pixel rendering.\nI\u0026rsquo;m not sure that there\u0026rsquo;s really much need to go beyond 4k. While I haven\u0026rsquo;t even personally seen anything higher, I also can only pick out individual pixels when there\u0026rsquo;s like, one lit pixel on a dark background, and I don\u0026rsquo;t know that more innovation in resolution will really matter. Instead, there\u0026rsquo;s a pile of other outstanding issues.\nLittle aside first. Some jackasses decided even on digital displays interlacing should be a thing. I don\u0026rsquo;t want to lose focus here, but I want to at least mention this, which you\u0026rsquo;ll often see listed as 1080i or 720i, is shit.\nRefresh Rate # Do a little experiment for me real quick: try changing your display to 30Hz. Most displays will support it.\nNow move your mouse around in circles, try doing something where you need things to respond quickly, like playing games.\nYou\u0026rsquo;ll probably notice it directly, but if not, you will likely at the very least feel a bit motion sick.\nNow, realize that the vast, vast majority of displays are only 60hz. Double that, sure, but I think you could easily see how more would be great. This is exactly why most displays sold for gaming advertise being higher refresh rate, often 144hz or more. This is where my above commentary on throughput of DisplayPort and reliability at high rates. If you look at the Display Port (Wikipedia) you can see this problem has been mostly addressed, but that only means so much if cables are shit and monitors that are both high res and high refresh rate cost both arms and a leg. Obviously this should get better with time, but it\u0026rsquo;s still a problem.\nSome displays may support Freesync or Gsync (12), and both of these technologies require a supported graphics card in the system as well. These allow the display and computer to adaptively change the refresh rate so the monitor and computer both send and display frames in sync, which can make even a low refresh rate \u0026lsquo;feel\u0026rsquo; much higher. This is a feature typically marketed to gamers and only supported in video games, but this has been changing a tiny bit. The big thing to note here is that it\u0026rsquo;s dependent on the frame rate of the application that the user cares about, you could, I guess, sync to your compositor\u0026rsquo;s (the thing that draws multiple windows onto the desktop simultaneously) frame rate, but I don\u0026rsquo;t think there could even be any benefit there. So, really, this is mostly applicable to games as there\u0026rsquo;s a few other applications you\u0026rsquo;d even want to run in full screen where this latency and responsiveness improvement would matter.\nRelated to refresh rate is latency. In general this can actually mean two things, one is how long it takes for an image sent to the screen to actually be displayed. The lower this time the better, with good screens being sub 10 millisecond. Unfortunately, there\u0026rsquo;s no standard among the industry to measure this and many get it wrong.\nAlso with latency there\u0026rsquo;s grey to grey times, this is a measure of how long it takes a pixel to go from one shade to another. The lower this is the less motion blur the screen will exhibit.\nThis, to me, is a big deal. Latency is something you can feel. If there\u0026rsquo;s a long total input lag between the time you click something and that action taking place, that\u0026rsquo;s a big fucking problem- and long here doesn\u0026rsquo;t even mean all that much time:\nTesting has found that overall \u0026ldquo;input lag\u0026rdquo; (from controller input to display response) times of approximately 200 ms are distracting to the user. - Wikipedia Article on Input Lag citing Console Gaming: The Lag Factor from eurogamer.net So, the time it actually takes for your display to update once it\u0026rsquo;s gotten a frame is not irreverent.\nDimming # Unless you\u0026rsquo;re a fan of melting your eyes out of their sockets, you likely do not have your display set to maximum brightness. Unfortunately, dimming on most displays is absolute garbage.\nInstead of doing DC dimming, that is just lowering the voltage of the back light so it is dimmer, the majority of displays do PWM, Pulse Width Modulation, Dimming.\nPWM image by Thewrightstuff CC BY-SA 4.0 So instead of just lowering the level directly, the back light is turned on and off rapidly, for a varying amount of time. This might be done really fast, sometimes it\u0026rsquo;s fast enough that it really does not matter or there\u0026rsquo;s a reasonable amount of capacitance to smooth this out, effectively making it look like just a DC signal again, good enough. Sometimes, the manufacture sucks and uses shitty, low frequency PWM dimming and even if you can\u0026rsquo;t consciously see it, it will cause headaches and generally suck over long periods.\nWARNING! This video has a bright, flashing light Your browser does not support the video tag.\nThis is PWM dimming on a fourteen-segment display captured with the \u0026lsquo;slow-mo\u0026rsquo; camera on my phone.\nIn this video, because it is so incredibly slowed down, you can see the led\u0026rsquo;s flash easily, but at that middle setting I can easily see it in real-time too and it is headache inducing. At the lowest or highest settings it isn\u0026rsquo;t noticeable. Persistence of vision is why this even works in the first place, but obviously that has limits and crappy PWM dimming on an otherwise nice display can really, really suck.\nThis has put me in the crappy situation before of having to set the display to max brightness to avoid the headache from the strobing effect (Pulse width at 100% means constantly on so just DC), but dealing with being blinded by any application with a white background.\nColor and Dynamic Range # If you have multiple displays that aren\u0026rsquo;t exactly the same you know just how annoying un-matched color can be. This is a harder problem to solve than some of the others. Color calibration definitely helps, but that only means so much when the actual display technology may be different. an LCD will look different than an LED will look different than an OLED even if they\u0026rsquo;re color calibrated to match. This, I think, is actually reasonable. What is totally unreasonable is how digital color looks in the first place. Let me start by linking a video:\nThis sucks. Like, why have we accepted this? Sure, things like High Dynamic Range (Wikipedia) or HDR - which allows the panel to selective change the brightness in an area of the screen, giving much better dynamic range in supported applications - have helped with this problem indirectly, but it\u0026rsquo;s still not great.\nWhat we really need is to finally step up from 24bit color to something better, and in fairness, this has been happening. A lot of newer monitors do support 10bit per channel (30bit color (Wikipedia)) and some do 12-bit. Unfortunately, at higher resolutions this sometimes requires trading refresh rate for color depth (want 30bit color? You\u0026rsquo;ll have to run at 30hz.)\nYou\u0026rsquo;re also likely to notice the color gamut or what range of colors the display is actually capable of displaying.\nFor example, two displays may both be capable of displaying 255 levels of red, but if one display\u0026rsquo;s range is only from a dingy red to a dark-ish red, while the other is from a brilliant red to a deep dark red, there\u0026rsquo;s a massive difference in color availability. If this is important to you, notably as a creative professionally in photo or video, you may want to read more on the Wikipedia page for Color Gamut. In general, displays particularly suck at displaying a wide range of green.\nNext up is dynamic range, or how deep the blacks are and how vivid the whites are. Here, OLED is probably the best as it can display true black by actually turning the source of the light off, but unfortunately these are quite susceptible to burn in and image persistence, plus moving the image quickly can result in a \u0026lsquo;purple smear\u0026rsquo; - something you may have noticed when scrolling though images on your phone.\nNote, OLED isn\u0026rsquo;t really ready to be used for normal desktop or laptop monitors yet, as it can suffer from really bad burn in or image persistence. Looks great for movies, but when you have un-changing elements on screen for hours at a time it\u0026rsquo;s not ideal.\nNon pixel displays # You know what would really help with the search for the perfect display though? Needing it for less things.\nAs time has moved on computers have taken over the role of more and more tools on our desk, but that also means the screen has had more responsibilities - I doubt you have a physical clock on your desk.\nI love analog meters. They can be backlit like old VU meters in stereo equipment, or they can totally illuminated by the environment. Regardless, they\u0026rsquo;re quick and easy to read. Needle high, needle low. On the right I have a picture from my (horribly implemented) CPU meter project that just shows my CPU usage on the radiation meter and ram usage on the RGB led.\nOf course, other forms of more passive indication are great too: Little e-ink or oled display, not-too-bright leds (or VFDs or Nixie tubes if you\u0026rsquo;re feeling adventurous) - not everything needs to be on your screen. Let your eyes look away to a dedicated device now and then.\nOften though, they\u0026rsquo;re just beautiful to look at, like this lil\u0026rsquo; Nixie clock:\nThe discontinued Quirky Nimbus, a nightmare of an IOT product my \u0026lsquo;Powonagotchi\u0026rsquo; 🖤 , with its e-ink display Your Space Sucks # Noise # Just looking at the Wikipedia Article on Noise Polution, it\u0026rsquo;s pretty obvious that humans like to be somewhere where noise is kept to a minimum. There are of course questions about what you want to consider noise. Like, clearly above I made it clear I prefer mechanical keyboards which, as anyone that has been on a discord call can tell you, are rather loud. The difference is in it being noise you\u0026rsquo;re causing, or background noise that you can\u0026rsquo;t control. Fan noise from your computer, music from another room that you can\u0026rsquo;t quite make out, a rattle from the HVAC system, that\u0026rsquo;s noise. Somehow we\u0026rsquo;ve all gotten rather used to rather noisy environments.\nDon\u0026rsquo;t get me wrong, improvements have been made. A lot of computers don\u0026rsquo;t even run the fans when they\u0026rsquo;re idle or you\u0026rsquo;re just web browsing (plus the fans have gotten bigger, which means lower pitch, which is way less annoying), LED bulbs don\u0026rsquo;t have the ballasts that were required of old fluorescent bulbs that always found a way to whine, we no longer used CRT (Cathode Ray Tube) screens that had flyback transformers whining at the edge of human hearing either. But it\u0026rsquo;s still not great. Even if none of the electronics in a room have fans or speakers or the other things you expect to make noise, you can still notice when a room has been shut off. If you spend a lot of time surrounded by electronics like I do, not having the hum around is a mix of eerie and relaxing. But, still a lot of electronics do have fans, and they\u0026rsquo;re often crap. Even the high end ones that PC building enthusiasts idolize like those from Noctua are far from amazing.\nBut, come on. Why are we not integrating at least some sound control into our architecture? Why is acoustic dampening something only used by streamers? Why are devices that we know get nasty coil whine not being silenced by just adding some wax or glue to the inductors?\nIt\u0026rsquo;s not like most of the solutions for making noise better aren\u0026rsquo;t available and understood, it\u0026rsquo;s just that it takes an extra bit of consideration and maybe a bit more money.\nI\u0026rsquo;m not sure what the solution should be. Maybe products need to have some sort of testing for this and a label applied, like the ubiquitous \u0026lsquo;Energy Star\u0026rsquo; stickers or the 80 Plus ratings on PC power supplies.\nLighting # If you\u0026rsquo;re in an office right now, I can take a pretty good guess that the lights above you are some of those 4ft long fluorescent tube bulbs, probably in an excruciating 6500k.\nThe problem with that color temperature isn\u0026rsquo;t necessarily that it\u0026rsquo;s too \u0026lsquo;cool\u0026rsquo;, it\u0026rsquo;s that it\u0026rsquo;s fixed at that point. 6500k is about the same as the sun on a clear day\u0026hellip; at about noon. The problem is our bodies expect warmer colored light closer to night or it screws up our sleep cycle. The website for the software f.lux has aggregated some good research on this subject, but I think at this point it\u0026rsquo;s actually pretty common knowledge as even Samsung phones ship with the ability to turn a blue light filter on. Image from Bhutajata on this Wikipedia article Brief aside, if you use Linux, Redshift is a good alternative to f.lux\nRight now we\u0026rsquo;re still in the annoying stages of this sort of system, most RGB or color temperature variable bulbs have rather crappy Color Rendering Index (CRI), so even if the temperature is variable the quality still sucks.\nThis is purely anecdotal, and it seems the Phillips Hue bulbs at least have a decently high CRI, but like, they\u0026rsquo;re also a tad bit on the expensive and privacy invade-y side of things sooo ¯\\(ツ)/¯\nBut worse, the software to keep these bulbs in sync is pretty gross, and some bulbs will just end up snapping from one color to another every 15 minutes or so, which is more distracting than it\u0026rsquo;s worth.\nThe next worst offender with lighting is all way to bright (often blue) leds on E V E R Y T H I N G . For the love of god guys, the lights are supposed to be indicators, not light the entire room. There shouldn\u0026rsquo;t be a product with over a thousand reviews on Amazon with the sole purpose of dimming obnoxious LEDs. Like, leds aren\u0026rsquo;t even the best thing for the job anyway most of the time. I\u0026rsquo;d think an e-ink screen, like on the pwnagotchi below, would be sooo much better for most applications that need multiple indicators. For a power on indicator, an led is fine, but please just make it like 20x dimmer or put it near the power input instead of somewhere normally visible.\nLike, my center display has a blue led that is on when the monitor is on instead of the more normal standby indicator that goes off when the display is on found on TVs. It\u0026rsquo;s immensely distracting. Sure it can be fixed with a tiny piece of electrical tape, but whyyyy?\nFurther Reading: LED History (Tedium.co), We Ruined Status LEDs (Hackaday)\nAn offending LED indicator on the Mackie CR4 speakers. It\u0026rsquo;s meant to illuminate the volume knob in the dark but it mostly fails at that, especially since the all-black knob relies on a bump for indication rather than a white stripe.\nOn a far less useful but neat note- I think \u0026lsquo;ambilight\u0026rsquo; systems need to be more common, obviously user choice whether or not to use it, but yeah. 10/10 need more ambilight in my life.\nBasically ambilight is just a system for letting the colors from the pixels near the edge of the screen be mirrored onto some RGB leds so that the color spills onto the wall behind. It\u0026rsquo;s a really neat effect for games or movies.\nAmbilight image from Wikipeda user Stephan Legachev, resized for this blog. CO2 # Alright, so after seeing this I went out and got a CO2 meter. I watched it get above 2000ppm regularly. I took steps to lower it and now, honestly, I do feel better. (If you follow my lead, I recommend hooking it up to a Pi and using this python package to log the data )\nThis requires two things to fix:\nBetter indoor ventilation A Carbon tax and other restrictions that scientists and economists have been telling governments for decades that they need to be doing before we lose entire ecosystems, our entire world becomes inhospitable to life as we know it, more cities have air that is literally toxic, and things just generally go to shit. Coming back around to \u0026lsquo;How is this relevant to how we interact with computers\u0026rsquo;?\nWell, I imagine you like to breathe while at your desk, and I also assume that you\u0026rsquo;re using a device that uses electricity to read this, and that device is very likely not powered by renewable energy.\nA Good Environment for Thought # It\u0026rsquo;s also worth considering what is in your space to keep visually appealing. Wires dangling over things, pealing paint, unorganized shelves, etc. are obviously off-putting, but I\u0026rsquo;d go the step further to say they actively interrupt productivity as they stick out and beg to be fixed. It\u0026rsquo;s the standard scenario of not wanting to do homework until the room is clean. On the other hand, adding a bit of tactile flair can go a long way. It is tough to strike a good balance. I personally don\u0026rsquo;t want art or static words (paintings with text, motivational posters etc.) in front of me in my work space as I find that distracting. Instead, some acoustic panels (not cheap acoustic foam) on the wall can go a long way, both for sound in a room and adding visual interest to the wall, and it\u0026rsquo;s pretty cheap too.\nTo keep your desk tidy a good start is just getting rid of your monitor\u0026rsquo;s base and using a VESA mount to the wall or back of desk. the flexibility in position and extra available desk space goes a long way, and it\u0026rsquo;s much, much more visually appealing.\nRather paradoxically, I do see value in motion in the work space too. For example, MIT\u0026rsquo;s reactive table or those fancy marble in sand tables can add much needed visual motion to prevent a space from becoming stale. Hell, even a simple fish tank or plant that adds a bit of change with time make\u0026rsquo;s a huge difference.\nIf you do think \u0026ldquo;huh, I could go for a fish tank\u0026rdquo;, I will warn you most produce a fair amount of noise with running water and motors for the air pump and filtration. There are some tanks that avoid both though, so don\u0026rsquo;t immediately rule it out, just do your research. alright, so, yes they're still expensive as all hell, but like if you go DIY then I think they're mostly attainable to most people. I'm sure there's a bit of privlidge talking there, but ╮(─▽─)╭ Programmer's Dvorak is a thing and honestly I want to know if anybody actually uses it? Having the numbers like that hurts my brain. Seriously, check these out. You won't believe some of what's in here. I will concede the C920 can be made significantly less shit by just turning off most of the 'auto' settings and setting everything by hand. This can be done on Linux with GuvcView, but on Windows I've found all the recent drivers make it impossible, so, I stand by it still being shit. In the case of things that can be used standalone, not connected to a computer, like my afforementioned MorningStar MC6 midi controller, it makes some sense. Fuck Adobe. The Launchkey MK2 has an almost impressively bad keybed. Roli, the company behind the Seaboard Block and Lighpad Blocks is a bit controversial. Not like, Behringer levels of controversial, but still. ╮(─▽─)╭ this is without anything extra connected, like flash drives or RFID tools, or my SDR, ... Bus 006 Device 003: ID 2109:0812 VIA Labs, Inc. VL812 Hub Bus 006 Device 002: ID 2109:0812 VIA Labs, Inc. VL812 Hub Bus 006 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 005 Device 011: ID 331b:0003 Morningstar Engineering Morningstar MC6MK2 Bus 005 Device 008: ID 1235:007c Focusrite-Novation Launchkey MK2 49 Bus 005 Device 009: ID 045e:028e Microsoft Corp. Xbox360 Controller Bus 005 Device 006: ID 05e3:0608 Genesys Logic, Inc. Hub Bus 005 Device 012: ID f182:0003 Leap Motion Controller Bus 005 Device 013: ID 0c45:6340 Microdia Camera Bus 005 Device 007: ID 1235:8201 Focusrite-Novation Scarlett 18i20 USB Bus 005 Device 005: ID 2109:2812 VIA Labs, Inc. VL812 Hub Bus 005 Device 004: ID 2109:2812 VIA Labs, Inc. VL812 Hub Bus 005 Device 014: ID 1935:000d Elektron Music Machines Elektron Digitakt Bus 005 Device 003: ID feed:e60d K.T.E.C. ErgoDone Bus 005 Device 002: ID 1a86:7523 QinHeng Electronics CH340 serial converter Bus 005 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 004 Device 003: ID 2109:0813 VIA Labs, Inc. VL813 Hub Bus 004 Device 002: ID 2109:0813 VIA Labs, Inc. VL813 Hub Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 003 Device 005: ID 256c:006e Tablet Monitor Bus 003 Device 009: ID 1235:0069 Focusrite-Novation Launchpad MK2 Bus 003 Device 008: ID 046d:082d Logitech, Inc. HD Pro Webcam C920 Bus 003 Device 007: ID 1337:6007 Vega Deftwing Stinky Bus 003 Device 006: ID cb10:1133 Keebio BDN9 Rev. 1 Bus 003 Device 004: ID 2109:2813 VIA Labs, Inc. VL813 Hub Bus 003 Device 003: ID 2109:2813 VIA Labs, Inc. VL813 Hub Bus 003 Device 002: ID 1e7d:2e4a ROCCAT Tyon Black Mouse Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 002: ID 1235:0123 Focusrite-Novation Launchpad Pro MK3 Bus 001 Device 007: ID 04d8:eef2 Microchip Technology, Inc. FH-2 Bus 001 Device 006: ID 28de:1142 Valve Software Wireless Steam Controller Bus 001 Device 005: ID 0bda:8771 Realtek Semiconductor Corp. Bluetooth Radio Bus 001 Device 004: ID 05e3:0745 Genesys Logic, Inc. Logilink CR0012 Bus 001 Device 003: ID 1a40:0201 Terminus Technology Inc. FE 2.1 7-port Hub Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub MIDI is currently in a transition period from MIDI on a 5-pin Din to over TRS exactly because of this reason. Unfortunately, there's now two competing versions of MIDI over TRS called TRS-A and TRS-B where the signals on each pin are mixed around. Making it even worse, there's even a version that runs on 'mono' TS cables. It's a mess. The interface on your display matters greatly as well, the most common at the are HDMI, Display Port, DVI, and VGA\nVGA is the worst option here, as it's an analog signal. This means the signal can do strange things, getting corrupted between your computer and the monitor. Typically this is a blue, screw in connection with many pins DVI is still pretty common and looks like an even larger VGA connection, with a typically white, screw in connector. This signal is normally digital, though there is a variant of DVI that can be adapted into VGA. Of note, DVI can also be adapted to HDMI though you will not have audio, as DVI does not carry sound\nHDMI, probably the most well known connector, has multiple revisions, the revision determines many things such as the maximum resolution, refresh rate, and weather or not more obscure things such as HDR are supported. HDMI is usually considered the best of these three options\nTaking the crown however, is Display Port (DP). Like HDMI display port does have multiple revisions which do differentiate similar things; however, Display Port will generally support high resolutions and more features at any given point. Assuming you're running a bog-standard 60hz 1080p display however, you'll find no difference between DVI, HDMI, and DP - unless you need sound, in which case you'll want to use HDMI. Sub-Pixel Rendering is effectively abusing the fact that monitors will have a sort of trippled horizonal resolution, where each individual R, G, and B sub pixel is treated like an individual pixel that can be rendered to. This can make text look substantially sharper, but is why when you take a screenshot and blow it up you might see weird colors around the text. It's a hacky work around. FreeSync is the open standard made by AMD, and, even most FreeSync monitors will work fine on Nvidia card. GSync is Nvidia only and is more expensive to impliment - in part because it uses a full damn FPGA shoved into the back of the monitor - but does offer more features except when it doesn't and it's just rebranded FreeSync with a lil' Nvidia Approved sticker. It's complicated and a mess to understand. As of the time of writing both Freesync and GSync are supported on Linux, but quite rough around the edges. for the non-technical people: A fork is just when you take an existing project and add your own features on top, usually with a rename. If I don't also keep my project up to date with the original, they'll diverge in features even more significantly with time. "},{"id":216,"href":"/other/hci2/radicallychanging/","title":"Radicallychanging","section":"Others","content":" Chapter 5: What Might Radically Change Things? # Breaking Away from Silicon, Binary, and Traditional Architectures # Probably the biggest change in computers that we could see would be rethinking the entire idea of how a computer works. This doesn\u0026rsquo;t necessarily mean changing the way users interact with a system, but by having new, radically different hardware designs developers may be inspired to make things that are currently impractical.\nTo some extent, we\u0026rsquo;re already seeing a glimpse of this future as general purpose use of the massively parallel vector operations done by graphics cards are being used instead for training artificial neural networks as well as slowly creeping into other tools, such as those for music production (GPU Audio).\nWhile this is cool, I do wonder what other branches we could go down as Moore\u0026rsquo;s Law slows down and we explore alternatives. I said before I\u0026rsquo;d love to see open hardware that lets people play with things like using microfluidics and diode logic for computation, playing with FeRam, or even ternary logic - and I stand by that. But if any of these things were to catch on and actually become mainstream enough that developers may be able to expect them in a given system, it may well open up the possibility for completely new software to exist. And the possibilities really don\u0026rsquo;t stop there. We could break away from digital entirely and start doing computation in analog again - There\u0026rsquo;s actually some fascinating research that\u0026rsquo;s Reusing NAND Flash for multiplication. Or, maybe Processing in Memory will catch on. We\u0026rsquo;re already seeing some architectural changes creep their way in, as the new DirectStorage API lets the graphics cards bypass the CPU when needing to get data from an NVMe SSD. This is really a pretty dramatic architectural change.\nThere\u0026rsquo;s also some real potential for things to advance in a way that\u0026rsquo;s really mind-blowing: We might be able to use polarized light or quantum effects for computation instead. We\u0026rsquo;re still a good ways from the miniaturization and room-temperature, stable entanglement required for either; however, the ideas shouldn\u0026rsquo;t be discounted or thought to be never coming home. In the 60s the idea of everyone having a computer in the pocket would have seemed just as absurd.\nML Assisted Creation # I\u0026rsquo;ve already mentioned this briefly in the last chapter, so I\u0026rsquo;ll keep this brief: AI/ML tools have massive potential to change how we produce content. Just browsing around, there\u0026rsquo;s\ncleanvoice.ai \u0026ldquo;which removes filler sounds, stuttering and mouth sounds from your podcast or audio recording\u0026rdquo; descript, which lets you edit video or a podcast by editing a text transcription Magenta, which has tools for generating melodies, making new sounds, or having a jam session with an AI, plus a lot more you can try in the browser Runway is capable of some video editing black magic Auphonic will automatically post-processing podcasts, doing level normalization, noise removal, and more Various tools allow for \u0026ldquo;Alien Dream\u0026rdquo; (post by Charlie Snell) for generating some very strange, but interesting art DALL·E 2, Imagen, MidJourney (and free alternatives, like DALL·E mini ) are starting to allow for photo realistic image generation from a prompt that looks just as good as if an artist did it by hand (sorry artists!) GitHub Copilot, Second Mate, and OpenAI Codex all stand to help make programming easier by either helping with code suggestions, explaining what code does, or generating code from natural language So, while there are absolutely ethical, legal, and moral concerns with many of these things (deepfake porn anybody?) it\u0026rsquo;s already here and it will absolutely be changing what we see as possible for both big and small content creators alike.\nBody Modification and Bio-Engineering # Another point is the idea of biohacking and body augmentation. The most common biohacks include implanted RFID tags (which I actually have) and magnets for sensing electromagnetic fields (also guilty), but these are still pretty mundane. This Ted Talk I think shows what might be possible a bit better:\nBut I still think there\u0026rsquo;s room for a lot more. While at college, I was fortunate enough to take a class with Dr. Massimilliano Pierobon who is currently the director of the Molecular and Biochemical Telecommunications Lab (MBITE) at UNL, and while I\u0026rsquo;m far from knowledgeable enough to understand everything that they do there I know they\u0026rsquo;re doing some very interesting work that could be summarized as hacking the chemistry and existing networks in biological systems (inc. humans). Here\u0026rsquo;s some work from the MBITE lab I found particularly interesting:\nBi, D., Deng, Y., Pierobon, M., and Nallanathan, A. \u0026ldquo;Chemical Reactions-based Microfluidic Transmitter and Receiver Design for Molecular Communication,\u0026rdquo; IEEE Transactions on Communications (Early Access), 10.1109/TCOMM.2020.2993633, May 2020. [PDF]\nMarcone, A., Pierobon, M., and Magarini, M. \u0026ldquo;Parity-Check Coding Based on Genetic Circuits for Engineered Molecular Communication Between Biological Cells,\u0026rdquo; IEEE Transactions on Communications, vol. 66, no. 12, pp. 6221-6236, December 2018. [PDF]\nHanisch, N., Pierobon, M. “Digital Modulation and Achievable Information Rates of Thru-body Haptic Communications,” In Proceedings of the SPIE International Conference on Defense + Security (DCS), April 2017. [PDF]\nThese articles and others from the MBITE lab at UNL, can be found here Seeing this makes me wonder if the future of bio-hacking might be a bit more tightly integrated into how our bodies already work, rather than just tossing some electronics inside some silicon or glass to implant somewhere.\nBrain Computer Interfaces # I don\u0026rsquo;t know that BCI are really the future. Elon Musk is working on Neuralink which is neat and all, but I\u0026rsquo;m not sure that I\u0026rsquo;m convinced. I would welcome the faster computer to brain link as the keyboard→eyes→brain loop is far too slow, but I don\u0026rsquo;t really see anyone going in to have their skull drilled into for elective surgery unless it\u0026rsquo;s to correct or treat something else neurologically. There have been efforts to do BCI without implants, but I suspect that would suffer from a lack of bandwidth and be less reliable.\nI do very much hope to be wrong, as I think BCI has the opportunity to be the biggest leap humanity has ever taken. Soon, it may even be necessary to even deal with how quickly our would is changing and the amount of information we need to process every day. If you\u0026rsquo;d like to read more, the Brain Computer Interface article on Wikipedia is impressively deep and well cited.\nThough, all of this assumes it\u0026rsquo;s given proper respect as an implant and gets long term support. Seeing \u0026ldquo;Their Bionic Eyes Are Now Obsolete and Unsupported\u0026rdquo; (IEEE Spectrum) has me worried.\nVR # VR IS THE FUTURE BRO\nYeah, I know. We\u0026rsquo;ve gone through the VR and 3D TV fad multiple times. Sure, this time it seems to have at least a little bit more sticking power with the Quest and Index being reasonably popular and Facebook, erm, excuse me ꩇׁׅ݊ꫀׁׅܻtׁׅɑׁׅ֮ (sorry, I can\u0026rsquo;t not make fun of them.) going all in on VR and the ｍｅｔａｖｅｒｓｅclearly there\u0026rsquo;s money behind it succeeding as well.\nAnd frankly, I agreed with the sentiment that it\u0026rsquo;s a passing fad, too. I had a Razer OSVR I got for cheap and it was so awful to use that I gave it away for free to a friend. But, I decided I wanted to try one more time. Not having a grand to drop and lacking good alternatives that don\u0026rsquo;t make me Facebook\u0026rsquo;s bitch, I bought a Quest2. It also sucked. At first.\nThen I bought a better facial interface, replaced the strap with the HTC Vive\u0026rsquo;s Deluxe Audio Strap ( making a \u0026ldquo;Frankenquest\u0026rdquo; ) and got some controller grips. Connected up to my PC via USB3 and the hardware was actually, dare I say, good.\nThat left the other side of the problem, software. I still saw VR as a toy. The games as cool, but not dramatically more fun than I could have looking at a monitor anyway.\nThen I played VR Chat.\nLook, I can\u0026rsquo;t explain what makes it good. Really, it should suck. Being Unity based with all user generated content, the graphics are pretty meh and the performance is often garbage. In a lot of worlds, there are a bunch of 12-year-olds running around that just got the Quest2 for Christmas. But sometimes you find a world with people you vibe with. It\u0026rsquo;s just\u0026hellip; magic.\nI\u0026rsquo;m also a furry, and one thing I really see VR doing for people is helping them have that behind-a-mask anonymity that makes everyone more comfortable in their own body. Sure, this does mean there\u0026rsquo;s some racist douchebags and trolls, but it also means there\u0026rsquo;s people who finally have the confidence to dance in their own living room, the same way a fursuit might let a furry in a fursuit do so when otherwise they\u0026rsquo;d be too self-conscious. Assuming the corporate overlords at Facebook Meta don\u0026rsquo;t fuck it up for everyone, VR absolutely has the potential to radically change things.\n"},{"id":217,"href":"/other/hci2/whatelse/","title":"Whatelse","section":"Others","content":" Chapter 3: What\u0026rsquo;s Else Is Needed? # Script all the things! But Not Like That™ # Computers are, generally, really good at repetitive tasks. People are, generally, really bad at telling computers what they want.\nThis means that developers (which, I assume, is a large portion of those still reading this) need to make systems that let users automate tasks in a more user-friendly way than they would do it.\nPreviously, I mentioned that I run backups with a little backup script:\nMy basic backup script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/bin/bash rsync -a --delete -P /mnt/data /run/media/vega/BigOlBackup rsync -a --delete -P /mnt/win/VegaProductions /run/media/vega/BigOlBackup rsync -a --delete -P /etc /run/media/vega/BigOlBackup rsync -a --delete -P --exclude={\u0026#39;Xilinx\u0026#39;,\u0026#39;intelFPGA\u0026#39;} /opt /run/media/vega/BigOlBackup rsync -a --delete -P /srv /run/media/vega/BigOlBackup rsync -a --delete -P /usr /run/media/vega/BigOlBackup rsync -a --delete -P --exclude={\u0026#39;.local/share/Steam\u0026#39;} /home/vega /run/media/vega/BigOlBackup rsync -a --delete -P /mnt/win/ProgramData/Ableton /run/media/vega/BigOlBackup/win rsync -a --delete -P /mnt/win/Users/Vega/Documents /run/media/vega/BigOlBackup/win rsync -a --delete -P /mnt/win/Users/Vega/Downloads /run/media/vega/BigOlBackup/win rsync -a --delete -P /mnt/music /run/media/vega/BigOlBackup/ rsync -a --delete -P /run/media/vega/Archived/SD /run/media/vega/BigOlBackup notify-send \u0026#34;Backup Complete\u0026#34; And for those that know what they\u0026rsquo;re looking at, this is pretty basic. The problem is, a lot of users would feel totally overwhelmed by this. The idea of reading through the rysnc man page alone would make many people run away. So, one option is to just make application specific software that provides a nice GUI. And sure, that works. The problem is that prevents people from being able to do some of the more complex operations, doesn\u0026rsquo;t allow for convenient triggering (for example, I could put this script on a Systemd timer or have it trigger as soon as it detects that my removable media has been inserted).\nBut there\u0026rsquo;s a lot more than backups at stake. There are a surprising number of people out there whose entire job could be replaced by a 100 line python script, especially if you use OpenCV or TensorFlow. These people could be doing something much more meaningful with their lives.\nThe problem isn\u0026rsquo;t that the tools don\u0026rsquo;t exist to do this automation, it\u0026rsquo;s that a lot of people don\u0026rsquo;t know they exist and that they don\u0026rsquo;t have the skills to apply them.\nHow do I propose we fix this?\nVisual programming.\nYeah. I know a lot of people hate it. But, provided it\u0026rsquo;s high enough level - so, probably higher than Pure Data or Node-RED or even the Enso language mention in the last chapter. I think the right way forward is something that generates nodes based on a small text description and some provided examples as text, images, or other data. This would let a user, for example, scan in and manually enter the data from a form a few times, then leave the computer to do it moving forward - probably with a little output indicating if it was under a threshold of confidence in a certain transcription.\nThe other big necessity to make this work is using the Linux philosophy of treating everything as a file (or folder). This would make it much easier for this language/interface to let users, say, open a running program\u0026rsquo;s \u0026lsquo;file\u0026rsquo; and - with support - grab data out. This could be as mundane as how many browser tabs are open or as advanced as pulling the current geometry or live rotation angle out of 3D modeling software. With enough support from applications, the work flow potential is mind-blowing, hence the previous mention of this in the last chapter with tool composition.\nMy point here is that by making user-friendly but open tools we could dramatically reduce the amount of repetitive work done by many people and, more importantly, not just support one-off use cases with application specific software but instead empower people to make their own tools that fit their specific needs that developers could never anticipate. Will this result in some mildly horrific tools being made? Probably. But that\u0026rsquo;s the beauty of it.\nOptional Security # TempleOS is a really weird operating system. From Wikipedia\nTempleOS is a biblical-themed lightweight operating system designed to be the Third Temple prophesied in the Bible. It was created by the late American programmer Terry A. Davis, who developed it alone over the course of a decade after a series of manic episodes that he later described as a revelation from God.\n[\u0026hellip;] using an interface similar to a mixture of DOS and Turbo C. Davis proclaimed that the system\u0026rsquo;s features, such as its 640x480 resolution, 16-color display and single audio voice, were designed according to explicit instructions from God.\n- Wikipedia But the part that\u0026rsquo;s cool to me? TempleOS gives no, and I mean absolutely zero, fucks about security, now, that\u0026rsquo;s at least in part because it doesn\u0026rsquo;t have networking (though there is a fork with networking) but even then, there\u0026rsquo;s no concept of an admin or \u0026rsquo;normal\u0026rsquo; user. There\u0026rsquo;s no system-protected processes. You want to flip arbitrary bits, directly send data over IO lines, whatever. The OS will not stop you. The entire thing runs in ring 0, which means you always have total control over the hardware, but it also means there\u0026rsquo;s nothing stopping you from massively fucking everything up and crashing the system, corrupting everything, etc.\n( You may want to watch TempleOS (Linus Tech Tips, YouTube) if this is interesting to you)\nAnd, okay, yeah, that\u0026rsquo;s obviously not ideal for normal use, but I think there\u0026rsquo;s something to be said for having the option to say fuck it, slam your fist down on the manual override button, and take full control of the system. This is what I mean by optional security - no HAL 9000 in the way. No sudo, no \u0026rsquo;no\u0026rsquo;. In this mode it should also be easy to turn off all networking and malware protection, so a super-fuckit No firewalls, no threat scanning, etc. switch.\nRunning as root in Linux is almost this. It could even be argued that it\u0026rsquo;s better, since toying with memory though /dev/kmem is probably easier than trying to deduce the physical memory map. That said, there are still some restrictions on the root account compared to running directly in \u0026lsquo;kernel mode\u0026rsquo;.\nBackwards Compatibility via Compatibility Layers # [\u0026hellip;]\nBackwards compatibility should be a high priority, but accomplished via shim layers and/or emulation and/or vms when clean breaks are necessary. A wide array of such should be included with the OS from the beginning. In 2020, there is no excuse for not being able to run old software.\u0026quot; - AnIdiotONTheNet comment on the Re-Thinking the Desktop OS Hacker News Submission And yeah, that pretty much sums it up. Currently, backwards compatibility is often a choice of actually going to better technology and fixing bugs - like the Excel leap year problem or supporting older files without them massively breaking. There\u0026rsquo;s really no reason we couldn\u0026rsquo;t do both using comparability layers. The cost, I think, would mostly be in accepting that the transition to those comparability layers will be rough and that something will just have to be upgraded until that compatibility infrastructure is in place.\nThere\u0026rsquo;s no reason we shouldn\u0026rsquo;t be able to run very old software, but also no reason to use that as an excuse against moving forward.\nA fairly interesting solution to some of this might be to implement hardware compatibility via FPGAs, that is, loading either full soft-core CPUs or instruction set translation logic onto a tightly integrated FPGA. Higher end retro console emulators are already using FPGA emulations of the original CPUs anyway, so this isn\u0026rsquo;t some crazy fantasy. To add even further hope, AMD owns Xilinx and Intel own Altera, so the two biggest CPU manufactures both already own the two biggest FPGA manufactures (which, is a problem in some ways). There\u0026rsquo;s nothing stopping them from making integration standard. (well, other than cost and market segmentation)\nHardware Modularity, Repairability, and Customization # According to Wikipedia, Right to Repair is\nlegislation that is intended to allow consumers the ability to repair and modify their own consumer electronic devices, where otherwise the manufacturer of such devices require the consumer to use only their offered services\nThis is a big deal, with big player like Apple and John Deer lobbying incredibly hard against it. I can\u0026rsquo;t possibly explain even a fraction of all the nuance in the arguments, so instead I recommend reading this post from the Electronic Frontier Foundation (EFF) for a quick overview.\nAs for modularity and customization, I mean that hardware should be made such that components can be swapped out. For example, most desktop computers do a decent job of this, where each component - the CPU, graphics card, power supply, RAM, etc. - can be upgraded individually (1). This concept desperately needs to be more widespread. It simultaneously cuts down on eWaste by increasing longevity, allows consumers to only pay for what they need, and lets consumers buy-now-upgrade-later if they can\u0026rsquo;t afford what they really want to start with.\nThe only real downside for the consumer is that the products might be hair bit thicker? Yeah, I think that\u0026rsquo;s a fair trade.\nNetwork Transparency # Network Transparency is a neat concept, basically, it means you can use a program over the network as if it were local. I think the coolest example of this is the X Window System on Linux, which lets you run graphical programs on a remote computer, even one with no screen attached, and have the window be visible on your own computer. For example, while you could always set up a file server to access file remotely, you could also just use X\u0026rsquo;s network transparency to forward the entire file manager window to your computer and browse files like normal (not that you should)\nI\u0026rsquo;d love to see more applications and backend software (like X) support this.\nThe Ability to go Back In Time # A lot of software already runs on an idea of \u0026rsquo;events\u0026rsquo; or \u0026rsquo;transactions\u0026rsquo;, whatever you want to call it. What I want is for these to always be undo-able, at least for a window of time or number of past events. This might mean updates, changes to a file, or just scrolling down on a screen.\nA refresh should try to bring you to the previous state, dismissed notifications should be able to be un-dissmissed.\nAs previously mentioned, you should be able to go back to a saved copy of any web page you\u0026rsquo;ve visited. You should be able to revert your system to a restore point (Good idea from Windows, poorly implemented).\nEVERY F**IN\u0026#39;\nTIME\n💢\n🦊 pic.twitter.com/5JGKXqxIwF\n\u0026mdash; FPV 🟡 眼鏡の狐 (@F0XnR0LL) January 7, 2021 Archive.org backup of the above tweet Open Sensors and Generators # Hardware is gradually becoming more general purpose, and as this happens, it would be amazing if they were opened up enough to allow for experimentation. Think using full on software defined radio chips for Wi-Fi and Bluetooth, such that they could be reconfigured on the fly and a different antenna attached to make use of GPS, cellular, or satellite internet. There\u0026rsquo;s already a mini PCI-e card SDR on the market. Like this, but it\u0026rsquo;s my understanding that many Wi-Fi chipsets are effectively just limited SDRs running locked down firmware anyway. Why not open it up?\nI also want more platform to have GPIO access. On a full on desktop or laptop, this would have to be done with care to avoid people straight up frying devices, but I think the wide array of hats available for the RaspberryPi shows that having this as an option would really allow for some cool hardware to exist.\nI also want senors and IOT devices to be more open and extendable. Give me a serial out, let me wire it up to my own home automation. I mentioned above that I have a CO2 meter from CO2Meter.com, but I\u0026rsquo;m looking at getting this CO2 sensor just so I can get reading out of it easier.\nIOT especially needs to be open. In 2020 alone, Wink started charging customers $5/mo for app access to IOT gear they already owned, and Sonos bricked devices with \u0026lsquo;Recycle Mode\u0026rsquo;.\nSoftware that breaks the mold # There\u0026rsquo;s endless software out there, but a lot of it does mundane tasks in a mundane way. I\u0026rsquo;d like to showcase a few things that I think really found new ways of doing things.\nSchultzschultzgrafik on Instagram pic.twitter.com/QTdXqJA3TY\n\u0026mdash; Colugo (@ColugoMusic) April 3, 2021 This is the WIP Blockhead DAW Along with Blockhead, Radium is a very strange Digtal Audio Workstation with its own interesting workflow ORCΛ is a really neat esoteric programming language music sequencer\u0026hellip; thing. It\u0026rsquo;s so different from everything else it\u0026rsquo;s hard to describe. You may want to look at the Live Coding Music Tools from the Music section of this website. MasterPlan by SolarLune is a task management program focused on Indie game development with a really need mind-map style workflow Habitica is task and habit tracking software that gamifies things Hexels is an art program where you can work with hexgons or triangles instead of big squares for \u0026ldquo;pixel\u0026rdquo; art. On the note of art, Black Ink has some really neat brushes and support for a crazy high resolution canvas, and a node based language for making brushes or working with the layers. \u0026hellip; Clearly this list can\u0026rsquo;t be exhaustive, but I do hope this has provided at least some inspiration. For even more, you may want to check out The big list of Generative Art Tools in the Design section of this website\nWhile all of this is cool, I do want to point out I really, really wish there were more tools that made the more mundane tasks better too. There\u0026rsquo;s been very little innovation in the user interface of browsers (like, Vivaldi may have vertical tabs but Firefox has had Tree Style Tabs for much longer) text editors, and spreadsheets(3). The was, briefly, a bit of innovation in the slideshow space with Prezi but it was still pretty gimmicky and not a dramatic improvement.\nDevelopers have gotten better tools pretty rapidly recently though, as there\u0026rsquo;s a crazy number of replacements Alternatives to coreutils and other basic tools that have come out over the last few years. This gives me hope that tools for \u0026ldquo;normies\u0026rdquo; will catch up and see innovation too.\nIf you happen to know of something else that should be on this list, feel free to tweet at me @Vega_DW! Hardware for Open Experimentation # Microcontrollers, like the infamous Arduino UNO (ATMEGA 328p) and the much nicer Raspberry Pi Pico (RP2040) are awesome for letting people experiment and make crazy contraptions. FPGAs are finally starting to get open source toolchains and low enough price options to allow for people to make their own soft core CPUs and custom logic. Single board computers like the Raspberry Pi 3B+ are cheap enough to be thrown at many problems. This is all awesome.\nUnfortunately, I see one big thing being left behind: the PC. If we really want innovation, it\u0026rsquo;d be awesome if there was an affordable PCIe FPGA card that could have bitstreams flashed onto it for specific applications to accelerate different workloads. GpGPU programming is nice, but custom accelerators would be even better!\nFurthermore, I\u0026rsquo;d really like to see high speed not-USB-based GPIO for desktops so that people could experiment with crazy ideas like using microfluidics and diode logic for computation, playing with FeRam, or even ternary logic - Even if most of these ideas are dead ends, they\u0026rsquo;re cool and I want to see more of them.\nStop wasting time on stupid shit that nobody cares about # Microsoft has been spending a lot of time changing to the new UI, and their calculator has been updated like a dozen times for UI now but still SpeedCrunch remains 1000x more usable and tools like WolframAlpha remain superior yet. Stop spending time on shit literally nobody gives a shit about and that nobody should be using. If something is dumb for the sake of being dumb, like Harder Drive: Hard drives we didn\u0026rsquo;t want or need (Tom7, YouTube) sure, but otherwise, let\u0026rsquo;s make things actually better.\nGive me a fucking physical knob # ↑ My eurorack setup, for making something vaguely resembling music I can keep this one brief. I love VCV Rack, I\u0026rsquo;ve even developed my own modules for it yet here you can see I have a hardware modular music setup? So, why? Because physical, real, tactile knobs make a difference (2) . I\u0026rsquo;m not saying everything needs to be physical, I\u0026rsquo;m saying that even if Popular Mechanics was wrong back in 2009 when they said:\nI wonder if Apple iPhone will meet with the same success, as its touchscreen offers no tactile feedback. Will people get tired of having to look down every time they dial a number? - Popular Mechanics We should be careful of getting too comfortable with our touch screens and not forget the value of having a physical interface. Hell, in that same picture above is a ROLI Seaboard Block (a product I actually recommend against, for various reasons) which is Amazing for its ability to convey a boatload of information to the computer in a tactile way, like, seriously, look at the MIDI data from this little jam session:\nTo be clear, those aren\u0026rsquo;t sound waves, those lines represent the pressure of each finger on the keyboard, individually, over time. The lines in the notes represent sliding the finger after the note was held, allowing for smooth pitch transitions or vibrato on a single key. There\u0026rsquo;s just no way I could have programmed that in manually, and despite the chaos, I can assure you the sound of this was amazing.\nSo as Bret Victor put it all the way back in 2011 in A Brief Rant On The Future Of Interaction Design, \u0026ldquo;Our hands feel things, and our hands manipulate things. Why aim for anything less than a dynamic medium that we can see, feel, and manipulate?\u0026rdquo;\nWithin the normal limits of compatability, you can't drop a crazy fast graphics card in without upgrading the power supply, and often the CPU, Ram, and motherboard all need to be from the same generation. Well, and there's some techniques that VCV rack can't do well, like feedback, on account of every cable incurring one sample of delay. This is getting into the weeds though. There has been some innovation in spreadsheets, but none of it is really crazy. There's Cubeweve which bills itslef as a \"Multidimensional\" spreadsheet, but is rather lame and awkwardly mouse driven from what I can see. subset.so looks promising as well; however, it seems like a pretty small improvment. Getting a bit deeper, natto.dev and Mito both use python in their data processing, albeit with radically different interfaces. Mito is probably the closest to what I'd actually consider a real improvment. "},{"id":218,"href":"/other/hci2/wrappingup/","title":"Wrappingup","section":"Others","content":" Wrapping up # In all honesty, I\u0026rsquo;m not exactly sure what everything I just wrote is about. Mostly it\u0026rsquo;s just a lot of ranting, but hopefully it has been interesting. To round things off with a bit of a closing note though, I don\u0026rsquo;t actually foresee many of the things I mentioned becoming common place or many even being possible, if not simply because they\u0026rsquo;re requiring so many people to agree on standards, but there is one glimmer of hope, and it\u0026rsquo;s one of proof of uniformity. The terminal. Yes. This terminal:\nThe terminal emulator above is still compatible with the VT220 from 1983 (as are most terminal emulators) yet from it, with a good shell (like ZSH) I can do everything I can really think of: browse the web, chat with friends, listen to music, basically anything. I\u0026rsquo;m not saying we should all stop using chrome, but I think part of the reason so many neck beards and sysadmins still use the terminal is you can do so much with it, everything that uses it as a common interface, and it has programming capabilities. You can automate or string together just about anything, exactly as I described above.\nFinally, I\u0026rsquo;d like to say I understand we don\u0026rsquo;t all get the choice, be it by monetary, physical, or other restrictions, to have a \u0026lsquo;perfect\u0026rsquo; work environment. If you live in the city there will be noise, If you live in the country, you may be limited by your internet connection, I get that. Obviously I don\u0026rsquo;t expect everyone to go out and make their own versions of some of the high-tech, borderline art installations that I linked either. I also don\u0026rsquo;t think everyone\u0026rsquo;s down to go get an RFID tag in their hand. I just wanted to present what I see as \u0026rsquo;the future\u0026rsquo;. It probably won\u0026rsquo;t come in 2023 or even 20023. I do, however, hope this has inspired you to look at the way you work, the environment you work in, and how you can improve it.\nOther hardware and software pushing things forward: # https://hookproductivity.com \u0026ndash; Link all the things\nAtlas Informatics (TechCrunch Article) - search all the things\nhttps://apse.io \u0026ndash; a photographic memory of all the text that goes across your screen\nhttps://desktopneo.com \u0026ndash; a UI mockup for a better system\nhttps://arcan-fe.com/2020/02/10/leveraging-the-display-server-to-improve-debugging/ - it\u0026rsquo;s in the URL\nOther people that have ranted about similar things, but usually a bit more politely: # A Proposal for a Flexible, Composable, Libre Desktop Environment (Michael McThrow)\nWhat do I care the open web is dying? (Abhinav Sharma, Cofounder Insight. ex Mozilla \u0026amp; Facebook)\nI hate computers: confessions of a sysadmin (TechCrunch)\nif you have a link to add, feel free to tweet at me @Vega_DW "},{"id":219,"href":"/other/writing/characters/","title":"Characters","section":"Others","content":" Making Characters # Relationships # Including with the dead, missing, and absent\n"},{"id":220,"href":"/other/writing/conflict/","title":"Conflict","section":"Others","content":" Conflict # "},{"id":221,"href":"/other/writing/creative/","title":"Creative","section":"Others","content":" Creative Thinking # "},{"id":222,"href":"/other/writing/language/","title":"Language","section":"Others","content":" Language # Using accents, regional terms, slang, etc.\nTone, with respect of the narrator PoV and the intended audience from the narrator\nChurch of interruption\n"},{"id":223,"href":"/other/writing/plot/","title":"Plot","section":"Others","content":" Plot # If you can find a moment in the plot where nothing is changing, that is not a relevant moment to be including ShaelinWrites "},{"id":224,"href":"/other/writing/poetry/","title":"Poetry","section":"Others","content":" Poetry # https://github.com/quadrismegistus/prosodic\n"},{"id":225,"href":"/other/writing/revision/","title":"Revision","section":"Others","content":" Revision # "},{"id":226,"href":"/other/writing/worldbuilding/","title":"Worldbuilding","section":"Others","content":" World Building # Cultures # Languages # Senses # Sounds # "},{"id":227,"href":"/other/writing/writing/","title":"Writing","section":"Others","content":" Improving Your Writing # [TODO] split this up for technical, fiction, and applicable to both.\nAnd for some fun,\nWhat if English were Phonetically Consistent? (YouTube - Aaron Alon) Finding Inspiration \u0026amp; Advice # Wonderbook has been by far the most useful thing I have read for improving my skills, and I can\u0026rsquo;t recommend it enough.\nCatastrotivity, a series of short audio episodes about being an artist, while not focused on writing, proved to be quite useful too.\nShaelinWrites on YouTube is a great channel. Slap it onto 1.5x speed and injest as much as you can.\nSome things I took away from her videos:\nAvoid the leading filter words. Don\u0026rsquo;t say \u0026ldquo;She saw \u0026hellip;. She smelled \u0026hellip; She wondered \u0026hellip;\u0026rdquo; If it\u0026rsquo;s obviously from the character\u0026rsquo;s perspective, the reader doesn\u0026rsquo;t need to be told that it\u0026rsquo;s coming from their senses or mind. Earn adjectives, don\u0026rsquo;t state the obvious \u0026ldquo;Feathered bird\u0026rdquo; and \u0026ldquo;Wooden acoustic guitar\u0026rdquo; - \u0026ldquo;Feathered\u0026rdquo; and \u0026ldquo;Wooden\u0026rdquo; are what you\u0026rsquo;d assume. Avoid \u0026ldquo;Just\u0026rdquo; - most uses of the word are bad outside of dialogue. If you start with past perfect, \u0026ldquo;they had [verd]ed [subject]\u0026rdquo;, try to transition to simple past tense for the rest of the paragraph if you can. It\u0026rsquo;s an exception to the typical necessity for consistent verb tenses. Don\u0026rsquo;t use \u0026ldquo;as\u0026rdquo; if the two things can\u0026rsquo;t happen simultaneously, unless there is an intent to imply the strangeness of doing both things at once. Don\u0026rsquo;t use \u0026ldquo;He started to\u0026rdquo; etc. If something wasn\u0026rsquo;t happening before, it\u0026rsquo;s logical to assume it\u0026rsquo;s just The Art Of Language Invention\nGame Maker\u0026rsquo;s Toolkit\nAny stories, books, music, TV - but the New Ablion series, 17776, Brimstone Valley Mall, Umbrella Accademy, The Magicians, Arrival\nAdvice I heard repeated in many, many sources.\nEdit on paper - it\u0026rsquo;s MUCH more effective than editing on a screen Don\u0026rsquo;t state the obvious. Assume your readers are familiar with reality Balance stating the weird with the character\u0026rsquo;s perspective. If something is normal in the character\u0026rsquo;s universe, they wouldn\u0026rsquo;t be commenting on it. Avoid stating things twice \u0026ldquo;Unknown stranger\u0026rdquo; or stupid \u0026ldquo;Frown on her face\u0026rdquo; \u0026ldquo;he stood up\u0026rdquo; \u0026ldquo;she sat down\u0026rdquo; Finding Tools # After seaching far longer than reasonable for good writing tools only a few really stood out to me as useful\nThe well known https://obsidian.md for all of it\u0026rsquo;s organizational features This Daily Stats plugin is really nice for keeping pace adjancey-matrix-maker proides a view of how different pages relate to one another I find much more useful than the node graph [TODO] https://github.com/johackim/obsidian-writing [TODO] https://write.as/vanessaglau/how-i-plan-and-write-fiction-in-obsidian https://www.youtube.com/watch?v=_pZ3ZZd1mms Wavemaker, for it\u0026rsquo;s \u0026ldquo;Snowflake\u0026rdquo; method Prosodic for analyzing stress and meter when writing poetry or lyrics Hemmingway I\u0026rsquo;m much less enthused to find useful, as like Grammarly, I think it enourages a bit too much uniformity in writing. However, I tend to write extremely long run on sentences and while I know there are other tools than can catch this (Word, obviously) I found Hemmingway catches a bit more. [TODO] https://carefulwords.com [TODO] Chat GPT for review + Everything on the generative art pages\nThinking About Communication Between People # Misunderstandings Stress in words Don\u0026rsquo;t Be Spooky (Adam Keys) The importance of proper italicized word placement. pic.twitter.com/fQT5AuYn5W\n\u0026mdash; C.S. Ratliff (@cs_ratliff) August 5, 2021 Actually Improving # Get feedback and get it often "},{"id":228,"href":"/personal/wishlist/","title":"Wishlist","section":"Personals","content":" Wishlist # $50 and Under # Socks++ are always welcome too.\nName \u0026 Link Description Picture Category Price in USD (approx) Magic Eye Tube Music Display using a tube Music / Electronics ~$25 SA Keycaps Nicer caps for my keyboard. Note, these alone would only get me 90% of the way there. I'd also need some 1.5U SA Keys, such as this one, but they're $20/key, and I'd need at least 2, I could always grab them myself later. Electronics ~$40 $50 to $100 # Name \u0026 Link Description Picture Category Price in USD (approx) Nicer Webcam A good black friday deal @90, a terrible buy otherwise!!!!!! Electronics ~$90 USED Boss LS-2 No reason to get one new, but during Black Friday on Amazon it's going for $120. Seriously, just save the $40 though, Boss pedals are indestructable. If you wanted to go all out on this idea and get me something really nuts, the $380 Morningstar ML10X is the end-game equivilent, and would let me do some really crazy shit with my pedals. Music ~$80 $100-200 # Name \u0026 Link Description Picture Category Price in USD (approx) Eurorack Joystick I made one. Mine sucks. On sale for Black Friday @ $170. Music gear ~$170 $Not-Going-To-Happen # I\u0026rsquo;d love a handdrum/handpan - not a clouddrum. They\u0026rsquo;re minimum $300 on Amazon, but good ones start at 500 or so. I\u0026rsquo;d REALLY love a Hurdy Gurdy, but the cheapest one on Etsy is $375 (fine to start with, but yunno) with actually good ones only really being available hand made and from in the $1500-ish range. A bass guitar could be fun. Playing with some in person, my taste is picky. It definitely has to be active pickups and preferably 5 or 6 string. The active pickup part alone makes it hard to find used, so minimum here is ~500. Something like This. "},{"id":229,"href":"/phil/economics/","title":"Economics","section":"PHIL","content":" Economic Systems # Cryptocurrency \u0026amp; NFTs # Why NFTs are bad: the long version (Antsstyle)\nHacker News comments on \u0026ldquo;PayPal raises fees for most domestic transaction types to 3.49% + $0.49\u0026rdquo;\nhttps://basicappleguy.com/basicappleblog/999month\nhttps://thehustle.co/americas-favorite-family-outings-are-increasingly-out-of-reach/\nThe \u0026ldquo;Pay For It\u0026rdquo; Scam (Carlos Maza, YouTube)\n"},{"id":230,"href":"/phil/environment/","title":"Environment","section":"PHIL","content":"\nCharacter owned by Vega, art by Primorde Designs Environmental Protection # u/SvenInFramse / @SvenInFrames (Twitter) / @sveninframes (Insta) u/neilrkaye (2021) Carbon Tax?\nGeoengineering: A Horrible Idea We Might Have to Do (YouTube, Kurzgesagt)\nA Strange New Blend of Rock and Plastic Is Forming on a Portuguese Island (Gizmodo)\nA Plateful of Plastic - Visualising the amount of microplastic we eat (Reuters)\nThe poison found in everyone, even unborn babies – and who is responsible for it (The Guardian)\nSolarpunk # Many people have written about Solarpunk during the last 10+ years. Mostly after 2014.\nThe genre is not yet clearly defined.\nThis Solarpunk Manifesto is a creative re-adaptation of ideas about solarpunk written by many people. These ideas can be mainly found in Solarpunk: a reference guide which can be found here and in Solarpunk: Notes towards a Manifesto by Adam Flynn, which can be found here.\nA Solarpunk Manifesto # Solarpunk is a movement in speculative fiction, art, fashion, and activism that seeks to answer and embody the question “what does a sustainable civilization look like, and how can we get there?”\nThe aesthetics of solarpunk merge the practical with the beautiful, the well-designed with the green and lush, the bright and colorful with the earthy and solid.\nSolarpunk can be utopian, just optimistic, or concerned with the struggles en route to a better world , but never dystopian. As our world roils with calamity, we need solutions, not only warnings.\nSolutions to thrive without fossil fuels, to equitably manage real scarcity and share in abundance instead of supporting false scarcity and false abundance, to be kinder to each other and to the planet we share.\nSolarpunk is at once a vision of the future, a thoughtful provocation, a way of living and a set of achievable proposals to get there.\nWe are solarpunks because optimism has been taken away from us and we are trying to take it back. We are solarpunks because the only other options are denial or despair. At its core, Solarpunk is a vision of a future that embodies the best of what humanity can achieve: a post-scarcity, post-hierarchy, post-capitalistic world where humanity sees itself as part of nature and clean energy replaces fossil fuels. The “punk” in Solarpunk is about rebellion, counterculture, post-capitalism, decolonialism and enthusiasm. It is about going in a different direction than the mainstream, which is increasingly going in a scary direction. Solarpunk is a movement as much as it is a genre: it is not just about the stories, it is also about how we can get there. Solarpunk embraces a diversity of tactics: there is no single right way to do solarpunk. Instead, diverse communities from around the world adopt the name and the ideas, and build little nests of self-sustaining revolution. Solarpunk provides a valuable new perspective, a paradigm and a vocabulary through which to describe one possible future. Instead of embracing retrofuturism, solarpunk looks completely to the future. Not an alternative future, but a possible future. Our futurism is not nihilistic like cyberpunk and it avoids steampunk’s potentially quasi-reactionary tendencies: it is about ingenuity, generativity, independence, and community. Solarpunk emphasizes environmental sustainability and social justice. Solarpunk is about finding ways to make life more wonderful for us right now, and also for the generations that follow us. Our future must involve repurposing and creating new things from what we already have. Imagine “smart cities” being junked in favor of smart citizenry. Solarpunk recognizes the historical influence politics and science fiction have had on each other. Solarpunk recognizes science fiction as not just entertainment but as a form of activism. Solarpunk wants to counter the scenarios of a dying earth, an insuperable gap between rich and poor, and a society controlled by corporations. Not in hundreds of years, but within reach. Solarpunk is about youth maker culture, local solutions, local energy grids, ways of creating autonomous functioning systems. It is about loving the world. Solarpunk culture includes all cultures, religions, abilities, sexes, genders and sexual identities. Solarpunk is the idea of humanity achieving a social evolution that embraces not just mere tolerance, but a more expansive compassion and acceptance. The visual aesthetics of Solarpunk are open and evolving. As it stands, it is a mash-up of the following: 1800s age-of-sail/frontier living (but with more bicycles) Creative reuse of existing infrastructure (sometimes post-apocalyptic, sometimes present-weird) Appropriate technology Art Nouveau Hayao Miyazaki Jugaad-style innovation from the non-Western world High-tech backends with simple, elegant outputs Solarpunk is set in a future built according to principles of New Urbanism or New Pedestrianism and environmental sustainability. Solarpunk envisions a built environment creatively adapted for solar gain, amongst other things, using different technologies. The objective is to promote self sufficiency and living within natural limits. In Solarpunk we’ve pulled back just in time to stop the slow destruction of our planet. We’ve learned to use science wisely, for the betterment of our life conditions as part of our planet. We’re no longer overlords. We’re caretakers. We’re gardeners. Solarpunk: is diverse has room for spirituality and science to coexist is beautiful can happen. Now The Solarpunk Community\nRetrieved from re-des.org on Aug 2, 2021, licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "},{"id":231,"href":"/phil/freedoms/armament/","title":"Armament","section":"PHIL","content":" Personal Armament # Before we talk about this at all, I want to get one thing out of the way:\nThe 2nd amendment does not make gun ownership right or wrong. Laws - including the constitution - do not dictate morality and ethics. We all know there are unjust laws and many choose to break them because of it. So, if you use the argument \u0026ldquo;But Muh Constitution!\u0026rdquo; you\u0026rsquo;ve already made a bad argument.\nTo begin, let\u0026rsquo;s suppose that self-defense were not a problem because everyone was nice. Why own a gun?\nBasically, the only reasons left are related to sporting and hunting (which for guns at least, is almost entirely a sport nowadays). And even keeping guns for that reason carries risks.\nA laxly secured gun can be stolen, misused by friends or family, or used in a suicide rather than a homicide. Even worse is when they are unsecured around children.\nOkay, sure, you can do some advanced gun security, including using \u0026ldquo;smart guns\u0026rdquo; which can only be fired by the owner; however, that still means they could be used by the owner, most notably for domestic violence. Of course, now we\u0026rsquo;ve left our \u0026ldquo;Everybody is nice\u0026rdquo; scenario, though. While the actual usability of a handgun for self-defense against burglaries is questionable (you are vastly more likely to be shot with your own gun by a burglar than the other way around), what about the philosophy of self-defense in general?\nThis comes down to two arguments, both of which are based on evidence.\nThe Leviathan: The Case Against Personal Self Defense # In his book The Leviathan, Thomas Hobbes famously explains why government (in his case, a strong monarchy) should have a monopoly on the use of violence.\nFirst, he observes that before large-scale societies, the life of humans was \u0026ldquo;nasty, brutish and short.\u0026rdquo; This is because of the anarchy trap, which pulls groups/clans into generations long blood feuds and cycles of violence, grievance upon grievance piling up.\nHe also points out why these feuds start, which previous philosophers missed: it is rational to strike pre-emptively without a cause. If you live near someone you don\u0026rsquo;t like, you know that sooner or later, you\u0026rsquo;ll be fighting them. Why wait until they attack first? If you attacked now, you could get the upper hand.\nSubsequent archeology bears this out. Humans living in Africa tens of thousands of years ago had an adult homicide rate of approximately 25% \u0026ndash; described as a murder rate today of 25,000 per 100,000 people.\nWhile one could easily write this off as a bunch of tribal \u0026ldquo;wars\u0026rdquo;, it is not at all. Lots of people within tribes killed each other. And this pattern of violence is borne out by later history as well.\nDuring the middle ages, as the current nations of Europe began to take shape, violence declined according to historians. Even in times of peace, it was higher in the 15th century than the 16th century. Why is that?\nThomas Hobbes argues it\u0026rsquo;s because of government, specifically monarchy. When people live under a monarchy, they must delegate their use of violence to the crown. The job of this \u0026ldquo;leviathan\u0026rdquo; is to keep a monopoly on the use of violence, and punish those who use it on their own.\nFeuding lords centuries earlier would just round up peasants and family, and march into their peer\u0026rsquo;s territory and take things. The crown, however, doesn\u0026rsquo;t want such needless death and destruction from any taxpayer. Instead, that lord would have to go to court and arbitrate the dispute peacefully.\nThis not only reduced violence, but Hobbes argues changed the way Britons thought about violence to begin with, creating a \u0026ldquo;deterrence\u0026rdquo; effect. Only those without access to fair justice \u0026ndash; serfs in England and subjects out in \u0026ldquo;rural\u0026rdquo; Scotland \u0026ndash; kept their \u0026ldquo;deadly quarrels\u0026rdquo;. Historians today back that up with data.\nYou can see this principle operating today in the United States: the \u0026ldquo;deadly quarrels\u0026rdquo; of the masses are mostly occurring in neighborhoods and among people who do not trust the police to settle their disputes.\nMany communities of color have a good reason not to, which explains the \u0026ldquo;inner city\u0026rdquo; violence statistics. On the other hand, rural whites in certain parts of the country settled by Scots fleeing british tyranny have an \u0026ldquo;honor culture\u0026rdquo;, wtih the idea that one must personally defend honor \u0026ndash; not delegate that to the state. This used to be the basis of duels, a widespread practice in the US, but died out except among these whites during the 19th century.\nAbove a very low background level of 2-3 murders per 100,000 \u0026ndash; crimes of passion and the like \u0026ndash; most of the homicides in the United States take this form. Even the majority of mass shootings in the FBI statistics are just \u0026ldquo;extra deadly quarrels\u0026rdquo;, focused around those the shooter knows personally and has grievances with.\nFollowing this bit of sociology, no one should personally own a gun unless they are at great personal risk: cops, licensed private eyes, current and former spies, and so forth.\nHowever, there is a counter-argument to this.\nAnarchistic Decline: The Case Against Hobbes # Many anarchists believe that Thomas Hobbes was wrong, and cite modern statistics which suggest violence is driven by other things.\nThere is a well-known mystery in sociology circles: a sharp rise in all crimes, violent and not, during the middle decades of the 20th century, followed by a precipitous decline.\nSociologists have tried to explain this in many ways, from legalizing abortion, to changes in education, to drug policy, to gun control. But none of them quite fit. The most interesting one I\u0026rsquo;ve come across, which is a pretty good fit for the curve is, based on the phase-out of leaded gasoline.\nThe point here, however, is not which explanation is correct. It is to point out an example of a secular trend which is not affected by the \u0026ldquo;deterrence\u0026rdquo; of the leviathan.\nAs another example, consider something else the leviathan deters against: property crimes. These crimes have been on a secular decline, accelerating in the past several years, and ever more so during COVID. The size of police budgets hasn\u0026rsquo;t changed. Instead, people have become less mobile (even during lockdowns), and poverty has been reduced, especially child poverty.\nThese social causes, in the Anarchist view, are the real causes of all crime, including violent crime. Living under a leviathan, they argue, has shown people that it is actually in their own self-interest to arbitrate rather than reach for violence as a tool at all.\nMany middle-class people have learned not to rely on the police if their cars are stolen, merely their insurance company to take that risk for them pay them out. Even more than that, the majority of citizen see the current methods of \u0026ldquo;justice\u0026rdquo; as doing more harm than good, and this still holds true even for those that are victims of serious crimes: rehabilitation is preferred over long punishment like lengthy prison sentences. (source)\nRestorative justice programs are based on this premise: there is no need for leviathan punishment to deter crime, people see arbitration and recompense positively on their own merits.\nAnarchists want to use this argument to completely get rid of the leviathan, but that is a larger topic. The main point is, under this rubric, anyone who wants a gun should get one \u0026ndash; because as a secular trend, very few people want one. It trusts those individuals to have a good reason, and still see themselves as part of a community.\nOther Arguments You Should Think About # Assuming we agree on X, what about Y?\nif we agree guns are okay, what guns? Limits on firing rate? Limits on magazine size? if we agree that some people shouldn\u0026rsquo;t have guns, who? Mental health checks? Should you need a license to own any gun? How do we keep these restrictions from being racist or classist? if we agree that guns are useful for self defense, when is shooting someone right? Is it okay to shoot strictly to defend property? A note on statistics # Many pro or anti-gun stats you read are bullshit, or at least framed into being bullshit. My favorite is anything relating to \u0026ldquo;Do gun control laws work?\u0026rdquo; because, depending on where you look, the answer varies, and like, no shit the answer will be different depending on if you\u0026rsquo;re looking at an already high crime, marginalized community with distrust of the police or a low crime, wealthy white suburb.(1) Really, the biggest problem here is that we\u0026rsquo;re trying to work with to many variables and assumptions about what can be changed - the effectiveness of gun control will depend on an areas education level, poverty rate, culture, and obviously the crime rate. That said, it\u0026rsquo;s also pretty obvious the homicide rate (and so crime rate) will be influenced by the number of guns- though the direction of that influence may change depending on the other factors! Basically, if you want numbers that mean anything, you need to ask more specific questions.\nSo What Do? # Read arguments and decide for yourself. I can see both sides as reasonable (2).\nOh, and don\u0026rsquo;t ever tell me that you need a gun \u0026ldquo;just in case we have to overthrow the government.\u0026rdquo; After January 6th, 2021, I will not tolerate that bullshit.\nRequired viewing: Texas Students Opt For C*cks Not Glocks: The Daily Show (YouTube)\nThis also brings up the question of \"Are Gun Control Laws Racist?\" if they're heavily targeted at minority neighborhoods, and yeah, that's a legitimate point. in 2021, the Rittenhouse case (where a white, 17yo openly carried an AR-15 shot into a crowd that was protesting the death of Jacob Blake, a black man that was murdered by police, was ultimately fonud not guilty) makes an interesting point of the disparity between the treatment of gun ownersip based on skin color. That said, while it is possible for gun control laws to be racist directly - such as targetting specific neighboorhods - it is more likely that the law is written well intentioned but executed with prejudice, such as when MLK was denied a concealed carry permit even after his house had been firebombed. This moves the question into one about police and executive branch refrom though, which isn't the point of this section. ...sort of reasonable. Unfettered, you can buy an AR-15 at any WalMart with no background check is obviously crazy. Similarly, saying absolutely no guns ever isn't really right, as many people do enjoy them for sport, even at shooting ranges which are nutritiously incredibly safe. I really don't think many people are arguing for either extreme though, so really all I ask is that you give it some real thought and consider where you fall on that spectrum. "},{"id":232,"href":"/phil/freedoms/body/","title":"Body","section":"PHIL","content":" Freedom of Body # What should you be able to do with your body? The immediate reaction may be \u0026ldquo;It\u0026rsquo;s my body, so whatever I want!\u0026rdquo; but think about it really, should everyone have the right to do anything they want with their body? What about suicide and self harm? What about when information about you is shared- if you take a DNA test, that impacts everyone related to you.\nWhat should others be able to do with your body? Obviously, nobody should be able to force you to do anything, but is it okay for your face to be used in AI recognition by Facebook? What about by law enforcement? Is prison labor ethical?\nSuicide # assisted suicide\nDNA # Facial Recognition # clearview ai\nSlavery # prison labor\n"},{"id":233,"href":"/phil/freedoms/environmentalconcern/","title":"Environmentalconcern","section":"PHIL","content":" Freedom of environmental concern # Vaccination # Local Pollution # PFAS # Air Quality # "},{"id":234,"href":"/phil/freedoms/fairtrial/","title":"Fairtrial","section":"PHIL","content":" Fair Trial # Jury of your peers - how do we define peers? # Court of Public Opinion # "},{"id":235,"href":"/phil/freedoms/freedoms/","title":"Freedoms","section":"PHIL","content":" Freedoms and Rights # Before we go into some actual philosophy and current issues, let\u0026rsquo;s establish a baseline by looking at some of how freedoms and rights are laid out around the world\nUN Declaration of Human Rights # The Universal Declaration of Human Rights from the United Nations lays out quite a few protections that are mostly ignored and unenforceable, but fundamentally agreeable. The actual text isn\u0026rsquo;t very long, but here\u0026rsquo;s the quick version\nAll people are equal, should treat everyone else as equals, and deserve to live and do so freely without being detained without reason, to get fair trials where they are presumed innocent, and not be tortured. Everyone has the right to travel within their country, leave and come back to their country, and to take asylum if elsewhere if necessary - unless they\u0026rsquo;re like a terrorist or something. Adults have the right to marry and have children without discrimination, but they can never be forced to marry. Everyone has the right to own things, and not have them taken arbitrarily. Freedom of thought, religion, and press are all good ideas - but nobody should be forced to think or worship in a certain way Everyone can vote \u0026amp; access public services. The government should reflect the will of the people. \u0026ldquo;Everyone has the right to work, to free choice of employment, to just and favorable conditions of work and to protection against unemployment.\u0026rdquo; Equal pay and unions are a good call Breaks and time off are necessary Everyone has a right to food, healthcare, clothing, housing, education Elementary education is required Parents get to choose the kind of education Copyright is a thing Now, if you read a few of those and went \u0026ldquo;hmmmmmm\u0026hellip;\u0026rdquo; because where you live (including the US) fails to meet all those standards, you might want to let that sink in for a moment. You also might have taken issue with some of the requirements- maybe you don\u0026rsquo;t think copyright is a good thing, or you don\u0026rsquo;t think convicted felons should be able to vote, whatever. I\u0026rsquo;m not judging your opinions, just stating that even the UN bill of rights isn\u0026rsquo;t totally agreeable to everyone.\nUS Bill of Rights # I also think it\u0026rsquo;s interesting to compare this to the US Bill of Rights, which I\u0026rsquo;ll summarize here:\nFreedom of Speech \u0026amp; Press would be nice GUNS! Soldiers can\u0026rsquo;t steal your house The government can\u0026rsquo;t search and steal your shit except for when it does anyway You can\u0026rsquo;t be tried twice, you don\u0026rsquo;t have to self-incriminate (pleading the 5th) and get due process You should get a speedy, public trial by impartial jury for criminal matters and can have a lawyer \u0026hellip; and you can have a jury in Federal civil cases Excessive bail and fines shouldn\u0026rsquo;t be a thing Just because it\u0026rsquo;s not on this list doesn\u0026rsquo;t mean you don\u0026rsquo;t have other rights The Federal gov can only do what the constitution says, otherwise the power belongs to the states or people Sweden\u0026rsquo;s Four Fundamental Laws # https://en.wikipedia.org/wiki/Basic_Laws_of_Sweden , https://sweden.se/life/democracy/openness-in-sweden\nGermany Rights # India # https://en.wikipedia.org/wiki/Human_rights_in_India, https://en.wikipedia.org/wiki/Fundamental_rights_in_India\nCaste System\nUnited Arab Emirates # "},{"id":236,"href":"/phil/freedoms/ownership/","title":"Ownership","section":"PHIL","content":" Promise of Ownership # DRM, Right to Repair # See the DRM , Right To Repair , and Ads in content you\u0026rsquo;ve already paid for sections from Chapter 9: Consumerism https://goel.io/drm-ownership\nGeneral Purpose Computation # https://www.youtube.com/watch?v=HUEvRyemKSg\nFirst Sale Doctrine # Trademark # https://www.ipwatchdog.com/2021/04/13/satan-shoes-trademark-blasphemy-free-speech/id=132184/\nReverse Engineering # "},{"id":237,"href":"/phil/freedoms/press/","title":"Press","section":"PHIL","content":" Freedom of Press # Everyone is press, https://www.eff.org/bloggers\nThe Trump Administration Is Trying To Force BuzzFeed News To Divulge Its Sources With A Subpoena\nanti-SLAPP laws\nWhistle Blower Protections # https://en.wikipedia.org/wiki/List_of_whistleblowers\n"},{"id":238,"href":"/phil/freedoms/recording/","title":"Recording","section":"PHIL","content":" Right to record, Right to know # if it is public, there\u0026rsquo;s reason to expect you may be if it is private, person to person, (not b2b or p2b) there\u0026rsquo;s an exception for if it only for personal or judicial (to be used in trial) use. I.E, can\u0026rsquo;t post it online if it\u0026rsquo;s unreasonable to expect being recorded "},{"id":239,"href":"/phil/freedoms/search/","title":"Search","section":"PHIL","content":" Search and Seizure # "},{"id":240,"href":"/phil/freedoms/speech/","title":"Speech","section":"PHIL","content":" Freedom of Speech # xkcd №1357 The freedom of speech is weird, because it\u0026rsquo;s one that most of us recognize is that it should have limits because speech is powerful. The problem comes in what those limits are, which is why there are so many topics under debate:\nGovernment Secrets Whistleblowing Hate Speech Political/Religious Opinion Copyright Parody Public Health Advertising of Sugar/Drugs Public Safety Creating Panic Encryption Self Incrimination Flag Burning National Pride Gag Orders National Security Porn/Cursing Public Decency (and the FCC) Advertising Spam Satire Defamation There\u0026rsquo;s also a question of where things go too far- at what point is speech a legitimate threat, and where is the line for actions that constitute harassment vs just being an asshole? Should freedom of speech only apply to the government, or should we compel large social media platforms like Facebook and Twitter, to allow the spread of misinformation and hate or not?\nGovernment Secrets Vs Whistle blowing # Hate Speech Vs Opinion # Copyright Vs Parody # Public Healthy Vs Advertising # Public Safety Vs Creating Panic # Encryption Vs Self-Incrimination # Flag Burning Vs National Pride # Gag Orders Vs National Security # Porn/Cursing Vs Public Decency # Advertising Vs Spam # Satire Vs Defamation # Threat or Bad Joke? # Harassment, Bullying, and Stalking # Speech on Social Media Platforms # [TODO] Limits, XY plot of how much harm vs risk for shutting down \u0026lsquo;good\u0026rsquo; speech\nDon\u0026rsquo;t Yell Fire Don\u0026rsquo;t lie to cause harm \u0026ldquo;That man punched my baby\u0026rdquo; (Questionable) Don\u0026rsquo;t incite violence \u0026ldquo;Let\u0026rsquo;s burn down the police station\u0026rdquo; Some edge cases # https://www.theguardian.com/us-news/2021/dec/07/texas-ban-boycotting-israel\nhttps://ij.org/press-release/oregon-engineer-makes-history-with-new-traffic-light-timing-formula/\n"},{"id":241,"href":"/phil/freedoms/travel/","title":"Travel","section":"PHIL","content":" Freedom of Travel # Immigration, Citizenship testing\n"},{"id":242,"href":"/phil/history/","title":"History","section":"PHIL","content":" History # Something to consider before going forward is that, assuming you\u0026rsquo;re from the US, the education you\u0026rsquo;ve received is likely very skewed both in what content is presented in the first place and how it\u0026rsquo;s presented. Unlike what most US education will tell you MLK did not magically end racism, not every US war has been just, and - no - our three branches of government are not working as intended. This chapter serves as a sort of collection of resources to help you get a more holistic view that aims to better represent the truth of history, instead of letting it be written with a movie of profit, patriotism, and indoctrination.\nTo get started, I\u0026rsquo;m going to link to quite a few videos:\nWhy American History Whitewashes Radical Figures\nU.S. History: Last Week Tonight with John Oliver\nWhile also linked previously in the War and Foreign Involvement chapter, I seriously recommend The CIA is a Terrorist Organization\nThe missing half of American history (Beth Olanoff)\nA People\u0026rsquo;s History of the United States\nAre there any events that were left out of our US history books?(Quora)\nCIA Timeline\nTODO: https://cascade.page\n"},{"id":243,"href":"/unpublished/ainotes/","title":"Ainotes","section":"Unpublisheds","content":" AI Tools # This page does is not a guide on how to use or setup any of the tools listed. Instead it\u0026rsquo;s a sort of reference for what\u0026rsquo;s possible. Large Language Models # Obviously, ChatGPT is well ahead of everyone else. Unfortunately, it keeps getting lobotomized. At the time of writing, it\u0026rsquo;s very insistent on outputting overly long, bulleted lists. For this reason alone, I think it\u0026rsquo;s worth looking into options for self hosting.\nhttps://github.com/oobabooga/text-generation-webui https://github.com/SillyTavern/SillyTavern https://github.com/LostRuins/koboldcpp Generative Art # There are multiple big players, but the only one I think worth mentioning is Stable Diffusion due to how much more is possible with it due to it being open source.\nThe \u0026ldquo;Go To\u0026rdquo; front end for Stable Diffusion right now is AUTOMATIC1111\u0026rsquo;s Stable Difusion WebUI due to the crazy number of plugins that are available for it. Alternatively, ComfyUI makes some incredible automated workflows possible via a node based UI. Interestingly, there is a plugin for adding ComfyUI to AUTO1111, which works relatively well.\nNot all models have inpainting variants. You can do inpainting with any model, but inpainting specific models tend to perform better.\nThere are many stable diffusion models out there for specific styles, characters, etc. See https://civitai.com. These vary between being based on SD 1.5, SD 2.0, and SDXL. Each of these has it\u0026rsquo;s own quirks. Most notably, 1.5 models takes less prompting to get good results, but 2.0 can get better results if you know what you\u0026rsquo;re doing. The general consensus is 1.0 still performs better for non-photo-realistic images. 2.0 models usually support generating at higher resolutions (768x)\n2.0 Does allow for depth map based image editing though, which can be neat for retaining objects in a scene.\nSDXL broadly out performs both, but is much harder to run - but for good reason. The base resolution is increased from 512x to 1024x.\n[TODO] https://stable-diffusion-art.com/lcm-lora/\n[TODO] Control Net\n[TODO] Afterdetailer\nUpscaling # Upscaling can bring an image from good to great.\nThe best way right now is to manual send the picture to Img2Img first and doubling the resolution and play with the denoising strength then send it through UltraSharp\nFor a 1-pass upscale (not doing an Img2Img pass) using just LDSR, ESRGAN, or SwinIR may give you better results, depending on the style you want.\n"},{"id":244,"href":"/unpublished/board2023/","title":"Board2023","section":"Unpublisheds","content":"Last year, 2023, I started the year with a lot of goals. Some of them I accomplished, others not so much. One, from the start, was to motivate my creative mind a bit more. To that end, I made a board with some of my favorite ideas and creative guidance I could. A mix of motivation, advice, ideas, and inspiration. This is that board, with some modifications, digitized.\nWhile the contents of this board come from a variety of sources, the biggest two influences were the Catastrotivity series on YouTube and Wonderbook: The Illustrated Guide to Creating Imaginative Fiction. The first of which I thought had such a good opening message that I want to open with the hook of it ripped off (with some modification).\nCatastrotivity, # 1. Thou Shaln\u0026rsquo;t Compromise # Make it Weird\n2. Thou Shall Go All In # Learn \u0026amp; Love The Craft\n3. Fuck What Others Think🖕🖕🖕🖕🖕 # THE FUCK DO I CREATE? Democratic Rich Industrialized Educated Western\nNot All Stories Should Be\rStories require conflict. False hope. Set backs. Consequences. Secrets. Lies. Cultural Differences. TENSION. Battles. Rage. Something to fight for. Rash decisions. Competing Interests.\rTRUST YOUR BODY. # Great art comes from vulnerability \u0026amp; truth\nAction or REAction?\nUpclose, Afar, or Aftermath?\nChange PERspective - New character view? New Information?\nYou don't have to write the beginning first\rBreath the flowers and dirt of where your tombstone will lie,\nbefore that, give them reasons to cry.\nDon\u0026rsquo;t stop until the result matches your vision and your own work becomes your greatest inspiration.\nDon\u0026rsquo;t be r/menwritingwomen\nSmell, Sight, Taste, Propeocetion, Time, Heart rate\nMemory \u0026amp; Experiance of the event varies from person to person.\nConsider WHY you want to make, not WHAT you want to make\nThe second hardest thing is getting started. The hardest is not giving up - TOM VII Don\u0026rsquo;t explain what characters should see as normal: Getting eaten by a space squid to teleport, snail phones.\nLook where railroads used to be.\n[picture of skyscrapers looking at pyramids]\nHear the call, create the response.\nStudy anatomy to draw monsters [Waiting on MAW pic]\nStudy fear to write hope\nStudy love ❤️ to write tragedy 🖤\nEverbody love\u0026rsquo;s a trickster character.\nTransformation?\nDiscovery?\nExploration?\nEvent?\n[Plot pacing lines]\nStories require conflict. False hope. Set backs. Consequences. Secrets. Lies. Cultural Differences. TENSION. Battles. Rage. Something to fight for. Rash decisions\nConflict is competing interests.\nAnd so in our pain we sang for the the deaf, to the children we\u0026rsquo;d never have\nFUCK TRADITION\nIt\u0026rsquo;s only good if you keep going. Add every detail. Make it obnoxious. Make it loud.\n[QUEEN] OH OH OH OH OH OH OH\nAnimalistic. Heat. Hunger. Hurt.\n[Bleeding Tree] Think about the trees, and how they bleed\nAnd you dare ask me who I am?\nI am no [Engineer/Poet] but [An Engineer / A poet]\nDo not dismiss objects:\nLongboard Jacket w/ Pins Eragon\u0026rsquo;s Sword Dean\u0026rsquo;s Impalla Who made it? Where? Why? Who wants it? Can it be replaced?\nStories don\u0026rsquo;t need to tell people how to feel.\nA mother fuck and her fucklings\nWarm Ups # Name all the uses for a ___\nmutate an an animal?\nWhat is it\u0026rsquo;s life cycle? World Building\nTransparent: climate, trade routes,\nFor history, stick to only talking about events that affect the present\nThe initial conflict should open up to bigger one, the inital one only being a small piece.\nTrade and relation charts - What does each give/get/suffer from another (if anything at all)\nExplore Google Maps\nnon human senses, extended range?\nTransportation \u0026amp; Communication\nThe Hero\u0026rsquo;s Journey: Separate, Initiate, Return\nSilence can be more powerful than abundance, and even add more to it.\nINTERRUPTION\nPuzzle, Myster, Rouglite, Action, Adventure, Rhythm, Platformer, Simulation, Sandbox, Racing \u0026hellip; or a combonation?\nHave you ever written a poem? Yea?\rYou're a poet. A story?\rOf course.\rAn author. Drawn anything?\rAn artist.\rI'm none of those things though...\rMaybe you're not the best in the world, but you are all of them. Being an artistic, a writer, a musician, it's not a title you have to earn, it's who you are if you care about these things.\rOn Identity\rFurries get made fun of sometimes, but man, do you have any idea how much fucking courage it took the first time I wore my tail out in public? It took what may have been the deepest breath of my entire life to take that first step into the unknown.I'm don't think I am a wolf. But sometimes I imagine I have the ability to lead and follow like one, when my team needs me.I don't think I am a bat with super human senses.But sometimes I remind myself that if I focus in a moment, I can perceive a lot more than I initially thought.I don't think I am a cow (which, lets be real, they're adorable little grass puppies).But sometimes I know I need to stop letting my mind race and just enjoy the simple love around me.\rSometimes I need to remind myself I am human, that our bodies are fucking awesome. Our species is capable of infinite intelligence and creativity.I am a poet, author, artist, programmer, 3D modeler, teacher, creator, musician, and so much more - and so is everyone else around me, which is absolutely incredible.Hey, reader, you're Courageous, Beautiful, Growing, Powerful, Needed, \u0026 Perfect as you are - yet on your way to being so much more.\rCHARACTER DESIGN IS HARD.\nDere? Deredere, Tsundere? Yandere? Dandere?\u0026hellip;\nTalented, but do they want to do it? What is their relationship to society?\nNot all things are best done on a computer. Text editing, ^ Revision, for example.\nIdeas are in everything. Biology. Religion, Rock n Roll, Ganderning, Sailing, Fursuiting,\nChart out characters and their relationships\nWhat about absent / dead / missing people?\nWhat relationships are 1-sidded?\nMake people believe you PERSONALLY have lived through what you\u0026rsquo;re writing.\nKeep asking questions, Keep adding details.\nLie witness to the uncountable fucks that I may never give.\nhttps://html-css-js.com/css/generator/transform/\nArt Needed:\nGlasses Mother Fuck \u0026amp; Fucklings Fursuiting Pic Anime DERE pics Google maps train (Embedd?) Longboard Jacket w/ Pins Eragon\u0026rsquo;s Sword Dean\u0026rsquo;s Impalla Queen OH\u0026rsquo;s Plot Pacing Lines "},{"id":245,"href":"/unpublished/kids/","title":"Kids","section":"Unpublisheds","content":" Ask HN: How can I make a “kid\u0026rsquo;s computer” today as good as an Apple II? The Bad Way To Teach Music to Babies "},{"id":246,"href":"/unpublished/listofideasw/","title":"List of Ideasw","section":"Unpublisheds","content":" List of Ideas # Post about sympy in math chapter, espically with sum and product\nincreasingly online spaces that are custom-built are both spreading new ideas and preventing mono-cultures AND causing people to live in completely different realities and echo chambers\nFuck consumerism, fuck hoarding, fuck status symbols, fuck plastic wrapped single use internationally shiped good, fuck single use electronics, fuck shitty electronics that are instant-ewaste\nDangerous sounds - high voltage arc clicks, hard drive clicks, loud 60hz hum, etc.\nSetting up a bleeding-edge system, Beedrock linux, Arcan display manager, Pipewire, etc.\nToki-pona post\nList of cool, obsucre VCV and Eurorack modules\nMaking an esoteric linux install. Arcan, Cat9+Lash, weird FS, etc. We want WEIRD.\nBedrock Arcan FS?? Kernel?? TODO # Get probabability theory Notes put in\nGet Comm Systems Notes put in\nGet DSP Notes put in\nMore python programming\nFStrings vs .format https://realpython.com/python-f-strings/ Work on VST list\nWebdev chapter somewhere, a bit meta, but go into JS, (S)CSS, can use codepen embeds\nImplant to HCI2\nhttps://www.bemiscenter.org/exhibitions/charley-friedman-soundtracks to HCI2\nArch Optimization\nhttps://wiki.archlinux.org/title/Preload https://observablehq.com/@rreusser/the-double-pendulum-fractal?collection=@rreusser/writeups\nSomething about hand wired keyboard\nSomething about Lyrae Modules\n"},{"id":247,"href":"/unpublished/mathtest/","title":"Mathtest","section":"Unpublisheds","content":" WEBGL \u0026amp; MATH TESTING # This is a testing ground for different options for rendering math, signals, etc. though the website. Given the music, DSP, and signals page I really care about sine waves and FFTs. It seems the best looking, lowest CPU sine I can get is using WEBGL (as immediately below) but writing the code for it is quite cumbersome. For math itself, https://github.com/airladon/figureone/ seems to be the best bet, and should dramatically help with the math chapters.\nFFTs are going to be the biggest problem. https://github.com/indutny/fft.js/ may work. As I may want to add sound, https://mohayonao.github.io/timbre.js/ would also be an option as it\u0026rsquo;ll do the synthesis too. Either way, I\u0026rsquo;ll have to find a way to render the output, which could be a PITA. I could also go the webasm route, as done here: https://thebreakfastpost.com/2015/10/18/ffts-in-javascript/. The performance is steller, but I don\u0026rsquo;t know I need it anyway as https://code.soundsoftware.ac.uk/projects/js-dsp-test/repository/entry/fft/nayuki-obj/fft.js was nearly as fast. They all seem pretty light weight. I think I can get the data into https://airladon.github.io/FigureOne/api/#collectionsplot.\nIt does look like timbre.js has a built in scope \u0026amp; spectrum plot: https://mohayonao.github.io/timbre.js/spectrum.html, https://mohayonao.github.io/timbre.js/scope.html but they seem to be breaking on page reloads. from An AudioContext was prevented from starting automatically. It must be created or resumed after a user gesture on the page. but this looks like I could work around it: https://stackoverflow.com/questions/55026293/google-chrome-javascript-issue-in-getting-user-audio-the-audiocontext-was-not / https://developer.chrome.com/blog/autoplay/#webaudio https://github.com/mohayonao/timbre.js/pull/69 but that may require changes to the library itself. Not impossible, but annoying - plus this would be a maintenance burden as timbre.js appears is no longer maintained. https://github.com/jusu/timbre.js seems to have the fixes already done, but the account has next to no activity. Presumably, the fact that it\u0026rsquo;s still working with these minimal fixes should mean it\u0026rsquo;s safe and stable though. I\u0026rsquo;ll need to go though the issues and see how many are actually a problem. https://github.com/mohayonao/timbre.js/issues/66 looks like the most critical if true, but I don\u0026rsquo;t think is given the scope page loads a .wav and works.\nThe start of testing has been done in unpublished/timbre, but the results don\u0026rsquo;t look promising. The scope and spectrum don\u0026rsquo;t seem to be resizable and the FFT appears to have a low bin count (256?). I may still use it for playing audio though.\nhttps://github.com/bbc/peaks.js looks useful too.\nI need to look into the performance of drawing the sine waves with JS if I compute the resulting waveform and then draw them. I think this flow will be necessary for computing the FFT anyway, and it would also let me only calculate the FFT on waveform update, not repeatedly.\nThis would work particularly well if I could decode and read .wav files as input into an array, have the JS per figure, etc. all in the folder for each page, though that does get difficult to balance data vs computation for load times across devices and connections.\n"},{"id":248,"href":"/unpublished/myworld/","title":"Myworld","section":"Unpublisheds","content":" Making a VRChat World # Step 1: What Do I Want? What Do I 𝕟𝕠𝕥 want. # concept art, etc.\nWant:\nALIVE. Things should feel alive - wind, movement, player-reactivity LIVED IN. Each area should feel like there have been people there. Papers around, things under study, etc. SOUND. Ambient environment should have original sounds from my modular, kalimba, talkbox, guitars, etc. SYTLIZED. The world should be big so poly counts need to be low and/or have LOD. SCALE. The world should be big enough to feel epic BEST OF NATURE. Crystals, Caves, hexagon beaches, vines, moss, rainbow mountains, waterfalls, shelf-mushrooms, slime mold, multiple moons, ring around planet, bio-luminescence Some periodic/random events EXPOSED. Wiring, edison lights, steam-punk-ish Don\u0026rsquo;t:\nHARD MOVEMENT. No spiral stairs/things that are annoying to navigate in VR If for style they must be there, buttons to act as teleporters Ideally, no stairs at all. Portal-sytle faith plates are way more fun. OVERDONE SHADERS. I want to do shader dev for this, I don\u0026rsquo;t want to make it look overdone. LOUD. Things should be quiet enough that it\u0026rsquo;s fine to talk and hang out Step 2: What Do I Need? # "},{"id":249,"href":"/unpublished/p5test/","title":"P5test","section":"Unpublisheds","content":" P5 test # "},{"id":250,"href":"/unpublished/reacttest/","title":"Reacttest","section":"Unpublisheds","content":" React test # https://josem.co/how-to-render-a-react-component-in-hugo/ - I\u0026rsquo;d like to get https://mafs.dev/guides/get-started/installation working, but I\u0026rsquo;m not sure it\u0026rsquo;s possible to do so in a convenient way with Hugo. I\u0026rsquo;m really not a fan of adding react as a depedency and using that much JS anyway, but if this works it\u0026rsquo;d be worth it.\n"},{"id":251,"href":"/unpublished/vr/","title":"Vr","section":"Unpublisheds","content":" VR # FBT # https://www.crowdsupply.com/slimevr/slimevr-full-body-tracker\nVive trackers\nApril Tag\nKinect\nHand tracking \u0026amp; Haptics # Walking around # I created a Udon world to visualize infinite walking. The white lines are the limits of my play space.\nThe orange trail shows my movement in play space, and the blue trail shows my movement in world space.\n(When I\u0026#39;m wireless I walk in circles, otherwise I walk in a ∞ shape) pic.twitter.com/x9AQpTiFIJ\n\u0026mdash; Haï~ (@vr_hai) January 17, 2022 Face tracking # VSeeFace\nVR Chat Avatar to VSeeFace\nPossabilites # Made a set of headphones with Spotify integration via OSC, displays the currently playing song for everyone to see! #VRChat pic.twitter.com/toQwNJzChP\n\u0026mdash; FrostyFridge (@FrostierFridge) August 22, 2022 Heavy breathing VRChat users UNITE! https://t.co/Vu62GnCn5A\n\u0026mdash; VRPill (@vrpill) August 25, 2022 https://github.com/d4rkc0d3r/d4rkAvatarOptimizer\n"},{"id":252,"href":"/webdev/","title":"Webdev","section":"Home","content":" How to make OpGuides Better # From 3b1b:\nRestructure things to go from Concrete to Abstract, not the other way around; Show patterns \u0026amp; examples, before going to the symbolic and abstract Go really esoteric and specific - it builds a loyal audience Do not start with definitions - let people think they could have come to those definitions themselves Start with motivating problems source\nDon\u0026rsquo;t force the user to remember things if you can help it. Humans are really bad at remembering things. This includes passwords, sms codes, sums, function names, and so on. show, don’t tell. lengthy tutorials and “protips” forced on the user at app start usually do nothing other than get in the way of the user’s task. if you want to teach the user about a feature, include easy to find examples. From others but I forgot where:\nStart with misconceptions Put icons on all lists My own thoughts:\nEverything should be made concrete as soon as possible, with demos\nIdeally, these demos should rely on free software or inexpensive or salvage hardware Everything should refer back to reality- mention if something might work out mathematically but not be practical for reasons like noise, floating point precision, cost, power.\nTo some extent, it will always be necessary to cover trivial examples first. Call these out. Ex: If we\u0026rsquo;re only making resistor networks, point out that these do literally nothing but make heat\nTools for making OpGuides # https://excalidraw.com - for \u0026lsquo;hand drawn\u0026rsquo; svg diagrams\ndetexify - for Latex symbol lookup\nhttp://shapecatcher.com - for unicode symbol lookup\nhttps://rawgraphs.io - for making pretty graphics with data (csv, json, etc.)\nhttps://ivanceras.github.io/svgbob-editor/ - ASCII text to SVG\nHacks # note, youtube \u0026ldquo;copy embed code\u0026rdquo; depends on current size on screen of the embed, this can be fixed a bit by changing the start to \u0026lt;iframe width=\u0026ldquo;100%\u0026rdquo; height=\u0026ldquo;500\u0026rdquo;\nStyle Checking (h1) # h2 The Quick Brown Fox # test\nh3 The Quick Brown Fox # test\nh4 The Quick Brown Fox # test\nh5 The Quick Brown Fox # test\nh6 # test\nlistitem listitem listitem Markdown can be wrapped in html to apply theming or do other things:\nClick to expand Abc Abc cinwell website\nBunch of Codepen Links https://vincentgarreau.com/particles.js/\nhttps://codepen.io/alexzaworski/pen/mEkvAG\nhttps://codepen.io/P1N2O/pen/pyBNzX\nhttps://codepen.io/saransh/pen/BKJun\nhttps://codepen.io/fabiowallner/pen/ozkoYo\nhttps://codepen.io/lbebber/pen/EVxvWN\nhttps://codepen.io/wagerfield/pen/wftcE\ndecrypting effect \u0026amp; https://github.com/bartobri/no-more-secrets#the-nms-library\nColumns2 shortcode is a very shittily done shortcode that is just a slight mod on cols, it centers the text and adds a line under each box. This works well for making pseudo-tables that don\u0026rsquo;t fuckup content width or have issues with rendering on mobile\nShortcodes # Speech # these images have to be added manually in themes/bookvega/assets/_shortcodes.scss; however, only the one varient need be added, the right style is generic and can be applied as the first argument, that is: {\\{\\\u0026lt; speech right boi \u0026gt;\\}\\} will work, with only the varient for the boi picture needing added. This is filler text.\nWouldn\u0026rsquo;t it be cool if I had conversation blocks? At least both left and right aligned blocks are working\nsee?\nYep.\nAnd I can set the image for each one\nhalo suit math blegh hack boba yesbutno paper yeet tired Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pharetra arcu tortor, et mattis erat tempor in. Sed ipsum eros, lacinia at efficitur vitae, tempus sed arcu. Morbi neque neque, ullamcorper vel luctus et, viverra nec felis. Aliquam erat volutpat. Proin mattis sapien sapien, vitae iaculis leo rhoncus tincidunt. Nunc tincidunt mauris quis placerat aliquam. Vivamus consequat consectetur justo eu sollicitudin. Vestibulum porttitor mattis feugiat. Fusce et lacinia lacus. Spoiler # This text is before a spoiler This is spoiler text This text is after a spoiler\nAttribution # Character is owned by me, art is by Siplick Best # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pharetra arcu tortor, et mattis erat tempor in. Sed ipsum eros, lacinia at efficitur vitae, tempus sed arcu. The website Hackaday is pretty neat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pharetra arcu tortor, et mattis erat tempor in. Sed ipsum eros, lacinia at efficitur vitae, tempus sed arcu. Big Quote # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pharetra arcu tortor, et mattis erat tempor in. Sed ipsum eros, lacinia at efficitur vitae, tempus sed arcu. \" Something really inspirational here. \" - source Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pharetra arcu tortor, et mattis erat tempor in. Sed ipsum eros, lacinia at efficitur vitae, tempus sed arcu. Quote # Something still worth putting a block around here - source Button # buttons can be inline Music - Getting Started and look pretty snazy.\nColumns # Basic # Praesent at convallis turpis. Donec vitae tincidunt turpis. Mauris sed auctor ipsum, at semper erat. Aliquam elementum enim id hendrerit vulputate. Vestibulum in enim mi. Praesent blandit vitae quam a sodales. Nunc lorem eros, efficitur quis sollicitudin non, eleifend accumsan diam. Phasellus varius nulla lorem. Nunc sem diam, posuere sit amet eros non, finibus iaculis lectus. Something still worth putting a block around here - source In posuere orci id malesuada pharetra. Cras odio augue, imperdiet accumsan nibh eget, facilisis tempus turpis. Integer sodales nisl nec mollis accumsan. Sed ut eros rutrum, vehicula enim at, accumsan sem\nCharacter is owned by me, art is by Siplick Varient 2 - use for tables when possible # Praesent at convallis turpis. Donec vitae tincidunt turpis. Mauris sed auctor ipsum, at semper erat. Aliquam elementum enim id hendrerit vulputate. Vestibulum in enim mi. Praesent blandit vitae quam a sodales. Nunc lorem eros, efficitur quis sollicitudin non, eleifend accumsan diam. Phasellus varius nulla lorem. Nunc sem diam, posuere sit amet eros non, finibus iaculis lectus. Something still worth putting a block around here - source In posuere orci id malesuada pharetra. Cras odio augue, imperdiet accumsan nibh eget, facilisis tempus turpis. Integer sodales nisl nec mollis accumsan. Sed ut eros rutrum, vehicula enim at, accumsan sem\nCharacter is owned by me, art is by Siplick Note, this ends with this bottom line\nVarient 3 # Praesent at convallis turpis. Donec vitae tincidunt turpis. Mauris sed auctor ipsum, at semper erat. Aliquam elementum enim id hendrerit vulputate. Vestibulum in enim mi. Praesent blandit vitae quam a sodales. Nunc lorem eros, efficitur quis sollicitudin non, eleifend accumsan diam. Phasellus varius nulla lorem. Nunc sem diam, posuere sit amet eros non, finibus iaculis lectus. Something still worth putting a block around here - source In posuere orci id malesuada pharetra. Cras odio augue, imperdiet accumsan nibh eget, facilisis tempus turpis. Integer sodales nisl nec mollis accumsan. Sed ut eros rutrum, vehicula enim at, accumsan sem\nCharacter is owned by me, art is by Siplick Note, this has vertical bars separating content\nDetails # Praesent at convallis turpis. Donec vitae tincidunt turpis. Mauris sed auctor ipsum, at semper erat. Aliquam elementum enim id hendrerit vulputate. Title In posuere orci id malesuada pharetra. Cras odio augue, imperdiet accumsan nibh eget, facilisis tempus turpis. Integer sodales nisl nec mollis accumsan. Sed ut eros rutrum, vehicula enim at, accumsan sem Embed PDF # Previous Next \u0026nbsp; \u0026nbsp; Page: / Expand # Technically, the Expand shortcode is deprecated and you\u0026rsquo;ll get a warning saying to use details. For now I don\u0026rsquo;t care as it looks significantly better. They can always be changed latter. also note that details tags look much better if, for some reason, you need to stack multiple\nPraesent at convallis turpis. Donec vitae tincidunt turpis. Mauris sed auctor ipsum, at semper erat. Aliquam elementum enim id hendrerit vulputate. Expand ↕ In posuere orci id malesuada pharetra. Cras odio augue, imperdiet accumsan nibh eget, facilisis tempus turpis. Integer sodales nisl nec mollis accumsan. Sed ut eros rutrum, vehicula enim at, accumsan sem Hints # [TODO] make a matching color varient for each section\ninfo hint normal text\nwarning hint normal text\ndefault hint normal text\ngray hint normal text\ndanger hint For comparison, a markdown quote block:\nquote block.\nTips # this looks similar to a hint, but is more stark on the page and has the \u0026ldquo;!\u0026rdquo; Katex # $ \\LaTeX $ this syntax can be enabled if I end up doing a lot of math again: https://gohugo.io/content-management/mathematics/\ncan be used to render \\(\\LaTeX\\) note, the \u0026lsquo;display\u0026rsquo; option changes the look.\n\\[ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi),e^{2 \\pi i \\xi x},d\\xi \\] also, aligned does work to keep the equal signs aligned though each equation\n\\[\\begin{aligned} 3x^2\u0026#43;3\u0026#43;(2-x)(4-x)\u0026#43;2\u0026amp;=12\u0026#43;(3\u0026#43;(x*2))\u0026#43;2​ \\\\ 3x^2\u0026#43;3\u0026#43;(2-x)(4-x)\u0026amp;=12\u0026#43;(3\u0026#43;(x*2))​ \\end{aligned} \\] Mermaid # [TODO] Not all the mermaid charts are styled nicely, but they should at least render\nsequenceDiagram Alice-\u003e\u003e+John: Hello John, how are you? Alice-\u003e\u003e+John: John, can you hear me? John--\u003e\u003e-Alice: Hi Alice, I can hear you! John--\u003e\u003e-Alice: I feel great! Section # Don\u0026rsquo;t use this.\nSmalltext # This is very similar to attribution, but leaves less white space and can be used inline.\nvery similar to attribution, but leaves less white space or not.\nTab \u0026amp; Tabs # Windows Windows # open up a command prompt by pressing ctr+r and typing \u0026lsquo;cmd\u0026rsquo; then enter, and we\u0026rsquo;ll need to navigate to the location of the downloaded file it should be named something along the lines of archlinux-20xx.xx.xx-x86_64.iso and be in your Downloads folder. When you open a command prompt on Windows it should start out in your user folder (C:\\Users%username%). To list the folders in this folder you can type \u0026lsquo;dir\u0026rsquo; and press enter. You should, at minimum, see folders like \u0026lsquo;Downloads\u0026rsquo; \u0026lsquo;Desktop\u0026rsquo; and \u0026lsquo;Documents\u0026rsquo; to enter the Downloads folder simply type \u0026lsquo;cd Dow\u0026rsquo; and press tab, the line should auto-complete to \u0026lsquo;cd Downloads\u0026rsquo;, then press enter. Now you can type \u0026lsquo;certutil -hashfile arch\u0026rsquo; , press tab to complete it to \u0026lsquo;certutil -hashfile archlinux-20xx.xx.xx-x86_64.iso\u0026rsquo; then add \u0026lsquo;sha1\u0026rsquo; on the end so the finally command looks like\n1 certutil -hashfile archlinux-20xx.xx.xx-x86_64.iso sha1 Note, if this spits out \u0026ldquo;The process cannot access the file because it is being used by another process.\u0026rdquo; you\u0026rsquo;ll need to close your torrent client or stop seeding the file first!\nSo let\u0026rsquo;s look at this command. The first part, certutil, is a program on your computer, \u0026lsquo;-hashfile\u0026rsquo; says the next string of text is the name of the file we want to examine, and the last part sha1 is the checksum as mentioned before. Finally, if you go back to https://www.archlinux.org/download/ and look under \u0026lsquo;Checksums\u0026rsquo; you can compare the output of the command you just ran against the SHA1 sum provided to be sure you didn\u0026rsquo;t have any errors in the file. This is mostly a security check as in theory someone could provide a \u0026lsquo;bad\u0026rsquo; version of the OS containing malware, but such a version would produce an incorrect checksum, in practice this is extraordinarily uncommon. Though this does also serve to ensure the download wasn\u0026rsquo;t corrupted in any way either.\nMac Mac # open up a terminal by going to the Utilities fore in Applications and open \u0026lsquo;Terminal\u0026rsquo;. The mac terminal is very, very similar to what you\u0026rsquo;ll use in Linux actually, and the commands here are actually identical. You should see something like\n1 MacBook:~ username$ waiting for input.\nThat ~ represents that you\u0026rsquo;re in your user or \u0026lsquo;home\u0026rsquo; folder, and assuming you downloaded Arch\u0026rsquo;s install image to your downloads folder you should be able to type\nMacBook:~ username$ shasum -a 1 Downloads/arch\nfollowed by pressing tab to make that auto complete to something like\nMacBook:~ username$ shasum -a 1 Downloads/archlinux-20xx.xx.xx-x86_64.iso\nupon pressing enter the terminal should print out a long string of text.\nSo let\u0026rsquo;s look at this command. The first part, shasum, is a program on your computer, \u0026lsquo;-a 1\u0026rsquo; says to use the sha1 algorithm instead of something like sha256, and the last part is the filename we want to compute the checksum of. Now, if you go back to https://www.archlinux.org/download/ and look under \u0026lsquo;Checksums\u0026rsquo; you can compare the output of the command you just ran against the SHA1 sum provided to be sure you didn\u0026rsquo;t have any errors in the file. This is mostly a security check as in theory someone could provide a \u0026lsquo;bad\u0026rsquo; version of the OS containing malware, but such a version would produce an incorrect checksum, in practice this is extraordinarily uncommon. Though this does also serve to ensure the download wasn\u0026rsquo;t corrupted in any way either.\nHack-y stuff: # Footnotes # use (1) (\u0026lt;a class=\u0026quot;ptr\u0026quot;\u0026gt;(1)\u0026lt;/a\u0026gt;) to ref the first footnote, (2) for the second, etc. where the footnote text is in a hidden html element\nFOOT NOTE 1 FOOT NOTE 2 \u0026lt;ol hidden id=\u0026#34;footnotes\u0026#34;\u0026gt; \u0026lt;li\u0026gt;FOOT NOTE 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;FOOT NOTE 2\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; Colored Tables # NOTE the in document \u0026lt;style\u0026gt; block above the table.\nTraditional: Infrastructure as a Service Platform as a Service Software as a Service Applications Applications Applications Applications Data Data Data Data Runtime Runtime Runtime Runtime Middleware Middleware Middleware Middleware OS OS OS OS Virtualization Virtualization Virtualization Virtualization Servers Servers Servers Servers Storage Storage Storage Storage Networking Networking Networking Networking Note, https://www.tablesgenerator.com/html_tables may be of use\nTable Sorting # Tables need to be raw html, not markdown and then use \u0026lt;table id=\u0026quot;sort\u0026quot; style=\u0026quot;position:relative; width:130%; left: 0%;\u0026quot;\u0026gt; (width flag not required). Again, https://www.tablesgenerator.com/html_tables may be of use.\nSee Music/software/plugin.md\nImage slider # use \u0026lt;script src=\u0026quot;/js/slider.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; from VincentTV. See posts/lowres.md\nCompression # Please use the .webp format for new images, or at the very least run them though optipng or jpegoptim. At some point I intend to go though and convert every image on opGuides.\nEasy mistakes # Youtube Embeds need to have the list?= part removed or they\u0026rsquo;re almost always broken. expand for full code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 this is a very long code block a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 43 Fairfax HD # The website already has https://www.kreativekorp.com/software/fonts/fairfaxhd/#coverage for the tokipona page, so might as well use it. This gives us some fairly handy symbols too.\nmocktation \n question comma\n󿃇 powerline 󿃆\n win,  pi,  apple\n🯰 🯱 🯲 🯳 🯴 🯵 🯶 🯷 🯸 🯹\n🮖🮖🮖🮖🮖🮖\nif you want to use a conlang, put it in a \u0026lt;div class=\u0026quot;conlang\u0026quot;\u0026gt; or it will still probably render incorrectly.\nOther useful tools: # https://charlesstover.github.io/rainbow-text/ test This is a test\nWARNING: Test test test\n"},{"id":253,"href":"/phil/arguments/","title":"Arguments","section":"PHIL","content":" Philosophical Arguments # [TODO]how to construct a phil argument\nNot simply accepting \u0026ldquo;Because that\u0026rsquo;s how it is\u0026rdquo; # I\u0026rsquo;m writing this at @292.78 on Day 132 of 12,020. I\u0026rsquo;m typing on a Dvorak, split, ortholinear keyboard in a markdown document using Arch Linux instead of M$ Word on Windows. I find music off the 12 tone scale interesting, and while I know 432 vs 440hz, isn\u0026rsquo;t going to open my 3rd eye, listening to microtonal or music made with just intonation is still something interesting to me.\nAlright, so maybe I was being a bit cheeky. I don\u0026rsquo;t actually use that weird time format (though I do use the year part semi-regularly). The rest though, yeah. And honestly, it\u0026rsquo;s a lot of putting my money where my mouth is, so to speak. You see, I think we live in a world that is unfortunately resistive to change. While we as a species are creating technology that allows us to exchange ideas at a rate that was unfathomable even when I was born in \u0026lsquo;98, we\u0026rsquo;re still resistant to actually accepting that many of the things we do are rooted in ideas that just don\u0026rsquo;t really make sense anymore. We\u0026rsquo;re artificially limiting ourselves and our culture because we\u0026rsquo;re scared. Because at the root of things our monkey brains are shouting at us, \u0026ldquo;What we\u0026rsquo;re doing works! Don\u0026rsquo;t touch it! You might break it! Then what would we do!\u0026rdquo;. Because of this, we\u0026rsquo;ve done a lot more harm than just causing more RSI from bad keyboard layouts or using crappy calendars. We reinforce values in each generation that are done because that\u0026rsquo;s how it is, from the prevalence of circumcision to the tenancy for women to get custody. I\u0026rsquo;m not even making an argument for or against either of those things (1). Rather, I\u0026rsquo;m trying to make clear that as a society we tend to have values and practices that are passed from generation to generation with no thought as to why we do things the way we do or how we may improve them.\nThis is probably the primary motivating factor behind many of my political beliefs. In this section of OpGuides, various philosophical frameworks will be at play, often conflicting with one another as, unfortunately, I think the world is too complicated for one core idea to govern right from wrong. These will likely include ideas that support equality, drawing upon ideas such as Rawl\u0026rsquo;s \u0026lsquo;Veil of Ignorance\u0026rsquo;(2). In general, I think this stance is quite literally the opposite of Conservatism in both the definitional and practical sense that we see it today. If you view yourself as a conservative I ask that you do please stay and read though. While I will likely primarily disagree with your ideas, I still think we could both stand to learn from each other and that we both stand to benefit by having our respective views challenged where we do disagree.\nThough I think you can pretty much guess that I think given the Kellogg's Fueled, anti sexual liberty history of Circumcision in the US I think it's bull shit. Further, I think prioritizing women for custody does make some sense as there is some biological context, but I've also seen, as the son of a family law attorney, how frequently this is the default even when the mother is most certainly not the most capable or loving parent. Rawl's idea here is sorta kinda close to The Egg, a video from Kurzgesagt. "},{"id":254,"href":"/phil/basic-phil/","title":"Basic Phil","section":"PHIL","content":" OPINION Before anything else, I think it\u0026rsquo;s necessary to point out this is opinionated guides. Philosophy involves looking at the world around us and asking ourselves \u0026lsquo;why\u0026rsquo;, then making arguments for how things should be different and what moral frameworks work best to come to conclusions that optimize for something like happiness or \u0026lsquo;goodness\u0026rsquo; in the world. Given that both morals and \u0026lsquo;goodness\u0026rsquo; are not absolutes, the best way for me to write this guide and actually be of service to you as a reader is to provide my opinion and talk about why I believe what believe both from a researched \u0026lsquo;here are the facts\u0026rsquo; sense and from a \u0026lsquo;here is the moral framework that, with these facts, brought me to this conclusion\u0026rsquo; sense. You don\u0026rsquo;t have to agree with my opinions, I\u0026rsquo;d rather you didn\u0026rsquo;t actually, as agreement means talking to you doesn\u0026rsquo;t expose me to new ideas.(1) Instead it\u0026rsquo;s my hope that reading my opinion, seeing how I present arguments, and seeing the research that goes into them will show you how to think about how to apply facts to moral frameworks. I also want to toss up a content warning, for, like, everything. We\u0026rsquo;re gonna get messy. This means assisted suicide, abortion, religion, gun rights, war, labor rights, etc. Just look at the chapters on the left and it reads as a shopping list of topics not to bring up at a family gathering. Finally, I will out right dismiss any argument or idea founded in religion. This is not because I can\u0026rsquo;t refute it. This is because I find it to be a complete and total waste of time. If you have a bit more than 3 hours to kill watch Philosophical Failures of Christian Apologetics, and I think you\u0026rsquo;ll understand why I won\u0026rsquo;t bother. Basic Philosophy # First, let\u0026rsquo;s start really simple- what is philosophy. Well, for one, Basically all pages on Wikipedia link back to it, so it\u0026rsquo;s obviously pretty fundamental. But, why would that be?\nHere\u0026rsquo;s the head of the Wikipedia entry on Philosophy:\nPhilosophy (from Greek: φιλοσοφία, philosophia, \u0026rsquo;love of wisdom\u0026rsquo;) is the study of general and fundamental questions about existence, knowledge, values, reason, mind, and language\nAlright, so it\u0026rsquo;s the study of knowledge? Wouldn\u0026rsquo;t that make it pretty much the study of everything? Well, yeah. Pretty much. Before each branch of the sciences had enough of a foundation in it\u0026rsquo;s own right to, well, branch off it was just called \u0026lsquo;Natural Philosophy\u0026rsquo;. You can see this in textbooks written as late as the 19th century.\nIn academic circles, that pretty much means Philosophy departments at universities today focus on what\u0026rsquo;s left when they are not teaching the history of Philosophy: the questions for which there are no concrete or provable answers. This can often be incredibly frustrating.\nAt its best, Philosophy as a modern study really gives us is a framework to approach and talk about tough problems. To make it useful, most of this section will therefore be spent on Moral Philosophy, aka ethics.\nThis is because Natural Philosophy, as noted, is the sciences. They became their own separate departments mostly because it was easier, knowledge swelled to fit entire careers, and more importantly, they took as given certain answers to those unanswerable questions.\nFor example:\nMaterialist physics: if we can\u0026rsquo;t specifically measure a phenomenon, it doesn\u0026rsquo;t exist. Relativist aesthetics: it doesn\u0026rsquo;t matter how something looks as long as it works. There is no \u0026ldquo;objectively ugly\u0026rdquo;. Pragmatic positivist metaphysics: science can discover all knowledge, and no authority can say \u0026ldquo;do not investigate this\u0026rdquo; These answers would have upset philosophers and theologians for centuries prior to the enlightenment. In fact, they were still debated seriously within western academies of Europe until the late 19th century, and remnants of alternatives existed up to the 1950s.\nHonestly, I find people who try to talk philosophy either are just trying to look smart, or are trying to convince you of something. The latter is really suspicious if they are into debating the existence of (a) God(s). (2)(3)\nIf you want to know why, let\u0026rsquo;s start with a different branch of philosophy: Epistemology.\nTo be transparent and tell you my biases up front, I'm WEIRD, that is I'm from a Western, Eduated, Industrialized, Rich, \u0026 Democratic Country- The US. I'm also white, bisexual, liberal with a tinge of libertarian, and Gen Z. Yes, I know I'm throwing shade here. This isn't to say Metaphysical and Natural Philosophy are useless. I really enjoy watching videos on YouTube of people pointing out the many, many logical issues that aries when you try to make a Omnipotent (all-powerfull), Onmiscincent (all-knowing), Onmi-present (in all places), Omnibenevolent (all good) being. My favorite argument being the 'If God is all knowing does he know what it's like to feel lust, if he does how is he all good?' or 'If god is all powerful can he microwave a burrito so hot that he can not eat it?' ... you get the idea. This is turning into a massive tangent. Here, have a link (The Problem of Omnipotence - YouTube) Okay, I also have to concede, there's a lot of really thought provoking stuff in the relm of metaphysics. I espically love Exurb1a's YouTube Channel as well as a lot of video games, short stories, and other works that dabble in this. For example, I recently read 17776 Football, and I keep thinking about it. That's what makes metaphysics cool. It keeps you thinking and can inspire you in interesting ways - espically for being creative with writing, art, or music. I just don't see direct value in going in to it in this guide. Please do actually check out some of the amazing content on the subject though! Epistemology, or Why No One Wins Arguments On The Internet # The classical division by the ancient Greeks created a branch of philosophy known as epistemology. This branch is focused on the question of what constitutes knowledge and how we gain it. In other words, how do we know what we know?\nThere have been many answers to this question in western thought, but the dominant answer is a rubric created by Plato: the justified true belief. It is a simple three part test: is it an explainable and actionable belief, is that belief justified by evidence, and is it true (in a logical or absolute sense)? If so, that\u0026rsquo;s knowledge. A true belief without justification is vacuous logic, not knowledge. A justified belief that is untrue is pure sophistry or an error, not knowledge. An observation about the world without any belief about it is a fact, not knowledge.\nThis rubric has held sway for over two millennia, and remains at the foundation of a lot of western culture. It is the way lots of people think they know things, and is hiding underneath popular philosophies and ideologies. It is also used in theology and religious studies extensively.\nModern science, on the other hand, completely overturns this. It uses the rubric of Scientific Rationalism, which has its own epistemology most eloquently written about by 20th century philosopher Karl Popper.\nThis is a relatively recent development, and was a cornerstone of the Enlightenment which began a couple hundred years ago. It was the time when alchemy transformed into chemistry. This change wasn\u0026rsquo;t because the alchemists in centuries past were stupid or had significantly worse tools. For example, the ancient Greeks demonstrated citrus fruit could cure scurvy using a series of blinded medical experiments that would be worthy to publish in medical journals today.\nRather, such examples of modern science were relatively rare because their epistemology led Scholars to believe there was more than one route to knowledge. While Sir Isaac Newton is remembered today for calculus, his work on color and light refraction, and setting the value of the British Pound Sterling for several hundred years (if you\u0026rsquo;re a history nerd), that is not what he spent most of his time on.\nHe spent most of his time on occult \u0026ldquo;research\u0026rdquo; that we today do not consider science at all. He tried to make the philosopher\u0026rsquo;s stone using a symbolic reading of ancient Greek myths as instructions. He created a chronology of the Bible, and calculated the events of Revelation would occur in the year 2060. (Fingers crossed, I\u0026rsquo;ll live to see if he was right!)\nThese methods of searching for \u0026ldquo;lost knowledge\u0026rdquo; in old parchment had gained the Europeans great knowledge after the Dark Ages. They rediscovered lost mathematics, history, and medical knowledge. However, applying these methods to the sciences in general was extremely unreliable.\nSir Isaac Newton was trying to be a good scholar, and lived just a bit too early to realize that most of his work was useless. It was just the beginning of the Enlightenment, and it would be another several decades until the shift in epistemology got going.\nThat shift was not only a toward rationalism and materialism (away from Newton\u0026rsquo;s interests), but also shifting the basis of knowledge to the reliability of the methods of investigation. Very unreliable methods that created lots of false results \u0026ndash; like eyewitness accounts, studying folk traditions, reading Greek poems for secret meanings, and testing medicines without a placebo \u0026ndash; should be thrown out. More reliable methods \u0026ndash; like specific, quantitative experiments that can be repeated, especially in different places or under different conditions \u0026ndash; should be refined.\nOnce that happened, scholars began not only growing their body of knowledge much more quickly, but deleting incorrect things and declaring them psudeoscience. This process continued from the 18th century all the way to the early 20th.\nA recent example is the Ether Theory of light. It is taught today as a historical footnote in science classes (if at all), but it was a very serious, if speculative, scientific theory that survived in scientific papers until the 1920s. The \u0026ldquo;ether\u0026rdquo; was a fluid in space through which light travelled, and its \u0026ldquo;ripples\u0026rdquo; (created by traditional convention as the Earth moved through space) were detected in a famous experiment by Albert Michelson (the first to accurately measure the speed of light) and Edward Morley (who made research advances in the study of Oxygen) using a very clever technique.\nThis remained the dominant theory of electromagnetism (of which one form is light) until a newcomer named Albert Einstein brought the physics community his unified theory of light, time, and space known as General Relativity. It received a lot of skepticism at first, being difficult to test and written in advanced niche math indecipherable to most Professors of Orbital Mechanics. It even seemed at first glance to contradict Newton\u0026rsquo;s laws of motion.\nBut at the same time, some scholars believed it could solve previously unsolved problems. Two famous ones were the perihelion of mercury (which had a continuous tracking error on the calculations in Newtonian mechanics) and a twin binary star system whose identical twins emitted different wavelengths of light.\nAnd it turned out that it does match Newton\u0026rsquo;s laws of motion under human lab conditions. Newton was a good first approximation that breaks down when you are talking about solar systems and galaxies. But just as important was repeating ether experiments, which had \u0026ldquo;detected\u0026rdquo; it as recently as 1905. It took a lot of investigation, analysis, and just plain persuasion to build consensus against it as a figment of unreliable instruments.\nMany professors at the time, unable to adjust to General Relativity, retired and died believers in classical mechanics. Still today, many physics cranks on the internet are bent on proving Einstein was wrong, and think that the Ether Theory was elegant and underappreciated.\nThey focus on what they can understand and experiments they can come up with, rather than considering the reliability of their methods or the current (very large) set of facts that only relativity can explain, from the cosmic microwave background to de-syncing atomic clocks on Earth. In other words, compared to science, they are using a different epistemology.\nIn conclusion, think back to any arguments on the internet, but especially political ones. At some point, you will see this:\nPerson A: you can\u0026rsquo;t argue with facts! Here, look at this study/statistic!\nPerson B: that doesn\u0026rsquo;t mean anything! That\u0026rsquo;s cherry picked!\nThis is not a disagreement about facts. Person A isn\u0026rsquo;t being accused of lying or making something up. Instead, Person B is arguing that Person A\u0026rsquo;s fact does not matter in their argument about the truth. It\u0026rsquo;s really about how Person A knows what they know, and that is invalid to Person B.\nThat mismatch in epistemology leaves no room for any genuine debate. It is why no one ever won an argument on the internet with facts. The smart among us don\u0026rsquo;t bother to try.\nEthics # With that out of the way let\u0026rsquo;s stick to (mostly) moral philosophy (often just called Ethics) then. What does that entail?\nEthics or moral philosophy is a branch of philosophy that \u0026ldquo;involves systematizing, defending, and recommending concepts of right and wrong behavior\u0026rdquo;.\nhttps://en.wikipedia.org/wiki/Ethics To start with, most ethics arguments depend on an ethical framework, this is the set of ideals/rules/principals that establish how to make decisions. To get started, let\u0026rsquo;s look at some of these ethical frameworks:\nUtilitarianism # Utilitarianism is the most dead simple philosophical theory. Basically, do whatever you can that brings the most happiness to the world (or, if all options are a negative, do the least-worst option).\nThe most common example for which utilitarianism is applied is the trolley problem:\nThere is a runaway trolley barrelling down the railway tracks. Ahead, on the tracks, there are five people tied up and unable to move. The trolley is headed straight for them. You are standing some distance off in the train yard, next to a lever. If you pull this lever, the trolley will switch to a different set of tracks. However, you notice that there is one person on the side track. You have two options:\nDo nothing and allow the trolley to kill the five people on the main track. Pull the lever, diverting the trolley onto the side track where it will kill one person. Which is the more ethical option? Or, more simply: What is the right thing to do?\nhttps://en.wikipedia.org/wiki/Trolley_problem The basic idea being, that, assuming there\u0026rsquo;s not some special circumstances or that you simply don\u0026rsquo;t have a way to know those circumstances, the moral option is to pull the switch, because it saves the most lives.\nUtilitarianism is a neat idea that, in my opinion, fails almost immediately for three reasons:\nMoral Calculus # The felicific calculus is an algorithm formulated by utilitarian philosopher Jeremy Bentham (1747–1832) for calculating the degree or amount of pleasure that a specific action is likely to cause. Bentham, an ethical hedonist, believed the moral rightness or wrongness of an action to be a function of the amount of pleasure or pain that it produced.\nhttps://en.wikipedia.org/wiki/Felicific_calculus The Wikipedia article goes on to explain this algorithm and the things that should be taken into account.\nTo cut to the chase, the problem is you need to take into consideration an absolutely crazy amount factors and it\u0026rsquo;s effectively impossible to confidently know that what you\u0026rsquo;re doing will actually bring about the most happiness.\nFor example, the Trolley problem makes a hell of a lot of assumptions. Not the least of which is ignoring the long term survivor guilt the more-populated side and conductor will feel. I\u0026rsquo;m being pedantic, of course, but still.\nTrade offs # Often we have to pick between good things that bring happiness. Unless you have a way to actually quantify happiness, which notably varies by activity for each person, how do you optimize. Further, how could you know how strong your feelings of happiness are to others? Do you feel more or less than others such that you should prioritize your happiness or others happiness in different ways?\nLike above, this boils down to a knowledge problem\nJustifying things it probably shouldn\u0026rsquo;t # Say 90% of the population would be much happier if all of insert religion here suddenly died.\nOr, the argument about Baby Farming:\nA critic of utilitarianism, in Innocence and Consequentialism (1996), Jacqueline Laing argues that utilitarianism has insufficient conceptual apparatus to comprehend the very idea of innocence, a feature central to any comprehensive ethical theory. In particular, Peter Singer on her view, cannot without contradicting himself reject baby farming (a thought experiment that involves mass-producing deliberately brain-damaged children for live birth for the greater good of organ harvesting) and at the same time hold on to his \u0026ldquo;personism\u0026rdquo; a term coined by Jenny Teichman to describe his fluctuating (and Laing says, irrational and discriminatory) theory of human moral value. His explanation that baby farming undermines attitudes of care and concern for the very young, can be applied to babies and the unborn (both \u0026rsquo;non-persons\u0026rsquo; who may be killed, on his view) and contradicts positions that he adopts elsewhere in his work.\nhttps://en.wikipedia.org/wiki/Utilitarianism#Baby_farming So, uh, depending on how you look at it, it might justify genocide. Maybe not the best ¯\\(ツ)/¯\nnote, there are a lot of other arguments against Utilitarianism, but I think a lot of them misrepresent the idea, such as the one about Average vs. Instantaneous Happiness - like no shit optimizing for instantaneous happiness is bad\nConsequentialism # Consequentialism is a class of normative, teleological ethical theories that holds that the consequences of one\u0026rsquo;s conduct are the ultimate basis for judgment about the rightness or wrongness of that conduct. Thus, from a consequentialist standpoint, a morally right act (or omission from acting) is one that will produce a good outcome. Consequentialism, along with eudaimonism, falls under the broader category of teleological ethics, a group of views which claim that the moral value of any act consists in its tendency to produce things of intrinsic value.[1] - Wikipedia Which, uh, is a good thought but also - like Utilitarianism, which is itself just a specific branch of consequentialism - requries the practationer to either know the future or do moral calculus for every decesion, which is impractical.\nRapid Fire Ideas that suck # All quote blocks from https://en.wikipedia.org/wiki/Normative_ethics\nEgoism # Egoism [is] the belief that the moral person is the self-interested person, holds that an action is right if it maximizes good for the self.\nI shall kill my enemies and dispose of the bodies so that no one ever knows\u0026hellip;\nIntellectualism # Intellectualism dictates that the best action is the one that best fosters and promotes knowledge.\nYeah, you don\u0026rsquo;t mind if I experiment on you, do you?\nRole Ethics # Role ethics is based on the concept of family roles.\nThe Daddy makes the money, the Mommy raises the kids, and the kids learn to worship God! Just as it should be!\nಠ_ಠ\nKantianism # Skipping to the juicy bit:\nThe formulations of the categorical imperative:\nAct only according to that maxim whereby you can, at the same time, will that it should become a universal law. Act in such a way that you treat humanity, whether in your own person or in the person of any other, never merely as a means to an end, but always at the same time as an end. Therefore, every rational being must so act as if he were, through his maxim, always a legislating member in the universal kingdom of ends. - Wikipedia Which, uh, is really a fancy way of saying treat others the way you want to be treated + don\u0026rsquo;t take away other\u0026rsquo;s freedoms. Now, there\u0026rsquo;s more to it than that, but that\u0026rsquo;s the real gist. The problems here are pretty obvious:\nWhat if you, personally, want to feel pain? What if taking away somebody\u0026rsquo;s freedoms is good for society - ie, sending someone to rehab / prison. There\u0026rsquo;s abolutely no concern for historical or social precedent - if someone want\u0026rsquo;s to walk around naked, should they be able to? Kant\u0026rsquo;s ethics also say lying is always wrong, which, uh. Not great. I shouldn\u0026rsquo;t have to tell a cancer patient they look like they\u0026rsquo;re on the edge of death if they ask \u0026ldquo;how do I look\u0026rdquo; or not be able to let kid\u0026rsquo;s believe in fairy tales. Moral Relativism # So, this is the philosophical framework I like the most as, while it is less solid in a way - that is, some things may or may not be morally correct depdening on circumstance - it\u0026rsquo;s also, in my oppinion, the most realistic.\nSo, what is Moral Relativism? Well, it\u0026rsquo;s an umbrella term for multiple ideas, so let me yoink\u0026rsquo; some text from Wikipedia:\nMeta-ethical moral relativists believe not only that people disagree about moral issues, but that terms such as \u0026ldquo;good\u0026rdquo;, \u0026ldquo;bad\u0026rdquo;, \u0026ldquo;right\u0026rdquo; and \u0026ldquo;wrong\u0026rdquo; do not stand subject to universal truth conditions at all; rather, they are relative to the traditions, convictions, or practices of an individual or a group of people.\n[\u0026hellip;]\nMeta-ethical relativists are, first, descriptive relativists: they believe that, given the same set of facts, some societies or individuals will have a fundamental disagreement about what a person ought to do or prefer (based on societal or individual norms). What\u0026rsquo;s more, they argue that one cannot adjudicate these disagreements using any available independent standard of evaluation—any appeal to a relevant standard would always be merely personal or at best societal.\n- Wikipedia Now, some people take this a step further and are Normative moral relativists, which means they think what we ought to do in a given situation is also culturally dependent. This, I think, is both wrong and makes everything useless to debate. If everything is relative, then there\u0026rsquo;s no reason debating anything.\nFor example, let\u0026rsquo;s think about the Abortion debate. If we go by relativism as our standard we can establish, right away, that because of our culture, we may disagree on if it is right or wrong. Where we can still stand to debate, and where I still thing there\u0026rsquo;s a right answer, is in what do we do about it. If we say everything is relative, that means it may be reasonable for a culture with a large enough majority of a belief that it\u0026rsquo;s wrong to make it illegal, which is counter my belief. Instead, because we\u0026rsquo;ve already gotten the we disagree part out of the way, we can now debate what ought to be done. This means we can prioritize certain things, like other philosphical systems do, and, because we know people are likely to disagree on some things, we can immediately see that prioritizing choice makes sense. If you think Abortion is wrong, then don\u0026rsquo;t have one!\nThe Melting Pot of Ideas # So, relativism it is then, right?\nNo. If we follow that line of thought, we hit another problem: if we always prioritize choice, what do we do if someone is making a choice that limits someone else\u0026rsquo;s freedoms or might bring them harm?\nYou see the problem, and how this just wraps back around to needing another framework. This is why it\u0026rsquo;s good to have a mixed bag of phillosphical frameworks. Now, we can sort of mix all of these ideas together. How you do that is up to you \u0026hellip; I guess you could even say it\u0026rsquo;s relative to you and your culture.\nSome people, after taking a philosophy class think \u0026ldquo;I have found the answer, the one true framework\u0026rdquo; and, I\u0026rsquo;ve got news for you, what you\u0026rsquo;re describing is religion. In Ethics, there is no right answer, only doing the best you can - and the best we have isn\u0026rsquo;t one system, it\u0026rsquo;s internally digesting all of the existing ideals, filtering them, and making your own system and holding yourself to be the best you can.\nEvaluating a philosphical system # The trolley problem is a series of thought experiments in ethics and psychology, involving stylized ethical dilemmas of whether to sacrifice one person to save a larger number. The series usually begins with a scenario in which a runaway tram or trolley is on course to collide with and kill a number of people (traditionally five) down the track, but a driver or bystander can intervene and divert the vehicle to kill just one person on a different track. Then other variations of the runaway vehicle, and analogous life-and-death dilemmas (medical, judicial etc.) are posed, each containing the option to either do nothing, in which case several people will be killed, or intervene and sacrifice one initially \u0026ldquo;safe\u0026rdquo; person to save the others. - Wikipedia Political Compas # Some other terms you might hear # BreadTube\n[TODO] Ask HN: Learning Philosophy (Hacker News)\n"},{"id":255,"href":"/design/basics/","title":"Basics","section":"DESIGN","content":" The Basics of Art and Design # When you\u0026rsquo;re first learning art, every art class will beat some core ideas into your head:\nLines - The \u0026lsquo;structure\u0026rsquo; bits of the works, when you start making art, you\u0026rsquo;ll often start with the Line Art\nShape - Structures that form out of lines, might appear 3D. These might be mathy, like squares, or organic, like an eye\nForm - Primarily applicable to 3D (or art interpreted as 3D) - Think of this as the shape you\u0026rsquo;d see if you could move around the object in real life\nColor - Color\u0026rsquo;s consist of hue (red, blue, etc.), saturation (how \u0026lsquo;strong\u0026rsquo; the color is), and value (how bright/dark the color is)\nSpace - The relationship between objects, including the empty space between them (Negative space)\nTexture - Is it smooth? Reflective? Rough? Does it look painted or flatly colored?\nValue - How dark or light is each region\nThese are your fundamental building blocks of art, and you should get to know them. Rather than try to reinvent the wheel and teach these to you myself, I\u0026rsquo;m going to recommend you check out this Art Fundamentals playlist from Swatches on YouTube.\nHue, Saturation # [TODO]\nThis is a black and white image. Only the lines are colored. (Reddit)\nhttps://lab.sciencemuseum.org.uk/colour-shape-using-computer-vision-to-explore-the-science-museum-c4b4f1cbd72c\nValue \u0026amp; Lighting # Perspective # https://twitter.com/miyuliart/status/1337423295814176768 (NSFWish I guess?)\n@Nymphomachy Rule of Thirds # Art guides I like: # FULL SIZE FULL SIZE FULL SIZE Furgonomic tutorials by Sketch, used with permission. Archive.org backup of the above tweet Things like digitigrade shoes, tail holes in clothing, tail bags, etc. help make characters feel like they\u0026rsquo;re part of an actual world.\nCat Girl Headphones (Twitter, @foone) (Archive.org)\nArt Guides # Detailed guide to different types of bird wings and their functional parts (Reddit)\nSkin Tone Cloud (Reddit)\nhere’s an art tutorial on some ways that i avoid “same face syndrome”! keep in mind that these tips might not work for everyone though pic.twitter.com/qfgRNz8Anf\n\u0026mdash; harvey (@harvviies) February 11, 2021 Archive.org backups of images in tweett [TODO] Scale, Typography, Contrast, Balance, Emphasis\nPalettes # https://meodai.github.io/poline/\nhttps://doodad.dev/dither-me-this/\n"},{"id":256,"href":"/phil/community/","title":"Community","section":"PHIL","content":" Community # Hopefully this isn\u0026rsquo;t a shock to anyone reading this, but I\u0026rsquo;m a furry.\nowo uwu nuzzles rawr tehe So, I think I can share a little bit about why I joined the fandom, what being in a subculture community is like, and how some of those experiences have made me a better person and helped me be a part of or run successful online communities.\nI hope that though this I can talk about what makes a community good or bad, what brings division, and what good rules for a healthy community look like.\nBut, to get there, I think I need to first indoctrinate you into the furry culture of OwO and UwU. So prepare your beans, we\u0026rsquo;re about to get fluffy.\nCharacter owned by me, art by Talon Creations Furries? # [TODO] Furries, internet culture, LGBT, Gender Identity vs need for legal identity - furry stats, like what percent look at lood, age demographics, etc. Proof of X, Assholes: A Probing Examination,\nMight also talk about https://wileywiggins.com/merveilles.html as that\u0026rsquo;s a community and ethos I can speak to as well\nAdopting new societal values of acceptance # A shift in American family values is fueling estrangement (The Atlantic)\nUnderstanding the common good # Encryption, Tragedy of the commons\nCommunity # Litterboxcomics Small and connected # You May be Using Mastodon Wrong (Carlos Fenollosa Blog)\nhttps://en.wikipedia.org/wiki/1%25_rule_(Internet_culture)\nI miss voice-first servers like TeamSpeak\nEcho Chambers # Data and fact driven sharing # Moderation # ensuring that we\u0026rsquo;re self moderating one another\nCommunal Efforts # xkcd №1205 Shared Spaces # Hacker Spaces Community Garden\nOpen Source hardware and software # Something I\u0026rsquo;ve written while thinking about this # As I walked to my car after class, I could smell the ashes of a cigarette and hear the echos of a train scraping on its tracks. The cool foggy air held still beams of light. It looked like a scene from Blade Runner, but I couldn\u0026rsquo;t help but feel like the Android\u0026rsquo;s of its inspiration, lusting after something to make me feel alive.\nThe drive home was mentally taxing. The fog so dense that cars ahead seemed to be balls of light floating in the distance, and keeping sight of the lines to stay in my lane took a constant effort. After a little over half an hour of focus and 80s synthwave music I pulled into my driveway.\nMy day had been long, and I hadn\u0026rsquo;t had a good meal to speak of so I heated up some leftovers and talked with my parents as I ate. My mom was distracted by writing her next book and my dad was lost in a sea of Facebook memes, which he was showing us between intermittent laughter. I wasn\u0026rsquo;t really amused, in fact I was irritated.\nI ranted to him about something I know he\u0026rsquo;s heard from me before, the spheel of how Facebook is evil. How computers deprive us of our privacy and we willingly feed a machine that is well documented in its atrocities, and as usual he failed to see the point.\nHe used the same defense everyone does \u0026ldquo;All of my friends are on Facebook\u0026rdquo;\nHow many of those \u0026lsquo;friends\u0026rsquo; do you really talk to? How many of them just repost meaningless memes and jokes, while providing no insight, let alone basic updates on their life.\nSome of my absolute best friends are people I\u0026rsquo;ve met online or only know online, but none of them are people I stay in contact with though Facebook.\nThis isn\u0026rsquo;t a Facebook rant though, it\u0026rsquo;s a personal connection rant. So many of my friends and family consume social media to the point they don\u0026rsquo;t want to admit it, but don\u0026rsquo;t even take the time to maintain the relationships they do care about. That stereotype about calling your mother? Yeah, there\u0026rsquo;s a point of reality in it. I don\u0026rsquo;t know what it was like before Facebook, honestly, I really don\u0026rsquo;t. But I think we valued the connections we did have a lot more. Our friends may have been those from high school sure, but I know there used to be more tight night local communities that shared interests, but now the convenience of social media has devalued the local meeting of friends. Which is ironic in a way. I\u0026rsquo;ve been in communities which would have never stood a chance of existing without social media to bring together the band of misfits, but I\u0026rsquo;ve also seen social media start massive amounts of drama that spiral out of control and destroy the local community.\nWorst of all though, I\u0026rsquo;ve seen social media devalue the importance of what people do. I figure maybe one or two people will read to this point, having lost interest long before now, and the same goes for much of the honestly great long form reporting I find online, or the longer stories people post for free for our entertainment. Creativity is becoming devalued as memes and short \u0026lt; 100 word posts become our new limits. Works of art that take time to digest and see meaning it get overlooked, poetry is dead, and heaven forbid you want to discuss politics in a civil matter. Hell, for many even the idea of playing a videogame or watching a movie is second to the instant gratification of short form content like YouTube, Reddit, or Facebook.\nI\u0026rsquo;m not innocent in this, not by a long shot, but I have two rules for myself which have helped:\nFor every two hours consuming content, I should spend at least an hour making something\nAt least 1/2 of my time-consuming should be longer form content: be it full stories, books, movies, etc. Not YouTube, Reddit, Facebook, etc.\nBut when much of what I make, be it writing, music, or whatever is ignored because it\u0026rsquo;s not a viral meme or it\u0026rsquo;s too long to hold someone\u0026rsquo;s attention it seriously hampers my motivation, and I find it easier and easier to break my two rules. I\u0026rsquo;ve been doing a decent job, and as with any addiction it takes time to get out of and falling back is easy, but the reward of creating and consuming more filling content is much like having a nice home cooked meal instead of a super sugary diet.\nI just wish more people would appreciate each other\u0026rsquo;s cooking instead of eating candy all day. I want to work with people on these things, but if everyone else just stays addicted, it\u0026rsquo;s hard to keep going. We\u0026rsquo;re inevitably social creatures and we do what our friends do, and doing things with friends is always better. Being on Facebook or Reddit, watching YouTube videos- these may trick your brain into thinking you have what you want, but being on the other side I really wish some of you would join me.\nI\u0026rsquo;m always down to hang out, to wonk together on making something cool, or talk about life, you just have to reach out not wait for me to post a funny meme for you to comment on. Let\u0026rsquo;s talk about your hobbies and projects and what you care about and stop posting memes and Tumblr screenshots.\nTODO: https://sambleckley.com/writing/church-of-interruption.html\n"},{"id":257,"href":"/phil/consumerism/","title":"Consumerism","section":"PHIL","content":" Consumerism # Vega\u0026rsquo;s Maw, made for me by @NewtWolfdeer Look, I\u0026rsquo;ll be the first to admit I\u0026rsquo;m guilty of falling for the tricks used to get people to consume. To buy and buy more. A good sale, even on something I didn\u0026rsquo;t know I previously wanted, still has a way of making my dumb lil\u0026rsquo; human brain go \u0026ldquo;OH!\u0026rdquo;\nThe problem is that consumers can easily fall into traps that lead them to buy things for a stupid reasons, these include:\nBuying something expensive as a status symbol Buying the \u0026lsquo;New version\u0026rsquo; which has no meaningful improvement Brand Loyalty (not always bad) Buying from businesses that prevent repairs Buying from businesses that abuse workers or their rights among many, many other things.\nUnder Capitalism, there are oposing forces here. On the one hand, greater consumption means more jobs, more money flowing, means a better enconomy, means everyone gets to live a better life.\n(or at least this is true if you subscribe to the hyper-capitalist propaganda we\u0026rsquo;re fed from birth in the US! Yay, Capitalism is all sunshine ☀️ and rainbows 🌈 and absolutely can not be criticized or you\u0026rsquo;re an evil comunist!) On the other hand, holy fucking shit everything is on fire. People buy useless shit wrapped in enough plastic to create a fucking Texas sized trash island in the Pacific, we support companies that actively fight against our right to repair or which make products with extreme Planned Obsolescence, and most of us work meaningless jobs just to be able to afford to pay for a fancier car that we will mostly use to get to that job. Meanwhile, if you don\u0026rsquo;t have a credit card and debt, you\u0026rsquo;re also fucked because you need to maintain a good Credit Score.(1)\nBut the real problem is that we all go to work to pay for shit that we don\u0026rsquo;t need, that we\u0026rsquo;re not allowed to repair or don\u0026rsquo;t even really \u0026lsquo;own\u0026rsquo;(2), that mines our data to advertise to us after we\u0026rsquo;ve bought the product(3), that randomly removes features years later(4), that we\u0026rsquo;ve been told has value it doesn\u0026rsquo;t(5). It\u0026rsquo;s not turtles all the way down, it\u0026rsquo;s just piles of bullshit.\nWe buy too much shit and we feel guilty about it # We buy to much shit. And I mean shit. A lot of what we buy is distinctly not built to last. Sure, that may be in part because of planned obsolescence. But I think the bigger problem is just not giving a shit. We know that if something breaks we can order a new one, often for less than the cost of a good one to begin with. We know if we forget to bring our refillable bottle, we can buy a 16oz bottle of nearly anything at any gas station. We know not packing a lunch is fine because we can go get a salad in a plastic container that will take 16.5 million years to decompose in a landfill at a wide selection of fast food places. We just don\u0026rsquo;t care. We buy this shit, and then post like this make us feel guilty for the individually wrapped candies we eat, yet we still feel obligated to get them for kids during the holidays. I feel guilty writing this, yet know my impact will be minimal. I know I can only do so much to change my own habits. I know I\u0026rsquo;d be angry if prices were higher because of sustainable packaging. I know I\u0026rsquo;d feel better with less possessions, yet the thought of losing even one to a fire makes me scared. News stories of Amazon throwing away unused goods and of farms destroying unsightly but totally edible crops upset me, yet I don\u0026rsquo;t have a meaningful solution to these problems that doesn\u0026rsquo;t end with a punchline of communism. But wallowing in our own existential dread is about as productive as trying to get WalMart to unionize, so where should we start?\nWe buy too much cheap shit # How the hell is anyone supposed to compete? It is impossible to put research everything we buy to make sure we\u0026rsquo;re being ethical consumers. Sure, certifications like those from Fairtrade and Rainforest Alliance sound like a reasonable solution; however, both have had their share of controversies showing the labels are largely just marketing and serve to make the consumer feel better, without real oversight. Even then, if your average person is given the choice between BrandA Thing and a 20% more expensive BrandB Thing with a \u0026ldquo;We care about the environment and stuff\u0026rdquo; sticker, will they care? Even if you think yes (which, uh, you\u0026rsquo;re a bit overly optimistic if you do), do you think the company trying to act ethically will really be able to compete with one that doesn\u0026rsquo;t care?\nPlus, even if a brand does get recognition for both a good product and giving a shit about the environment, having reasonably labor standards, etc. there\u0026rsquo;s very little to stop a competitor from making a nearly identical product and undercutting them enough to just steal the market - like in the video embedded above.\nEnforcing Protections # Alright, so we\u0026rsquo;ve established nobody gives a shit. Now let\u0026rsquo;s look at why that\u0026rsquo;s the case and how we can fix it.\nPlanned obsolescence, Right to repair # \"To refuse to inform yourself about the basic operation and maintenance of the equpment you depend on was to passively accept that tyranny and agree to its terms: when your equipment works, you'll work, but when your equipment breaks down you'll break down, too. Your posessions would possess you.\" - Edward Snowden, in his book Permanant Record\nRight to repair and planned obsolescence go hand in hand. Put simply, manufactures don't want to have to compete with themselves, so, if they can make things such that they'll be out of date or fail in time for the next release, it's good business- and one thing that would stop them from doing that is if your stuff was easy to work on and keep running. Unfortunately, most of expensive big purchases (phones, laptops, cars, etc.) are getting harder to work on. Sometimes this is because of malicious manufacturing that uses copious amounts of glue and weird screws. Sometimes its software locks that would be illegal to even break. Sometimes it\u0026rsquo;s devices being dependent on servers staying online- like a game server for a multiplayer game.\nI said before that people don\u0026rsquo;t give a shit, they\u0026rsquo;re willing to just throw away the broken thing and replace it. It\u0026rsquo;s cheaper and easier.\nBut WHY is that the case? Manufactures would like you to believe that as our devices become more advanced, it\u0026rsquo;s simply not possible to make something the consumer can work on. Products like the Framework Laptop make this really hard to believe though. I think that what\u0026rsquo;s happened is manufactures, over years of saying that it\u0026rsquo;s impossible, have convinced consumers that they should be scared. Warranty Void If Removed Stickers, legally enforcable or not (npr.org), combined with the abuse of DRM (we\u0026rsquo;ll get to that in a sec), and these anti-repair designs that glue everything together have trained us as consumers to not expect to fix our devices. The default resolution to failure is replacement, to think about repair is becoming unnatural. Even if this makes for worse products - laptops with storage that can\u0026rsquo;t be recovered if the CPU fails, phones with worse battery life as they age, etc. - the incentive for a business to make these choice is only growing, espically as the volume of products practices like these push off the shelves is so high it makes it hard for competitors not working at that scale to dream of competing.\nRight to Repair legislation as is only seeks to make it so that businesses need to provide schematics and parts to 3rd party repair centers and consumers who wish to repair their devices. I think this is far from enough. I think devices should be required to be designed with a certain level of repairability in mind - Making it easy to replace the battery in your phone, replace the touchpad on your laptop, etc. - If the manufacturer wants an exception to make something extra sleek and sexy, fine! But then they need to build in the cost of free replacment/repair of the most common to wear out parts if they limit the lifespan of the product, and provide it to anyone who brings in a device in need of those services, no questions asked- that way used products can be sold without losing this protection. I\u0026rsquo;m not saying a 10 year old phone should be covered, but a 3 year old flagship phone where the only problem is battery life? Yeah, that\u0026rsquo;s bullshit. Similarly, manufactures of goods with software that connects to the internet should be required to provide security updates for the lifetime of the product- and by lifetime I mean actual lifetime as determined by a 3rd party or telemetry that reports the number of still active products.\nFurthermore, devices that rely on software or servers to continue running need to have that software distributed DRM free or the server software released to keep things running. It should be impossible for the vendor to make your purchase useless years later.\n@jaydcarlson on Twitter Anti-consumer practices # https://dvt.name/2020/02/24/rfc-lets-disrupt-dating-apps/\nA classic Silicon Valley tactic — losing money to crush rivals — comes in for scrutiny (Washington Post)\nUber doubles price if your battery is low\nDiseconomies of scale in fraud, spam, support, and moderation (Dan Luu)\nHurting the paying customer, rewarding the pirate? # Digital Rights Managment or DRM is software that serves to make it harder to pirate software, movies, TV shows, etc. It comes in many fourms, from the \u0026lsquo;basic\u0026rsquo; that simply ask for a key and are easy to bypass to the complex that try to trick reverse engineering tools or rely on keys that are built into hardware- like High-bandwidth Digital Content Protection, HDCP, which rides on the back of common protocols like HDMI and DisplayPort to try to prevent people from recording what they\u0026rsquo;re watching.\nThe ironic thing about all of these systems is they hurt the consumers:\nSoftware DRM: Makes game load times longer and performance worse (YouTube) Make- running tools you own annoying to install on multiple computers Makes some programs require a network connection when they otherwise wouldn\u0026rsquo;t Which may make it unplayable someday Makes some software un-usable if the authentication servers go offline May require deep integration into the OS, causing security concerns Makes running software with combatability tools, such as WINE for running Window\u0026rsquo;s software on Linux, much harder Makes for combatability issues- it may be hard to keep content working as the most common formats change Hardware DRM Has caused the removal of useful options, like analog-audio out ports from Blu-ray players May make your device literally stop working if opened up for repair May fill landfills with one-time-use tash, like this CD that becomes un-playable 48 hours after opening [TODO] https://en.wikipedia.org/wiki/Format_shifting\nSometimes, they don\u0026rsquo;t even want you to be the customer? # Jesus. Fucking. Christ. This is beyond evil. Now, obviously there are different markets that want different things: There\u0026rsquo;s a legitimate reason that content on Netflix in the US would be primarily in English, and content in Germany primarily in German. That\u0026rsquo;s fine. What\u0026rsquo;s not fine is that while paying for the same service, two Netflix users can\u0026rsquo;t even access the same content. It\u0026rsquo;s one thing to make it more visable, it\u0026rsquo;s a whole different thing to change what\u0026rsquo;s available. But hey, at least you can go use a different service, right?\nWell, not always. Some software, music, and videos may not even be available to purchase depending on your region. Or, maybe they will be but aren\u0026rsquo;t yet. So, your only option if you want to watch that new TV show at the same time as your foreign friend is good ol\u0026rsquo; piracy.\nBut, wait, there\u0026rsquo;s more!\nSome hardware is actually geo-locked. This goes for everything from smart watches sold to only work in Europe but not the US, to Blu-ray discs that won\u0026rsquo;t play if they\u0026rsquo;re put in a player from over seas! What the fuck???!\nChanging Specs, but not the name? # Imagine you\u0026rsquo;re in need of a car, so you do countles of hours of research and settle on a nice little four door electric car that\u0026rsquo;s supposed to have a 300 mile range. You go to the dealer, test drive it, it\u0026rsquo;s great. You get it home, and start using it to commute to work every day, 35 miles or so there, so 70 there and back- all highway. You notice you\u0026rsquo;ve used about a quarter charge, which is about right. Then, a few months in you notice your car isn\u0026rsquo;t getting nearly the range it should, that same commute now uses up half the charge. You\u0026rsquo;d be pissed! So, you take it to the dealer and they let you know that for your car, they changed the batteries for any with a serial number above xxxxxx, and those batteries degrade faster. They kindly inform you \u0026ldquo;The batteries were still what you expected at the time of sale, and all cars get worse with age.\u0026rdquo; You retort, \u0026ldquo;Yeah, but the reviewers of this car never saw this, and this isn\u0026rsquo;t what I though I was paying for!\u0026rdquo;\nWhile this situation is fictional, this has been happening more and more lately, espically with consumer electronics. For example, Netgear\u0026rsquo;s GS305P POE switch (YouTube, Serve The Home) has wildly different specs but the same name, Laptop manufactures are using slower RAM after the inital release (Youtube, Linus Tech Tips), and storage is particualry bad- Samsung changing the controllers in SSDs (Arstechnica), ADATA change to slower NAND in SSDs (Tom\u0026rsquo;s Hardware), \u0026hellip; And Western Digital too (Bleeping Computer). It\u0026rsquo;s a total shit show.\nNow, the Samsung one is particularly interesting because for most users it\u0026rsquo;s actually an improvement. But, that doesn\u0026rsquo;t fucking matter when it\u0026rsquo;s still a different product. The most there is doing heavy lifting too, as anyone doing high resolution video editing or injest from a 4k camera may notice a dramatic slow down.\nPut plain and simple: If you\u0026rsquo;re going to meaningfully change a product part way into its release cycle, you absolutely need to make it clear to consumers what those differences are. Transparency is key.\nThere\u0026rsquo;s another angle here too. Some products are being sold that are just totally different, but using the same name at launch. I think the most heinous example is of the Nvidia GT1030, where one varient has DDR4 memory and the other GDDR5, resulting in an about 2x performance difference (YouTube, Gamer\u0026rsquo;s Nexus).\nI mean, what the fuck? How is any of this legal?\nResale Price Maintenance # [TODO]\niPhones are faster in France, buying used products at a loss,\nPurchasing Power # Now, I won\u0026rsquo;t say that this is always used for evil. For example, some people are implementing Purchasing Power Parity (Wikipedia), which is region based price manipulation, not for the sake of charging richer countries more but for charging those in poorer regions less. Now, the effect is the same, and I\u0026rsquo;m not sure I like the idea anyway, but I am always open to new ideas, and I think that when done correctly and for the right reasons this can be a good thing; however, I do think the applicable scenarios are limited. There\u0026rsquo;s a huge difference between offering an educational resource at a reduced cost, trying to increase the market for a Disney movie to extract value from poor nations, and trying to manipulate price to charge those with more power as much as they might be willing to pay by using an algorithm. This seems like a slippery slope that might lead us has brought us to prices that change based on your purchase history and data on how wealthy you seem, which isn\u0026rsquo;t a good thing either.\nThis is of course tricky. On one hand, everyone likes the idea of discounts: be it for Seniors, Students, Loyal Customers, or for showing up at the right time of day. On the other hand, almost all discounts are just an excuse to raise the price for a different group of people- those that are presumed to be able to pay more. There\u0026rsquo;s a lot of complexity here, and the Wikipedia article on Price Discrimination covers a lot of it well, but I think the key take away should be that this is already a problem- what you buy online may well already be changing in price based on where you live, what account you\u0026rsquo;re logged into, what device you\u0026rsquo;re using to look at the website. Some of these practices may be of various legality depending on where you live, but good luck trying to stop it.\nSee: https://scastiel.dev/implement-ppp-fair-pricing-for-your-product\nPay What You Want # [TODO]\nAdvertising # This video from Tom Scott provides a ton of background information and makes some really good points\nAvoiding the Frigid Hellscape of Online Marketing (Soatok\u0026rsquo;s Blog)\nYou make a privacy-first service → You get banned on Google (Dan Kozlov)\nNative Ads # psst, if you don\u0026rsquo;t like YouTube sponsorships spots check out sponsorblock - just be aware of the morality of doing so and like, support people on Patreon or whatever. Dangerous Ads # [TODO] Sugar, Drugs\nAds in things you\u0026rsquo;ve already paid for # [TODO] Hulu, TVs injecting ads, Chromecast bypassing DNS, etc.\nCredit # App lets banks lock your financed phone if you default on payment\nAccelerating Change and Information Overload # The world is getting faster. Things are moving, flashing at us, blinking with neon colors and screaming at us in increasing attention grabbing, addicting ways. There\u0026rsquo;s now the attention economy, where time in front of your eyes is evaluated to be worth an increasing amount. An ephemeral cloud of mist, lurking in the air that has been given the moniker The Algorithm influences our choices more and more each day.\nThis sounds like some sort of plot to an 80\u0026rsquo;s scifi thriller set in the far future, but instead it\u0026rsquo;s just part of our /r/ABoringDystopia/ . I know I\u0026rsquo;m addicted, but that\u0026rsquo;s the funny thing about true addiction, you don\u0026rsquo;t really want to stop. I know that speed of things, the ever increasing nightmare of [political shit slinging](political shit slinging) and the amount of news on it is bad for me. That being only a click away from something more interesting has rotted my attention span. That a culture of consumption has made it harder for me to spend time creating. I know that I could make a conscious decision to limit my time on reddit, or to spend more time outside, but sitting in the same spot is comfortable. I\u0026rsquo;ve dug my own little hole and surrounded it on all sides with walls a mile high to protect me from the advertisements and dissenting views, but in the process I\u0026rsquo;ve lost so much. I try to read an article on Fox or anything on r/conservative and I get irrationally angry. So instead I keep to browsing my Algorithmically Tailored home page, but after seeing things that interest me I get on a bind of just one more page or I\u0026rsquo;ll only scroll to one more post or I\u0026rsquo;ll read after this video and then, even if I do manage to break free and escape into a book, I\u0026rsquo;m one ~Binng~ of a Telegram notification away from being brought out of my book for something that I find more immediately gratifying.\nThen, to add onto that, the censorship, not only are we algorithmically bound to see some content over others, but because of strange advertisement, government, and platform policies and the increasing stupid fact that we still use centralized services, the ever increasing amount of excess photons that we didn\u0026rsquo;t even ask for that we get blasted into our retinas is filtered in a way that discourages actual free speech because some people\u0026rsquo;s speech is prioritized.\nBut, I\u0026rsquo;m getting off topic, the point of this was to discuss and propose a solution to the issue of being bombarded with information, ads, physical and digital, and content that was not requested.\n[TODO\u0026hellip;]\n[TODO] [TODO] The Dark Reality Behind America’s Greatest Thrift Store Empire\nSomethings I\u0026rsquo;ve written while thinking about this: # I\u0026rsquo;ve posted things like this here before, but I feel like I need to again in light of recent conversations with friends: On Facebook, you are the product and you are you should know what you are funding. I think at this point the Cambridge Analytica scandal[1] is pretty well known, but that is nothing compared to the other things in Facebook\u0026rsquo;s past. At one point Facebook targeted teenagers and filtered their news feed to be mood based which was found to lead to real world mood changes [2]. But even if these things don\u0026rsquo;t bother you, you think Facebook just made a mistake, there\u0026rsquo;s the case of Facebook\u0026rsquo;s content moderation team being paid less than a living wage and being exposed to situations which lead to severe mental illness [3]. Speaking of mental illness, Facebook owned Instagram\u0026rsquo;s recommendation algorithm has been found to recommend pro self-harm content to those most vulnerable, which has actually lead to deaths [4].\nThink about who you\u0026rsquo;re giving your data, money, and views to and on what platform you do so. There are alternatives. You don\u0026rsquo;t have to sell all your data to big organizations to stay in touch. I use Mastodon [5] instead of Twitter, Telegram instead of messenger [6] and a combination of Reddit and the things above instead of Facebook. You do have a choice. If nothing else you can use Facebook in a separate browser or in a container [7] so you\u0026rsquo;re at least not funding them in full.\nJust like voting and contributing to your community, having digital responsibility is important too.\nThanks for reading this, if you want to talk about digital privacy or security you can shoot me a message here and I\u0026rsquo;ll get back to you next time I log in, or you can message me on Telegram and I\u0026rsquo;ll get back to you right away.\n[1] https://www.nytimes.com/…/facebook-cambridge-analytica-expl… [2] https://www.nytimes.com/…/facebook-tinkers-with-users-emoti…\n[3] https://www.theverge.com/…/cognizant-facebook-content-moder… [4] https://www.wired.com/…/when-algorithms-think-you-want-to-…/\n[5] https://joinmastodon.org/ [6] https://telegram.org/ [7] https://addons.mozilla.org/…/fire…/addon/facebook-container/\nI don\u0026rsquo;t think it\u0026rsquo;s a lack of morals, I think it\u0026rsquo;s a lack of accountability combined with the legal requirement for businesses to do what\u0026rsquo;s in the best interest of shareholders. At some point fines became the cost of doing business, as does lobbying and attempting to get regulatory market capture. While yes I think consumers are guilty of not voting with their wallets for the better alternatives, buying the better alternatives has become impractical when the ones playing dirty can undercut the ones playing nice by such a crazy extent. While I get nobody likes big government, I personally think the best solution is for the FTC, FCC, and EPA to do their jobs: force right to repair, force net neutrality and increase the definition of broadband minimums, implement a carbon tax respectively- among other issues. Capitalism without limits leads to abuse without limits. We complain that Facebook owns basically all of social media, that Amazon workers are peeing in bottles, but still let them buy literally all of their competition before they actually get large enough to compete. We let our politicians take unchecked donations form them that lead to laws that make it even harder for a smaller business to compete or get started, meanwhile not letting them pass any consumer protections like preventing Facebook from knowing when you\u0026rsquo;re on your period or ClearviewAI from scraping profile pictures to build a nationwide facial recognition database that you can\u0026rsquo;t opt out of.\nMorals aren\u0026rsquo;t the answer. Regulation with real consequences, consumer protections, unions, blocking mergers, breaking up not just monopolies but even duo and tri and quadopolies (like the media landscape: Sinclar, Fox, Disney) as well as regional non-competes, unfucking that patent system, and undoing the damage Disney did to copyright is. Or at least it would be a start.\nI also think it\u0026rsquo;s partially just a matter of there\u0026rsquo;s too much going on in the world for most people to give a shit about everything. \u0026ldquo;The Good Place\u0026rdquo; did a good job of pointing this out where in the third(?) season it was revealed nobody had gone to heaven in hundreds of years because people couldn\u0026rsquo;t actually act ethically anymore. They showed a particularly good example where someone didn\u0026rsquo;t make it in because, unbeknownst to them, the apple they bought at the super market had been harvested with slave labor, and like\u0026hellip; What are you supposed to do? Trace down every apples path from tree to you?\nIdk man, it just makes me depressed that we have to eternally be careful not to fund douchebags.\nNevermind that one of the major credit bueraus fucked up hard enough to expose the the credit records of 140 milllion Americans Your carrier probably owns your phone, it has apps on it you can't remove. You're Smart-Whatever might phone-home and stop working if you don't pay for a subscription. You're digital library of kindle books can have a title revoked at any time. You may have your gaming account banned and lose all your digital games and DLC. Fuck Smart TVs Like TI did to their Calculators Diamonds. Diamonds, in jewlery, aren't worth anything near what we've been lead to believe. Plus they're often acquired via slavery or other really dark means, extra stupid when you consider they can made in a lab anyway. "},{"id":258,"href":"/cooking/cooking/","title":"Cooking","section":"COOKING","content":"Hey there.\nMy name is Vega, and I can\u0026rsquo;t cook, so I\u0026rsquo;ll be letting my friends take this one over.\nWhy you should take the time to be a functional adult: # I had a few friends interested in fleshing this page out, but they got busy, let me know if you want to take it over or just submit a pull request "},{"id":259,"href":"/phil/copyright/","title":"Copyright","section":"PHIL","content":" Letting Society Advance Though Art and Innovation # This video from Tom Scott on YouTube is a very good intro to everything I\u0026rsquo;ll be talking about on this page, I\u0026rsquo;ll assume you\u0026rsquo;ve watched it so that I don\u0026rsquo;t have to repeat everything that he says here.\nWhat is Copyright? # [TODO]\nWhat\u0026rsquo;s Wrong With that? # Watch a police officer admit to playing Taylor Swift to keep a video off YouTube (The Verge)\nI AM DYING\nI just got a copyright claim for *TYPING ON MY KEYBOARD* pic.twitter.com/EUSzQun8ik\n\u0026mdash; Hector Martin (@marcan42) July 29, 2021 How do we fix it? # I think to further address any issues, we first need to look into how these issues have come to exist. In general, as a society advances, new issues will arise. Computers and the Internet have shown us just how incredibly things can progress and how amazing unhindered, open information flow can change the world. The Internet has served as an educational tool of unparalleled utility to my generation, and has allowed me to learn things that I otherwise would have never had access to. Of course, this also means the same for bad actors. Though acting in bad faith also now have the same unparalleled access to personal information of the masses and individuals can now use their anonymity and an Internet connection to do harm both to individuals via cyberbullying and trolling, but also to businesses as we move to a world that more heavily relies on ecommerce and the digital information they store becomes increasingly sensitive.\nUnfortunately, the law is often far too slow or far too fast to react, leading to laws that simultaneously fail to protect our rights as smaller creators and punish many to harshly.(4)\n\u0026hellip;\nToday, the most obvious example of this is the Right to Repair movement, a movement that has computer hackers and farmers fighting side by side to protect consumer rights.\nCopyright, DMCA\nPatents\nHEVC is heavily patented. There are no less than 7,200 patents covering this compression method. This includes 39 patents from Apple: CN 03816739.5, 200810082232.0, 201210009977.0; DE 603 34 804.1, 603 41 992.5, 603 41 994.1; FR 1532746, 2326019, 2328283; GB 1532746, 2326019, 2328283; IT 1532746, 2326019, 2328283; JP 5385233; KR 850,810, 1,210,015; and US 7,292,636, 7,339,991, 7,551,674, 7,769,084, 8,090,023, 8,090,026, 8,094,724, 8,094,729, 8,630,339, 8,711,924, 8,737,462, 8,737,468, 8,737,484, 8,743,951, 8,817,883, 8,831,106, 8,837,580, 8,837,597, 8,934,546, 8,934,551, 8,942,287. This should be enough to discourage any company from using HEIF, even if it does offer a better compression versus file size ratio\nhttps://www.hackerfactor.com/blog/index.php?/archives/833-HEIC-Yeah.html\nPatent trolls\nSocietal standards of art, making fun of something because it\u0026rsquo;s different\nWhat we should do about this:\n[TODO] Marvel, Pink Floyd, and Minecraft Vs Web comics, indie, and Minetest.\nPiracy? # [TODO] ethics of piracy, when it\u0026rsquo;s okay, who it affects, etc.\nBecause these many of these sites are technically hosting illegal content, they tend to change domains a lot. One of the better ways to be sure you\u0026rsquo;re not going to a Honeypot, a fake site used to catch people, is to check what domain the Wikipedia article refers to, for example for scihub:\nAwesome Piracy (GitHub)\nSci-hub.do\nhttps://unpaywall.org\nOpen Directories # [TODO what is an open directory]\nhttps://www.reddit.com/r/opendirectories/\nhttps://the-eye.eu/public/\nFor the Hackers, Makers, and Engineers # Cory Doctorow is a huge name when it comes to speaking on how copyright matters to those of us that like to create with code and wires. I really recommend reading his post about why There are no digital rights, only human rights. and watching this video about the War on General-Purpose Computing.\nPatents # [TODO] e-ink, 3D-printing, MX keys, Loading screen game until expired ; patent trolls ;\nYes more on 3D printers: The first FDM 3D printers went on sale in 1995 for $50k. Ten years later they were $25k. Then in 2008 the patents expired. By 2011 a halfway decent printer was $1800. By 2018 $300 3D printers were available worldwide.\nI joined the community in 2010, bought my own printer in 2011, and I saw the community operating with my own two eyes. Thousands of people all over the world innovating without patents to improve the situation.\nThe idea that patents promote innovation is absurd. The primary function of the patent is to stop innovation. All those thousands of people who wanted to improve 3D printers were legally prevented from innovating while the patent was in effect.\nI remember in 2012 people on the mailing list talking about 3D printing on to a belt that could move. Literally no one on the mailing list wanted to risk infringing on the Makerbot patent for this, even though makerbot quickly stopped selling their belt printer and never sold a new one. To this day, the only belt printers that are for sale is a printer with the carriage off angle from the belt to avoid infringing the makerbot patent that hasn’t been used in years.\nThe rate of innovation would be higher without patents. We’re hurting ourselves for the benefit of those who amassed large patent portfolios so they can charge rent on old designs instead of innovating.\nImagine the health and wealth that could be generated worldwide if we let every country copy the best MRI machines we have, and all our battery factories and chip designs. That wealth would immeasurably improve the lives of people the world over, and it would come back to us in the US as new economic trading partners with their own infrastructure. Along the way they’d find 100x cost savings or better and our medical care would be cheaper.\nWe are truly shouting ourselves in the foot with patents.\n- TaylorAlexander on this hacker news thread Having spent a significant amount of time developing and patenting new technology — I think patents are both necessary, BUT need an overhaul. Particularly, I think design patents are likely positive, but I think utility patents need a different mechanism. For instance, I think the patent should work for X% of revenue of a given item is provided to the patent holder, provided they don’t reach an agreement. This would ensure anyone can use patents and the revenue would be defined. I also think a patent should be limited to 3 years without it being put to use. “Use” should have a lower bar, but effectively made or reduced revenue in some manner.\nIn reality, you can build what you and ignore patents. Patents don’t matter until you are in business and make money. At which point, if someone uses you; you’re already successful and they’ll want a slice of that success. This is the advice I’ve always been given (from investors and attorneys, off record).\n- lettergram on this hacker news thread A bounty system for patent invalidation might be nice. An idea could be:\nWhen you get a patent, you put up a bond.\nIf someone invalidates your patent, they get the bond.\nOtherwise, you get it back when your patent expires\nAn extra, funny, probably impractical idea is that when filing for the patent, you decide on the value of the bond. But, the value of the bond is the maximum payout you can be awarded for a given instance of infringement. So, you have to essentially \u0026lsquo;price\u0026rsquo; the value of your patent yourself.\n- bee_rider on this hacker news thread For the furries # No, you can not copyright your species or make a \u0026lsquo;closed\u0026rsquo; species. While I am not a lawyer, I can say with a pretty high degree of certainty that your claims of copyright over a fictional species would not stand up in court.\nHere\u0026rsquo;s some other people telling you exactly the same thing:\nLakota Wolf on Fur Affinity, Valkyrie on Furry Amino\nThe TLDR? You can\u0026rsquo;t copyright an idea.\nAlso in response to Closed Species and Copyright: I Asked a Lawyer from Riipurr\n[\u0026hellip;] if the character still resembles Doraemon enough, you can get sued for it.”\nYeah, that doesn\u0026rsquo;t mean anything. You can be sued for anything. Whether or not a judge will agree with you is a wildly different question. While, again, IANAL, I have read way too much copyright law and work with people that actively push the limits of the Digital Millennium Copyright Act (DMCA) and know enough to justify my donations to the EFF.\nIf someone were to trace your work. Definitely, that\u0026rsquo;s copying, you\u0026rsquo;re in the right, you\u0026rsquo;d win.\nIf someone were to draw what was very obviously your character with minor tweaks, again, you\u0026rsquo;d win.\nIf someone were to draw a new character, with significantly different markings, but of the same species? Probably not. Unless your species has some incredibly specific details that are in of themselves a copyrightable work that the person also copies you\u0026rsquo;re going to have a hard time. You do seem to get this as you say\nwe were mainly discussing species with distinguishable physical features and not simple hybrids like a plain cat with wings, etc. You’d have to make the cat’s silhouette unique enough to make it its own, new thing (like scarfoxes)\nBut, really? Looking at Scarfoxes I\u0026rsquo;d really question the claim that there\u0026rsquo;s enough copyrightable material here. Remember, ideas are not copyrightable. To me, this looks like you\u0026rsquo;re claiming the idea of making a fox like character with upright ears and a stiched-style face is the copyright. If the silloute were to exactly match one of these, yeah, that\u0026rsquo;s infringement, but making something that uses a similar idea is not. Similarly, you can\u0026rsquo;t copyright a word- that would be trademark, and unless you intend to file for it, you don\u0026rsquo;t get it by default like you do copyright.\nFurther down you even said\nTo be frank, I don’t quite care about the legality of all these. It’s just that people who excuse ripping off artists and others because “duuhhh laws say I can” really annoy me.\nYeah. And that\u0026rsquo;s fine. But you need to realize that when you\u0026rsquo;re trying to claim copyright of something so broad you\u0026rsquo;re saying \u0026ldquo;This idea belongs to me\u0026rdquo; seemingly unaware that you\u0026rsquo;re possibly infringing on the ability of other artists to make things that honestly weren\u0026rsquo;t inspired by your work, that just happen to be similar.\nAt the end of the day, this comment is the one that matters:\nJurisCat - Jun 20, 2019\nOne thing to consider about this, though, is that people are unlikely to sue over characters being copied because typically the legal fees would be too high to make it worth suing.\nRiipurr - Jun 20, 2019\nMost definitely! This is simply an answer to something that\u0026rsquo;s been bothering me for a while.\nTHIS. It\u0026rsquo;s often not worth your time to sue, so unless you\u0026rsquo;re damn sure that somebody is infringing - that is it\u0026rsquo;s traced, the outlines match, the colors and markings are exactly the same - you wouldn\u0026rsquo;t. That\u0026rsquo;s exactly the point of copyright. It\u0026rsquo;s in the name.\nThis is not an attack on Riipur (seriously, I don\u0026rsquo;t even know them, and their art is actually bomb as hell), rather it\u0026rsquo;s a statement to the furry community: Quit. Your. Bullshit.\nBecause this really bothers me, here\u0026rsquo;s a list of examples I find particularly offensive:\nThis species by Kataxicon, was even directly called a Wendigo, an existing mythological creature, before she renamed it to Selvageist.\nThe \u0026ldquo;Phish-Keepers\u0026rdquo; by Flnch-Face is literally just a water dragon.\nThis \u0026ldquo;Shark-Wolf\u0026rdquo; species by Alfeddy speaks for itself.\nI could literally go through deviant-art and find these all day.\nIf you do this, as an artist, you are harming the furry community by claiming ownership over an idea. It deters other artists from being able to draw things they do have the right to, and it\u0026rsquo;s really just a form of gatekeeping. I do understand the desire to claim your own work and get the value you deserve out of it, but closed species are often stepping over the line and claiming ownership of an idea, something you do not have the right to do.\nYeah, our current copyright system is 300% ultra forked for small creators. I understand. And yeah, I\u0026rsquo;d be super pissed off if some nazi-fur made a Dutch angel dragon and paraded it around.\nBut then we come to the real solution: If you want to have a closed species, you need to make sure it really does pass the bar where others would associate the species with you, that any creature, regardless of colors and sub-designs, is so obviously a derivative that everyone recognizes it (and as such could associate it with you). Examples of this are easy: Protogens, Sergals, and Dutch Angel Dragons (albeit the last one is hella debatable)\nSo next time you\u0026rsquo;re thinking about calling your Lynx-duck hybrid a closed species,\nMicrosoft Corporation. “MICROSOFT VISUAL BASIC/VISUAL C++ 6.0 ENTERPRISE EDITIONS” availabe here 3 Jun 2020 United States House of Representatives. “Monopolies and Combinations in Restraint of Trade” Title 15, United States Code, Chapter 1 3 Jun 2020 United States District Court for the District of Columbia. U.S. v Microsoft Civil Action No. 98-1232 3 Jun 2020 By 'slow' I'm primarily referring to the lack of or incompetence of consumer data protection law. GDPR is definitely a step in the right direction on this; however, that is both only for the EU and was implemented far too late. By 'fast' I had the DMCA in mind, which is wildly considered to be both overreaching and to harsh. Simultaneously, we lack real power as consumers, copyright is a game the rich can play with expensive laywers and the small creator can't afford to defend. "},{"id":260,"href":"/design/design-other/","title":"Design, Other","section":"DESIGN","content":" Other Resources # Wonderbook I try not to promote resources you have to pay to access on OpGuides. I am not paid to say this. I bought my own copy on a whim. This book is pure gold. It\u0026rsquo;s about the written word, but will help any artist just as much. It\u0026rsquo;s probably the most beautiful, lovingly hand crafted book I have ever read. It\u0026rsquo;s full of character and art and beauty and words of wisdom that will make you think about what it means to be an Artist.\nMobile Apps for Art \u0026amp; Design # Name \u0026amp; Link Description Demo/Screenshot Pixlr phone version of https://pixlr.com Fragment Add some neat geometric reflections into your art Mirror Lab ^ Spiro, Tilemaker Makes some interesting tiled patterns Easyposer, plenty of other alternatives Decent app for posing character models. Some presets and models require a $5 pro version Fraksl, Fractal Eye, MandelBrowser Neat Fractal Explorers Glitch Lab Tons of glitch effects, including some nice pixel sorting options. Euclidea Not sure this one counts. It\u0026rsquo;s a game about making various geometric shapes using circles. It\u0026rsquo;s useful for learning some art techniques, though. Working with other artists # Orions Arm Universe - Collective, shared setting for art and stories\nEvents that can help you with art # Inktober Swordvember Smaugust Photography # https://filmulator.org/about/\nFilmulator accepts raw files from cameras and simulates the development of film as if exposed to the same light as the camera\u0026rsquo;s sensor. This brings about several benefits:\nLarge bright regions become darker, compressing the output dynamic range. Small bright regions make their surroundings darker, enhancing local contrast. In bright regions, saturation is enhanced, helping retain color in bright skies, brighter skin tones, and sunsets. In extremely saturated regions, the brightness is attenuated, helping retain detail e.g. in flowers. Extremely high resolution scan of art\n"},{"id":261,"href":"/phil/duties/","title":"Duties","section":"PHIL","content":" Personal Duties # Maintaining health # Physical # Working out # Air quality # Mental # Socialized healthcare # "},{"id":262,"href":"/phil/education/","title":"Education","section":"PHIL","content":" Education # Freedom of Information # Curriculum Changes # Basic Aid # Sex Education # Individualized, shared, and student led # Faster, lower standards # Better testing # Fuck Respondus And Proctorio # The following is a (slightly edited) excerpt from an email I felt necessary to send to my professors at the start of the spring semester, 2021\nFirst and foremost, they\u0026rsquo;re just creepy. Taking tests digitally but in person is fine with me because I know those computers are secure and dedicated to the single use. Respondus and Proctorio effectively amount to spyware that students are being asked to install onto their personal devices.\nSecond, they\u0026rsquo;re both insecure. While this article (soatok.blog) written by a friend of mine focuses on Proctorio, just doing a tiny bit of digging will turn up plenty on Respondus as well. So now it\u0026rsquo;s not just spyware, but insecure spyware.\nThird, they\u0026rsquo;re a bit hyper-sensitive (Vice, voiceofsandiego.org) . I\u0026rsquo;ve read some articles where students even talking to themselves (which a lot of people do when alone and thinking hard!) have been flagged because the system thinks they\u0026rsquo;re talking to someone else in the room.\nThis sensitivity is particularly bad when you consider many of the datasets used to train the algorithms that these programs use give the systems a racial bias (technologyreview.com).\nI also worry about my strange hardware setup. If these systems are looking for \u0026lsquo;strange\u0026rsquo; I think my system with 30 USB devices, including 2 webcams, 2 mice, and 3 HID keyboards, would fit that bill. I don\u0026rsquo;t want to have to rip my setup apart to take a test.\nThey also depend on a strong internet connection. If I have a brief frame drop while my webcam is on and I\u0026rsquo;m taking a test, you may notice I freeze up and then start moving again. Responds may think I\u0026rsquo;m actively tampering with my webcam and tell you I\u0026rsquo;m doing something nefarious.\nFourth, all the options I\u0026rsquo;ve seen (Proctorio, Respondus, etc.) are primarily available for Windows only, with some having OSx clients but none of them supporting Linux, which is the OS I normally use. Sure, I can boot into Windows, but some other students may be using chromebooks or only have Linux on their system.\nFinally, there\u0026rsquo;s a bit of a normalization of spyware that education using these tools can cause. This is bad for any student, but it\u0026rsquo;s especially bad for CS and CE students who, lacking real ethics education at [My University], see this as an example. This makes software that has no right to exist look acceptable. For \u0026rsquo;normies\u0026rsquo; it just further normalizes a category of software which is heavily used for domestic abuse, a stat that while I could cite a source for, I can also tell you I\u0026rsquo;ve seen for myself multiple times.\nI understand the need for secure, online testing, but this is certainly not the right solution.\nOne of the replies to this email did sort of make my day though:\nShort answer: no, I won\u0026rsquo;t use them.\nSlightly longer answer: I won\u0026rsquo;t use them since there will be no exams or quizzes in this course.\nEven longer answer: Even if I did have exams or quizzes, there\u0026rsquo;s no way in hell I\u0026rsquo;d use that awful, awful software. My conscience and my son would never forgive me.\nOf course, this is a rabbit hole you can keep going down. You might want to keep an eye on this: Proctorio filed a SLAPP suit if you want to see them fall on their faces.\nFree College # The Following is from \u0026lsquo;Modern Universities Are An Exercise in Insanity\u0026rsquo; on The Scholar\u0026rsquo;s Stage Blog:\nThe average tenure hopeful adjunct makes $40 an hour. If you were to employ her as a private tutor at the cost of $60 an hour, and had four hours with her a week, and did that for 14 weeks (that\u0026rsquo;s the length of an average college course folks) that is about $3,400.\nWere you to employ three such professor-tutors, that would be about $10,200, or a bit over $20,000 a year. In four years you would have racked up $80,000 in costs. But this is still $30,000 less than the total for the \u0026lsquo;cost conscious\u0026rsquo; universities. It is a quarter of what you would pay for Trinity.\nRemember: this $80,000 is for private tutoring, where individual attention would give you far and away a better and more thorough education than the 300-kids-in-a-lecture-hall style of classes that dominate undergraduate education today.\nBut it can get even cheaper. Let\u0026rsquo;s say you take the general principle of group classes from the university. Say you can find four other people to take all of these other classes with you. Just four. Well, that equals out to $680 per class, or $16,000 a person for four years of classes.\nHow I Got a Computer Science Degree in 3 Months for Less Than $5000\nWe Are Sending More Foster Kids To Prison Than College (Kansas City Star)\nBullying # Invasive Technology # Apps, GoogleClassroom, etc\n60% of School Apps are Sending Student Data to Potentially High-risk Third Parties Without Knowledge or Consent According to New Research from Me2B Alliance\nSchool or Prison (Comments on Hacker News)\nPrivacy For Students\nShedding Rights At The School Gate # In 1965 a group of students wore armbands protesting the continuation of the Vietnam War. The school administration in retaliation, created a rule saying that armbands were not allowed, in effect stifling the speech of the students under threat of suspension (and, presumably, worse with repeated offense).\nThis ultimately was appealed, lawyers involved, and a significant amount of effort, made it\u0026rsquo;s way to the all the way to U.S. Supreme Court which 5-7 in the favor of the students. From Tinker v. Des Moines Independent Community School District (1969):\n\" It can hardly be argued that either students or teachers shed their constitutional rights to freedom of speech or expression at the schoolhouse gate. \" - Mr. Justice Fortas So, provided that these rights surely include the U.S. Constitution, I\u0026rsquo;d think that both the Fourth Amendment,\nThe right of the people to be secure in their persons, houses, papers, and effects, against unreasonable searches and seizures, shall not be violated, and no Warrants shall issue, but upon probable cause, supported by Oath or affirmation, and particularly describing the place to be searched, and the persons or things to be seized. - and the idea that we are innocent until proven guilty should apply. Two ideas that, even ignoring their basis in law, it\u0026rsquo;s fair to say most people agree with.\nIf this is the case, how could it possibly make sense that some public schools are doing random drug tests.\nNow, I\u0026rsquo;m not saying I want teens to be on drugs, have access to drugs, be pressured into drugs, etc. I\u0026rsquo;m not even saying that they should have the right to do drugs. Society has some interest in developing minds not being permanently hampered by drugs.\nMy point is that responsibility, and respect, are not a one-way road. If you want teens to show responsibility and respect, you have to earn it. You can\u0026rsquo;t do that with fear of punishment or even by punishment directly,\nIf we want the teens to continue having a reason to not do drugs as an adult, to not either have a wild, self-destructive phase when they suddenly gain more freedom or be totally dependent and never live their own lives then we need to trust them.\nSo, a natural argument here may be \u0026ldquo;Trust but Test!\u0026rdquo;, to which the obvious retort is that if you test, it\u0026rsquo;s obvious you don\u0026rsquo;t trust - but this could be argued endlessly. Instead, I\u0026rsquo;ll bring up a question similar to one many pro-choice arguments propose:\nIf someone does break the rules, how will the punishment help them?\nPresumably, teens doing drugs are in need of help, so, let\u0026rsquo;s look at that above link, what are the consequences:\nIf a student tests positive, they cannot compete in extracurricular activities for 10 to 60 days,\nOkay, but a parent should be able to opt-out their kid if they don\u0026rsquo;t agree with the rule, right? right?\n[\u0026hellip;] parents must sign a consent form, allowing their student to be drug tested to be able to participate in sports, competitive extracurricular activities, and park at the school\nAt this point I could talk about statistics, how it\u0026rsquo;s more likely for people of color to be in homes where marijuana use is common, how there are links between socioeconomic status, drug use, depression, anxiety, domestic abuse, etc. I don\u0026rsquo;t think I need to pull those up for it be common sense that at least some teens will being drugs as an escape.\nYou know what else teen\u0026rsquo;s do as an escape from their stressors?\nPlay sports.\nSo fucking naturally, when a teen is already struggling, turning to drugs, let\u0026rsquo;s take away one of their freedoms and ways they unwind. Punish them. Make them an outcast and paint them with an \u0026ldquo;drug offender\u0026rdquo; label.\nIn the course of 25 years the rate of teen deaths from suicide is up 35%, predominately young men who already feel like they don\u0026rsquo;t have a support group.\nThe mental health pandemic is out of control and we wonder why? Maybe it\u0026rsquo;s because we simultaneously want to take kids autonomy away, deprive them of natural stress outlets (see Play Deprivation Is A Major Cause of the Teen Mental Health Crisis) and then we just make the cycle worse anytime they final reach a breaking point. Prescribing the legal drugs instead of addressing the issue, giving them some autonomy, trust, and support.\nWe should be helping kids up when they fall, and watching them run to their goals - not holding them down and making them watch their step.\n"},{"id":263,"href":"/music/effects/","title":"Effects","section":"Musics","content":" Audio Effects # This chapter is broken up into subsections, check the menu and it should have expanded! Please Read This, for real # Automation Lanes Are Your Friend # A lot of audio effects boil down to automating some simple parameter. Sometimes you may not actually need a dedicated effect and can instead get by with using Automation Lanes (YouTube, once upon a synth) in your Digital Audio Workstation (DAW)\nTalk To Your Doctor About Gear Acquisition Syndrome # Don\u0026rsquo;t get too deep into gear envy. Effects are awesome and it\u0026rsquo;s tempting to either want to collect them and hoard them like a happy dragon on a pile of gold or feel like you can\u0026rsquo;t make music without that one perfect effect. Unless you\u0026rsquo;re falling down the rabbit hole of a DAWless setup and have a very limited amount of gear, you can almost certainly find something digital for free that will fill the need, or already have something. Most DAWs come with an impressive amount of built-in effects: Use these first! They\u0026rsquo;re usually lighter on your CPU and still sound really good.\nBearded Dragon photo by Karl JK Hedin, pedal images ripped from Modular Grid, which in turn stole them from around the internet It\u0026rsquo;s All About Trying New Ideas Quickly # Immediately contradicting myself though, don\u0026rsquo;t undervalue workflow either. In my experience, making music depends on a really quick brain to input device feedback loop. Being able to turn a physical knob and mash physical keys will often lead to better results if only because you\u0026rsquo;re able to try things faster and try things by physically interacting with something that you may not have thought of otherwise. It\u0026rsquo;s why guitars, MPE keyboards, and Eurorack are so great: they all give you a crazy amount of control and expression that is literally at your fingertips. The brain to input interface there is just so much better.Find a happy middle ground. This often means getting some basic effects and gear that doesn\u0026rsquo;t actually let you do anything new, but instead gives you a faster way of working with it that may open your mind to new possibilities.\nWith that out of the way, feel free to dive into the list of effects!\nWhat order should my effects be in? # That\u0026rsquo;s up to you!\nFor guitar pedals, a pretty typical order looks like this,\ngraph LR A(\"Signal In\") --\u003e B[\"Compression\"] B --\u003e C[\"Distortion/Drive/Fuzz\"] C --\u003e D[\"Delay\"] D --\u003e E[\"Some modulations (Chorus, Tremmelo, etc.)\"] E --\u003e F[\"Reverb\"] F --\u003e H[\"Other modulations (Phaser, Wah, etc)\"] H --\u003e Z(\"Signal Out\") and there are a few reasons for this.\nIf you put a reverb before your distortion, it tends to get a bit muddy. If you put delay after your reverb, you\u0026rsquo;re delaying the reverb tails, not adding reverb to the dealy tails (which is fine, but weird) etc.\nSo, I would consider the above order pretty \u0026ldquo;normal\u0026rdquo; but I really cant stress this enough: THERE ARE NO RULES\nIf you want to put reverb after distortion, knock yourself out. Hell, almost every time I\u0026rsquo;ve done so I\u0026rsquo;ve fallen in love with the result. More than anything you should try different orders to understand why this order is common and figure out where you can bend it.\nNeat tricks with effects # My first WET / DRY / WET Guitar Pedal Rig (YouTube, Mark Johnston)\nHow to Experiment with your effects pedal signal chain (MusicRadar)\n"},{"id":264,"href":"/engineering/engineering/","title":"Engineering","section":"Engineering","content":" Hey There! My name is Vega, and I\u0026rsquo;m glad you\u0026rsquo;re here! I know there are plenty of tutorials and ways to learn online, be it on YouTube, SkillShare, or online classes provided for free by various universities. The difference here is I\u0026rsquo;ve tried to cut out the boring parts, make things a bit more entertaining than a textbook, and drenched the content in my own personal opinion that has been built up by my experiences. My views on things like what programming languages are bad or what hardware you should buy to learn on will be expressed directly and bluntly. This isn\u0026rsquo;t to say I won\u0026rsquo;t explain my reasoning, just that I\u0026rsquo;m not going to be apologetic when I say PHP, Java, Arduino (at least the 328p), and Windows 10 are trash - though I will still likely talk about all of these things.\nI by no means expect you to share my same biases, in fact, I hope you do not and that at one point or another we can discuss why you think I am wrong, as that is the only way I can learn.\nSo, What is this? # To put it poetically, this is a guide for understanding the power the electron has in our lives, as well as a love letter to the beautiful math and science that are used for computer and electrical engineering.\nElectricity, digital logic, code, computers, embedded systems - these things are all around us every second of every day. As I type this, I\u0026rsquo;m wearing a smartwatch, I have a smartphone in my pocket, and I\u0026rsquo;m using a desktop computer. Each of these devices contains dozens of smaller computers, power supplies, wireless interfaces, etc. My goal with this is to teach you how all of this works and how to work with it, from transistors to high level code to useful user applications.\nA beam of electrons deflected in a circle by a magnetic fieldMarcin Białek, CC BY-SA 4.0, via Wikimedia Commons While I\u0026rsquo;m at it, I also want to inspire you to see beauty in these devices and the algorithms that make them run. For example, the background for this page is running a simulation of Physarum polycephalum or slime mold. Beyond being beautiful, the simulation is actually useful because the way slime mold looks for food happens to be a very efficient way of finding the shortest path(1) visiting many points - a problem I\u0026rsquo;m sure the developers of Google Maps would tell you is very important!\nI will be assuming you are of reasonable technical ability already- that is I assume you can proficiently use most types of generic software, navigate a file manager, etc. Furthermore, while I will go into high level math, chemistry, and physics, I don\u0026rsquo;t think they\u0026rsquo;re strictly needed for every reader as knowing these things is typically not actually useful in the daily life of someone who works on any of this beyond those that are doing cutting edge research or are planning to teach. In either of those cases, you should actually go to college instead of reading this. For everyone else, welcome. This site aims to save you going to college, getting hundreds of thousands of dollars in debt, and taking classes full of useless information you will inevitably forget and for which employers don\u0026rsquo;t care about to begin with.\nFollowing along will require a few things. The first of which is dedication and time. If you don\u0026rsquo;t have the desire to put in at least a little bit of work there is simply no way I can help, that said, if you\u0026rsquo;re reading this instead of watching Netflix I believe that\u0026rsquo;s already proof enough you want to learn. Next is hardware and software, namely you\u0026rsquo;ll be needing a few development boards and Linux, but we\u0026rsquo;ll get into those with time.\nBefore we get started, there are a few things I recommend reading and watching first. These should give you a bit of an overview of some of the things that will be covered, to give you at least a tiny bit of familiarity as each concept comes up.\nWhile I will be covering a lot more than just Computer Science, I recommend this overview of the topics covered in CS: Map of Computer Science by Dominic Walliman\nIf you want to go through a really gentle introduction to a lot of what this guide will cover, This Crash Course: Computer Science series on YouTube is pretty good too.\nSlime mold code modified from TheBugStudio\u0026rsquo;s Code on CodePen Well, sort of. The way it works doesn't ensure you're getting the shortest path, but then, doing so would require checking every possible cobination, which is the extremely inefficent task this simulation helps avoid "},{"id":265,"href":"/phil/fallacies/","title":"Fallacies","section":"PHIL","content":" Logical Fallacies (and a bit more) # If you\u0026rsquo;ve been on the internet for more than about a quarter of a second, you\u0026rsquo;ve likely been accused of a whole host of logical fallacies. Unfortunately, most people really don\u0026rsquo;t understand what they\u0026rsquo;re saying and often use a lot of these incorrectly. On the other hand, you also likely encounter politicians people using these fallacies on a regular basis as well, and it\u0026rsquo;s nice to be able to call them out on it. This page is going to cover a fair amount of the most common and attempt to give you examples of when they apply and when they don\u0026rsquo;t.\nAlmost all of the content on this page is ripped from Wikipedia, but there\u0026rsquo;s some YouTube videos and thoughts of my own in here too.\nIf you\u0026rsquo;d like something more visual, I recommend reading this Illustrated Book of Bad Arguments.\nArgumentum ad populum # Argumentum ad populum (Wikipedia) also know as the \u0026lsquo;Bandwagon fallacy\u0026rsquo;\nIn argumentation theory, an argumentum ad populum (Latin for \u0026ldquo;appeal to the people\u0026rdquo;) is a fallacious argument that concludes that a proposition must be true because many or most people believe it, often concisely encapsulated as: \u0026ldquo;If many believe so, it is so\u0026rdquo;.\n[\u0026hellip;]\n\u0026ldquo;Everyone likes The Beatles and that probably means that they didn\u0026rsquo;t have nearly as much talent as , which didn\u0026rsquo;t sell out.\u0026rdquo; (source)\n- Wikipedia Argument to moderation # Argument to moderation (Wikipedia)\nInflation of conflict – arguing that, if experts in a field of knowledge disagree on a certain point within that field, no conclusion can be reached or that the legitimacy of that field of knowledge is questionable.\nFor example, if most of science says there\u0026rsquo;s 31 elementary particles, but some fringe scientists claim there are 42, that doesn\u0026rsquo;t mean the answer has to be somewhere in between.\nSimilarly, if most people think the Earth is flat, and some small fringe group of heathens think the earth is round, that doesn\u0026rsquo;t make the popular opinion right.\nSlippery slope # Slippery slope (Wikipedia)\n\u0026ldquo;If we let the gays marry, what\u0026rsquo;s next, letting people marry horses!?\u0026rdquo;\nThe Slippery-er slope # Not everything is a slippery slope. If there is actual evidence that one action may lead to future, worse action there is a good reason to take it seriously:\n\u0026ldquo;If we allow the government to spy on suspected terrorists without a warrant, they may spy on everyone\u0026rdquo;\nBegging the Question # Begging the Question (Wikipedia)\nThis is just a type of circular reasoning, think claims like\n\u0026ldquo;Chocolate is an aphrodisiac because it makes people horny\u0026rdquo;\nWell, no, you just restated the definition of aphrodisiac. That\u0026rsquo;s how most \u0026lsquo;begging the question\u0026rsquo; works, by using the definition of a word to support a claim.\nCherry Picking # Cherry Picking (Wikipedia)\nCherry picking, suppressing evidence, or the fallacy of incomplete evidence is the act of pointing to individual cases or data that seem to confirm a particular position while ignoring a significant portion of related and similar cases or data that may contradict that position. - Wikipedia Sampling Bias # Sampling Bias (Wikipedia)\nIn statistics, sampling bias is a bias in which a sample is collected in such a way that some members of the intended population have a lower or higher sampling probability than others. It results in a biased sample, a non-random sample of a population (or non-human factors) in which all individuals, or instances, were not equally likely to have been selected. - Wikipedia Often, studies are WEIRD, that is people from a Western, Educated, Industrialized, Rich, and Democratic background are surveyed, this is a type of sampling bias, as the answers to a question might be different depending on if people from the US are surveyed or if people from Haiti are surveyed. Of course, the sampling bias can be much less obvious than that:\nSay you wanted to study rates of COVID spread in a community, if you\u0026rsquo;re only looking at the population of people that go to get tested, the infection rate will look artificially high as if somebody doesn\u0026rsquo;t have symptoms why would they go get tested?\nSurvivorship Bias # Survivorship Bias (Wikipedia)\nMcGeddon, CC BY-SA 4.0, On Wikipedia Survivorship bias or survival bias is the logical errorof concentrating on the people or things that made it past some selection process and overlooking those that did not, typically because of their lack of visibility. This can lead to some false conclusions in several different ways. It is a form of selection bias.\nFor example, if three of the five students with the best college grades went to the same high school, that can lead one to believe that the high school must offer an excellent education when, in fact, it may be just a much larger school instead. The question cannot be answered without looking at the grades of all the other students from that high school, not just the ones who made the top-five selection process.\n- Wikipedia Sunk Cost # Escalation of commitment is a human behavior pattern in which an individual or group facing increasingly negative outcomes from a decision, action, or investment nevertheless continues the behavior instead of altering course. The actor maintains behaviors that are irrational, but align with previous decisions and actions. - Wikipedia Basically, people get determined and don\u0026rsquo;t want to feel like their prior time or money was wasted.\nPareto Principle # Pareto Principle (Wikipedia)\nThe Pareto principle states that for many outcomes roughly 80% of consequences come from 20% of the causes (the “vital few”). Other names for this principle are the 80/20 rule, the law of the vital few, or the principle of factor sparsity.\n[\u0026hellip;]\nMathematically, the 80/20 rule is roughly described by a power law distribution (also known as a Pareto distribution for a particular set of parameters, and many natural phenomena have been shown to exhibit such a distribution. It is an adage of business management that \u0026ldquo;80% of sales come from 20% of clients\u0026rdquo;.\n- Wikipedia The Pareto Principle is derived from Zipf\u0026rsquo;s Law (Wikipedia),\nZipf\u0026rsquo;s law is an empirical law formulated using mathematical statistics that refers to the fact that many types of data studied in the physical and social sciences can be approximated with a Zipfian distribution, one of a family of related discrete power law probability distributions. - Wikipedia Ad hominem # Ad hominem (Wikipedia)\nTypically this term refers to a rhetorical strategy where the speaker attacks the character, motive, or some other attribute of the person making an argument rather than attacking the substance of the argument itself. This avoids genuine debate by creating a diversion to some irrelevant but often highly charged issue. The most common form of this fallacy is \u0026ldquo;A makes a claim x, B asserts that A holds a property that is unwelcome, and hence B concludes that argument x is wrong\u0026rdquo;. - Wikipedia For example \u0026ldquo;Bob says that being gay is okay, but Bob is an atheist, so clearly he\u0026rsquo;s wrong\u0026rdquo;\nAppeal to authority # Appeal to authority (Wikipedia)\n\u0026ldquo;God said it is true, so it is\u0026rdquo;\n\u0026ldquo;If it\u0026rsquo;s illegal it\u0026rsquo;s immoral\u0026rdquo;\nI\u0026rsquo;m entitled to my opinion # I\u0026rsquo;m entitled to my opinion (Wikipedia)\nI\u0026rsquo;m entitled to my opinion or I have a right to my opinion is a logical fallacy in which a person discredits any opposition by claiming that they are entitled to their opinion. The statement exemplifies a red herring or thought-terminating cliché. The logical fallacy is sometimes presented as \u0026ldquo;Let\u0026rsquo;s agree to disagree\u0026rdquo;. Whether one has a particular entitlement or right is irrelevant to whether one\u0026rsquo;s assertion is true or false. Where an objection to a belief is made, the assertion of the right to an opinion side-steps the usual steps of discourse of either asserting a justification of that belief, or an argument against the validity of the objection. Such an assertion, however, can also be an assertion of one\u0026rsquo;s own freedom or of a refusal to participate in the system of logic at hand. - Wikipedia This fallacy, is a bit different from the others as it\u0026rsquo;s not so much a breaking of logical rules so much as willful ignorance and stupidity. It\u0026rsquo;s often used to end arguments to avoid further conflict, which can be a good thing, but other times it\u0026rsquo;s used outright to stop decent and encourage people to stick to views without letting them be challenged, which is incredibly dangerous. It\u0026rsquo;s exactly what lets hate like homophobia and bad ideas, like anti-vax, spread.\nStraw man # Straw man (Wikipedia)\nThe straw man fallacy occurs in the following pattern of argument:\nPerson 1 asserts proposition X. Person 2 argues against a superficially similar proposition Y, falsely, as if an argument against Y were an argument against X. [for example]\n[Person 1]: We should relax the laws on beer.\n[Person 2]: No, any society with unrestricted access to intoxicants loses its work ethic and goes only for immediate gratification.\n- Wikipedia Whataboutism \u0026amp; Moving the Goalposts # Whataboutism (Wikipedia) \u0026amp; Moving the Goalposts (Wikipedia)\nWhataboutism, also known as whataboutery, is a variant of the tu quoque logical fallacy that attempts to discredit an opponent\u0026rsquo;s position by charging them with hypocrisy without directly refuting or disproving their argument. - Wikipedia Moving the goalposts is an informal fallacy in which evidence presented in response to a specific claim is dismissed and some other (often greater) evidence is demanded. That is, after an attempt has been made to score a goal, the goalposts are moved to exclude the attempt. The problem with changing the rules of the game is that the meaning of the result is changed, too. - Wikipedia False Dichotomy/Dilemma # False Dilemma (Wikipedia)\nA false dilemma (sometimes called false dichotomy) is a type of informal, correlative-based fallacy in which a statement falsely claims or assumes an \u0026ldquo;either/or\u0026rdquo; situation, when in fact there is at least one additional logically valid option. - Wikipedia \u0026ldquo;Either you\u0026rsquo;re against abortion or you love murdering babies!\u0026rdquo;\n\u0026hellip; or you\u0026rsquo;re just pro-choice but still don\u0026rsquo;t want anyone to be in a situation where the need an abortion in the first place.\nAppeal to Ignorance # Argument from Ignorance (Wikipedia), hand shortened version below:\nArgument from ignorance also known as appeal to ignorance (in which ignorance represents \u0026ldquo;a lack of contrary evidence\u0026rdquo;), is a fallacy in informal logic. It asserts that a proposition is true because it has not yet been proven false or a proposition is false because it has not yet been proven true.\n[\u0026hellip;]\nFalse positives\nOften seen in anecdotal evidence, superstitions, correlation-causation fallacies, and experiments with small sample size\n\u0026ldquo;I took a placebo pill and now my symptoms are completely gone. The placebo cured my symptoms.\u0026rdquo; Absence of evidence\nThese examples contain or represent missing information.\nStatements that begin with \u0026ldquo;I can\u0026rsquo;t prove it but \u0026hellip;\u0026rdquo; are often referring to some kind of absence of evidence. False negatives\nThese examples have the potential for \u0026ldquo;false negative\u0026rdquo; results.\nWhen the doctor says that the test results were negative (a month later the test is positive). Evidence of absence\nThese examples contain definite evidence that can be used to show, indicate, suggest, infer or deduce the non-existence or non-presence of something.\nOne very carefully inspects the back seat of one\u0026rsquo;s car and finds no adult-sized kangaroos. Arguments from ignorance\nDraws a conclusion based on lack of knowledge or evidence without accounting for all possibilities\n- Wikipedia The Texas Sharpshooter # Texas Sharpshooter Falacy (Wikipedia)\nThe Texas sharpshooter fallacy is an informal fallacy which is committed when differences in data are ignored, but similarities are overemphasized. From this reasoning, a false conclusion is inferred. [\u0026hellip;] A Swedish study in 1992 tried to determine whether power lines caused some kind of poor health effects. The researchers surveyed persons living within 300 meters of high-voltage power lines over a 25-year period and looked for statistically significant increases in rates of over 800 ailments. The study found that the incidence of childhood leukemia was four times higher among those who lived closest to the power lines, and it spurred calls to action by the Swedish government.[6] The problem with the conclusion, however, was that the number of potential ailments, i.e., over 800, was so large that it created a high probability that at least one ailment would exhibit the appearance of a statistically significant difference by chance alone, a situation known as the multiple comparisons problem. Subsequent studies failed to show any association between power lines and childhood leukemia. - Wikipedia Dog Whistle # In politics, a dog whistle is the use of coded or suggestive language in political messaging to garner support from a particular group without provoking opposition. - Wikipedia Offensive political dog whistles: you know them when you hear them. Or do you?\nQueerbaiting # Queerbaiting is a marketing technique for fiction and entertainment[6] in which creators hint at, but then do not actually depict, same-sex romance or other LGBTQ representation. - Wikipedia Quoting Out Of Context # Quoting out of Context (Wikipedia)\nQuoting out of context (sometimes referred to as contextomy or quote mining) is an informal fallacy in which a passage is removed from its surrounding matter in such a way as to distort its intended meaning. [\u0026hellip;] One of the most familiar examples of contextomy is the ubiquitous \u0026ldquo;review blurb\u0026rdquo; in advertising. The lure of media exposure associated with being \u0026ldquo;blurbed\u0026rdquo; by a major studio may encourage some critics to write positive reviews of mediocre movies. However, even when a review is negative overall, studios have few reservations about excerpting it in a way that misrepresents the critic\u0026rsquo;s opinion. - Wikipedia Occam\u0026rsquo;s Razor # Occam\u0026rsquo;s Razor (Wikipedia)\n\" The simplest explanation is usually the right one \" - William of Ockham, but not really? Okay, so technically, this is a misquote. See the Wikipedia article: Occam\u0026rsquo;s Razor (Wikipedia) for more information on this. Regardless, this is what everybody means when they talk about Occam\u0026rsquo;s Razor There\u0026rsquo;s a bit of a problem: \u0026ldquo;simplest\u0026rdquo; here is a bit crude. Does it mean simplest to describe or simplest to justify? For example, saying \u0026lsquo;God created the universe\u0026rsquo; is very easily described, but to justify requires the proof that a supreme being exists, that it\u0026rsquo;s a singular supreme being, and if you mean the Christian God, that it\u0026rsquo;s that God specifically, then that being didn\u0026rsquo;t exist prior to the universe. You get the idea.\nIf the question is more mundane, like \u0026ldquo;where is my phone?\u0026rdquo; the answer of \u0026lsquo;in your pocket\u0026rsquo; is both much easier to describe and much easier to justify than \u0026lsquo;In the 5th dimension which may only be entered by accidental entry from between the couch cushions on the eve of a solstice\u0026rsquo;.\nBasically, while you can\u0026rsquo;t rule out complex answers entirely, if there\u0026rsquo;s an unknown you should assume the simplest answer.\nTragedy of the commons # Tragedy of the commons (Wikipedia)\nThe tragedy of the commons is a situation in a shared-resource system where individual users, acting independently according to their own self-interest, behave contrary to the common good of all users by depleting or spoiling the shared resource through their collective action. - Wikipedia The easiest way to see this is to talk about an example, so let\u0026rsquo;s assume the case of two criminals, arrested by the police and some weird judicial system where the following is possible:\nThe police don\u0026rsquo;t have enough evidence to get a large sentence on either perp, if neither fesses up, each gets 2 years in prison. But, they have an idea, they offer either of the criminals to only serve 1 year if they rat out the other, and then the other serves 10 years. If they both rat out each other, then both serve 10 years. Both criminals are given the same offer, but neither is given a chance to coordinate. Each of them, acting in their own self interest, would only have to serve 1 year, but if both do, each has to serve 10. If they chose to rat each other out, that\u0026rsquo;s an example of the tragedy of the commons.\nThis scales up too, everything from CO2 emissions causing climate change to vaccines can be seen as cases of this.\nVaccines do have some side effects, usually just a low fever and a sore arm, and very rarely something serious. It\u0026rsquo;s just that by having a high enough population vaccinated we can be safe from much more likely threats like polio. Vaccinate your fucking kids, Karen. Don\u0026rsquo;t contribute to the tragedy of the commons. Self-Censorship # Self-Censorship (Wikipedia)\nSelf-censorship is the act of censoring or classifying one\u0026rsquo;s own discourse. This is done out of fear of, or deference to, the sensibilities or preferences (actual or perceived) of others and without overt pressure from any specific party or institution of authority. Self-censorship is often practiced by film producers, film directors, publishers, news anchors, journalists, musicians, and other kinds of authors including individuals who use social media.\nIn authoritarian countries, creators of artworks may remove material that their government might find controversial for fear of sanction by their governments. In pluralistic capitalist countries, repressive judicial lawmaking can also cause widespread \u0026ldquo;rivercrabbing\u0026rdquo; of Western media.\n- Wikipedia Identity Politics: # Source: https://www.instagram.com/p/CEpI20ps5wE/ Doomscrolling # Doomscrolling (Wikipedia)\nDoomscrolling is the act of consuming a large quantity of negative online news, typically without pause, to the detriment of the mental health of the person consuming it. Essentially, if the news is bad or depressing, one can \u0026lsquo;doomscroll\u0026rsquo; it. - Wikipedia Chilling Effect # Chilling Effect (Wikipedia)\nIn a legal context, a chilling effect is the inhibition or discouragement of the legitimate exercise of natural and legal rights by the threat of legal sanction.\nA lawsuit initiated specifically for the purpose of creating a chilling effect may be called a Strategic Lawsuit Against Public Participation (\u0026ldquo;SLAPP\u0026rdquo;).\n- Wikipedia Streisand Effect # Streisand Effect (Wikipedia)\nThe Streisand effect is a social phenomenon that occurs when an attempt to hide, remove, or censor information has the unintended consequence of further publicizing that information, often via the Internet. - Wikipedia Creeping Normality and the Overton Window # Creeping normality (also called gradualism, or landscape amnesia) is a process by which a major change can be accepted as normal and acceptable if it happens slowly through small, often unnoticeable, increments of change. The change could otherwise be regarded as objectionable if it took place in a single step or short period. - Wikipedia The Overton window is the range of policies politically acceptable to the mainstream population at a given time. It is also known as the window of discourse. The term is named after Joseph P. Overton, who stated that an idea\u0026rsquo;s political viability depends mainly on whether it falls within this range, rather than on politicians\u0026rsquo; individual preferences. - Wikipedia Hanlon\u0026rsquo;s Razor # Hanlon\u0026rsquo;s Razor (Wikipedia)\n\" Never attribute to malice that which is adequately explained by stupidity \" - Robert J. Hanlon Dunning-Kruger Effect # The Dunning–Kruger effect is a cognitive bias in which people with low ability at a task overestimate their ability. It is related to the cognitive bias of illusory superiority and comes from people\u0026rsquo;s inability to recognize their lack of ability. - Wikipedia Basically, some people assume they know things when they really don\u0026rsquo;t.\nThe Ship of Theseus # In the metaphysics of identity, the ship of Theseus is a thought experiment that raises the question of whether an object that has had all of its components replaced remains fundamentally the same object. - Wikipedia Think of The Children # There is a whole class of fallacies in this group, as appeals to emotions like fear, flattery, being part of the in group, loyalty, etc. Covering all of them seems a bit excessive, so instead, just know to look out for any appeals to emotion that attempt to stand in for actual evidence. Think of The Children (Wikipedia)\n\u0026ldquo;Think of the children\u0026rdquo; (also \u0026ldquo;What about the children?\u0026rdquo;) is a cliché that evolved into a rhetorical tactic. Literally, it refers to children\u0026rsquo;s rights (as in discussions of child labor). In debate, however, it is a plea for pity that is used as an appeal to emotion, and therefore it becomes a logical fallacy. - Wikipedia Basically, people might use protecting children an excuse to ban all porn or some other extreme measure under the assumption that if you try to disagree with their view you\u0026rsquo;ll look awful because you\u0026rsquo;re not thinking of the children.\nSchrodinger\u0026rsquo;s Douchebag # Cunningham\u0026rsquo;s Law # Cunningham\u0026rsquo;s Law states, \u0026ldquo;the best way to get the right answer on the internet is not to ask a question; it\u0026rsquo;s to post the wrong answer.\u0026rdquo; (source) - Cunningham\u0026rsquo;s Law on Wikipedia Fractal Wrongness # Fractal wrongness is the state of being wrong at every conceivable scale of resolution. That is, from a distance, a fractally wrong person\u0026rsquo;s worldview is incorrect; and furthermore, if you zoom in on any small part of that person\u0026rsquo;s worldview, that part is just as wrong as the whole worldview.\n[\u0026hellip;]\nFractally wrong people are often immune to the stopped clock rule because they are not exactly stopped clocks. More like clocks losing a random number of seconds a day, in the wrong time zone of the wrong planet, in the wrong solar system.\n- Rational Wiki Other Resources # Logicalfallacies.org covers many of these same fallacies, plus a few I didn\u0026rsquo;t touch on, and is hugely better written. Give it a look\nRelated-ish:\nBenford\u0026rsquo;s Law (Wikipedia)\nhttp://www.loper-os.org/bad-at-entropy/manmach.html\n"},{"id":266,"href":"/phil/foriegn/","title":"Foriegn","section":"PHIL","content":" Foreign Involvement # \" The Ministry of Peace concerns itself with war, the Ministry of Truth with lies, the Ministry of Love with torture and the Ministry of Plenty with starvation \" - George Orwell, 1984 In the US, we have the Department of Defense - the DOD. Whenever I think about that name, I can\u0026rsquo;t help but think about that quote from 1984. The Department of Defense is primarily concerned with war.\nBut, literally Orwellian naming aside, what does it matter? Are there any just wars? And even beyond war, what should the role of a nation be in an international community? Should each nation look after their own first, should nations intervene when rights are not respected? Should we try to feed starving children across the world? How do we tackle climate change as underdeveloped nations start to industrialize? Should borders be open or rigidly closed - both for trade and for residence?\nWar \u0026amp; Defense # Just war theory # Denuclearization # Localization # Falsehoods Programmers Believe About Name The Problem with Time \u0026amp; Timezones (YouTube) Google Maps is Different in Other Countries (YouTube) US Tampering in Foreign Affairs # This embeddable version of this video is a re-upload. The original, from \u0026lsquo;Second Thought\u0026rsquo; on YouTube, is here but has been age restricted and has been shadow-banned by YouTube. The entire situation just proves the point, here\u0026rsquo;s the video creator\u0026rsquo;s twitter thread on the issue (click to see the entire thread)\nThis is going to be an important thread. We need to talk about YouTube, and private media operations in general\nThis thread was prompted by YouTube’s shadow ban of my new video, but that’s really just a minor inconvenience. The whole story involves YouTube, the DHS, and the CIA\n\u0026mdash; JT Chapman (@_SecondThought) November 28, 2020 But to me, the stand-out tweet is this one:\nThat video earned me a visit from the DHS, who asked me about \u0026quot;Anti-American sentiment\u0026quot; in my videos. That was the first time I realized, wow, I guess people really are monitoring what we say and are willing to try to intimidate us, even if what we say is objectively true.\n\u0026mdash; JT Chapman (@_SecondThought) November 28, 2020 Archive.org link to thread "},{"id":267,"href":"/phil/idea-labs/","title":"Idea Labs","section":"PHIL","content":" Idea Labs # This page is heavily inspired by Idea Labs and Echo Chambers, which is Part 8 of The Story Of Us. It\u0026rsquo;s a long read, but worth the time- you could read just the one part; however, I think it will be harder to understand without the previous 7 parts as context. Rather than try to repeat here what is put so well there, I\u0026rsquo;m going to recommend you read at least that section and come back here.\nRead it? Cool.\nThe big take away is free speech \u0026amp; spread of ideas = good, echo chambers = bad. And, like, yeah? That\u0026rsquo;s pretty hard to disagree with. However, it reminds me of the often repeated line \u0026ldquo;There\u0026rsquo;s no such thing as a stupid idea!\u0026rdquo; and that quote really, really drives me nuts.\nUnfortunately, some ideas, even when we can make well thought out arguments for why the idea itself is absolute bunk and the supposed evidence for their idea is also bunk, still persist. Obviously, this is on a spectrum: Flat Earthers? Idiots. Those that think there has been extraterrestrial life on earth before? Maybe worth listening to. Those that think aliens built the pyramids and that someday they\u0026rsquo;ll send beams of light into the sky to call down our gray skinned, big headed overlords to provide us with infinite energy, end hunger, and cure cancer? Back to idiots. Extraordinary claims require extraordinary evidence and all that jazz.\nSo why does it matter if someone has a stupid idea:\nStupid ideas keep us from the truth- if a huge number of people believe the earth is flat, that\u0026rsquo;s a huge number of people that think something that is demonstrably false Stupid ideas can hurt people - Anti-vax, racism, sexism, etc. So, what should we do?\nGenerally, I\u0026rsquo;ve seen two ways to go about dealing with stupid ideas:\nDebate them, make them look dumb De-platfrom them, don\u0026rsquo;t let the idea spread Both have the same issue though: they spread the idea further\nDebating them gives them a platform and by acknowledging their idea, makes it look like a legitimate option with the same standing as the idea that\u0026rsquo;s not a load of shit. Think climate change, flat-earth, or creationism debates. It also exposes the idea to more people. De-platforming makes the echo chamber even stronger as the people with the idea will form their own communities instead of talking in the public where they can be called out. Plus, it often makes these people feel more confident in their ideas because \u0026ldquo;The public is scared of the truth!\u0026rdquo; or something alone those lines. Deplatforming may make the idea less discoverable; however, it does make it much easier for someone on the tipping point of falling in to get sucked in and stay there. So, which is the right answer?\nThis is philosophy. There is no right answer. Ideally, we\u0026rsquo;d actually be able to convince the idiots to stop being idiots, but historically that doesn\u0026rsquo;t really work. Deplatforming can work, but it can lead to extremism on both sides, and can be abused. It\u0026rsquo;s a bit of a nuclear option, and if we use it wrong, it can hurt people. As much as I, personally, am for deplatforming anti-vax talk show hosts, I\u0026rsquo;ve also seen the havoc caused by \u0026ldquo;the other side\u0026rdquo; getting payment processors and big websites to stop supporting sexual content, hurting sex workers.\nThere\u0026rsquo;s a lot of debate around this too, Mozilla published \u0026ldquo;We Need More than Deplatforming\u0026rdquo; which received heavy criticism on Hacker News. Meanwhile, A Heretics Guide to Deplatforming resulted in mixed, but some pro-moderation comments on Hacker News. Ultimately, it boils down to two age-old questions about free speech:\nShould speech that harms others be \u0026ldquo;free\u0026rdquo;? Should a given venue/platform be required to let you say whatever you want there? The answer to 2. seems to be of more importance again, now, in the internet era. Strangely, It seems this has largely been decided for physical spaces, where if I walk into a business and start going on about how \u0026ldquo;all these damn ░░░░░ keep making ░░░░░ worse for us and they should go back where they came from!\u0026rdquo; I\u0026rsquo;m going to get kicked out, and everyone is fine with that. Meanwhile, if Facebook or Twitter kick me out, some people will argue I have a right to be there. Personally, I think this is a load of shit. If you want to post your hate, go post it on your own site. Nobody is obligated to give you the platform on which to preach your shit from. I think the larger argument comes when lower-level infrastructure providers choose whether or not you can use their services for given speech. Should Amazon have the right to say \u0026ldquo;If you post hate speech we won\u0026rsquo;t let you host your website on AWS?\u0026rdquo; (Amazon Web Services is a common server platform on which you could put your own, custom made website). On one hand, Amazon is a private business and should be able to refuse service, on the other hand, there\u0026rsquo;s a limited number of hosting providers that could allow you to deploy a large website with lots of traffic. Is this the same as limiting more traditional infrastructure, like roads, to only those we think deserve a voice?\nAs for 1. - IMHO, yeah, free speech should probably be free from government retaliation, even if it\u0026rsquo;s hate speech. Otherwise, there\u0026rsquo;s a huge risk of abuse and the loss of the free exchange of good ideas. This is my opinion though, and this opinion is deserving of a page in this chapter of OpGuides all its own. Suffice to say, there are good arguments on both sides. Obviously, some limits should apply no matter what- the \u0026ldquo;don\u0026rsquo;t yell fire in a crowded theater\u0026rdquo; rules still apply.\nAll of that said, to some extent, deplatforming is necessary because a lot of people with shit ideas know how to spread them in a way that prevents even logical debate from refuting it. Largely, this is done by using one of a handful of tactics:\nBy spewing shit faster than the opponent can respond with corrections for - that is Never play defense (YouTube, The Alt-Right Playbook by Innuendo Studios) By moving the goalpost or change the topic subtly - that is Control the conversation (YouTube, The Alt-Right Playbook by Innuendo Studios) By talking about their points publicly, they manage to go Mainstream (YouTube, The Alt-Right Playbook by Innuendo Studios) By stretching the meaning of something, in a way that\u0026rsquo;s not technically false - see The Ship of Theseus (YouTube, The Alt-Right Playbook by Innuendo Studios) The only way to stop this is to not debate them and to remove their platform. If you play fair and want to actually question ideas, you\u0026rsquo;re good. If you\u0026rsquo;re here to spread hate, hurt people, and (intentionally or not) use tactics that prevent real debate, you should lose your platform. I think, as a society, we\u0026rsquo;re pretty good at knowing where this line is. The issue of false-positives is real and platforms still need to be careful to avoid over moderation and turning into echo chambers or not allowing honestly, good faith criticism. Still, most platform are actually on the opposite side of this: Twitter for example is still full of people saying extreme threats towards trans people.\nNot to miss the forest for the tress, it\u0026rsquo;s worth pointing out that, largely, competing ideas and seeing things differently is a driving force of knowledge and understanding. Limiting our intake to only views we agree with, whether we\u0026rsquo;re aware of it or not, is bad. It\u0026rsquo;s the reason why headlines like These 6 corporations control 90% of the media outlets in America. (TechStartups) and Last Week Tonight\u0026rsquo;s piece on Sinclair Broadcast Group are so terrifying: We don\u0026rsquo;t want all of our information to be filtered and have opinions baked in. The problem is we now have multiple, conflicting goals:\nFacilitate the spread of as many good, novel ideas as possible Prevent the spread of diseased ideas- ideas that can pass for being good, can spread quickly, but are actually shit. Never accidentally mark a good idea as diseased or a diseased idea as good So, how do we do this?\nLet\u0026rsquo;s look at each piece\n1. Facilitate Novel, Good Ideas # So, while we want to avoid bad ideas, we still want to generate as many novel, good ideas as we can. It\u0026rsquo;s easy to be negative and list the things that prevent this from happening (gatekeeping, lack of access to resources, etc) but I think this page needs some positivity, so what can be done to make things easier?\nHost or join an open, organized, small, active community # Note, you\u0026rsquo;ll probably want to be in multiple groups, each related to a topic you\u0026rsquo;re interested in. It\u0026rsquo;s often best to be in both a general and specific chat. For example, if you\u0026rsquo;re into guitar, join/host a community focused on music and a community focused on guitar.\nOpen - All are welcome until they show a reason not to be\nOrganized - Chat is kept reasonably on topic, tangents welcome, but only for limited periods of time. If there\u0026rsquo;s sub-topics, each topic has its own space.\nSmall - Communities over about 30 active members tend to become unpersonal. You should maintain smaller pods like this to keep things actually flowing. This does mean some segregation in the community, but it also keeps the chat feeling like a chat and not a place just for showcases or tough questions.\nActive - Active means more than just ongoing participation. It means events, competitions, chances to demonstarte knowledge and challage one another. Give people a time to look forward to and plan to interact in advance. Services like https://www.gather.town, https://www.calla.chat, or even using Spacial Audio With Minecraft\nIf you\u0026rsquo;re lucky, there may be a hackerspace near you, it\u0026rsquo;s worth checking at least ↓\nI\u0026rsquo;ll touch more on community resources and what a healthy community looks like in the next page, Community Efforts\nHost or join a community knowledge garden # A community is great, but having a community repository of ideas and knowledge is even better. Everyone brings a different background, and with enough contributors a lot can happen. Small contributions, every day, over the course of a long time can make something much bigger than you may initially think possible.\nWhile I love OpGuides, even I acknowledge the way it is setup makes contribution less than seamless. If you\u0026rsquo;re going to setup a knowledge garden of your own, make sure it\u0026rsquo;s setup in a way that everyone in the community finds accessible. If everyone knows how to use git, then maybe something like a fork of this site is a good start, otherwise, something like Wiki.js may work better.\nIf you can, find a way to incentivize contribution to the garden\nKeep a Personal knowledge garden too # As much as it\u0026rsquo;s nice to have all the community pages to fall back on, having a hand pruned, personal database of links and information is immensely helpful. If you keep it private, you can associate it with your TODOs and a daily journal as well. Tools like https://obsidian.md and https://github.com/zadam/trilium work well for this\nSeek experiences outside your comfort zone, Encourage Others to do so too # Comic by Sarah Scribbles One of the biggest ways to stop gaining knowledge is to just keep doing the same thing over and over again or only tacking projects that you know you have the skills to do. It\u0026rsquo;s only when pushed with new challenges that people really learn. Try things you expect to fail at and welcome the failures. Everyone sucks at everything the first time they try it.\nFor me, my biggest inspiration is seeing people like The Thought Emporium work on projects that just sound like they should only be possible when tackled by huge teams of people - like genetic engineering and detecting antimater - and turning them into projects that take a few weeks (albeit they still require some pricey equipment)\nBe sure to document your failures too, both in your personal and community knowledge gardens if you can. Science is largely focused on the successes, but sometimes sharing failures so that you can remind your future self and warn others about the wrong steps is worth more than a success.\nTo some extent, all of this requires a few things that a lot of people think that they lack: Confidence and Dedication. Fortunately, both of those are things that being part of a larger community and keeping a log of your past experience will help with.\nRelate experiences across disciplines # Pick any two interests and mix em\u0026rsquo; together. Into music and electronics? Build a synth. Into drones and art? Make a light show. Into speed running videos games and writing comics? Write a comic about the struggles of a speed runner. These intersections of interests are where magic happens.\nRealize the sources available to you # Sometimes, it\u0026rsquo;s easy to think \u0026ldquo;I just need to take a class on this\u0026rdquo; or \u0026ldquo;I can\u0026rsquo;t afford the tutor\u0026rdquo; etc. But, come on. There is free information on literally every topic you could ever want to look into. With websites like SciHub, ArXiv, and LibGen you can find any academic source you\u0026rsquo;d want. Plus, YouTube has amazing presentations from experts about an ever growing list of increasingly specific topics. Even better if you ever want to talk to an expert, most would love to talk to you too - just send them an email. All of this is entirely free, it doesn\u0026rsquo;t cost you a dime.\nSee all those interviews on this page? The first one I published was with an engineer that worked on high speed cameras then next up was a big name security researcher - all I did was shoot them a message and say \u0026ldquo;Hey, are you interested in doing an interview for my website?\u0026rdquo;. If all you want is to talk about what that person is passionate about, most will be more than willing to hang out for a bit. Yeah, sometimes you\u0026rsquo;ll send an email and never get a response but more often than not you\u0026rsquo;ll get the chance to chat one-on-one with someone that has a wealth of knowledge to share. Hell, you may even accidentally end up teaching them something, especially if you\u0026rsquo;re applying their knowledge in a novel way.\nIf you\u0026rsquo;re willing to share what you make too, the open source community is full of amazing software and hardware projects, often with great documentation.\nBe aware of your own biases # When most people think biases, they think \u0026lsquo;racist\u0026rsquo; or \u0026lsquo;wealthy\u0026rsquo; or something societal, but Cognitive Biases (Wikipedia) are just as important to recognize. Some of these biases are just human nature, some are the result of seeing repeated ads or hearing the same quotes over and over again, without really thinking about the implications of them.\nI highly recommend going though the list on that linked Wikipedia page, but there\u0026rsquo;s a few major ones I\u0026rsquo;d like to point out that are not covered on the Logical Fallacies+ page:\nBias Description Curse of knowledge When better-informed people find it extremely difficult to think about problems from the perspective of lesser-informed people. Law of the instrument An over-reliance on a familiar tool or methods, ignoring or under-valuing alternative approaches. \u0026ldquo;If all you have is a hammer, everything looks like a nail.\u0026rdquo; Framing effect Drawing different conclusions from the same information, depending on how that information is presented. Disposition effect The tendency to sell an asset that has accumulated in value and resist selling an asset that has declined in value. Loss aversion The perceived disutility of giving up an object is greater than the utility associated with acquiring it. Illusory truth effect A tendency to believe that a statement is true if it is easier to process, or if it has been stated multiple times, regardless of its actual veracity. Not invented here Aversion to contact with or use of products, research, standards, or knowledge developed outside a group. - Wikipedia 2. Prevent Diseased Ideas From Spreading # Calling an idea \u0026lsquo;Diseased\u0026rsquo; may sound a bit like it\u0026rsquo;s a term from the Thought Police from Orwell\u0026rsquo;s 1984. Yet, I think it\u0026rsquo;s a fair term. Some ideas start out incorrect, yet more or less benign, but then pick up more and more malicious elements and hooks into our psyche until they act as diseases that is hard to shake and often chronic. They bury into our brains using tricks not of the thinking mind, but of faith or prejudice or instinct. They reaffirm what we want to believe or they allow us to ignore truths, often about ourselves, that we\u0026rsquo;d rather not think of.\nSome of these ideas, other than being false, are more or less harmless. Others, especially when used to foster action, can lead to bloodshed. There is, of course, the risk for a good idea to be labeled diseased. Maybe a culture of homophobia has become so prevalent that even thinking gay people deserve to marry is seen as a disease of the mind. This is obviously awful, yet if we let simple majority pick what ideas are okay, it is also inevitable. So when I called an idea diseased I mean that it has all of these qualities:\nIt is false. Not just the majority of people think it is false, but that by some ground truth it can be shown to be false. This is difficult when talking abortion access or homophobia, but even in those cases there is data that can be used to show the argument- such as the rate of violent crime done to LGBT people or Abortion rates being highest where legally restricted. It may even be that the majority of people think a diseased idea is true, that just makes it an epidemic. It has emotional backing - almost all ideas that are harmful but spread quickly have an emotional basis- be it abortion, homophobia, religious persecution, racism, etc. It has good looking bullshit to back it up - At some point someone, somewhere has put in effort to make a very convincing argument using bullshit in one way or another. Maybe P-hacking, maybe publishing in a journal that sounds good but has poor standards, maybe just getting on prime-time television with a celebrity endorsement. What matters is that this idea has something that is giving it undeserved legitimacy. So, how to we stop these ideas from spreading? Our only options are to help people see the facts though their feelings or to remove the good looking bullshit\nFacts though the feelings # Facts do care about your feelings\nIn a debate, what\u0026rsquo;s important is not the facts, but how people remember the interaction. If you\u0026rsquo;re always playing defense, correcting your opponent, you\u0026rsquo;ll look weak. This is how other people will remember the situation- our brains don\u0026rsquo;t remember the good arguments and the minor details, they remember who spoke with conviction and made us feel things. So, how can you present facts and get past people\u0026rsquo;s feelings to actually change their minds?\nDon\u0026rsquo;t let them control the conversation or make you play defense\nKeep the conversation on topic, even if it means letting misinformation be said. Do not interrupt to correct them.\nDon\u0026rsquo;t let them ask \u0026ldquo;the next question\u0026rdquo; as if you\u0026rsquo;ve already agreed to a premise\nKeep them spending just as much time answering questions as you are\nDon\u0026rsquo;t make them feel guilty, but explain how society may have let them learn something wrong\nDONT: \u0026ldquo;Using the term gay as in insult will make LGBT people around you feel uncomfortable\u0026rdquo;\nDO: \u0026ldquo;You heard \u0026lsquo;gay\u0026rsquo; used as in insult in middle school over and over again- of course you picked up the association that you did - but just because society largely used derogatory words for different races for a long time didn\u0026rsquo;t make that right either\u0026rdquo;\nDon\u0026rsquo;t show them the correct information to start, show them how what they think may have been presented with an agenda, may be misleading, or may be from a bad source\nDONT: \u0026ldquo;According to NOAA\u0026rsquo;s 2020 Annual Climate Report the combined land and ocean temperature has increased at an average rate of 0.13 degrees Fahrenheit ( 0.08 degrees Celsius) per decade since 1880; however, the average rate of increase since 1981 (0.18°C / 0.32°F) has been more than twice that rate\u0026rdquo; (source)\nDO: \u0026ldquo;Every year, the world\u0026rsquo;s five largest publicly owned oil and gas companies spend approximately $200 million on lobbying designed to control, delay or block binding climate-motivated policy\u0026rdquo; (source). \u0026ldquo;Polls conducted in May 2020 showed that just 22% of Americans who vote Republican believed climate change is man-made, compared with 72% of Democrats\u0026rdquo; (source) despite this, 98% of climate researchers agreeing that it is a problem (source)\nGood looking Bullshit: P-hacking, Fake Science, and Academia at its worst # For this section, I think the best way to show you the problem is to just let you see it first hand. Here\u0026rsquo;s a bunch of links and videos, I think you\u0026rsquo;ll get the idea if you watch a handful of them.\nScientific Studies (Last Week Tonight, YouTube) Coronavirus: Conspiracy Theories (Last Week Tonight, YouTube)\nAcademic journal publishing reform (Wikipedia)\nList of scholarly publishing stings (Wikipedia)\nPredatory Publishing (Wikipedia)\nAcademia and the publishing houses have also made extreme efforts to keep science, even that which is publicly funded, behind paywalls. Fortunately, efforts like SciHub, ArXiv, and LibGen have dramatically increased access to the output of academia for the public, though the fight is still ongoing. I really recommend watching this documentary on the story of Aaron Swartz, a young man that tried to fight this system at the cost of his life.\nI\u0026rsquo;d also like to touch on paid-for research. It\u0026rsquo;s easy to think this is a problem of the past, that it was a problem back when cigarette companies bouught research to hide that they caused cancer- but guess what! That\u0026rsquo;s still a problem: Juul: Taking Academic Corruption to a New Level (The American Post)\n3. Never Mark A Good Idea as Diseased or A Diseased Idea as Good # Until about the 17th century most people believed the Earth was the center of the universe, and that all celestial bodies rotated around it. This, on it\u0026rsquo;s own, is not a bad idea. It was an attempt to explain a natural process. The problem turned out to be the over confidence in this assumption, and the refusal of evidence contrary - especially by the church which held great power at the time. The problem for us, today, is to have the foresight to recognize when we may be making the same mistakes and catch them early, while still not allowing stupid shit to get though. This creates a natural tension. For example, vaccines \u0026amp; cigarettes:\nShould we look into the safety of Vaccines? Of course! But it only takes a little fear mongering and one crazy ex-physician with a known conflict of interest writing a paper linking vaccines to autism to result in countless extra deaths.\nShould we look into the safety of cigarettes? Yeah, no shit. However, our over hesitancy to declare them cancerous doubtlessly lead to tons more cancer world wide. Why? Because of ton of academic papers, funded by the cigarette companies, that basically boiled down to \u0026ldquo;Yeah, people are getting cancer more, but maybe that\u0026rsquo;s plastic use, or this, or that - you don\u0026rsquo;t know that it\u0026rsquo;s cigarettes causing it\u0026rdquo;, and then, when the link became undeniable, they just spun it as \u0026ldquo;Of course, we\u0026rsquo;ve always told you it can cause cancer, but you knew that going in!\u0026rdquo;\nOf note, I could also really say Nazis fall into this boat too, as a failing to identify their ideas as evil and convince enough people of that to stop it lead to WWⅡ; however, I think that is to reductive of history and of the efforts of people who did actually try to stop it from the start. Also I don\u0026rsquo;t want to add fuel to the fire of Godwin\u0026rsquo;s Law In both of these, the cost of failing to declare the studies as bullshit from the start resulted in deaths. While one was an over-abundance of caution, the other was a lack of. Both should be appreciated as equally dangerous.\nMeanwhile, failing to let new ideas surface because they sound crazy can cause similar issues. Unfortunately, these examples are a lot harder to identify. There\u0026rsquo;s the obvious poster child examples, like the light bulb that supposedly got significant push back for never having the possibility of being commercially viable, or Airplanes and the story of the Wright Brothers. The real question is what inventions did we lose or get a hundred years late because the ideas were ridiculed?\nWe can never fully making mistakes. Some bad ideas will get though, and propagate enough to become diseased. Some good ideas will be squashed early. We should try our best though. This means encouraging people with new ideas to test them out while also helping people recognize what may make an idea dangerous - while avoiding falling into patterns that lead to not questioning our own beliefs and without going off the deep end and questioning everything that keeps society moving.\nBalance skepticism with openness.\nReligion? # I very intentionally didn\u0026rsquo;t bring religion into any of this, because I am aware of my own biases. That said, I think some may find the series Philosophical Failures of Christian Apologetics (AntiCitizenX, YouTube) interesting. I think it makes some interesting points and may even be interesting for readers that are currently on the fence about religion. I want to be clear, I don\u0026rsquo;t see any religion as a \u0026ldquo;diseased idea\u0026rdquo; as I put it above; however, I do see many of the things that many religions preach as such. I think having belief in a higher power is fine, especially since mortality is scary and it can help. What I don\u0026rsquo;t think is fine is claiming that higher power justifies ignoring scientific studies or hating a group of people because of a bullshit excuse provided by (or grossly grafted onto) that belief system. Your religion (or lack of) doesn\u0026rsquo;t give you a right to be a dick or be ignorant.\nA small exception # I said the best thing you can do is to remove the platform, right? Well, there\u0026rsquo;s another, risky, option: Let them look like absolute idiots on your platform without being directly malicious. Let them trip over themselves. This requires a lot of skill, a particularly poorly informed but confident individual, and an unsympathetic character. There\u0026rsquo;s a lot of reasons you shouldn\u0026rsquo;t try to do this, but when done well it can be a work of art. That said, this same though may well be why Trump won the 2016 election, as he was shown on every news station but not taken seriously- so proceed with caution.\nThere\u0026#39;s power in understanding a position you oppose better than people who support it. You can avoid looking foolish like this. https://t.co/jTzX2lhQs7\n\u0026mdash; Kye Fox (@KyeFox) November 2, 2021 "},{"id":268,"href":"/phil/infrastructure/","title":"Infrastructure","section":"PHIL","content":" Infrastructure # Power # Gravity-based batteries try to beat their chemical cousins with winches, weights, and mine shafts\nLight Pollution # ˚ · . . ✦ ✵ . . . * ⊹ ˚ · . ⊹ ✵ . ⊹ . . ✦ ✦ · . * · ˚ . ˚ ⊹ . International Dark Sky Association Air Quality # A paradigm shift to combat indoor respiratory infection\nNetworking (Mesh) # Housing and Land # Car-Free Neighborhoods in the US\nThe People the Suburbs Were Built for Are Gone (Vice)\nMaybe Treating Housing as an Investment was a Colossal, Society-Shattering Mistake\nLand Value Tax? # Birth Lottery # Where you\u0026rsquo;re born determines if you have access to even basic needs\nStatista Human-Centric design # Patina and Intimacy (The Map is Mostly Water)\nCollege Campuses Are Designed at Human-Scale. Our Cities Can Be Too. (StrongTowns.org)\nTurns Out, Mandatory Helmet Laws Make Cyclists Less Safe (bicycling.com)\nThere Stupid Trucks Are Literally Killing Us (YouTube, Not Just Bikes)\nRacial Discrimination # The Absolute State of the Union (by Narcissist Cookbook)\nPayment Systems # https://twitter.com/flipper_zero/status/1567194641610465281\n"},{"id":269,"href":"/design/ia/","title":"Inspirational Artists","section":"DESIGN","content":" Inspirational Artists # This page is nearly entirely Twitter embeds. If you have something in your browser blocking these from working, this page won\u0026rsquo;t be all that useful. Sorry! Added a lot of minor improvements, like camera limits, subtle lighting, dust particles and more #gamedev #pixelart #screenshotsaturday pic.twitter.com/KmSYW3iHml\n\u0026mdash; Luis Moreno Jimenez (@more8bit) September 2, 2017 \u0026lt;\u0026mdash;\u0026gt;\nTeenage Engineering\u0026#39;s OP-1 Synthesizer modules: pic.twitter.com/Jx5FEkiGK9\n\u0026mdash; Shadow Drop - R\u0026amp;D (@ShadowDropDev) August 18, 2017 Some cool pixel art gifs by Mark Ferrari https://twitter.com/halphelt (NSFW) https://twitter.com/Hushabye_Valley (NSFW-ish) https://twitter.com/koidrake (Like kinda lood I guess?) Shapes - A tool for Unity that itself is beautiful. Tweet since deleted, artist at アカサカハル on Pixiv.net hi, i draw things occasionally and do not exist #NobodyArtistClub #under10kgang pic.twitter.com/8X6nDbLOmN\n\u0026mdash; awr (@awr_hey) July 13, 2020 🛰️#pixelart #ドット絵 #animation pic.twitter.com/3UU12mfkoW\n\u0026mdash; 6VCR (@sixveeceear) May 15, 2020 #OriginalContentArtist Showing off my series of cyberpunk vending machines #pixelart pic.twitter.com/imSqI0TDW2\n\u0026mdash; Kenze Wee (@Seppuku_Doge) July 14, 2020 Tweet since deleted, artist at inconvergent.net Blue wiggles pic.twitter.com/VUuc9WCLaQ\n\u0026mdash; Aki (@lethalbit) July 5, 2020 movie night pic.twitter.com/7CAxDbSyzb\n\u0026mdash; picolo (@_gabrielpicolo) July 6, 2020 not only is jazzpunk hilarious but its also super stylish? like i could share screenshots of this game forever just go buy it right now ok pic.twitter.com/GJheQKQoBA\n\u0026mdash; ᕕ( ᐛ )ᕗ Tomality! @ Animal Crossing (@tomality) June 15, 2017 Quick lay out of Sprout! There\u0026#39;s much that\u0026#39;s not included, but it covers the most basic stuff. I need to do more detailed close-ups later, but I\u0026#39;m alright with this for now. I love my weird futuristic alien seal! A reminder, Xyx is a /CLOSED/ species! pic.twitter.com/pk0kVdBOWt\n\u0026mdash; ˗ˏˋ Kita ˊˎ˗ @Home🏳️ (@KitaKettu) June 14, 2019 Work ↓ https://t.co/P6AwlNJGcU\nUsing only the pixels from the rendered to text to render the image pic.twitter.com/FYR6OIfouQ\n\u0026mdash; grant (@GrantCuster) July 6, 2020 "},{"id":270,"href":"/music/instruments/","title":"Instruments","section":"Musics","content":" Instruments # If you\u0026rsquo;re going to be playing an instrument though a computer - and I mean either an instrument which makes its own noise like a guitar or a controller like a MIDI keyboard - you\u0026rsquo;ll want to adjust your audio buffer size as best you can. See Optimizing The Latency Of Your PC Audio Interface from Sound on Sound for more info about this, but generally just set your buffer size as low as you can until it starts to sound like it\u0026rsquo;s horribly broken. If you don\u0026rsquo;t do this, the delay between hitting a note and sound coming out your speakers will make it very difficult to play. This chapter is broken up into subsections, check the menu and it should have expanded! What is an Instrument? # Okay, yeah, that sounds like a stupid question, but I think it\u0026rsquo;s important to think about. Wikipedia has it defined like this:\nA musical instrument is a device created or adapted to make musical sounds. In principle, any object that produces sound can be considered a musical instrument—it is through purpose that the object becomes a musical instrument. - Wikipedia which, okay, that\u0026rsquo;s fair enough. But I think that has some issues. For one, not all devices that are played as instruments make sounds on their own. I have quite a few MIDI controllers sitting next to me, and while they send data about the notes I\u0026rsquo;m playing, they do not make sounds on their own- are they still instruments?\nSo, for the purposes of these pages I\u0026rsquo;ll consider an instrument to be defined not solely by sound, but by the interface. This may seem like an odd choice, but it is because technology has brought use to a point that it is often extraordinarily difficult to determine what interface is being used. I can play a guitar and hear a piano, I can play drums and hear a violin. The sounds, to some extent, have been decoupled from their physical forms.\nObviously, some interfaces are still better than others for making certain sounds. While I could detect each drum hit on a set of acoustic drums and map each to a different note on the piano, this will be far from a good way to play the piano, and may make playing chords impossible. Similarly, I could map drum sounds to each key on a keyboard (and this is often done) but it\u0026rsquo;s rather awkward to play.\nIn the first few chapters, Getting Started and Sound Sources , synthesizers were explored rather deeply - so why do this before talking about the more familiar realm of acoustic instruments, like a big ol\u0026rsquo; hollow body guitar or a drum set with membrane you can hit and feel?\nWell, because assuming you know how all of the physics of those systems work or have really good samples of the instruments or you only need to fill the same role as the sound (like needing a bass-heavy sound, but not a bass guitar) it really doesn\u0026rsquo;t matter if you have the physical instrument, so long as you have a good way to play the same sounds, that lends the same amount of expressiveness and control.\nExpressiveness and Control # If you\u0026rsquo;re reading this page, long form as it is, you\u0026rsquo;re probably sitting at a desktop or laptop and you may have your fingers resting on the home row of your keyboard.\nTyping-not-musical keyboards are meant to allow you to input data as quickly and reliably as possible, but they convey fairly little information in each key stroke. For normal typing purposes (not gaming and ignoring backspace/delete) we really don\u0026rsquo;t even need to separately tell the computer about the key going down and going up. For most presses, we just care that it was pressed. We don\u0026rsquo;t care how long or how hard.\nIf we add some of those details back in - make it care about how hard we hit, how long we hold - that\u0026rsquo;s more-or-less a piano.\nCompare this to a guitar. On a guitar you can bend the strings, mute them with your hand, pluck them with different intensities, slide between notes, play hammer-on notes (play the next note on the string without plucking), etc. The guitar, despite its lack of strings, is often a much more expressive instrument than the piano.\nThis isn\u0026rsquo;t a totally fair comparison of course. For a typical guitar we can only play up to 6 notes at a time and because of limitations on practical finger positions, chords will often have to use either \u0026ldquo;open strings\u0026rdquo; (strings playing the note it\u0026rsquo;s tuned to with no finger on it) or be \u0026ldquo;bar chords\u0026rdquo; (chords where the index finger has to lay across all the strings). All together, this means no chord played on a guitar can be more than 6 notes, and practically speaking, there\u0026rsquo;s a limit to how quickly and accurately a player can change between complex chords.\nA piano is an instrument built for chords, but it gives up some expressiveness elsewhere for this - you can\u0026rsquo;t naturally play vibrato on one string by bending it, nor can you slide from one note to another.\nI think the best way to think about this is to give each instrument or controller four scores:\nSpeed: How fast can you enter notes? Width: How well does it handle polyphony (multiple notes), if at all? Expressivity: How much can you alter each note played independently? Global Control: How much can you alter the sound of all of the notes played as a group? In my mind, on a scale of 1-10, a guitar would get:\nSpeed: 10 Width: 5 Expressivity: 7 Global Control: 2 While a piano would get:\nSpeed: 5 Width: 10 Expressivity: 2 Global Control: 2 With this rating system you see why to use different instruments / input devices for different tasks. This may sound like a pretty \u0026ldquo;no shit\u0026rdquo; statement if you\u0026rsquo;re still thinking in terms of each instrument having its own sound but in digital music production there\u0026rsquo;s nothing stopping us from using a guitar for a piano sound or a piano for a guitar sound. This means we can find ways to get these numbers up!\nLet\u0026rsquo;s pick on guitar first. It\u0026rsquo;s fast and expressive per note, but we can\u0026rsquo;t alter the sound as a whole or play big complex chords.\nExcept, yeah, we can - Pedals! We\u0026rsquo;ll get more into effects later, but some of the most basic pedals hardly count as effects at all. For example, you can get a volume pedal. This allows you to rock your foot back and forth to change the volume as a whole. +1 point to global control. If you want to alter the sound directly, some pedals have the ability to rock your foot back and forth to adjust distortion, number of repeats in a delay, or a filter (often called a \u0026ldquo;wah\u0026rdquo; pedal, for the \u0026ldquo;wah\u0026rdquo; sound it makes).\nThat still leaves width. We can\u0026rsquo;t get this up to the level of a piano by any means, but there are some effect pedals with make it so that every note played is a full chord or that automatically harmonize with you. So +1 to that too.\nGoing the other way around, modifying the piano, can lead to good results too:\nFor example, here\u0026rsquo;s a track played on the Roli Seaboard, which is a squishy keyboard where the pressure applied by each finger, how hard you strike initially, the vertical position of the finger all matter and the play can easily drag the finger across notes or wiggle their finger for a vibrato.\n\u0026ldquo;I\u0026rsquo;m a Guitarist/Drummer/Violinist and this isn\u0026rsquo;t right!\u0026rdquo; # Woah there, I\u0026rsquo;m not saying your skills with a particular instrument are bad or that digital stuff is inherently better. In fact, as I\u0026rsquo;ll get to later, I believe quite the opposite. As good as a lot of these digital tools are, if they\u0026rsquo;re modeled after physical instruments a good player on the original will always be better than the reproduction\u0026hellip; except for piano, it\u0026rsquo;s been modeled and sampled well enough to be indistinguishable now - of course skill on the piano key\u0026rsquo;s themselves is still important there.\nInstead, I\u0026rsquo;m saying for the typical bedroom music producer getting more expressive tools and thinking about how those instruments get their sounds from the way their played and ways the human body can interact with the instrument is important for getting better less stale sounds.\nMusicians shouldn\u0026rsquo;t be tied to one instrument. At most, you should be focused on your musical posiition. A drummer shouldn\u0026rsquo;t have to use acoustic drums to be a drummer, using a mix of a drum machine and MIDI drums should be seen as a valid option. Similarly, a bassist shouldn\u0026rsquo;t be tied to their guitar. Often people couple the sound to the instrument, but there\u0026rsquo;s really no need to do so anymore. It used to be that trying to \u0026lsquo;fake\u0026rsquo; a bass guitar sound with a keyboard meant that you just can\u0026rsquo;t replicate everything the bass could do because a keyboard inherently lacks the control of the metal strings that you can bend, slap, and otherwise abuse. However, now with the expressiveness of modern controllers and the timbral diversity and quality of synthesizers, for many songs the resulting sound is close to or better than that of any other instrument, and you gain the ability to explore sounds that would otherwise be impossible to reach on the acoustic instrument at a fraction of the price and skill level required to independently own and learn each instrument you\u0026rsquo;d want to use.\nEmulations of sounds aren\u0026rsquo;t bad, the interface to them was. That\u0026rsquo;s changed in the last few years.\nThere are limitations imposed by physical instruments that we\u0026rsquo;re used to hearing, like a guitar\u0026rsquo;s limit of 6-note polyphony as well as imperfections - like the background hum and string noise of an electric guitar or acoustic respectively. But, all of those can be (and are) emulated very well regularly, because just like vinyl they can be pleasant.\nThe value of the musician should be in their ability to inspire composition as they know how to push the sounds of their instrument and how to get the most out of those limitations, and if that\u0026rsquo;s the case, why should it matter if they\u0026rsquo;re using a 400 year old $100,000 violin or a good physically modeled synth?\nIf musicians can use the knowledge from playing a physical acoustic instrument and augment it with the flexibility and power of synthesis, effects, and extra controllers I see that as an absolute win.\nI still play my guitar, and I still record it into finished music, but I don\u0026rsquo;t necessarily think it\u0026rsquo;s superior to using the squishy keyboard in the video above - and I should know, I had one of those squishy keyboards - only selling it to upgrade to an even better expressive keyboard. I do it because it\u0026rsquo;s fun. Similarly, it can be fun to watch- I think one of the big appeals of an orchestra is its spectacle. So, no, your skills with traditional instruments aren\u0026rsquo;t going anywhere and there are still many good reasons to learn.\nThree more things:\nThe physical limitations of an instrument will inspire how it is played. A drum machine can be programmed to have patterns that a real drummer could never do, but this isn\u0026rsquo;t always a good thing. Considering limits of the original when using something without them will make you a better musician. Without proper respect for a digital instrument, it will sound just as bad as a poorly played physical one. Just as it takes skill to play instruments with varying dynamics the same applies to digital instruments. Just as players in a real ensemble have to interpret notes and add their own \u0026lsquo;flair\u0026rsquo; to what they see as part of the translation from paper to sound, so do players of digital instruments- the problem here is that a computer will be extremely sterile- do not expect to just place notes on a digital piano roll and get anywhere near the same sound. If you want it to sound like it\u0026rsquo;s played by a human, you either need to actually play it - even if the controller doesn\u0026rsquo;t match the sound (guitar sound on a keyboard or whatever) - or take the time to add very subtle mistakes and variations in. "},{"id":271,"href":"/interviews/interviews/","title":"Interviews","section":"INTERVIEWS","content":" Published Interviews: # Loial Otter Soatok Dreamseeker Cadey Ratio Kell Bengal Tax Badger Sex Positive Gaming Cendyne Wolfgun Paul Shapera If you would like to be interviewed # Well, first of all I\u0026rsquo;d like to know what makes you interesting - so shoot me a message or open an issue on GitHub, twitter, or where ever you can find me.\n"},{"id":272,"href":"/phil/labor/","title":"Labor","section":"PHIL","content":" Labor and Compensation # The Case For Banning Non-Competes (slowboring.com)\nEU pushes for \u0026lsquo;right to disconnect\u0026rsquo; from work at home (dw.com)\nPlease Consider My Application to Give You Labor So I Can Stay Alive\nWorkplace Wellbeing Is a Scam (Tribune)\nEconomic Inequality # Source code (GPL v3), by Matt Korostoff Wage Theft is a Much Bigger Problem Than Other Forms of Theft—But Workers Remain Mostly Unprotected\nEx-Google Employee Exposes Unequal Pay With Spreadsheet (Wall Street Journal)\n[TODO] historical tax rates (the 91% tax bracket? Need to do more research on this\u0026hellip;), wealth tax\nA Megacorp is not your dream job (Drew DeVault\u0026rsquo;s Blog)\nThe US Is Officially A Banana Republic: The Top 1% Now Own More Wealth Than The Entire Middle Class (zerohedge.com)\nUniversal Basic Income # Work Life Balance # Monopolies # Unions # Consumer protections # best interest - Fiduciary TOS simplification\nHomelessness and The Housing Crisis # We need a language of humility about the housing crisis [\u0026hellip;] We kinda recognize the health market is complicated, it\u0026rsquo;s tricky to get your hands around [\u0026hellip;] I think we need that kind of reverence for the housing market [to realize it\u0026rsquo;s] not just about neo-classical economics [\u0026hellip;]\n\u0026ndash; Sociologist Matt Desmond, author of Evicted: Poverty and Profit in the American City. He was interviewed in 2019 A lot of people think about homelessness when they hear the term \u0026ldquo;housing crisis\u0026rdquo;. That is but a small part of it.\nThe US Department of Housing and Urban Development (HUD) classifies renters who spend more than 30% of their income on rent as \u0026ldquo;rent burdened.\u0026rdquo; In recent years, the percentage of US renters meeting this qualification has reached 50%.\nThe renting of property is one of the greatest drivers of economic inequality in the United States, because it touches every other source of unfairness in our society.\nSupply # In a handful of large cities, there is a supply problem. But there are more than enough houses and apartments to house the people who live there in the cities with the highest eviction rates and most abusive practices. The housing stock is not the problem, but the landlording of property itself.\nIn 2008, the housing market crashed (along with the rest of the economy). A large number of people lost their homes. But, if you had cash on hand, you could buy a wide variety of properties at deep discounts from the local sheriff.\nThat year, Matt Desmond went to Milwaukee, WI for an in-depth study. He found that the median home value in poor neighborhoods was just $27,000. A mortgage payment on that house, even with a high down payment, was less than $400 per month as typical interest rates.\nWhile the housing market crumbled, rents did not go down almost anywhere, as former homeowners flooded the rental market. Someone who rented that same property out could get around $600-750 per month from their tenants.\nThose who lost their houses became part of a new underclass. Those who could afford to buy at sheriff\u0026rsquo;s sales when prices dropped made a killing. As a result, 11% of all single-family houses in the US are owned by landlords as of 2018, and that percentage has continued to slowly rise.\nHomelessness # To understand homelessness, consider an extreme version of the phenomenon: an old story about homeless sex offenders.\nIn Miami-Dade county, there was a law stating that sex offenders cannot live within 2,500 feet of any place that children gather. However, considering the urban environment, this law eliminates every single place in the county \u0026ndash; except for one highway overpass.\nOver 1,000 offenders \u0026ldquo;lived\u0026rdquo; there, and probation officers dropped them off, knowing what the residency map looked like.\nThis illustrates the main principle: it is about where people are (or aren\u0026rsquo;t) allowed to live.\nApartments which are in middle class or better neighborhoods impose a number of requirements on renters, many of which are not only invasive, but insidious. In Milwaukee, Matt witnessed a \u0026ldquo;training\u0026rdquo; class for landlords who were threatened with legal action by the city.\nA cornerstone of the class was to understand how to screen renters \u0026ndash; renters who would ensure they could avoid more problems with the city and the police. Screening criteria included:\nEviction history Criminal history Credit checks Proof of employment Enthusiasm: do they seem excited to live there, or do they barely look at the walls because they\u0026rsquo;ll take anything? This is screening was surely trying to get accused or convicted slumlords out of their ways. But this screens not only for affluence, but level of desperation \u0026ndash; and statistically speaking, race.\nIf the trainers had their way, no one who was poor, an ex-con, had identity theft committed on them, or lost their job would have any place to live.\nThe people who do not follow these criteria, and will rent to those others, are the slum lords. Matt wrote his book when he went back to Milwaukee in 2010, and lived in those places to write about the people there. Half his time was spent living in a trailer park run by a slum lord, which was declared an ecological biohazard by the city. And they did not get what they paid for.\nMany of them could barely afford it, based on their circumstance of extreme poverty. But they couldn\u0026rsquo;t complain about anything, because if any of them were evicted, they would end up homeless.\nJust like the sex offenders who lived under that bridge.\nThe Price of Renting # With the exception of large cities that have implemented rent controls, rents are completely unregulated. This has resulted in a \u0026ldquo;market\u0026rdquo; that presents both predatory and discriminatory pricing, limited only by the standards of the landlords.\nMatt Desmond found in 2008 that median rent for a 2 bedroom apartment in Milwaukee was $650. In the poorest neighborhoods, typical rent was $600. There was nothing he could find in the city less than $500.\nThis difference of 10-20% is representative of the top 250 largest cities based on a survey of landlords by the US census. If you look for a \u0026ldquo;cheaper\u0026rdquo; apartment in a \u0026ldquo;worse\u0026rdquo; neighborhood, you will not save very much money. Why is this?\nA simple explanation is that landlords in poorer communities raise rents above what they \u0026ldquo;should be\u0026rdquo; in order to hedge for risk:\nTheir properties are older, and often in significantly poorer condition (including safety violations) They must directly face the social problems created by concentrated poverty (drug use, violence, mental illness, etc) They have higher overhead (turnover, evictions, fines from frequent police calls) But Matt Desmond points out there is more going on. Using a nationally representative survey of landlords from the US census, his team calculated the cost structure of apartments in poor neighborhoods (\u0026gt;= 27% poverty rate) and wealthy neighborhoods (\u0026lt;= 8% poverty rate) from across the country.\nAfter accounting for all costs (including those listed above), on average, any apartment in the poor neighborhood makes the landlord about double the profit of the same apartment in the wealthy neighborhood nationwide.\nIt is vastly more profitable to invest $10 million into a poor neighborhood than a wealthy one. Because rather than charging based on your costs, you can charge \u0026ldquo;what the market will bear\u0026rdquo;. Because you know that there are enough desperate people who will pay far more than 30% of their income for a roof over their head.\nDiscrimination, Eviction, and The Law # If you have made it this far, it should not be a surprise that racism is still very prevalent in America. Nowhere better than housing is it clear that racism is not as the acts of bad individuals, but the structure of systems.\nFDR created the Federal Housing Administration to prevent the scourge of predatory mortgages and payment plans that may have themselves contributed to the 1929 economic crash. However, the program denied non-whites access to the new, fairer loans.\nFrom then up to 1968, the \u0026ldquo;standard\u0026rdquo; in American cities was racial: whites owned, people of color rented. The poor of all races continued to rent as always had, of course. But like many issues, the dominant image of the racial divide meant that abuses in renting were considered acceptable by those in power.\nThe Civil Right Act of 1968, aka the Fair Housing Act, was the first time people of color could not be denied based on their race alone. This began the era we still live in: where the predation became financial, from contract buying to the 2008 predatory subprime loans that caused non-white homeowners to lose their houses in 2008 much more than whites.\nEven with regard to eviction, privilege is a lever. In many affluent buildings or with small landlords, eviction is a last resort. Even among those who are poor, a friendly relationship between the landlords and tenants can result in a \u0026ldquo;cash and key\u0026rdquo; eviction, which is never reported formally. Even beyond that, a re-negotiation is preferable to an eviction, and is how the vast majority of white renters who cannot afford the rent leave.\nBut with modern technology and greater emotional and physical distance, \u0026ldquo;eviction by algorithm\u0026rdquo; is taking over for landlords, the use of eviction as a debt collection strategy. Matt Desmond says these buildings, on average, raise the total cost of renting by 22% when they are late \u0026ndash; even if they catch up in time, pay late fees and court costs, and the eviction is dismissed.\nOnce an eviction is executed and on someone\u0026rsquo;s record, it acts as a \u0026ldquo;Scarlet E\u0026rdquo; that follows them. Remember that list of screening criteria? Those are all the apartments they lost access to \u0026ndash; most of the housing stock in the city, if not the state. They will have to rent from slum lords \u0026ndash; or perhaps become homeless.\nIf a judge is sympathetic to the tenant, in some states, they may not send in the sheriff. They may impose a repayment plan based on the tenant\u0026rsquo;s circumstances, which is also legally binding on the landlord (who cannot demand money ahead of that schedule).\nAnd that is before considering whether the tenant can afford a lawyer to represent them in the proceeding \u0026ndash; let alone write a threatening letter to settle the matter out of court first.\nFor those with privilege, there are dozens of ways to avoid eviction, however frivolous or cruel. For those with less, the walls close in. And once that eviction is on the record, only slumlords will return their phone calls.\nP.S. The Fair Housing Act itself? It\u0026rsquo;s mostly a piece of paper.\nJob Obsolescence # @dinoman_j on Twitter "},{"id":273,"href":"/phil/law-and-order/","title":"Law And Order","section":"PHIL","content":" Law Enforcement and Judgment # Trial of educated peers\nCriminal Rehabilitation # end mandatory sentencing end bail no debtors prison\nDivorce, Child Support # Jury Duty # Prosecutors \u0026amp; Public Defenders # Police # Illinois, First State to Tell Police They Can\u0026rsquo;t Lie to Minors in Interrogations (NPR)\nPrisons # "},{"id":274,"href":"/phil/medical/","title":"Medical","section":"PHIL","content":" Healthcare Costs # Why is life expectancy in the US lower than in other rich countries?\nWhite House wins ruling on disclosing health care prices (AP)\nDrugs # Most drugs and prostitution should be legal at the age of 18. However, trafficking obviously not, and drugs must be sold by an individual with a license to deal and said license may be revoked if the product is sold with a false label or is tainted.\n3 Arguments Why Marijuana Should Stay Illegal Reviewed (great video, includes many studies)\nSwords Comic CDXX Mental Health # Secret Panel HERE 😳 https://t.co/EFeSAtdlp0 pic.twitter.com/aKi1nOv5uW\n\u0026mdash; J. L. Westover (@MrLovenstein) January 6, 2021 Archive.org link to the above tweet The Public Health Threat of COVID-19 # SARS-Cov-2 is likely to become endemic. Rather than \u0026ldquo;living our lives in fear\u0026rdquo; as detractors would say \u0026ndash; or letting our guard down as many detractors do \u0026ndash; we must use our brains to navigate this risk.\nBeing smart about risk assessment is important in many parts of life. However, if you don\u0026rsquo;t work in finance, it probably came up rarely if ever \u0026ndash; only in extreme situations or activities. And even then, it almost certainly didn\u0026rsquo;t require math.\nThe public health threat of COVID-19 should simply make us recognize that we need to start using our mental muscles to assess the risk of common activities as well. Unfortunately, with routine things that carry hidden risk with a large downside, our mental intuition does not work well.\nThe MicroCovid Project is an excellent website to help think about and assess these risks. Using an intuitive and statistically-grounded model, it has calculators which can model the risk of specific scenarios, and more recently, risks for households or pods.\nThe data are frequently updated, and the calculator is easy to use. Even if you don\u0026rsquo;t have a specific scenario in mind, trying out this will also illustrate the statistical basis for public health recommendations (masking, social distancing, etc.).\nSince the guidance has changed repeatedly, and likely will continue to do so as the situation and virus evolve, I really only have one specific recommendation:\nGet vaccinated. Fully. That includes all boosters recommended by health authorities for whatever vaccine you choose, past and future.\nI\u0026rsquo;m not going to argue. I\u0026rsquo;m not going to engage with misinformation. Just do it. US residents can find where to get vaccinated here.\n"},{"id":275,"href":"/music/mix-and-master/","title":"Mix and Master","section":"Musics","content":" Mixing \u0026amp; Mastering # Mixers # mixer front ends, preamps, etc. Software mixing, etc.\nLoundness Monitoring # https://youlean.co/youlean-loudness-meter/\ntalk about loudness and Spotify\nMixing # eq, pan, quadraphonic+\nMastering # Delay Always Means Phase Shift But Phase Shift Does Not Always Mean Delay (YouTube, Dan Worrall)\nStudio Monitors, Headphones, and Amps # @Tirrelous on Twitter Here\u0026rsquo;s the list of all the specs you might want to understand if you\u0026rsquo;re looking to buy headphones or studio monitors. It\u0026rsquo;s a tad bit overwhelming, but I want to start with this so that you can get an idea of why this is complicated:\nOpen Vs Closed back Headphones Leakage On Ear, Over Ear, \u0026amp; In Ear Ported or Closed Power \u0026amp; Impedance Size of Transducers Number of Transducers Type of Transducer Moving Coil Planar Magnetic Balanced Armature, Bone Conduction, and Electrostatic Frequency Response \u0026amp; Range Harman Curve Number of Amps (Single, Bi, Tri) Harmonic Distortion Transient Response (Slew Rate) Phase Response Imaging and Sound Stage Balanced cables/amp Active Noise Cancelation (ANC) Near, Far, and Mid-field Spatial Audio 2, 2.1, 5.1, 7.1, etc. Dolby Atmos Room Correction, Active EQ Acoustic Treatment Bass Traps Cabinet Connections Amplifier Types Class A, B, D, etc. Vacuum Tubes Headphones # For headphones, there are two main types: Open back, and Closed back. You may also see \u0026lsquo;semi-open\u0026rsquo;. That\u0026rsquo;s bullshit. They\u0026rsquo;re open.\nOpen, as the name implies, let the driver push air both ways and avoid the internal reflections. Downside? You hear everything around you, everyone around you can hear what you\u0026rsquo;re listening too, and there\u0026rsquo;s less bass. Upside? The stereo imagining/soundstage (ability to hear where on a stage the instrument is ) is much better. Plus, you can hear yourself talk, which can be nice at times.\nClosed back are the opposite. Most headphones are closed back. The headphones are sealed, less outside noise gets in, and people around you shouldn\u0026rsquo;t hear everything you\u0026rsquo;re listening to.\nSome crazy people use In-Ear Monitors (IEMs - earbuds) instead of full headphones when making music. I\u0026rsquo;m not going to even consider it as an option, even though there are some high-end ones out there. It\u0026rsquo;s just\u0026hellip; no.\nSo, which should you get? Well, if you can- both. It\u0026rsquo;s good to have multiple perspectives on a mix. If not, as with most things in life, it depends.\nIf you\u0026rsquo;re in a quiet environment, don\u0026rsquo;t need to record vocals, and care if the bass can literally rock your head, open are nice.\nIf you want to record vocals, have background noise, or just don\u0026rsquo;t care as much about having a spot-on sound stage, get closed.\nDealing with noise # Types and Sources of Noise # [TODO]\nFinishing a track # From this Interview of Jeremy Blake on martinyammoller.com -\nHow do you know when a track is finished? # With modular and hardware, it’s easy: when the performance is done and I’ve mixed and mastered it. With DAW-based stuff, it’s when I’ve gone through all my iteration passes, like idea, arrangement, mixing, re-arrangement, ear candy, and mastering. I go by a rule of three approach: if I can listen to a track 3 times and not mess with it, it’s done. If something bothers me 3 times, I change it.\n"},{"id":276,"href":"/music/music-hardware/","title":"Music Hardware","section":"Musics","content":" Music Hardware # While you could make all of your music with just a computer, you’ll probably want some tools that make your life as a musician easier and let you explore ideas faster. Like I said back in the Audio Effects Chapter , in my experience, making music depends on a really quick brain to input device feedback loop. Being able to turn a physical knob and mash physical keys will often lead to better results if only because you’re able to try things both faster and by physically interacting with something that you may not have thought of otherwise. It’s why guitars, MPE keyboards, and Eurorack are so great: they all give you a crazy amount of control and expression that is literally at your fingertips. The brain to input interface there is just so much better.\nThere are also a few things that do simply work better when done via analog hardware vs digital tools. Namely distortions and compression/limiting - Distortions because of limited bandwidth and compression/limiting because you can\u0026rsquo;t fix a signal that\u0026rsquo;s already clipped digitally.\nSimilarly, it\u0026rsquo;s possible if you\u0026rsquo;re doing complex processing that you\u0026rsquo;ll push the limits of what computers can even practically do. If you can offload some of that work to other equipment, you can use that processing power on something else.\nFinally, it might be that there\u0026rsquo;s just annoying limits with routing in your tools. For example, a lot of streamers will use vocal processing units like the DBX 286s since it can sometimes be difficult to get the software to route though effects before being recorded/streamed.\nSo, while I don\u0026rsquo;t think you should go crazy deep into hardware and spend your life savings, there\u0026rsquo;s some things that just make sense to get, like a good keyboard MIDI controller, some knobs, and at least one realllly expressive instrument like a guitar or MPE controller. Something that really lets you feel what you\u0026rsquo;re playing.\nFirst things first, I also want to go over the difference between Digital and Analog in music hardware: Digital: 1010111010010010110100101110101\nAnalog: ∿∿~∿~∿∿∿~∿∿~∿~∿∿∿~∿∿~∿\nA quick note before you read anything further: you can only hear an analog signal. At the end of the chain, everything needs to be analog, as ultimately sound waves exist not as the 1’s and 0’s of binary, but as waves of pressure in the air- which is an analog medium.\nTo start, let’s look at an all-analog signal path. Here, a guitar string is plucked, the signal is picked up by the guitar’s pickup (as the metal string causes a magnet to move, generating a weak electrical signal), the signal is amplified (twice), and then the amplified signal is used to move a speaker cone, which in turn moves the air, so you can hear it.\nNote, I’ve drawn a light gray cable along side all the analog signals. This is the ground cable. Audio circuits are no different from any other circuit, and require a full, well, circuit. A circuit is a full loop, with ground. Where the cables come out of the amplifier, I’ve drawn these two wires much more distinctly, with a red wire- meant to visualize the ‘live’ wire that carries the signal- and gray wire the ground. This is by convention. If you ever have to wire up an amplifier, you’ll probably see one red and one black wire, representing these in turn. In many cases (but definitely not always), things will still work if you get these backwards, but you’ll end up with audio that is out of phase, as your signal is quite literally flipped. In the case of a guitar amp with a single speaker, this probably won’t matter. But, if you have two speakers (left and right) and only flip one, this is very likely to make things sound awful. Hopefully that made sense, now let\u0026rsquo;s look at a digital setup. Keep in mind, even the most digital of paths needs to end in analog so that there\u0026rsquo;s something for you to hear.\nHere, a digital keyboard is hooked up to a laptop, presumably running some sort of sound-generating software - Maybe a DAW or VCV Rack. Here I\u0026rsquo;ve shown the audio interface (labeled DAC) as an external box hooked up over USB, but this could also just be internal to the computer. All computers or phones will have an internal audio interface, it\u0026rsquo;s just that most musicians end up attaching their own that offer better features.\nHere, everything on the blue cables is digital, it\u0026rsquo;s only 1\u0026rsquo;s and 0\u0026rsquo;s. The first cable is only carrying information about what note you\u0026rsquo;re playing and knobs you\u0026rsquo;re turning, while the second one (between the laptop and the DAC) is carrying digital information that represents the audio, but it hasn\u0026rsquo;t yet been turned into an analog signal. That\u0026rsquo;s the job of the DAC. It takes those 1\u0026rsquo;s and 0\u0026rsquo;s and turns it back into an analog signal.\nOften you\u0026rsquo;ll hear the terms Audio Interface, Sound Card, and DAC used interchangeably. They\u0026rsquo;re not all the same thing, but generally it\u0026rsquo;s the part that turns the digital signal into an analog one. If you\u0026rsquo;re plugging a guitar or microphone into your computer, the terms Audio Interface and Sound Card still apply, but in that case you\u0026rsquo;re using an ADC. I\u0026rsquo;ll come back to this in a bit. If you\u0026rsquo;re confused about how digital 1\u0026rsquo;s and 0\u0026rsquo;s can represent an analog signal in the first place, refer back to samples in Chapter 2 - Sound Sources . For more information on how Digital to Analog and Analog to Digital conversion works, check out this video from xiph.org.\nSome devices may have almost everything in this chain internally. This is true of a lot of digital instruments, like the Elektron Digitakt pictured here:\nThe Digitakt is a drum machine that uses samples saved internally as .wav files. It\u0026rsquo;s basically just a very specialized computer in a box.\nThough, the really confusing thing to beginners is when the device is digital, but has both analog input and outputs. Just like there\u0026rsquo;s a DAC (Digital to Analog Converter) for analog output, you\u0026rsquo;ll often be working with ADCs or Analog to Digital Converters to take your analog input and use it on your computer (or internally, like in a digital guitar pedal)\nFor the most basic possible example, let\u0026rsquo;s look at a bit-crusher and sample rate reducer pedal. These pedals basically just hook a DAC directly into an ADC, then let you purposely mess up the conversion.\nBit crushing, as explained back in the effects chapter, is just purposefully reducing the range of values a sample of digital audio can be. So, while an 8-bit audio point can be any whole number up to\n\\(2^8 = 256\\) , a lower-bit sample might only be able to be represented by \\(2^6 = 64\\) possible values, which will really start to sound pretty distorted. Similarly, sample rate reduction distorts the audio by intentionally limiting the rate at which new digital samples of the input audio are acquired. As long as samples are gotten at a rate at least twice that of the highest frequency in the input audio, there will be no difference, but as this goes below that, the converter simply doesn't get enough data to reproduce the input signal. This effect is inherently digital. It\u0026rsquo;s really just purposely doing digital to analog conversion poorly. If we want it as a guitar pedal, that means the pedal has to first convert the analog signal to digital, then convert the digital signal back to analog.\nnote, this isn\u0026rsquo;t meant to be a real schematic. It\u0026rsquo;s heavily simplified. Hopefully that was enough to get you up to speed on the basics of analog vs digital. Unfortunately, while some gear is obvious (A normal acoustic guitar is analog, a MIDI controller is digital) some music gear really blurs the lines, or even twists them outright. The Behringer DeepMind line, for example, is a purely analog synth with digital control\u0026rsquo;s and a big ol\u0026rsquo; screen. Meanwhile, the Modor NF-1 is a digital synth that looks and tries to emulate the sound and feel of analog equipment. Plus, there\u0026rsquo;s a ton of synths now that have analog oscillators and filters, but then do DSP (Digital Signal Processing) based effects or the other way around- with digital oscillators and analog filters. What I\u0026rsquo;m trying to say is, it\u0026rsquo;s complicated.\nThere are a lot of \u0026lsquo;Analog Purists\u0026rsquo; out there, who will claim an analog oscillator just sounds better, or that it adds something extra to their sound. To some extent, they\u0026rsquo;re not wrong. But, I think this is also largely because people are comparing often free digital sources and effects to analog ones and, as with most things in life, you often get what you pay for. I\u0026rsquo;d actually argue that in most cases, paid digital tools and hardware is a better value than the analog gear. (1)(2)(3) What I\u0026rsquo;m trying to say is, in most cases, whether or not a tool is analog or digital shouldn\u0026rsquo;t really factor into your choice of what to buy. Your choice should be determined by what sounds good, what is enjoyable to play, and if the device offers all the features you need and want. In very few cases will a device being analog be a \u0026lsquo;feature\u0026rsquo; that matters.(4) Instead, the feature that matters with analog gear is often the hands on feel that usually comes with a device being analog, like all the articulations that a player can get out of a guitar.(5) At the same time, this isn\u0026rsquo;t exclusive to analog instruments anymore, as MPE controllers (I\u0026rsquo;ll get to them later) have made it possible to get a TON of expression out of a digital controller, arguably more than I can out of my guitar- so again, the guitar being analog isn\u0026rsquo;t the feature that mattered. When buying gear, try to dig down and ask yourself why you want a tool - for how it sounds, how it feels to play, etc. - and ask yourself if there\u0026rsquo;s competing products that meet the same needs, then you\u0026rsquo;ll easily avoid the elitism that analog purists bring with them.(6)\nA few more notes:\nI want to point out that there is a valid concern that your ADCs and DACs are of decent quality. Some people are crazy about this and want to spend thousands of dollars on brand name ADCs and DACs, but honestly I\u0026rsquo;ve found that it\u0026rsquo;s more just a matter of \u0026lsquo;is it good enough\u0026rsquo; is really just the bar to hit, as long as it\u0026rsquo;s not causing a ludicrous amount of noise and can capture enough of the dynamic range (difference between playing softly and loud) of your instrument you\u0026rsquo;re good to go. In my experience, USB powered devices tend to have the worst time with noise, as the power going in is so \u0026lsquo;dirty\u0026rsquo; that the DAC/ADC ends up putting this noise into the signal. A lot of equipment will discuss this in regard to the Signal to Noise Ratio (SNR).\nSome people get crazy about sample rate. For a final recording there is absolutely no reason to exceed 24bit/48khz audio. Even that is really overkill. On the other hand, during recording there can be rather significantly audible differences in oversampled (that is 80khz+) audio, as the virtual instruments have more headroom to work with to avoid a side effect of digital audio called aliasing. You can learn more about this in Samplerates: the higher the better, right? from FabFilter on YouTube. Aliasing is can actually be used to your advantage too, see VCV Rack Hacks | Aliasing Trick (Jakub Ciupinski, YouTube) If you hear someone raving about tube amps, you should know that -yes- they do have a pretty distinct sound, but it\u0026rsquo;s not necessarily better- here\u0026rsquo;s a fun video from JHS Pedals showing this: Solid State Amps Suck. For a bit more technical detail, see Tube Amp vs Solid State – What\u0026rsquo;s the Difference? from Sweetwater on YouTube. I do think this video might over-sell how good tube-amps can sound, and honestly today I don\u0026rsquo;t think there\u0026rsquo;s a huge difference. That said, I do still have a tube amp because there\u0026rsquo;s something that makes the little kid in me happy about seeing a glowing tube\nPicture by Christopher Schirner, CC BY-SA 2.0, Link Finally, I want to briefly mention that as you add more equipment, you\u0026rsquo;re very likely to run into an issue with ground loops. If you plug in a piece of gear and start hearing a hum or significantly more noise, this is likely the problem. Check out 6 simple and cheap ways to fix hum, buzz and ground loop noise from Loopop on YouTube.\nHopefully that all made sense and you feel a bit less lost about both the differences between analog and digital, and why it is probably one of the most divisive topics in music hardware. Let\u0026rsquo;s move on barreling though all the technical crap so we can get to the fun stuff later on. Let\u0026rsquo;s start with something you\u0026rsquo;re already familiar with, but dive in a little deeper: A normal ol\u0026rsquo; audio jack.\nTRS? 3.5mm? ¼ inch? # Your normal every-day headphones that you\u0026rsquo;d plug into your phone (or did. Thanks Apple (¬､¬)) use a 3.5mm Tip Ring Sleave cable. If your headphones have an in-line mic, they\u0026rsquo;re probably TRRS. The difference, as this meme shows, is how many \u0026lsquo;rings\u0026rsquo; are on the connector. Normally, for headphones, the Tip would carry the left channel, the Ring the right and the Sleave the common ground for each. If there\u0026rsquo;s an inline mic, the connections usually go Left, Right, Ground, Microphone on the TRRS pins respectively.\nDon\u0026rsquo;t assume all devices will support the TRRS headsets with mics. Some devices will have a dedicated microphone in line, and others will just omit it outright. But, because nothing can ever be simple, that\u0026rsquo;s not always the case. Enter, balanced audio.\nWhile uncommon for 3.5mm cables like most headphones, on a lot of pro audio gear that uses the much beefier ¼ inch jacks will use a TRS cable to carry a mono signal.\n[TODO] Balanced, XLR, Phantom 48V\nTypes of Hardware Controls # Keys, Buttons, and Switches # Potentiometers, Sliders, and Encoders # +Motorized, Wheels\nLEDs and Feedback # Interfacing # DIN, TRS-A, TRS-B, USB, USB host adapters, etc.\nClock jitter\n[TODO] Building a MIDI Controller Using Arduino (YouTube, Switch \u0026amp; Lever)\nNote, there\u0026rsquo;s a pretty limited number of MPE capable instruments, thankfully there\u0026rsquo;s still a decent price range between them. This list is not exhaustive, but I think gives a good sampling:\nSmall:\nKeith McMillen KBoard\nRoli Lightpad Blocks\nHaken Audio ContinuuMini\nBig:\nExpressive e - Osmose (Demo)\nRoli Seaboard (Block, Rise)\nLinnStrument\nHaken Audio Continuum\nAudio Interfaces # [TODO, ADAT, preamps, headphone amps, phantom48, Hi-Z, Lo-Z]\nWeird side note:\nSome VOIP software (Discord, Zoom, etc.) may want you to use a Sample rate of 48Khz and a Buffer size of 192. No clue why.\nHeadphones/speakers # [TODO studio headphones V regular]\n[TODO openback v Closed]\n[TODO Planar magnetic]\n[TODO Quadraphonic, Atmos, 5.1, etc]\nEurorack # Modular Grid an online tool for dreaming about hardware setups (Eurorack, Guitar Pedals, and a few other modular formats)\nCool Hardware # Blokas Midihub\nNovation LaunchPad X\nlaunchpad.py - python library for the Novation Launchpad Line r_cycle for Pure Data Library *most Launchpads T1 Algorithmic Midi Sequencer\nSixtyfour pixels MIDI controlled relay\nSixtyfour pixels \u0026lsquo;Noodlebox\u0026rsquo; sequencer\nSixtyfour pixels \u0026lsquo;Hack-Du-Strum\u0026rsquo;, a page featuring mods of their strummable controller, similar to an omnichord\nSleepy Circuit\u0026rsquo;s \u0026ldquo;Hypno\u0026rdquo; CV live visuals box\nNotes on Hardware NOT to buy # The Teenage Engineering Pocket Operators are cool, fun, etc. But they\u0026rsquo;re pretty fragile and have some issues. Generally, I don\u0026rsquo;t think they\u0026rsquo;re worth it. Here\u0026rsquo;s Some alternatives (Yes, I know there\u0026rsquo;s a huge price difference- remember, you get what you pay for.) Analogue Pocket DityWave M8 or, if you\u0026rsquo;re feeling spendy, the OP-1 and OP-Z are options. Each have their own quirks, though, so be sure to do your research. Regardless, I really don\u0026rsquo;t recommend the TE PO\u0026rsquo;s The non-mini Launchkey Series from Novation. They keybeds are absolute shit. I had to mod my Mk2 to make the pads work, and the mod wheel has issues too. It\u0026rsquo;s just\u0026hellip; not good. Notes on how your hardware will be more expensive than you think # [TODO] Balanced audio, group loop isolation, impedance matching, isolated power supplies, cables \u0026hellip; so many cables\nDAWless? # DAW-less just means not using a Digital Audio Workstation to make your music, usually though this means not using a typical computer at all. Here\u0026rsquo;s a good example of a DAWless performance:\n10 Things You NEED to know before Building a Dawless Synthesizer Setup (YouTube, BoBeats)\nPlus, digital tools won't suffer as much from the issues with tuning, latency compensation, the need to worry about a noise floor, etc. Digital aliasing might be a problem, but even that can usually be worked around. To point out my own hypocrisy now, I'm really into Eurorack, which is an inheritly analog, and stupidly expensive, medium. Making music isn't all logic. If you think a certain tool will just work well for you, you shouldn't deny its value just because something else may provide the same function. Form matters. Your enjoyment matters. To me, there was inherit value in the joy of working with real patch cables and the physical knobs, even if VCV Rack is the 'better' tool and doesn't cost a full months rent per module. Okay, So, yes. There is some concern about everything in (1) with digital stuff. Latency compensation with digital tools is still a thing. Your midi controler will still have a delay. A digital hardware synth will still send an analog audio signal out, which will have some latency. MIDI clock may not get distributed around your system perfectly, resulting in issues as well. I'm meaning in general. Like, if you want to record a guitar in and hear any DSP effects you have on the chain in your DAW in real time, you'll have to compensate for that full round trip time, which can easily set you off beat a solid amount when recording in. Plus, most analog instrument are not balanced audio, so there will be some noise getting in compared to the complete lack of noise in a software source/effect or the very minimal noise of that from a balanced audio source. If you have no idea what this means, that's fine, I'm about to go over it. This is just to prevent some really early 'um, acktually'. All that is to say, analog gear is generally a bigger PITA to deal with than digital gear, and often the claims for why to go analog are total shit; however, some of the issues with analog gear are actually just issues with any hardware music tool. Distortions and anything with feedback is the most obvious counter point, and I'll concede on that one. Digital distortion, drive, and feedback based effects are almost universally worse sounding and eat up a ton of digital resources on your computer. String bending, plucking, strumming up or down, palm muting, how hard you pluck, whammy bars, harmonics (a type of playing), slapping the strings, slapping the body, tuning live... The guitar is an extraordinarly hands on instrument, it doesn't make just one sound. If you pick the analog gear because it does offer something better, looks cooler, or it's cheaper for some reason there's obviously no shame in that. Your decesion was still educated. That's what matters. "},{"id":277,"href":"/music/software/music-software/","title":"Music Software","section":"Musics","content":" Music Software # Audio Sources # Name \u0026amp; Link Description Screenshot Various from SugarBytes I really like Consequence - Chord GroveboxFactory - Mod Matrix PolysynthGuitarist - Guitar Emulation, easy to programDrum Computer - Drum SynthObscurium - I don\u0026rsquo;t even know, but it\u0026rsquo;s cool.Cyclop - Neat Synth, good for bassEgoist - Weird audio stem re-groover?Thesys - MIDI Sequencer Websites # Google Drum Machine (Like XO)\nAudio backends # [TODO]\nWindows # ASIO # Direct Sound # WSAPI # Linux # Seriously, check out Making Sense of The Linux Audio Stack on Venam\u0026rsquo;s Blog. It\u0026rsquo;s a rather painfully long read, but if you\u0026rsquo;re trying to do Linux audio, it\u0026rsquo;s probably less painful than trying to figure it all out by stumbling though it. ALSA # Pulse Audio # Jack # A few programs you wouldn\u0026rsquo;t expect to run directly though jack, one of the more annoying is Telegram. To fix Telegram at least, just use alsoft-config and go to Backends-\u0026gt;General, then right click Disabled backends and add JACK. Pipewire # Really weird stuff that doesn\u0026rsquo;t fit elsewhere # https://github.com/oakes/ansiwave\nhttps://dood.al/pinktrombone/\nhttp://leafcutterjohn.com/forester-2022/\n"},{"id":278,"href":"/phil/opphil-old/","title":"OpPhil Old","section":"PHIL","content":" Old Version, needs migrated: # Because you\u0026rsquo;re now somebody in the know about topics relating to technology and have a deeper understanding about issues that may effect the public, such as The FBI V Apple encryption case, Issues regrading internet speed and infrastructure, or The Government/NSA spying on people. There are plenty of issues that weather you like it or not you\u0026rsquo;re one of the few with enough information to truly understand and inform your peers. A well known digital writes and freedom advocacy group you may consider supporting is the Electronic Frontier Foundation or EFF, as they do some absolutely incredible work making sure we maintain our digital rights both in the role of consumers as well as hackers, tinkerers, security researchers and nerds. You may consider checking out Free press as well, though above all else educating yourself and others about issues to end ignorance and fear when it comes to these issues is more valuable than anything else.\nFurthermore, there\u0026rsquo;s a general view in the technical community that we should help push adoption of superior platforms. This is usually either for a push for decentralized services like Mastodon or Dat, or a push for FOSS (Free and Open Source) software like Linux or LibreOffice.\nMost in the technical community believe that you should have full control over the devices you own. This is a major factor in why so many technical people host their own servers and build a lot of the crazy things they do. As a result you\u0026rsquo;ll hear a lot about rooting or getting superuser or root on various devices as well as Right to Repair.\nMany in the tech community are on the heartbeat of issues surrounding copyright, fair use, and the Digital Millennium Copyright Act or DMCA as without exceptions, a lot of security research would not be legal and it\u0026rsquo;s of direct importance to issues like software piracy and issues surrounding YouTube\u0026rsquo;s automated ContentID [TODO: add links]\nMoving on from that though, there is increasingly a concern about energy consumption and environmental consequences of technology use. Data centers alone are already consuming over 2% of the worlds electricity and that number is set to grow exponentially in the coming years. Because of this having a light, fast, http://motherfuckingwebsite.com/ instead of a bloated, JavaScript heavy page actually matters. http://gauthierroussilhe.com/en/posts/convert-low-tech as well as https://solar.lowtechmagazine.com/2016/05/how-to-go-off-grid-in-your-apartment.html are good sites that go more in depth on this issue. Now, at the same time, I\u0026rsquo;m not going to act all high and mighty, my desktop and monitors use in excess of 300w, but it is still something to be mindful of.\nFinally, I\u0026rsquo;d like to make a few notes about online communities, trolling, hate speech, and the like. Clearly the tech industry leans significantly on the liberal/libertarian side; however, most of us also strongly support your right to say whatever you like even if we don\u0026rsquo;t support it. This is particularly frustrating when it comes to large, non-grouped online communities like Twitter or Tumblr where except by blocking, everyone is in the same public sphere instead of isolated. While the isolation can have negative effects too, like echo chambers where false information and hate breed, the smaller communities are also beneficial as they allow for a better sense of community and for individual moderation policies decided by the users instead of awkward rules like Tumblr\u0026rsquo;s NSFW ban and the chaos that ensued. Clearly the lines between hate speech and trolling and free speech are a problem online, and frankly the internet is young. We haven\u0026rsquo;t really figured out the right way to handle it yet. Should Twitter have the right to remove the Alt-Right or are they to important of a political forum to deny freedom of speech despite being a public company? Is it ethically okay to use services like Tor for privacy when by doing so you\u0026rsquo;re indirectly helping people get away with things like child \u0026hellip; abuse (I don\u0026rsquo;t want this document getting flagged by something, ironically). Or because the tools are going to exist regardless and criminals will always find another way is it okay? The truth is, it\u0026rsquo;s not black and white, and it\u0026rsquo;s well worth your time to sit down and consider what you are personally okay with and what you think, as a society, we need to change and how we might go about doing that. Personally, I think services like Mastodon which offer security and privacy while keeping individual communities free to handle themselves are the best option, but they\u0026rsquo;re also more complicated. Just know that decision you make online can have real world consequences, and that at the end of the day, there\u0026rsquo;s a human on the other side of that screen.\nOther interesting Case Studies # https://www.nytimes.com/2017/04/30/business/traffic-light-fine.html https://arstechnica.com/tech-policy/2018/08/verizon-throttled-fire-departments-unlimited-data-during-calif-wildfire/\nFinally, a little less NSFW, the Maker and engineering communities also tend to overlap rather heavily with more artistically minded and sub-culture heavy groups, ranging from those obsessed with comics to anime nerds or furries. I really recommend you do at least a little research into various sub cultures and geek culture to better understand some of the people you\u0026rsquo;ll probably interact with. You might just find something new you enjoy while you\u0026rsquo;re at it.\n[TODO, add info about digital sex toys]\nAlso, because this got a bit heavy for a bit, let\u0026rsquo;s touch on Rule 34. We all know it, but where does it come from? 4Chan of course. Here\u0026rsquo;s the full set:\nTODO # Education, college, prices, highschool homework and personal time, Drugs,\nShould I block ads?\nAlexa without the creep\nRationalWiki\nInteractive Media Bias Chart (JavaScript heavy)\nr/TheMotte (Reddit) - Seems like a good place to test ideas,haven\u0026rsquo;t looked into it yet\nsocial networking: re: mastodon, tilde.club/town , webrings, IRC, Telegram, etc.\nmisc todo:\nhttps://www.reddit.com/r/politics/comments/hgt81r/outrage_mounts_over_report_russia_offered/fw6ereb\nhttps://www.reddit.com/r/ThatLookedExpensive/comments/gptu7t/john_connor_doing_his_part_fighting_for_the/frqo31d?utm_source=share\u0026utm_medium=web2x\nhttps://www.reddit.com/r/politics/comments/ff54xc/trump_flatly_admits_hed_leave_americans_stranded/fjwpqub?utm_source=share\u0026utm_medium=web2x\nhttps://www.reddit.com/r/news/comments/eyd0mb/rush_limbaugh_announces_he_has_lung_cancer/fggkmdg?utm_source=share\u0026utm_medium=web2x\nadd critism of tiktok, grubhub, Behringer, etc, and avoiding assholes the \u0026ldquo;A bag of dicks\u0026rdquo; argument\n"},{"id":279,"href":"/music/other-resources-music/","title":"Other Resources, Music","section":"Musics","content":" Other Resources # PatchStorage - A community of many active audio \u0026amp; visual programming enthusiasts who share and discuss their projects!\nhttps://learningmusic.ableton.com/\nhttps://codepen.io/teropa/full/bRqYVj/\nSynchronized Swept-Sine: Theory, Application, and Implementation\nAutoEq (GitHub) - Automatic headphone equalization from frequency responses\nSample Packs \u0026amp; Wavetables # Echo Sound Works Coda (~$30) - Wavetables \u0026amp; Serum presets. These wavetables are truly amazing.\nCool People # https://twitter.com/RichardDevine https://twitter.com/LOOKMUMNOCMPUTR\nhttps://twitter.com/electricdahliia\nhttps://t.me/thePatchBay - some shameless self promo, as this is my chat.\nNeurotypique https://www.youtube.com/channel/UC4oBI5piGMznFMZdtEC0FhA\nOmri Cohen, a Rack Master\u0026rsquo;s YouTube Channel\nLoopop RedMeansRecording AdamNeely AndrewHuang Rob Scallon Pipe Organ Video (YouTube), Theorbo Video (YouTube),\nReddit: https://www.reddit.com/r/vcvrack/ , https://www.reddit.com/r/synthesizers/ , https://www.reddit.com/r/synthdiy/ , https://www.reddit.com/r/modular/\nMisc Music Tips and Tricks # Try sidechaining your effects against the dry input - you can duck your delays and verbs out of the way for fresh input while still keeping them spacious. "},{"id":280,"href":"/phil/phil-and-the-internet/","title":"Phil and The Internet","section":"PHIL","content":" Let me pass the mic, # https://sadgrl.online/cyberspace/internet-manifesto https://yesterweb.org/#manifesto https://sanya.gay/#manifesto https://oekeiko.neocities.org/blog/lawofhouse https://dheinemann.com/posts/2022-01-09-this-is-not-the-web-ive-known Politics and The Internet # The important laws you need to understand: # CDA (no pronz) \u0026amp; §230 # Hazbin Hotel Pilot (Viziepop, YouTube) The Communications Decency Act of 1996 (CDA) was the United States Congress\u0026rsquo;s first notable attempt to regulate pornographic material on the Internet. In the 1997 landmark case Reno v. ACLU, the United States Supreme Court struck the act\u0026rsquo;s anti-indecency provisions.\nCommunications Decency Act (Wikipedia) Alright, so it was some failed law that tried to ban porn? Well, yeah, BUT it did pass and was only later, in the aforementioned Reno v ACLU case, struck down - and there, only the anti-indecency provisions. This left one very, very important little bit, Section 230, that today the entire internet relies on, The 26 words that created the internet:\nNo provider or user of an interactive computer service shall be treated as the publisher or speaker of any information provided by another information content provider\nIn human language, this means Section 230 is what protects Facebook from being liable when some dipshit posts a pirated movie to Facebook, makes a terrorist threat, or just spreads libel. Similarly, it gives the platforms moderation privileges, that is if some Nazi joins your group chat, you can give him the boot.\nThe big problem right now is whether fact checking, where a little box shows up under a tweet or YouTube video to say something like \u0026ldquo;Science knows Climate Change is man made and a big fucking problem\u0026rdquo; or \u0026ldquo;Biden won the election, stop being such a little bitch\u0026rdquo; is allowed, or if it makes the site a publisher, there by taking away their §230 protections.\nHere, this video covers everything I could say a lot better than I can easily write here, so here\u0026rsquo;s the two things I\u0026rsquo;d say are pretty much required reading, Section 230 is Good Actually (EFF.org) and this video from DEF CON:\nEverything You’ve Heard About Section 230 Is Wrong from Wired is really god but is behind a paywall\nDMCA (attempting to fix 230, poorly) # Alright, so 230 made sites not liable at all (ish) but this actually isn\u0026rsquo;t great either, as what is someone supposed to do if they get their copyrighted work posted online? No reasonable person (or business) can afford to sue literally every time someone posts their shit, so, the DMCA - the Digital Millennium Copyright Act- was born, to steal from Wikipedia:\nIt criminalizes production and dissemination of technology, devices, or services intended to circumvent measures that control access to copyrighted works (commonly known as digital rights management or DRM). It also criminalizes the act of circumventing an access control, whether or not there is actual infringement of copyright itself.\nBut this has a whole host of issues. I\u0026rsquo;m going to redirect this to This page from the EFF though, as I think that does a much better job of explaining the issues, and then you might want to read This list of Criticisms of the DMCA on the Wikipedia page for the DMCA.\nMore recently, the DMCA takedown of YouTube-dl, a program that lets users download videos from YouTube among many, many other video sites, was a big issue that riled up the technical world, and for which it seems most people think was a flagrant misuse of the DMCA against a tool, not a specific instance of infringing content. Extra stupid when you realize the computer itself could also be argued to be the tool enabling infringement.\nThe abuse of automated, algorithmic takedowns for the sake of keeping up with the DMCA has also resulted in cops playing music to prevent videos from being on social media (VICE).\nExceptions # Alright, so the DMCA is a dumpster fire burning with a raging satanic hell blaze which only emits darkness, but thankfully the sentient darkness that represents the American people has carved away a few crumbs that we can use to sustain ourselves with in these dire times. The list below are things for which you can safely outright ignore the DMCA and break into things as you please. I\u0026rsquo;ll go over my favorites, but here\u0026rsquo;s the list in full on Wikipedia.\nEbooks can be stripped for the sake of using a text-to-speech system Snippets of Movie/Video DRM can be stripped for the purposes of criticism/review, education, and accessibility while not directly stated, an exception for \u0026lsquo;Jailbreaking\u0026rsquo; and \u0026lsquo;Rooting\u0026rsquo; iPhones and Androids was made, so that\u0026rsquo;s allowed. Forcing 3D printers to use 3rd party filament \u0026ldquo;Computer programs, where the circumvention is undertaken on a lawfully acquired device or machine on which the computer program operates solely for the purpose of good-faith security research and does not violate any applicable law\u0026rdquo; In general, if you\u0026rsquo;re doing it so you can repair the device, you\u0026rsquo;re all clear as well. FOSTA/SESTA (Breaking 230) # FOSTA and SESTA (Wikipedia), the \u0026lsquo;Fight Online Sex Trafficking Act\u0026rsquo; and \u0026lsquo;Stop Enabling Sex Traffickers Act\u0026rsquo; are both massive failures. Their original goal is more or less in the name, but even the U.S. Department of Justice said it was a bad idea. Again, I\u0026rsquo;m going to hand this off to better sources. The first link there, to the Wikipedia article, has a large section on the criticism of the bills. I strongly encourage you read it, and this article from the EFF does a good job of going into its problems too.\nThese are the bills that caused Craigslist to remove their \u0026lsquo;personals\u0026rsquo; section.\nSOPA \u0026amp; PIPA (Trying to break everything) # SOPA, or the Stop Online Piracy Act (Wikipedia) from ~2012 was a big deal at the time. Google, Facebook, Twitter, Amazon, eBay, Tumblr, Mozilla (Firefox), Mojang (Minecraft), Wikipedia, and more were all active in letting users know this bill was bad news. It was effective, but it was one hell of a fight. PIPA (Wikipedia), the \u0026lsquo;PROTECT IP Act\u0026rsquo; was just the senate version of the bill, but it is still worth reading up on it quickly, especially the \u0026lsquo;Reception\u0026rsquo; section of the linked Wikipedia article.\nFor a slightly dramatized, dubstep recap: (skip to 2:28)\nCOPPA \u0026amp; CIPA (Breaking things\u0026hellip; For the children!) # COPA (Wikipedia), the Child Online Protection Act, passed in \u0026lsquo;98 and seeks to keep minors online safe, mostly this just resulting in the \u0026lsquo;Are you 18?\u0026rsquo; checks that surely no minor has ever lied to bypass.\nOh, what\u0026rsquo;s that, that\u0026rsquo;s COPA with one \u0026lsquo;P\u0026rsquo;, my bad, here\u0026rsquo;s COPPA (Wikipedia), Child Online PRIVACY Protection Act. Which if you read up on you\u0026rsquo;ll see has been a mess for free speech, hurts small business, fails to protect kids anyway, and only seeks to create an artificial (and broken) \u0026lsquo;safe space\u0026rsquo; online for kids, which is especially dumb as it ignores the most obvious problem: no kid wants to be treated like a kid. Moreover, why the fuck should kids get privacy protection until 13 and then ope, just like that fuck em\u0026rsquo; we\u0026rsquo;ll collect all their information and sell it to advertisers, what magical thing happens at 14 that makes collecting and selling your data okay? Double standards aside, this has caused real issues in implementation and enforcement, just see What\u0026rsquo;s Gone Wrong With the FTC\u0026rsquo;s COPPA Agreement With YouTube (Folding Ideas, YouTube).\nCIPA (Wikipedia), the Children\u0026rsquo;s Internet Protection Act, is a free speech fuck you to all children as it requires web filtering. The ACLU and ALA both challenged CIPA, arguing that the filtering it would necessitate at public libraries would limit free speech, and they won\u0026hellip;. and then lost on appeal, with the stipulation that on request a librarian unblock content for an adult. Of course, this is still a major fuck you to kids. It\u0026rsquo;s more or less normalized school web filters that are far too overzealous, as anybody that went to high school since the 2010s can tell you. Hell, my public school even had sites blocked for \u0026lsquo;Alternative Beliefs\u0026rsquo;.\nLook, I\u0026rsquo;m not against protecting kids online, no 8-year-old should be exposed to 2 girls and a cup. I know for a fact that some kids get fucked up seeing this shit too early. My mom\u0026rsquo;s a family law attorney, and while obviously case specifics are kept quiet, general ideas like \u0026lsquo;saw a kid got addicted to porn because the dad showed it to him\u0026rsquo; are things I\u0026rsquo;ve heard. It\u0026rsquo;s awful. I get it. But you can\u0026rsquo;t stop a shitty parent with legislation, no matter how hard you try.\nAlright, here\u0026rsquo;s my rant: Kids need to be able to look things up and be trusted. I know it\u0026rsquo;s rough, nobody wants a 12-year-old looking up porn, but maybe the parents should actually have that talk and explain that stuff, answering any and all questions, rather than making the kid have to look it up in the first place. Sex education (in the US at least) is largely abstinence only and primarily serves to just make teens feel like shit about their bodies and choices. But, even beyond that, kids in general need to be able to fuck up gracefully. I get it, the internet always remembers, so we don\u0026rsquo;t want them exchanging nudes or writing about some illegal thing they did. Sure. But on the other hand, cutting them off from \u0026lsquo;real\u0026rsquo; social media create a divide that tells them they can\u0026rsquo;t even be trusted to make the most basic of responsible decisions, which destroys self-confidence and independence. It keeps kids from looking into alternative religions and values, it keeps kids from having access to resources to cope with potential abuse they may be going though. The only reality in which this shit makes any sense is when parents understand to help them bypass it when ready, those parents exclusively have their kid\u0026rsquo;s best interests in mind, and those interests aren\u0026rsquo;t in any way clouded by personal values instead of what is actually best for the kid.Kids should be given full access and punished (with adequate calm explanation of why it was wrong) for accessing things they\u0026rsquo;ve been told not to, not be restricted from accessing those things in the first place. This still has privacy problems (re: kid trying to look up information about abusive parents) but it\u0026rsquo;s a start. This is only made extra stupid when you consider that the only possible filter that will work to completely eliminate the \u0026lsquo;bad\u0026rsquo; sources is an allow-sites list, as otherwise it will be a game of endless wack-a-mole, yet this allowed sites list could never come close to encompassing the wider network of amazing information from smaller sites (like this one) thus depriving kids of resources.TLDR: Parents need to be parents, not blindly trust content filters. GDPR (They tried) # Note, unlike the rest of the items in this list, the GDPR is NOT legislation from the United States, instead it\u0026rsquo;s applicable to all EU residents @SamantazFox / https://samantaz.fr EARN IT (Breaking things more) # All About Section 230, The EARN IT Act and What They Mean for Free Speech and Privacy\nPatriot Act \u0026amp; FISA (Watching you) # CFAA (Hack The Planet?) # [TODO] internet\u0026rsquo;s own boy: Aaron Swartz\nUpdate, June 3rd 2021: The Supreme Court has restricted the scope of the CFAA, making it less awful\nThe opinion can be read here. The average person only really needs read point (d) from the syllabus:\n(d) The Government’s interpretation of the “exceeds authorized access” clause would attach criminal penalties to a breathtaking amount of commonplace computer activity. For instance, employers commonly state that computers and electronic devices can be used only for business purposes. On the Government’s reading, an employee who sends a personal e-mail or reads the news using a work computer has violated the CFAA. The Government speculates that other provisions might limit its prosecutorial power, but its charging practice and policy indicate otherwise. The Government’s approach would also inject arbitrariness into the assessment of criminal liability, because whether conduct like Van Buren’s violated the CFAA would depend on how an employer phrased the policy violated (as a “use” restriction or an “access” restriction). Pp. 17–20.\nSo, this ruling has significantly reduced the clusterfuck that CFAA created.\nNet Neutrality (and the buying of the FCC) # HIPAA (attempting to unfuck healthcare a wee bit) # https://www.mnot.net/blog/2020/08/28/for_the_users RFC8890\nEARN IT # https://medium.com/tech-thoughts-by-thegreatonion/how-the-earn-it-bill-undermines-americans-rights-online-8894d17cc427\nPrivate Internet Policing # Credit-card firms are becoming reluctant regulators of the web (The Economist)\nCentralization \u0026amp; Monopoly # Cloudflare, AWS, etc.\nWorst Case (Tim Bray @ tbray.org)\nGoogle sends anti-regulation propaganda to small businesses using Google Maps (arsTechnica)\nProtecting general computation # Encryption and illegal numbers # https://en.wikipedia.org/wiki/Illegal_number\nHDCP master key release (Wikipedia) [TODO, + background on what HDCP is]\nhttp://www.catb.org/~esr/hdcp-master.txt\nhttp://libraryofbabel.info\nhttps://www.wikiwand.com/en/Texas_Instruments_signing_key_controversy\nhttps://science.slashdot.org/story/20/05/25/0136238/texas-instruments-makes-it-harder-to-run-programs-on-its-calculators\nDo you own your hardware? software? # Format shifting # Data and Privacy # COMMENTS on \u0026ldquo;Facebook criticizes Apple’s iOS privacy changes with full-page newspaper ads\u0026rdquo; on Hacker News\nTerms of Service and EULAs # Terms of Service Didn\u0026rsquo;t Read\nStalkerware # Creeping As A Service\nAI # Sufficiently Advanced Technology and Justice (Hackaday, Elliot Williams)\nGoogle Amp # Google AMP Can go to Hell (Polemic Digital)\nSocial Media # Facebook deliberately made people sad. This ought to be the final straw (The Guardian) (2014)\nCensorship # Parler V Mastodon V Twitter\nFederation # See The post about The Fediverse, ActivityPub, \u0026amp; The IndieWeb .\nOther Resources # Who Controls the Internet? And should they? (bert hubert)\nsadgrl\u0026rsquo;s Manifesto, The Web Is Fucked\n"},{"id":281,"href":"/phil/phil-other/","title":"Phil Other","section":"PHIL","content":" Thank you # If you\u0026rsquo;ve made it this far, I just want to say thank you. We need more people to really consider how ethics, politics, and copyright shape the world around us with technology and art as we design it and proceed with it. DeepFakes, Automated driving, and even more mass online censorship are issues we\u0026rsquo;re only going to face more with time, and it\u0026rsquo;s people like you who are going to help make sure we take the best path we can. So, from the bottom of my heart, thank you.\nPolitical or social commentary ramblings from hackers solarpunks and engineers # The Great Asshole Fallacy\nAmeyama\u0026rsquo;s Values Update\nHow to Dropout\nA Sick Giant\nMetaphors We Believe By\nHope In Every Box (YouTube)\nAnd Then We\u0026rsquo;ll be okay (YouTube)\nThe Guy I Almost Was (Comic)\nA New Digital Manifesto\nSmall Technology Foundation\nFive Geek Social Fallacies\nA message from your university\u0026rsquo;s VP for magical thinking\nPosts I found interesting but haven\u0026rsquo;t found a place for yet: # xkcd Free Speech https://xkcd.com/1357/ List of Trump Quotes https://www.reddit.com/r/politics/comments/ff54xc/trump_flatly_admits_hed_leave_americans_stranded/fjwpqub/ List of Rush Limbaugh Quotes https://www.reddit.com/r/news/comments/eyd0mb/rush_limbaugh_announces_he_has_lung_cancer/fggkmdg/ Harry Potter Removed Book https://www.independent.co.uk/news/world/americas/harry-potter-banned-school-library-nashville-tennessee-exorcist-a9087676.html?utm_source=reddit.com Why Parents shouldn\u0026rsquo;t be allowed to take their kids out of sex-ed https://www.reddit.com/r/onguardforthee/comments/cw3z9m/why_parents_shouldnt_be_allowed_to_take_their/ey85x0l/ Medical Bills https://www.reddit.com/r/bestof/comments/d4mvep/umerkaaba_is_told_to_threaten_to_file_for/ Digital Rights and Textbooks https://www.reddit.com/r/assholedesign/comments/fg5th7/my_200_textbook_wont_let_me_copy_paste_more_then/ Censorship of history https://www.commondreams.org/news/2020/01/18/government-cant-airbrush-history-national-archives-denounced-blurring-out-anti-trump TikTok https://www.technowize.com/a-look-back-at-tiktok-controversies-and-biggest-foul-ups/ End Software Patents http://endsoftpatents.org https://www.collaborativefund.com/blog/five-lessons-from-history/ Humanity was born way ahead of its time. The reason is grabby aliens. (Rational Animations, YouTube) "},{"id":282,"href":"/phil/phil-misc/","title":"Phil, Misc","section":"PHIL","content":" Animal Rights (Industrial Scale Slaughter) # Organ donation # Tech can\u0026rsquo;t solve all your problems # Human problems need human solutions\nGuns # "},{"id":283,"href":"/phil/religion/","title":"Religion","section":"PHIL","content":" Religion # Religion is, shocker, a deeply personal thing.\nMaybe you\u0026rsquo;re of the opinion that you\u0026rsquo;re following the One True Good™. Maybe you think that everyone is crazy with their belief in imaginary friends. Maybe you think all of humanity is just a sort of womb for a new god.Maybe you think all the gods are real, and made from the belief of their followers. Maybe you just don\u0026rsquo;t give a 💩 Maybe you give a 💩 some days, think it\u0026rsquo;s all a bunch of 🐂💩 others.\nUltimately, as long as it is a personal thing and you keep it a personal thing, which camp you fall in to doesn\u0026rsquo;t really matter. Unfortunately,\nMany religions view spreading the Word Of God™ as a key thing. Religion is becoming increasing tied to political ideology.(1) Religion is sometimes used to justify doing some really shit things Religion has the ability to make shit things done previously (often 500+ years ago) keep people very, very angry This anger is sometimes used by those with ulterior motives Some religions are predatory on those that fear death Now, depending on who you are - which, if you\u0026rsquo;re on my website, I can make some good assumptions that you\u0026rsquo;re probably a young, middle-class, technically inclined person, and probably either atheist or at least not-Christian - you may be thinking \u0026ldquo;Why do I care? Those old white guys have their views, I have mine. Can\u0026rsquo;t change it.\u0026rdquo;\nWell, if you are of the nerdy variety, the professional, nerdy community (engineers, programmers, etc.) is strangely divided. The \u0026lsquo;old guard\u0026rsquo; is largely relatively conservative and religious, but as time has moved forward the younger generation taking these positions are largely liberal and not religious at all. If you\u0026rsquo;re going to interact with these people, it helps to know how they think and how to identify how they think and know how to debate in a productive manner. Similarly, if you\u0026rsquo;re a conservative Christian (and you\u0026rsquo;re still reading - which, props. I hope you do actually take my perspectives and think on them, even if you don\u0026rsquo;t agree with any when you\u0026rsquo;re done.) I suspect this will help you see the \u0026ldquo;other side\u0026rdquo;.\nBefore going any further though, I want to address a point a friend that reviewed this page for me brought up:\nLike many people online, you blur three things I see as distinct: \u0026ldquo;religion\u0026rdquo;, \u0026ldquo;religious indoctrination\u0026rdquo;, and religiously-motivated action in the world. You try to separate some of the different aspects of these into what you do and don\u0026rsquo;t find problematic, but it\u0026rsquo;s a bit sloppy. - jan pona I actually agree with the comment that I blur these lines, but I think the lines are so blurred at this point anyway that talking about any one of them in isolation is like using a scalpel to mow a lawn: that is, it may be more precise, but it will take significantly longer and make it hard to see the bigger picture, if it can even be done at all.\nSo, before I go out painting in broad strokes, I do want to point out that, yes, there are positive instances of religion and religiously motivated action in the world.\nEvangelical environmentalism is a thing. There\u0026rsquo;s quite a few LGBT religious organizations. I\u0026rsquo;m not trying to say these things don\u0026rsquo;t exist. I\u0026rsquo;m also very aware that there\u0026rsquo;s the possibility of an effect similar to that of the vocal minority going on, where the worst people in a large group, even if they\u0026rsquo;re a fraction of a fraction of a percent, can give the group a bad name.\nThe thing is, I don\u0026rsquo;t think it\u0026rsquo;s a vocal minority. Unfortunately, the statistics here aren\u0026rsquo;t the best, but let\u0026rsquo;s piece together what we can:\nAccording to The Washington Post, which, bias, obviously: “Today, roughly three-quarters (73%) of the Republican Party is white Christian, but fewer than one-third (29%) of the Democratic Party identifies this way.” Put the other way, from Good Faith Media, \u0026ldquo;More than three-quarters (78%) of white evangelicals identify as Republican / lean Republican, compared to only 17% who identify as Democrat / lean Democrat.\u0026rdquo; The Trump presidency happened and even at the end of his term - after the Jan 6th clusterfuck - he was still at about 40% approval. Trump - and I really didn\u0026rsquo;t think this needed saying - was a very, very, very devise president. He was hated by \u0026ldquo;the left\u0026rdquo; (and some of \u0026ldquo;the right\u0026rdquo;) for everything from mocking the disabled, to his treatment of women, to his incompetence in running a country with more guidance than what Fox News would provide. There are a lot of single issue voters for Abortion. About 30% of those that are pro-life will vote for someone out of two options for that reason alone. I could go find stats on that, but I think it\u0026rsquo;s pretty obvious that the pro-life and the conservative crowd are a mostly overlapping venn diagram. The only conclusion I can see to this is the same one Shadi Hamid from The Atlantic did: Ideological intensity is rising as the US becomes more religiously divided.\nLet me put it another way: My friend Soatok has a post If You Hate Furries, You’re Anti-LGBT where, uh, the title does the work for me. Clearly, the furry community has become so intertwined with LGBT community that saying you dislike one is a dog-whiste for the other. If we can accept that as fact, even though both straight and even nazi-furries (ugh) exist, then I don\u0026rsquo;t think it\u0026rsquo;s unreasonable to associate the other way. That is, we can imagine an article with the title \u0026ldquo;If You Hate Conservatives, You\u0026rsquo;re Anti-Christian\u0026rdquo;. Of course, you\u0026rsquo;re free to reject this premise. But even if you see them as entirely distinct things still, the above statistics don\u0026rsquo;t lie. There\u0026rsquo;s still a huge corrolation.\nSo, while, yes, in a perfect world \u0026ldquo;religion\u0026rdquo;, \u0026ldquo;religious indoctrination\u0026rdquo;, \u0026ldquo;religiously-motivated action\u0026rdquo;, and politics are all different things that should be talked about independently, we live in a world where they\u0026rsquo;re becoming a big melting pot of some mysterious, vaguely racist smelling substance that you really don\u0026rsquo;t want to step in.\nI really, really want to isolate them, to be a scientist and separate the variables. Unfortunately, that task has long since become impossible, at least in my mind. It\u0026rsquo;s a real shame too, because the result is this post coming off more insensitive and less informed.\nI know it absolutely isn\u0026rsquo;t fair to wrap up the good with the bad, but it\u0026rsquo;s happening regardless of if I try to act like it isn\u0026rsquo;t happening on this page or not. People are seeing religion and politics( Christianity and the amorphous blob that we call \u0026ldquo;The Right\u0026rdquo; or everything-but-Christian and \u0026ldquo;The Left\u0026rdquo;) as one thing. Worse yet, while everything I just said is about Christianity, at least for me, the mental framework I use to think about the most popular religion absolutely infects my views of others. Even if I don\u0026rsquo;t want to, I see other religions and assign them a political leaning mentally, even if the two should be entirely disconnected. Oddly, the same is even true of atheism itself, as it has a liberal connotation now.\nOf course, that ignores many gray areas too. Again, from the same friend\nYou have people who are tolerant but draw the line at atheism because we \u0026ldquo;have no moral compass\u0026rdquo;, and you have two Xtians I know (one in person, one on the internet) who consider Jesus Christ to be the west\u0026rsquo;s Confucius: a quasi-historical figure of great wisdom to emulate, but nothing more \u0026ldquo;religious\u0026rdquo; than that (including the literalness of the Father he talked about). - jan pona But humans compartmentalize. We have prejudice. We see patterns. It\u0026rsquo;s just how we work, so while we can acknowledge it as a fault and fight it - and we should - it\u0026rsquo;s worth recognizing that we do this. We do assume a Christian is right wing. We assume an atheist is liberal.\nHere\u0026rsquo;s where things take a turn.\nThe same representatives that are getting elected because they\u0026rsquo;re Pro Life all for forcing women to give birth are largely responsible for legislation that has negatively impacted copyright law, access to information (like book banning), funding for research and development of new technologies that aren\u0026rsquo;t for war, policy for renewable energy, and the proliferation of tech giants which stifle competition, \u0026hellip; You get the idea. So, even if you don\u0026rsquo;t care about religion directly, the knock on effects will matter to you, because, to quote a dead greek dude:\nJust because you do not take an interest in politics doesn\u0026rsquo;t mean politics won\u0026rsquo;t take an interest in you. - Pericles To wrap up this intro, religion is interesting for its own reasons(2). but the political ramifications of religion in modern societies is what is most likely to affect you directly. Still, it\u0026rsquo;s best to address the cause and not the effect, so lets look at how religion do what it do.\nTo keep things simple, I\u0026rsquo;m going to pick on Christianity for the most part. There are other religions that are hugely involved in the politics of their dominant regions, but Christianity being the biggest religion and the one most of the readers of this page are likely to be familiar with, makes the most sense to talk about. Still, I\u0026rsquo;ll try to keep things as generic as possible.\nHow religions keeps their numbers How religion got to be so intertwined with politics How Religions Keep Their Numbers* # * Ignoring the historical context of forced conversion and modern day regional religious requirements in some regions\nOkay, before we get into this I must engage full on rant mode.How 👏 the 👏 fuck 👏 is it this hard to find an unbiased source for statistics regarding religion? I\u0026rsquo;ve searched for data on the efficacy of different methods of evangelism or the methods by which people came to be religious in at least 50 different ways and can\u0026rsquo;t find jack shit, doesn\u0026rsquo;t matter if I\u0026rsquo;m perusing academic journals or Google. It\u0026rsquo;s just not there.The best I could find was this Reddit thread \u0026ldquo;How do religions spread?\u0026rdquo; and Ask Reddit: How did you choose your religion? but both still lacks real data, obviously.We\u0026rsquo;re talking about one of the most import decisions to how people live their lives and the data is either basically non existent or beyond the reach of someone with experience in digging up incredibly specific information from search engines. Either way is unacceptable.Hell, even for those with strong faith, you\u0026rsquo;d think this is an important question. Wouldn\u0026rsquo;t they want to know how best to spend their time to convert people? If door knocking or public preaching isn\u0026rsquo;t effective, wouldn\u0026rsquo;t they want to know so they can redirect those efforts?Anyway, the end result is there\u0026rsquo;s basically no data for me to work with here, so I can\u0026rsquo;t make any claims about the efficacy of different methods of evangelism or show any data breaking down how people came to be religious (born into it, from a group event, etc.)The best I can do is make some educated guesses. Individual\u0026rsquo;s Spreading the word # Individual to Individual # First thing\u0026rsquo;s first, I know this will be preaching to the choir, but\u0026hellip;\nIf you push your religion on ANYONE you\u0026rsquo;re an ass. It doesn\u0026rsquo;t matter if you\u0026rsquo;re trying to \u0026ldquo;Save their soul\u0026rdquo; or you just think \u0026ldquo;Wow, I sure am more confident and happy with God in my life, you should come meet God too!\u0026rdquo;. You may think it\u0026rsquo;s harmless and you\u0026rsquo;re helping them not spend eternity in Hell and/or making their life better. Unfortunately, it\u0026rsquo;s not harmless. Why?\nThe person you\u0026rsquo;re talking to may be a part of a group a large portion of your religion hates (LGBT, Liberal, etc.) The person you\u0026rsquo;re talking to (or their family/friends) may already be of a religion that has had past reasons to be fearful of your religion - Witch hunts, anyone? Now, you personally may not dislike the person for who they are, hell, maybe you are LGBT or whatever alongside them. Great! Then you know full well why they may be disinterested and should respect that. Let them find your religion on their own. The only exception here is if:\nYou have known the person a long time AND They\u0026rsquo;ve already expressed some interest\nSimilarly, you personally probably haven\u0026rsquo;t gone on any Witch hunts or killed a million Jews. Again, sure, but ya\u0026rsquo; think that maybe someone might hold a bit of a grudge for their ancestors pain? Again, all it takes to respect that is to - and I can\u0026rsquo;t state this enough - shut the fuck up.\nOkay, ranting aside, this really doesn\u0026rsquo;t do that much for conversion. Statistics are, unsurprisingly, basically non existent.\nStill, it\u0026rsquo;s pretty safe to assume (See the big box above pointing at the lack of data) that the majority of people don\u0026rsquo;t come to a new religion by having random conversations with single people unless it\u0026rsquo;s their family or very close friends. And even then, it\u0026rsquo;s not common. So, it\u0026rsquo;s probably safe to assume the majority of people don\u0026rsquo;t come to their religion via door knocking or conversations with strangers. Friends and Family, maybe, but the impact will still be limited.\nThe one exception I see to this is in relationships, that is, while it\u0026rsquo;s more common for two people to be together if they already share religious views, if they don\u0026rsquo;t it\u0026rsquo;s not unlikely that they will with time.\nIndividual to Group (Street Preaching) # Based on what r/Christianity has to say, it\u0026rsquo;s both ineffective and generally makes people less interested in the religion.\nNow, of course this depends on if it\u0026rsquo;s done with at least a modicum of taste, but the only time I, personally, have seen it done well was when the infamous Brother Jed with chart topping hits such as \u0026ldquo;\u0026ldquo;I don\u0026rsquo;t know how the whorehouses in this town stay open — all of you sorority girls are giving it away for free!\u0026rdquo;\u0026rdquo; and \u0026ldquo;\u0026ldquo;A masturbator today is a homosexual tomorrow.\u0026rdquo;\u0026rdquo; pissed of the preacher at Lutheran preacher enough that he set up shop near him with a sign saying \u0026ldquo;Come talk to me about how God loves you\u0026rdquo; and proceeded to actually have engaging, open, non-judgmental conversations about how God, Christianity, The Church™, and he himself view hot topics like LGBT rights, sexuality, abortion, etc.\nAll of that said, It\u0026rsquo;s pretty safe to assume that street preaching isn\u0026rsquo;t about to convert the masses.\nBringing in kids # And now we get to the big un\u0026rsquo;.\nIf someone has kids, that family relationship definitely means they\u0026rsquo;ll have known each other a long time, and kids get curious (or, are just told it\u0026rsquo;s right to begin with).\nSomeone might think, \u0026ldquo;I had a GREAT time in the Church, I want them to experience that too!\u0026rdquo; - I\u0026rsquo;m sure they would have a great time. Missions are AWESOME (for the people going on them, significantly less so for the places they go) and it\u0026rsquo;s a tight nit social group. This is great\u0026hellip; until their son realizes oh, that boy over there is kind of cute, and then feels repulsed by his own feelings, talks to a religious leader, suppresses those feelings, then winds up in the hospital when he uses an object not made to go in his ass for anal play because he\u0026rsquo;s too ashamed to buy a butt plug.\nMy point isn\u0026rsquo;t that a conservative religion is bad, it\u0026rsquo;s that because of the intertwining of the two ideas and kid\u0026rsquo;s lack of an ability to separate the two, situations like the above are bound to happen. While that particular story is fiction, you don\u0026rsquo;t have to look far to find stories of real harm. I don\u0026rsquo;t think I need to cite a source on it being unreasonable to expect a child to separate what ideas are from their religious beliefs and what are political.\nAll of this amplified when you consider just how completely horrific and adult most religions are. Have you READ the bible? This isn\u0026rsquo;t a book for Kids. Hell, even the central story of Christianity - nailing some dude to a cross - is already pretty fucked up. So, naturally, let\u0026rsquo;s have them re-enact it in a little play. I\u0026rsquo;m sure that won\u0026rsquo;t end in some kid being actually nailed to a cross by his friends some day.\nThis isn\u0026rsquo;t meant to be an attack on Christianity. Wicca? Satanism? Buddhism? I don\u0026rsquo;t care what you\u0026rsquo;re going with, it probably has some pretty adult things in there.\nThis will probably be one of the hottest takes on this website, but I really don\u0026rsquo;t think religion is for kids.\nOkay, wait, I see you opening another tab and googling \u0026ldquo;Child Christian indoctrination\u0026rdquo; - so let\u0026rsquo;s look at one of the first results, helpfully from focusonthefamily.com, I\u0026rsquo;m sure that\u0026rsquo;s a fair, unbiased source. Let\u0026rsquo;s just skip to the bottom, shall we:\nHere’s the bottom line: if you hold back from fulfilling your spiritual responsibilities as a parent out of some vague fear of “indoctrinating” your kids, you’ll only be doing them a huge disservice. Moms and dads who withhold instruction from their children and allow them to “decide for themselves” what they’re going to believe are almost guaranteeing that they’ll “decide” to turn away from the faith and embrace “what seems right in their own eyes” (Judges 21:25). That’s a mistake you don’t want to make. - Focus on The Family Wait, hold up? Did this actually just site the book I\u0026rsquo;m saying is used for indoctrination saying \u0026ldquo;nah, it\u0026rsquo;s fine, really!\u0026rdquo; as their source? You think a cult wouldn\u0026rsquo;t be constantly putting messages that say \u0026ldquo;Not a cult, we pinky promise!\u0026rdquo; in all of their reading material? Moreover, this literally says that people wouldn\u0026rsquo;t come to Christianity on their own. So\u0026hellip; someone who goes out of their way to research and look into information, explore alternatives, etc. isn\u0026rsquo;t going to decide (willing choose to) join the religion? That sure sounds like \u0026ldquo;Teach your kids Christianity early, or they might try other things and realize it\u0026rsquo;s 🐂💩\u0026rdquo;* to me.\n* again, I\u0026rsquo;m not saying this just about Christianity, it\u0026rsquo;s just the easy target being the biggest religion in the world. Plus, I feel less bad painting it in a bad light given its size. Furthermore, talking vaguely about all religions makes this much harder to write. Also, in case it wasn\u0026rsquo;t obvious when I joked about it being a biased source, the website literally ends with a phone number to call a pastoral counselor.\nOkay, what about the 2nd result on Google is Journey Free: Recovery from Harmful Religion, which, uhh, hmm. Boy, I wonder if that might be written by someone with a chip on their shoulder. This page agruees Christian children will experience developmental delays and constantly have recurring trauma as they fear Hell. Sure, there\u0026rsquo;s maybe some really extreme Christian groups that are this bad, but your normal Church probably won\u0026rsquo;t do this either.\nSo, is there an actual, researched moderate view? Well, clearly I\u0026rsquo;m not the guy to write that. But I did find The Psychological Processes and Consequences of Fundamentalist Indoctrination by Josh Cuevas, a professor at the University of North Georgia. Which as TL;DR basically agrees that at least religious education is indoctrination \u0026ldquo;because it asks the child to bypass reason and evidence, and instead accept something as truth that is not known to be true by the authority figure.\u0026rdquo; and that \u0026ldquo;This also creates greater possibilities for extremism and violence.\u0026rdquo;, though, really, go read at least the Conclusion (only 8 paragraphs) for yourself. It also helpfully mentions how Islamic communities are affected as well.\nI think it\u0026rsquo;s pretty safe to assume the vast majority of religious people are religious because it\u0026rsquo;s how they were raised. It\u0026rsquo;s effective, it\u0026rsquo;s normalized, and (3) is a guaranteed route for growth.\nMissions # Look, for this one I just can\u0026rsquo;t sugar coat it, Missions:\nHistorically, have spread disease Yay! Smallpox! Cover up or distort the existing culture if effective, which, is the point, and still pretty messed up IMHO. Oops! We did an Imperialism! Are often used for their domestic clout chasing \u0026ldquo;Look at all the good we did!\u0026rdquo; \u0026hellip; When just donating money directly would do much, much more good. Send often untrained people to do work they shouldn\u0026rsquo;t be doing, but pretend to be better at Like when one girl killed 105 Ugandan children due to her lack of training Unfortunately, getting what I can from the (lack of) data I have, it appears that they\u0026rsquo;re probably the next most effective method next to popping out more kids, as according to some data from the Mormon church, its missionaries baptized 233,729 new converts in 2017. For comparison, they claim to have 6,763,019 members. So, that\u0026rsquo;s a significant amount of growth. However, given the size of the Mormon mission program compared to other religions, extrapolating this data may be unwise.\nPolitics # [TODO] The Trial of the Monarch - The Venture Bros. [S01E12] Death Religion \u0026amp; Taxes # Justifying Shit Things # [TODO] using the broad scope of religious texts to read whatever agenda you choose.\nIf You See Something, Say Something Call out the bullshit. # From the Inquisitions to 9/11 and School Shootings; from largely supported actions to rouge actors, religion has been used by both groups and individuals to justify shit things. That isn\u0026rsquo;t going to stop any time soon. Each of those shit things may be a tragedy in its own right. But they also add up to people seeing each other as the enemy. This isn\u0026rsquo;t just from one religious group to another, either: The Left™ is increasingly seeing not just The Right™ as an enemy, but the religious organizations - Mostly Christian - that under pin it.\nHell, if you\u0026rsquo;re Liberal you probably just went \u0026ldquo;Well, yeah. Those bastards took away Abortion access, try to ban books, \u0026hellip;\u0026rdquo;\nIf you\u0026rsquo;re Christian, you probably thought \u0026ldquo;See! You see us as a monolith and think all our views are all bad!\u0026rdquo;\nNow, I could try to take the moderate view here and say, \u0026ldquo;See, both sides have a different perspective.\u0026rdquo; But, yunno\u0026rsquo;, fuck that, it\u0026rsquo;s my website and I\u0026rsquo;m not going to sugar coat it: Yeah, if you\u0026rsquo;re trying to ban abortion and books, make trans people use the wrong restroom, and voted for a guy that brags about his past sexual assaults, well, you\u0026rsquo;re the asshole. If you\u0026rsquo;re a Christian and go to Church with people that do this and don\u0026rsquo;t call it out, you\u0026rsquo;re still the asshole.\nIf this is the first time this is occurring to you, well, you could probably stand to watch a mix of videos from everything from Philosophy Tube, Zoo Bee, Innuendo Studios, AntiCitizen X, and TMM; read A Sick Giant; and talk to some people about how religion has been used to make their lives worse. To be clear, I\u0026rsquo;m not trying to say you shouldn\u0026rsquo;t be religious! I\u0026rsquo;m saying if you\u0026rsquo;re participating in a Church where the norm is being anti-LGBT, supporting abusers (even if they held the highest office in the US), and people claim Critical Race Theory is destroying the nation and you don\u0026rsquo;t regularly call them out on it or leave, then you\u0026rsquo;re part of the problem and hardly any better than they are. If anything, watching content that challenges your views and makes you think should help you be a better Christian.\nAs for the particulars there - maybe you are staunchly pro-life, anti-LGBT, etc. It\u0026rsquo;s worth looking into the counter points from religious leads. What do pro-choice religious leaders have to say. What do pro-lgbt leaders have to say. Be informed and look at multiple interpretations of the text before you follow it. Most of all, decide to what extent you want to let your religious views impact your political ones! You can separate them back out. As a general rule of thumb, if someone has used a line like \u0026ldquo;I love you, so I want to save your soul\u0026rdquo; or similar to justify the view, it\u0026rsquo;s because they don\u0026rsquo;t have a reason outside their religious beliefs. If you value the Establishment Clause (the Separation of Church and State) (or equivalent/idea of it, if you\u0026rsquo;re not a US citizen) then this is a conversation you really should have with yourself.\nThe Fear Of Death # [TODO]\nxkcd #505 Absurdism | How to Party at the End of Meaning (Exurb1a, YouTube)\nWe Are the Other People (Oberon (Otter) Zell)\nHint, hint - this post is a weee bit US centric. Still, this is a thing globally too. it would probably be worth your time to look into the basics of most world religions, as nerdy, professional positions are increasingly held on a global field where you will have no choice but to work with people from diverse backgrounds across the globe, that's just not something I want to cover here. Wikipedia is a thing, go nuts. ...assuming the population of that religion is having babies exceeding the replacement rate and conversion-away-from-that-religion-rate "},{"id":284,"href":"/phil/sex/","title":"Sex","section":"PHIL","content":" Sex # In an ideal world, humankind would be driven forward by more than the initiate desire to reproduce and bone. But, we don\u0026rsquo;t live in an ideal world, and people like to have fun and feel good. (consensual) Sex is fun and feels good- so it should not be looked down on. Flirting, hooking up, being horny: They\u0026rsquo;re all natural and good. Unfortunately, today it seems Everyone is Beautiful and No One is Horny Consent # Look, I don\u0026rsquo;t think you\u0026rsquo;re an idiot. I assume you know \u0026ldquo;don\u0026rsquo;t rαpe people\u0026rdquo;. I also assume you\u0026rsquo;ve had the normal no-is-no, not-a-yes-is-still-a-no and probably already seen Tea and Consent.\nI also understand it\u0026rsquo;s not always that simplistic. Some people are into consensual-non-consent. Sometimes, the non-consented act may be unintentional.\nMaybe you couldn\u0026rsquo;t tell you were getting close. Maybe it was dark and something slipped. Maybe you didn\u0026rsquo;t realize the other person felt pressured.\nConsent, above all else, is about communication. If you\u0026rsquo;re worried the other person is feeling uncomfortable- ask!\nIf you\u0026rsquo;re worried the other person can\u0026rsquo;t consent at the moment- don\u0026rsquo;t be a douche.\nBy far I think the biggest thing not everyone realizes, especially teenagers in places with abstinence only sex ed, is that your body\u0026rsquo;s response isn\u0026rsquo;t consent. Getting wet or hard is. not. Consent.\nhere\u0026rsquo;s a TED talk on that point if you need it. [TODO] Coercion by economic and social pressure\nSex Work and Porn # Visa and Mastercard are Trying to Dictate What You Can Watch on Pornhub (EFF)\nThe Internet is for Porn - post is mostly about OnlyFans (The Margins)\nPorn Addiction? # Pro-Choice Vs Pro-Life # I am so tired of this abortion debate and hearing people treat it like a political issue instead of a deeply-personal, medical decision that men and women have to decide under horrible, tragic, heart-breaking circumstances. My husband and my son have long assumed that I\u0026rsquo;m pro-choice. I\u0026rsquo;ve never corrected them, but I\u0026rsquo;m not exactly. My mother, co-workers and some of my friends have assumed I\u0026rsquo;m pro-life. I\u0026rsquo;m actually not pro-life either. I am simply pro-reasonable.\nI\u0026rsquo;m a child custody attorney, who is now also seeing the tragedy of the Juvenile Court system on a regular basis too. I\u0026rsquo;m seeing what happens to the kids the parents don\u0026rsquo;t want, and yes, there are many who are not wanted by either parent. I represent men and women who are forced to pay child support and do not get to see their children, or rarely see their children. I was also a young girl faced with an unexpected pregnancy more than once, and carrying a baby that I couldn\u0026rsquo;t financially support.\nSo, here are a few of the societal/legal facts leading to abortion, and preventing all these babies from going to adoptive families: All methods of birth control have failure rates. Teenagers, and especially those raised in conservative households, do not have easy access to birth control. Expecting teenagers not to have sex is not practical. The State can make either or both parents pay child support, even if they don\u0026rsquo;t have custody or parenting time with their children. Parenting time/custody are not legally connected to a parent\u0026rsquo;s obligation to pay child support. You can\u0026rsquo;t just agree to give up your parental rights to get out of paying child support. The only way to do that is with an adoption or step-parent adoption. Nebraska\u0026rsquo;s Safehaven law only protects the parents from criminal prosecution for neglect and abandonment, not from paying child support. Both parents have to agree to an adoption. There is a birth father registry list in Nebraska that allows fathers to register to claim a baby born to the woman whose name he provides (and if he does this, a woman giving up her baby for adoption could find herself paying him child support). State aid isn\u0026rsquo;t as easy to come by as most people think, and most of us would not want to live on it. Rape, incest, and pregnancy in girls under fifteen still happen. Babies die in utero, and sometimes must be removed from the womb. Sometimes a mother cannot carry a baby to term without endangering her life.\nIf you really, truly want to reduce the abortion rates, then here\u0026rsquo;s what it\u0026rsquo;s going to take: First, end the abstinence-only sex ed in schools. Give teenagers real facts. Make birth control free and readily available to EVERYONE. Allow both parents (and either parent) to give up their legal rights AND avoid paying child support (but make it a final decision). If only one parent gives up the rights, provide adequate State support to make up for the loss of parental support from the other. (This would mean that one parent would have less incentive to try to force the other parent to have an abortion.) If both parents give up their rights, make the adoption process easier and less expensive. If parents choose to keep the baby, instead of having an abortion (which they otherwise would have had because they couldn\u0026rsquo;t afford the baby), help them financially and provide them with daycare so they can work. Allow regular medical doctors to perform abortions without stigma for those pregnant women who have been victims of rape or incest, who are under fifteen, who are at risk of dying if they carry the baby to term, or who have already lost the baby in utero. Keep the protesters away from the women and the doctors.\nUnless we\u0026rsquo;re willing to do this as a society, and put our money where our mouths are, then we don\u0026rsquo;t get to decide what men and women facing this very personal, very tragic decision choose. If we do want to stop abortion, then put the ugly aborted-fetus posters down and go financially support a teenage mother, go lobby to provide birth control to teenagers, or go ask your own teenage son or daughter if he or she needs birth control. Do something useful, and be reasonable.\nFrankly, I think that sums it up pretty well, and truth be told I don\u0026rsquo;t think I really have a right to say more than that from the moral standpoint; however, I think it\u0026rsquo;s worth considering from the political standpoint as well, that is, why are conservatives in the US so addicted to the topic? Well, I think Methodist Pastor David Barnhart pretty much hit the nail on the head for this one:\n“The unborn” are a convenient group of people to advocate for. They never make demands of you; they are morally uncomplicated, unlike the incarcerated, addicted, or the chronically poor; they don’t resent your condescension or complain that you are not politically correct; unlike widows, they don’t ask you to question patriarchy; unlike orphans, they don’t need money, education, or childcare; unlike aliens, they don’t bring all that racial, cultural, and religious baggage that you dislike; they allow you to feel good about yourself without any work at creating or maintaining relationships; and when they are born, you can forget about them, because they cease to be unborn. It’s almost as if, by being born, they have died to you. You can love the unborn and advocate for them without substantially challenging your own wealth, power, or privilege, without re-imagining social structures, apologizing, or making reparations to anyone. They are, in short, the perfect people to love if you want to claim you love Jesus but actually dislike people who breathe.\nPrisoners? Immigrants? The sick? The poor? Widows? Orphans? All the groups that are specifically mentioned in the Bible? They all get thrown under the bus for the unborn.\n- Pastor David Barnhart Birth Control # [TODO] +womens right to get a hysterectomy\nHaving Kids # [TODO] why do people have kids\nGender, LGBT, \u0026amp; the term Queer # The \u0026lsquo;Hacking\u0026rsquo; community in particular is usually very clear on sexual liberation/freedoms and given that technically minded people tend to have statistically significantly higher amounts of LGBTQIA+ people, it\u0026rsquo;s relevant to mention. In order to really understand this, it is best to understand the way that labels are used within this community.\nTo begin, labels are often more or less vague, depending upon their purpose. In general, different kinds of labels support the different kinds of communities and sub-communities, based on their function of bridging and bonding.\nIn sociology, bridging refers to building a community based on different kinds of people who share a common interest. In this case, the interest is a social interest in rights, respect, acceptance, and so forth. On the other hand, bonding refers to building communities of similar people that are closer knit, based on shared experiences.\nThe term \u0026ldquo;queer\u0026rdquo; is extremely vague, and intentionally so. No one can define exactly what it means, and many people who call themselves queer mean different things by it. This is fine, because it is a term designed for bridging.\nAs a strong example, the academic discipline to investigate these issues commonly called Queer Theory. A definition:\nPolitically, Queer Theory may be described as the theoretical wing of the gay and lesbian liberation/civil rights struggle, a struggle which comprehends more than just the sphere of sexuality. Queer Theory argues that there is beauty, power, and truth, even magic where dominant culture and its authorized language posit only ugliness, impotence and falsehood. Queer Theory\u0026rsquo;s emphatic pluralizing of sexuality resists the normative dualistic economy that limits erotic activity and coerces identity into deadening confines. Frederick L. Greene, \u0026ldquo;Introducing Queer Theory into the Undergraduate Classroom: Abstraction and Practical Applications\u0026rdquo;, English Education, Vol 28, No. 4 (Dec 1996), pgs. 325-339, via Lindsay Ellis This is extremely broad. It not only includes many issues of identity traditionally thought of as LGBTQIA+, but even includes experiences of some straight-identified cisgender people (e.g. what are the boundaries of masculinity or femininity).\nIt is a perspective which can be used to analyze media or society, or even for personal self-reflection. Its increasing presence in western culture may even be partly responsible for an increase in Americans who don\u0026rsquo;t identify as straight in Gen Z, even compared to Millennials. (Of course, there are several other explanations as well.)\nIf you want a more specific bridging term, this is where you get to the \u0026ldquo;umbrella\u0026rdquo; letters of LGBTQIA+. Lesbian, Gay, Transgender, etc., are all terms that are mostly about bringing together socially different people (race, class, etc.) based on common interest.\nHowever, they are also partially bonding terms. They are used to categorize shared experiences, and develop them into a subculture (or several). Hence, the rise of the drag race, the leather bar, and so forth. These operate within the \u0026ldquo;edges\u0026rdquo; of these broader terms.\nThen there is another set of terms that are even more concrete, and almost purely for bonding. These are known as microlabels. These terms operate mostly within a single community, and help build shared experience and understanding through extension of language.\nSome examples include:\nQuioromantic: a term within the asexual sub-community, which contains subtext around not having a romantic orientation Galactian Alignment: a set of terms within parts of the non-binary sub-community, which are used to communicate aspects of gender without being restricted to common terms and their baggage Transmedicalist: a (frequently negative) term within the transgender sub-community, which describes a belief in where that community\u0026rsquo;s boundaries should be While those ignorant and bigoted may call this \u0026ldquo;inventing words to feel special\u0026rdquo;, it is really inventing words for the same reason words are always invented: to improve communication between people, especially virtually. The breadth of being queer above (again, including lots of straight things!) also means there is a lot of unexplored space as people try to understand themselves.\nI don\u0026rsquo;t want to go in depth or be your source of sex education, but I do think skipping over this would be doing the community some injustice. As such I\u0026rsquo;d also like to link to some videos providing sexual education, The truth about unwanted arousal | Emily Nagoski , YouTube\nImage from kokofox 1 2 TypeError: no implicit conversion of Gender into Boolean Source What do all the letters in LGBTQIA+ mean? # TODO + flags\nOther Resources # ohjoysextoy.com As a Furry myself, I\u0026rsquo;m obligated to recommend https://www.ohjoysextoy.com/furry/\nby LadySnakeBite on FurAffinity I also recommend: A Handy Guide To Internal Shots (VERY NSFW) by her, which is a rant on art featuring cervix penetration.\nSuction Cup Man 4: Business or Pleasure "},{"id":285,"href":"/music/sound-sources/","title":"Sound Sources","section":"Musics","content":" Methods of making noise* # * Excluding traditional instruments. We\u0026rsquo;ll get there soon.\nSamples # A snippet of a .wav file open in audacity A sample is exactly as the name implies- a \u0026lsquo;sample\u0026rsquo; of audio. Sample is a pretty broad term though, so usually some more terms are applied to help categorize them. Still, for the generic term what is usually meant is a small audio file that contains one sound, like one drum hit or one piano key press.\nThese can either be samples made or collected for the sole purpose of use in later music (like hitting record, playing one drum hit, then stopping, to create a small drum sample) or a sample lifted (with often dubious legality) from another recording. It\u0026rsquo;s worth noting that fair use is really not something you can rely on here, but it\u0026rsquo;s also pretty common. #notlegaladvice\nThe next kind of sample worth looking at is a loop. These are longer and are usually, well, loopable - If you play them on repeat they typically sound continuous.\nOften these will be of drums or guitar. The term \u0026rsquo;loop\u0026rsquo; can be used broadly for audio snippets of this length though, so not all loops, uh, loop. Usually when using a loop it\u0026rsquo;s best to do some mangling, swapping some beats or putting on destructive effects to transform it in some way. This prevents your audio from just sounding like layered tracks from another artist mashed together and is a good way to put creativity into what you make.\nAnother term you might hear is stems. Stems are just separate recordings of each part of a song - say the vocals as one audio file and the drums as another, these would make up the stems.\nSamples are also, sort of confusingly, made of samples. But these words mean two different things in that sentence. The sample of sound as a whole is made up of a bunch of different points in a wave, usually captured thousand of times a second- whatever the sampling rate is (commonly 44.1, 48, or 96 (1)). This is what gives us the this image, where with the originally pretty smooth looking wave, when zoomed in, we can see is made of these discrete points.\nThis is particularly relevant to making music for multiple reasons:\nWhen change the speed/pitch by a non integer value, we have to \u0026lsquo;interpolate\u0026rsquo; extra points into this. #math When we slow down or make a sample lower pitch there\u0026rsquo;s only so much data to use, at really low pitches the wave will start to sound sort of low-fi When chopping a sample to start playback at any point, we want to chop at a 0-crossing to avoid a sharp transition (which equates to high pitch sound) The Nyquist-Shannon Sampling Therom (Wikipedia) , put very basically, just says your sampling rate needs to be twice as high as the highest frequency in your source to be reproduced exactly. Because human hearing ranges roughly from 20 to 20khz, sampling at 40khz or above should be sufficient. Unfortunately, there's more too it than that, especially as generating waves in a virtual synth can benefit in sound quality for various reason from 'oversampling' - running above 44.1 or 48khz. Unfortunately, the higher the sampling rate the more work the computer has to do. Zoomed in view of the snipped, showing the individual points in the sample Bitwig Studio\u0026rsquo;s Sampler. Here pitch tracking is enabled, making it so the sample can be played sped up or slowed down to pitch chromatically along the keyboard. Bitwig\u0026rsquo;s Sampler is pretty similar to many other samplers in other DAWs like Ableton Live or modules like Simpliciter In VCV rack Here, we\u0026rsquo;re looking at the sampler device in Bitwig Studio, though most of this should be similar in other software. Starting with the obvious, the sample wave form in the middle. I have loaded a sample which has multiple drum sounds in it, but I\u0026rsquo;ve zoomed in on one sample and placed these yellow flags to denote the start an end points. Bitwig\u0026rsquo;s sampler, like many others, will try to snap these points to aforementioned zero crossings. You\u0026rsquo;ll also see next to the file name that the keyboard icon is blue and says 100% and next to that the root is set to C3. This means that if I play the C3 key on my keyboard it will play the sample as is, but if I play a different key it will slow playback down or speed playback up to match the pitch to the key I\u0026rsquo;m playing. Say I hit and record the A4 key on my piano- it\u0026rsquo;s nice to be able to correct for the pitch of the sample in the keyboard tracking - you want to tell the computer what note a sample contains.\nStill in the same section of the window but below the first yellow flag that denotes the start, you\u0026rsquo;ll see two smaller yellow flag icons that have a time specified. These are the times in the sample where the start and end flags are placed.\nLeft of that you\u0026rsquo;ll also see an arrow with an R over it, that\u0026rsquo;s the button to tell it you want to play the sample in reverse. To the right, there\u0026rsquo;s some loop options. Right now it\u0026rsquo;s in \u0026lsquo;Single Shot\u0026rsquo; mode. If the button to trigger the sample is held for longer than the length of the sample, it will still only play once. The other two options are a forward repeat, the equivilent of leaving a song on loop, and a \u0026lsquo;ping-pong\u0026rsquo; loop, where the slice will play forwards then-backwards then forwards then \u0026hellip;. as long as the gate is held.\nI also want to mention the freeze ability in this sampler- the snowflake below the end-time indicator. When enabled sample playback has to be done manually - and new controls to do so become available. Think of it like a record that you have to spin yourself. This can lead to some really cool sounds.\nFinally, you\u0026rsquo;ll see below that snowflake is a RAM indicator. When lit, the sample is stored in RAM, not on disk. In general, this is probably what you want. It might be helpful to do otherwise though if you\u0026rsquo;re either low on memory or you\u0026rsquo;re trying to load some absolutely massive samples.\nLet\u0026rsquo;s sample! # Talk is cheap, let\u0026rsquo;s actually put this to use. First, we\u0026rsquo;ll need some samples. To give us something fun to start with, go grab Glitch With Friends, Vol Ⅲ. (It\u0026rsquo;s free) - Note that it is a 7.23GB download, so if you\u0026rsquo;re on a slow connection it might take a hot minute. Once you have it downloaded, extract the .zip somewhere.\nNow, we need something to play back samples. Let\u0026rsquo;s go grab both Simpliciter to play back samples in VCV Rack.\n\u0026lsquo;Simpliciter\u0026rsquo; module in VCV rack, a sampler with transient detection, Sound On Sound (SOS) looping, and variable speed (pitch) playback Unlike the bitwig sampler, this sampler, \u0026lsquo;Simpliciter\u0026rsquo; in VCV Rack can take in live input to layer sounds or record the inital sample. In general you should see a lot of the same controls I talked about above exposed in this UI. There are some extra neat ones here though, including the ability to detect peaks as is enabled in the lower left in this screenshot. With this and a longer sample file with multiple drums you can just select the drum sample you want on each play-trigger.\nWatch the above video from Omri Cohen, get a vibe of what Simpliciter can do. Then, go nuts. You know enough about how VCV works now that experimentation will be the best way to learn.\nOne thing I do want to stress is that this workflow of right clicking the module and digging trough your file system to find the right sound sucks. In a normal DAW - as mentioned on the last page - you won\u0026rsquo;t have this problem.\n[TODO] Multisamples\nhttps://github.com/verdog/renoise-hardware-sampler \u0026amp; SampleRobot\nField Recordings, Tape Loops, and other sampling goodness # While you may not be able to do anything with the knowledge at the moment, I do want to note a few other things related to samples.\nImage from \u0026ldquo;The Tape Loop Labyrinths of Justin Lakes\u0026rdquo; by Mike Haley First, tape loops are a thing. These typically use normal cassette tapes but the tape on the inside has been replaced with a loop so that it\u0026rsquo;ll repeat. Because tape naturally degrades and can be pitch shifted by slowing down or speeding up the play back speed they can act as a neat physical implementation of the same techniques we use samples for. Similarly, they\u0026rsquo;ve inspired many techniques that are used for effects, such as the distortion/satuartion that comes with tape and the wobble that comes with an old motor.\nSee Tape Loops Are Dope (YouTube, Andrew Huang) for more on Tape Loops.\nAnother source of samples you may come across are field recordings. While these are really the same as samples like mentioned above, they\u0026rsquo;re often very long, including hours of content taken from nature or background noises in a city. Often these are used to add a subtle texture to a piece, everything from putting on a rainy day to a sci-fi cityscape. Recording good field recordings is an art in itself and is both fun and challenging. You can find plenty for free online or even nab this 1.6Tb pack (yes, terrabytes) for $20. I do recommend trying to record a few rainy days yourself though.\nBasic Oscillators # Generally there are a few kinds of oscillators you should know about, but first, what\u0026rsquo;s an oscillator?\nWell, very simply, it\u0026rsquo;s a thing that oscillates- moves in a repeating pattern. Generally there are three ways you\u0026rsquo;ll hear Oscillators refereed to as being VCO, DCO, or LFO. You may also see Oscillators in general refereed to with the abbreviation osc. Unfortunately, that can be confusing because OSC can also mean Open Sound Control, something I\u0026rsquo;ll get into in the Sequencing and MIDI chapter in a bit.\nAs you\u0026rsquo;ve already seen, a VCO is a Voltage Controlled Oscillator. Back in VCV you saw these being emulated where each volt of constant input applied made the oscillator oscillates at twice the speed, one octave higher. In real life, VCOs tend to be a bit unstable and have minor pitch drift. While this may sound like a negative, it\u0026rsquo;s generally seen as a feature, as stacked, slightly out of tune oscillators sound really good. In fact, VCV Rack\u0026rsquo;s basic VCO, \u0026lsquo;VCO-1\u0026rsquo;, emulates this behavior by default.\nA DCO is a Digitally Controlled Oscillator. These (usually) exhibit no pitch drift and are far easier to tune.\nNote that some hardware may go from a digital input to a VCO internally, or take a voltage pitch signal as input but just sample it to use a DCO internally.\nan LFO is a Low Frequency Oscillator, they can still be either digital or analog (DCO or VCO), but they typically have a max frequency of around a hundred hertz and are meant to be used to control other things, not make sound to hear directly.\nSome oscillators, whether digital or analog, cover enough range to be either a \u0026rsquo;normal\u0026rsquo; oscillator used for sounds you\u0026rsquo;re intended to hear or an LFO, so there\u0026rsquo;s not always a clear distinction.\nAnalog? Digital?\nAvoiding the complex explanation of what actually makes an oscilator analog or digital, here\u0026rsquo;s what you need to know:\nAnalog systems have some natural pitch drift and non-linearity (distortion), this makes them sound \u0026lsquo;warmer\u0026rsquo;\nMost analog designs can handle audio-rate modulation by default, you\u0026rsquo;re not fighting a limited sample rate\nBecause Math, digital systems can only understand frequencies up to half their sample rate. This is how often a new sample (in the single \u0026lsquo;dot\u0026rsquo; of the waveform sense) is taken. If you try to go over this frequency, they \u0026ldquo;alias\u0026rdquo;.\nThe audible ramification of this is sound not being reproduced at the right frequency. This is a problem because things like distortion add that flavor to a wave by adding more and more higher-pitched frequencies that are related to the original sound. If they try to add too many, they alias. This adds those unexpected frequencies which generally sound bad.\nAudio rate modulation, that is doing something such having a 5khz sine wave change the frequency of another sine wave at, say, 4khz, generates a ton of these same distortions. In an analog system, there in no sample rate so this isn\u0026rsquo;t a problem.\nIf this doesn\u0026rsquo;t make sense right now, that\u0026rsquo;s okay. We\u0026rsquo;ll se more on it later.\nIf you record at very high bit depth / rate or direct to analog media (tape), it\u0026rsquo;s relevent to not have the computational overhead on the sources, so analog oscilators help with that.\nAnalog is low latency: a digital source/effect will incur latency due to the necessity of a sample buffer.\nAlmost everything that uses sound digitally will work on a group of samples at a time as it is significantly easier on the computer to do so. Unfortunately, this means you\u0026rsquo;ll have a delay of how long it takes to collect that many samples at that sample rate. For example, if you\u0026rsquo;re sampling at 48kHz and you have a buffer size of 512, you\u0026rsquo;ll end up with 48,000/512 = .0106 seconds = 10.6 milliseconds of delay. for context, 10 milliseconds is right on the edge of the limit of time between plucking a string on a guitar and hearing the result though an amp that most guitarist find comfortable to play it.\nThis also means analog systems are great for feedback patching\nFor example, in VCV you can take the output of a VCO and plug it into it\u0026rsquo;s own FM input! Try it!\nDigital (DSP) oscilators can get complexity and polyphony for cheaper, so they\u0026rsquo;re good for really complex timbres, for example with wavetables, which I\u0026rsquo;ll cover in a bit\nSo, which is better? Neither! If you want to go all analog or all digital, that\u0026rsquo;s cool, but both have their strengths and weaknesses. But going analog means using physical hardware, which is usually very expensive.\nOf note, you\u0026rsquo;ll often hear people call non voltage controlled oscillators VCO\u0026rsquo;s anyway. ╮(─▽─)╭\nOscillators usually have very simple wave shapes as outputs. Typically, you\u0026rsquo;ll see Sine ∿ , Triangle ʌ , Square ⎍ , and Saw waves as outputs. You may see other, more exotic wave forms though.\nOften, the square wave output has PWM or \u0026lsquo;Pulse Width Modulation\u0026rsquo; control:\nVarying the pulse width over time sounds really good, though you should already know this because this is exactly what we setup a few pages ago!\nSome oscillators will also have Sync, either Hard or Soft. Sync, in general, makes the waveform reset once it gets an input from another oscillator. This means you\u0026rsquo;ll need two oscillators to do sync.\nOscillator sync is a feature in some synthesizers with two or more VCOs, DCOs, or \u0026ldquo;virtual\u0026rdquo; oscillators. As one oscillator finishes a cycle, it resets the period of another oscillator, forcing the latter to have the same base frequency.\n[For Hard Sync] If the [following oscillator] is tuned to a lower frequency than the [controlling oscillator] it will be forced to repeat before it completes an entire cycle, and if it is tuned to a higher frequency it will be forced to repeat partway through a second or third cycle.\n[\u0026hellip;] There are several other kinds of sync which may also be called Soft Sync.\nReversing Sync\nThis form of oscillator sync is less common. This form is very similar to Hard Sync, with one small difference. In Reversing Soft Sync, rather than resetting to zero, the wave is inverted; that is, its direction is reversed. Reversing Soft Sync is more associated with analog triangle core oscillators than analog sawtooth core oscillators.\nThreshold or Weak Sync\nSeveral kinds of Soft Sync use comparison thresholds:\nHard Sync which is disabled when the frequency or amplitude of the slave crosses a user-defined threshold. Hard Sync which is disabled when the frequency of the [following oscillator] extends too high above or too far below the frequency of the [leading oscillator]. Hard Sync which is disabled when the frequency of the [following oscillator] is lower than the frequency of the [leading oscillator]. Soft Sync may accurately refer to any of these, depending on the synthesizer or manufacturer in question.\nPhase Advance \u0026lsquo;Sync\u0026rsquo;\nThe phase of the slave is advanced by some amount when the [leading] oscillator level crosses some threshold. Used for audio synthesis, this may give an audible effect similar to Soft Sync.\nReset Inhibit Sync\nWhen the [leading] oscillator crosses some threshold, the normal reset of the [following oscillator] is disabled: it will stick at its final level, positive or negative. When the [leader] crosses back over some threshold, the [following oscillator] is reset.\nOverlap Sync\nIn this method, the current wave completes but a new waveform is generated at the sync pulse. The tail of the old wave and the new wave are output summed if they overlap.\n- Wikipeda I\u0026rsquo;d also like to briefly mention oscillator cores. Especially in VCOs, knowing what the \u0026lsquo;core\u0026rsquo; of an oscillator is can make a difference. The core is simply the waveform from which the other waveform are derived. Generally, there are three kinds you\u0026rsquo;ll see (though others are possible): Triangle, Saw, and Trapezoid core. To get an idea of what a core is, lets look at the saw.\nYou can think of making a saw wave as just progressively counting higher with time. So, at t=0, we start at 0, at t=1 we go to 1, etc. until at, let\u0026rsquo;s say t=10, we reset back to 0, and count back up to 10. If we assume this process is continuous, that is we could look at any decimal, like at t=1.12 the wave is at 1.12, we\u0026rsquo;ve generated a sawtooth wave. This is our core. Now, we can say whenever that \u0026lsquo;core\u0026rsquo; wave is less than 5, output 0 on the square output. If it\u0026rsquo;s greater than 5, output 10. If the blue wave is that core oscillator, the pink wave is the result (ignore the awkward spikes at the transition points)\nThe core used will often change the features of the oscillator. Generally, saw core oscillators are the cheapest and most common but also the least capable. Triangle and trapezoid cores often offer extra features, such as outputs other than the common sine, tri, saw, square.\nFinally, I\u0026rsquo;d like to bring up harmonics.\nThe really dumb version: If the wave has quick transitions (cliffs, ridges, etc) it\u0026rsquo;s going to be more harmonically rich, and therefore have more \u0026lsquo;sonic content\u0026rsquo; above the base frequency. For example, say you play a 440hz sine wave. It will have no harmonics, it will be a pure, 440hz tone. But, if you play a 440hz square wave? That\u0026rsquo;ll have a ton of harmonics, actually, by definition, it will have odd harmonics. If you care about the mathy stuff you can read An Interactive Introduction to Fourier Transforms by Jez Swanson But, the relevant bit for musical stuff is that these harmonics, the phase relationship between them, and how they change over time is what makes a sound like that sound. It\u0026rsquo;s what makes a piano sound like a piano, etc - This is what I called \u0026ldquo;Flavor\u0026rdquo; on the first page.\nAnyway, knowing what these harmonics add to a sound make a big difference. Often with synths, you\u0026rsquo;ll find you have separate control or outputs of the even and odd harmonics. This is sort of what you expect.\nFor example, say we have a 100hz \u0026lsquo;base\u0026rsquo; sound. Then the even harmonics would be 200, 400, 600, 800, etc. Odd harmonics will be at 300, 500, 700, etc. Note that humans can only hear up to 20,000 hertz anyway, so, technically it\u0026rsquo;s impossible for you to hear a true square wave (Well, technically a true square wave would have infinite energy, so it\u0026rsquo;s impossible for more than one reason).\nI\u0026rsquo;ll spare you going any deeper into terminology like the difference between harmonics and overtones, but, and here\u0026rsquo;s the important parts:\nEven harmonics have the perfect octaves and 5th, while odd harmonics have 3rds- which turns into dominant seventh chords We\u0026rsquo;ll hit music theory later, but generally 5ths are thought to sound happy, albeit a bit bland while 7ths are dissonant and so carry a lot more emotional weight. This in turn means that even harmonics tend to sound more pleasing while odd harmonics are a lot grittier and in your face. If you add in a lower harmonic (say you have a sub-octave pedal on your guitar) your brain will (usually) perceive the note as being the new, lower note. That is, or brains tend to use the lowest frequency in a sound to assign it a note on the keyboard. Distortion is literally just adding harmonics to the sound, clipping a sine wave (a form of distortion) is a really easy way to see this Check this video out for a nice introduction to this that you can actually hear:\nAdditive and Subtractive Synthesis # When using oscillators, you usually will want to sculpt your sound a bit more beyond the basic waves. While there are many, many, many ways to do this the most basic two are additive and subtractive synthesis (Though more often not you\u0026rsquo;ll usually use both together).\nThe easier to understand but harder to master is additive. Basically, you can just use a whole pile of oscillators together and sum up (mix) their outputs to get a different sound. If you do this with a different envelope on each oscillator\u0026rsquo;s volume and frequency you can basically make any sound imaginable, with enough effort. Usually you\u0026rsquo;ll mix simple oscillators, often even just sine waves.\nSubtractive synthesis on the other hand works by starting with a complex wave and filtering out some of the sound. The key word these is filtering. Filters are something we\u0026rsquo;ll talk about more later, but the gist is they can be used to alter the flavor of a wave. The most common types of filters are the Low Pass Filter (LPF) and High Pass Filter (HPF). Each does what it sounds like. If you use a LPF you can remove some of the higher frequencies in wave. If you use a HPF, you can remove some of the lower frequencies. At the extremes with either type you can filter out everything, making the sound silent. You could also end up right against that threshold and getting any sound into just a sine wave.\nGo ahead and setup the same thing in VCV Rack (Note, the above .gif uses an old version, but the connections should be the same) but also hook it up to the audio output so you can hear what each knob does. Most notably, the RES knob which will change the peak at the cutoff point. This will make a lot more sense when you actually try it.\nIf you want a gentle intro, check out this 3 part video series (Of which only the first in embedded directly below.)\nTo learn more about Additive Synthesis, I really recommend Additive Synthesis Magical Mystery Tour (Loopop, YouTube).\nWAVETABLES # There\u0026rsquo;s more to life than Sines, Saws, Tris, and Squares. Welcome to the future, Baby! We\u0026rsquo;ve got WAVETABLES.\nVCV has a built in wavetable VCO that is preloaded with a table that will let you morph between each of the waveforms you\u0026rsquo;ve seen repeatedly now, but much more interesting is you can load custom wave tables. Let\u0026rsquo;s go grab some https://waveeditonline.com - just go to the bottom of the page and click \u0026ldquo; Download all WAV at once (ZIP file)\u0026rdquo; \u0026hellip; or click this link directly.\nOnce that\u0026rsquo;s downloaded, extract it. In VCV load the WT VCO module. Hook it up like you would the a VCO from the prior pages.\nRight click it and select Load Wavetable and select one of the files in the folder you extracted. I like \u0026ldquo;KYMA_PAR.WAV\u0026rdquo;, if you can\u0026rsquo;t decide. When it\u0026rsquo;s loaded, right click the module again and change Wave Points to 256. All of the files you just downloaded should use this same 256 setting.\nNow try adjusting the WT POS knob. If you want, try to build up a bigger patch with these wave table modules and the other modules you\u0026rsquo;ve tried so far.\nIf you need some inspiration, try duplicating the WT VCO module, hooking up the second one to the RIGHT input on the AUDIO module and using two different LFO modules into the POS inputs on each WT VCO - make sure to turn up the small knob above each POS input so the LFOs have some effect.\nTo learn more about Wavetables, I suggest watching the video below. It uses a paid software synthesizer, but there are plenty of free wavetable based synthesizers we can dive into later after we get a DAW setup.\nNote, that not all wavetable synths have the linear FM (discussed in the next section), Phase mod / distortion, and wavefolding that pigments - the synth in that video - has, though many do.\nI really recommend using Blamsoft\u0026rsquo;s XFX-Wave for VCV Rack for more advanced wave table synthesis. It doesn\u0026rsquo;t let you load your own waves, but it has really good ones built in. Also in VCV Rack, Tiny Tricks Wave is a neat way to experiment with recording your own tables- just hook up three signals and press \u0026lsquo;capture\u0026rsquo;.\nYou may also hear about XFer Serum, it\u0026rsquo;s the sort of EDM/Dubstep standard synth, and is a powerhouse for wavetables. It\u0026rsquo;s incredibly popular, so there\u0026rsquo;s a ton of great wavetable packs for it too (I particularly like the Coda pack). Because Serum is so popular, it\u0026rsquo;s wavetable format is supported by most other wavetable synths as well, so if you\u0026rsquo;re jonesn\u0026rsquo; for more wavetables, looking up free packs for serum can be a good place to start.\nSerum is pretty expensive though, so you may want to check out VITAL (which TBH I think is a bit better anyway)\nThere are of course, many, many other Wavetable synths out there, but I can\u0026rsquo;t mention all of them. If you do want to check out more though, I recommend looking into Phase Plant (VST), Argon8 (Standalone Synth), Piston Honda MKⅢ (Eurorack), Plaits \u0026amp; Braids (Eurorack or VCV), Cursus Iteritas (Eurorack or Reason), and the Hydrasynth (Desktop).\nFM Synthesis # Source (Likely originally from the Yahmaha DX7 Manual) Frequency Modulation or FM, is just the simply when you let the output of one oscillator modulate the frequency of another oscillator. Usually this is done in simple ratios and, ideals, uses linear, through zero modulation.\nFirst, Let\u0026rsquo;s start with linear vs exponential FM. It\u0026rsquo;s worth noting again that most pitch tracking is exponential since our music system itself is inherently exponential (each octave is a doubling, that is the frequency between C5 and C4 is twice the frequency between C3 and C4).\nThis causes a problem though, if we modulate with exponential FM, say with a sine wave that is +/- 1V (2Vpp) and we start with an A4 at 440hz, then we\u0026rsquo;ll swing up to 880hz and down to 220hz. Fine right? Not so much. If this modulation is meant to simply give us a more harmonically interesting A as we mix in different octaves that won\u0026rsquo;t be the effect, as now we\u0026rsquo;re (to oversimplify) at 880hz half the time and 220hz half the time, and if we average those, \\(\\frac{880\u0026#43;220}{2}\\) , then we don\u0026rsquo;t still get the original A 440hz but rather we get 550Hz, so, we\u0026rsquo;ve detuned by a heck of a lot. That\u0026rsquo;s an entirely different note.\nLinear FM won\u0026rsquo;t follow the V/Oct standard (though some may use the Hz/V standard) but will keep you in tune as you modulate. This, however, begins to pose a more interesting problem. Imagine you want to modulate a 100hz signal by +/- 200hz. Clearly, that would mean going as high as 300hz, but what happens when we get past the first half of that negative signal and hit 0hz? Well, this is where having a Though Zero FM (TZFM) capability comes in handy, as this issue is solved sonically by actually inverting the phase of the signal when crossing the 0Hz point. While this may seem an odd solution, it does produce sounds that line up with what our ears expect.\nExponential FM and V/Oct, assuming the same scaling, are the same thing though so sometimes you can actually view it more as a second V/Oct input. For example, you could use the Exp FM input to specify the note, and then the normal V/Oct input to change the octave. Note though that this may not always work as the Exp FM input may be AC coupled, meaning that DC (nearly constant) values, like note data, will not be able to get through and instead you\u0026rsquo;ll just hear a \u0026ldquo;ping\u0026rdquo; as the pitch is modulated at the cutoff of the AC coupling filter, in these cases the Exp FM input will have a minimum frequency that the input signal can oscillate at to perform properly.\nWhen talking about Linear FM, I mentioned that simple ratios are best. This isn\u0026rsquo;t entirely true, but they will produce the least complicated harmonics, and while complicated harmonics are awesome it\u0026rsquo;s also really easy to make something that sounds awful.\nIf you want to try this in VCV, you can start with the WT VCO we just used. It has an FM input with a button next to it to enable Linear FM instead. Chain a few together, see what sounds you can get out. Because it\u0026rsquo;s really hard to precisely set the frequency on the WT VCO you\u0026rsquo;ll probably only get mostly garbage. I\u0026rsquo;d recommend grabbing FM-OP from the VCV library.\nJust drop two of them down, route the OUT from the one on the right into the FM of the other, take the OUT of the left one to your audio interface, and turn up the DEPTH knob on the first one. From there, you can start to tweak the big frequency ratio knob and the level knob. Try adding even more of the module into a longer chain and using CV MIX (Which you should already have) to sum some of them together to feed one. Play around. You may want to hook up a MIDI ▶ CV Module\u0026rsquo;s V/OCT and GATE outputs to each FM-OP - just remember to set the MIDI ▶ CV module to use your computer keyboard as input to get it working.\nPhase Distortion # [TODO]\nGranular Synthesis # There are many, many granular synths and effects, but, I\u0026rsquo;d like to start with a video review from Loopop of the Tasty Chips GR-1, as I think the hardware does a good job of showing what\u0026rsquo;s going on and Loopop does a great job explaining as well:\nThis video from Red Means Recording goes over a ton of VSTS that do this well.\nFinally, I want to mention Arbhar, Morphagene, and Clouds- but rather than try to poorly explain the three I\u0026rsquo;m going to link videos again. Note that \u0026lsquo;Simpliciter\u0026rsquo;, the sampler I mentioned earlier is pretty similar to Morphagene and that Clouds is available in VCV rack.\nFeedback # Phase Distortion # Physical Modeling \u0026amp; Karplus Strong # + Waveguides\nNoise? # Colored Noise, using it to make drums, etc\n"},{"id":286,"href":"/music/theory/","title":"Theory","section":"Musics","content":" First, this: # Don\u0026rsquo;t undervalue just sitting down and listening to music, trying to figure out what parts you enjoy and thinking about how it compares to what you\u0026rsquo;ve made, what you think you should change to sound better. Along with that, it helps to look at breakdowns of music done on YouTube. I particularly recommend all of the videos from 12tone\u0026rsquo;s channel.\nTheory # I\u0026rsquo;m going to be honest. I can\u0026rsquo;t read music and I don\u0026rsquo;t know scales. Why, then, would I in any way think I\u0026rsquo;m qualified to write anything about music? Well, let me stop you right there, I\u0026rsquo;m not. I make music for fun. However, I like to think that people enjoy my music and I enjoy listening to it myself as I make it, and though my experience I\u0026rsquo;ve picked up a little here and there to make sure things don\u0026rsquo;t sound awful. Furthermore, my background is primarily technical and there\u0026rsquo;s actually an insane amount of overlap with the incredibly technical and music. Fundamentally music is just doing math with frequencies after all.\nOur ears are weird. They\u0026rsquo;re incredibly good at math. We hear things logarithmically, that\u0026rsquo;s why 10 watts of speaker output power is only about twice as loud as 1watt and we can tell if two notes are even slightly off a perfect ratio even if we\u0026rsquo;re not thinking about it. (If you hear one tone at 220Hz and another at 441Hz, only 1hz off of correct, you\u0026rsquo;ll probably be able to tell)\nOur ears also like integer divisions of musical ratios- I\u0026rsquo;m sure you\u0026rsquo;ve heard the term \u0026lsquo;perfect fifth\u0026rsquo;. And though our lives, our ears get accustomed to hearing and feeling things associated with chord progressions. Even someone whose never written music or tried to learn anything about music theory can pick up on how a chord with more complex ratios creates tension that begs to be resolved to something simper (Think the Duuun-uh of the Jaw\u0026rsquo;s theme).\nOn the other hand, perfection is boring, our ears and minds beg for stimulation, for surprise, for shock. Drums make complex sounds, that, while tuned (though not necessarily to a note on the piano), aren\u0026rsquo;t playing a constant note and we want our music to have sufficient progression, not just repeat the same sequence endlessly. A gnarly drop in some Dubstep or the cannon fire in the 1812 Overture both serve functionally a similar purpose.\nIn the chromatic scale there are many other, more \u0026lsquo;refined\u0026rsquo; scales like Minor, Major, Pentatonic, etc. These scales may be transposed to be centered around any note (or any frequency, since notes are just agreed upon frequencies and the ratios between them)\nAnd honestly? That\u0026rsquo;s about all you need to know. Basically, music is math and math makes music.\nOh, and the circle of fifths is a thing [TODO]\n[TODO] Just V equal Temperament here is confusing\n[TODO] Music Theory and White Supremacy (YouTube, Adam Neely)\n[TODO] Waitbutwhy.com \u0026ndash; Sound\n[TODO] Nanotone Synth\n[TODO] Benedetti\u0026rsquo;s Puzzle (mathematically impossible music) - (YouTube, Adam Neely)\n[TODO] Hack Music Theory\u0026rsquo;s YouTube Channel is pretty good. They do tend to present their tips as rules, but the tips are still generally pretty good.\nCircle of 5ths Explained\nhttp://huygens-fokker.org/scala/downloads.html#scales\nWrong Notes? # Song Structure # Repetition # ABAB ABBA ABAC \u0026hellip; # Call and Response # Solos # Contrast # Heavy drops v dainty sections\nOctave changes # making instruments swap roles\nKey Changes # Sonic Space # You want to make sure you\u0026rsquo;re in the right sonic space. [\u0026hellip;] It\u0026rsquo;s not so much about being louder than everyone else, it\u0026rsquo;s just, like, fitting in the right space where you can be heard - I just try to steer clear of the vocal no matter what. - Zach Comtois Further Reading # An Introduction to Math Rock (YouTube, Alfo Media)\nThe Largest Chord - sUpEr UlTrA hYpEr MeGa MeTa LyDiAn (YouTube, Leon Waves)\n(*My) Procedurally Generated Music is Awful (Cube Drone)\nLilyPond: programming beautiful musical scores (YouTube, 36C3)\nWTF Grooves №10\nMicrotonality can be interesting too:\nGenerative # SCIENCE! # https://ciechanow.ski/sound/\n"},{"id":287,"href":"/design/ui/","title":"UI","section":"DESIGN","content":" UI and UX # Principals of UI, A Thread (zensaiyuki@mastodon.social)\nGallery of Fantasy UI design from Movies and TV shows\nResponsiveness # Source Power Users # User power, not power users: htop and its design philosophy\nTypography # Practical Typography Textbook\nDatalegeya Font\nAlmost Monospace Fonts (blakewatson.com) (Also see monaspace)\nData Visualization # https://bids.github.io/colormap/\nWebsite Design # Learn CSS by Google Developers\nButalist Web Design, by David Copeland\nmotherfuckingwebsite.com, bettermotherfuckingwebsite.com, thebestmotherfuckingwebsite.website\nScrollbar Blindness (Sven Kadak\u0026rsquo;s Blog)\nGitHub Dark Mode is too Dark. (Karen ying\u0026rsquo;s blog)\nFigma\nhttps://muzzleapp.com\nhttps://mannhowie.com/ui-design-web\nDark Patterns # \" IF YOU PROGRAM A \u0026ldquo;NO\u0026rdquo; BUTTON TO SAY \u0026ldquo;MAYBE LATER\u0026rdquo; YOU HAVE FAILED AT BOTH INTERFACE DESIGN AND BASIC CONSENT \" - @HTHRFLWRS Logos # noun, plural lo·gos. Also called logotype. a graphic representation or symbol of a company name, trademark, abbreviation, etc., often uniquely designed for ready recognition.\n-Dictionary.com One of my favorite logo designs, available in high quality thanks to Ben Welsh/@palewire:\n"},{"id":288,"href":"/music/video/","title":"Video","section":"Musics","content":" Video \u0026amp; Streaming # \u0026hellip;Psst, if you\u0026rsquo;re on this page, you may be interested in My blog post on Video Synthesis Before anything else, I need to crush some hopes and dreams:\nYou absolutely should not expect your YouTube or Twitch channel to make it big. Even if you put in the work, invest in good equipment, and make cool content regularly, and promote the shit out of yourself, it\u0026rsquo;s still a game of luck on if you can go viral and if you can retain any viewership whatsoever after doing so. Even assuming you do, you\u0026rsquo;ll always be one step away from angering the YouTube overlords and having your channel deleted or needing to take a month off to deal with life and finding that you\u0026rsquo;ve lost half your audience. The internet has a short attention span.\nOn top of all of this, even if you make it big, it is impossible to state just how difficult it is to make money on that success. You either need some incredibly dedicated fans willing to support you on Patreon, to take shilling sponsorships with VPNs and Mobile Games, or try to make your own clothing brand. It\u0026rsquo;s not a good spot to be in.\nAnd, look, I get it. I remember being 14 and wanting to do nothing more than be a pro gamer making money streaming. I know you\u0026rsquo;re thinking:\nIf they can do this, then I can too! And, yeah, you could - but the number of hours it takes and drudgery of it is legitimately worse than going to school for two engineering degrees like I did. Video editing for multiple hours every day will drain your soul. Streaming to an audience of none for a year while you get started isn\u0026rsquo;t any better.\nI\u0026rsquo;m not saying you can\u0026rsquo;t do it, I\u0026rsquo;m saying you better have something original to bring to the table and be willing to actually put in the work. There\u0026rsquo;s just not room for another Minecraft YouTuber right now.\nCameras # If you\u0026rsquo;re like most people, the best camera you own is probably your phone camera. You can use something like DroidCam to use your phone camera, but this actually has a multitude of negative side effects - most notably, your phone may not be able to sustain having the camera open without getting uncomfortably hot. So, what should you get?\nI don\u0026rsquo;t want to recommend any one product or do a good / better / best with links as that will surely get out of date. What I can say is do not shop by resolution. A lower resolution camera with a bigger sensor and good lens will absolutely wreck a lower end camera. So, what you should really look for is video examples and see how what you\u0026rsquo;re looking at actually performs.\nThere are generally three tiers of camera setups:\nWorst: Literally any Logitech Webcam\nMeh: Higher end streamer webcams (AVerMedia PW513, Elgato Facecam, etc.)\nBest: Capture card with a real camera \u0026hellip; assuming said camera has the ability to do live output That said, you may not actually need that good of a camera! If you\u0026rsquo;re only streaming games with a tiny square in the corner showing your face, then it really doesn\u0026rsquo;t matter unless it\u0026rsquo;s offensively bad, in which case even the Logitech Webcam will work.\nThe hate for Logitech webcams isn\u0026rsquo;t just because they don\u0026rsquo;t look amazing for the money, it\u0026rsquo;s because the drivers typically have issues with not letting you store manual settings and really like to turn on auto settings that will make your exposure and white balance jump all over the place! Lighting # Generally, when setting up light you should have three things in mind:\nAre these lights decent quality? This may sound obvious, but it\u0026rsquo;s no as simple as \u0026ldquo;Oh! They\u0026rsquo;re Phillips Hue™ They must be good!\u0026rdquo; What you should really look for is their Color Rendering Index. Generally, you should be looking for CRI 95 lights, as they\u0026rsquo;re not crazy expensive now and the difference is noticeable, even over CRI 80s which are more common. \u0026ldquo;But what the fuck is CRI?\u0026rdquo; I hear you asking? Well, you know how when you shine white light through a prism it makes a rainbow? Well, a lot of \u0026ldquo;white\u0026rdquo; lights cheat, and you\u0026rsquo;d actually see some bands missing or a lot of thin strips. These still visually look white, but tend to make everything captured on camera look worse - especially pale skin.\nAre There enough, diffused, light sources Normally, you\u0026rsquo;ll want to have a lot of diffusion of light in your room. This means that light gets bounced around a lot and there are a lot of ways for the light to reach the subject (probably your face). This is what those big umbrella and tent looking things on old photo booth setups are for. In a bedroom-recording setup, a good middle ground is to just use a boat load of lamps and small lights. If you can get away with using diffusion material and special lights, go for it.\nI found hanging up some of those string light LED Edison bulbs (like you\u0026rsquo;d see at a wedding) on the ceiling works well as an alternative to a softbox. It\u0026rsquo;s so many point lights that it adds up to a similar effect- albeit with the downside that you can\u0026rsquo;t move them around. Do you want lighting to set a mood \u0026hellip; and are you committed to it? Breaking the rules of the above, you might want to use lighting to your benefit to change the mood. Maybe use red lighting when playing a horror game, or blue when playing a game underwater. However, before you commit to actually recording with a different colored light, you should decide if you want to actually do it with real lights or if you\u0026rsquo;d rather just edit the video\u0026rsquo;s color and tone in post.\nVoice # For the people who don\u0026rsquo;t want to get a full background in audio production but want their voice to sound good for a podcast or stream, here\u0026rsquo;s the important bits.\nA good effects chain can make a bad mic sound tolerable. A good effects chain can make a $100 mic and a $3000 indistinguishable. Audio is more important than video - bad sound makes people click away. The way you talk will make a bigger difference than replacing your mic - Speak with enthusiasm and direction. Put your mic on an arm with shock absorption so not everybody can hear you type. You\u0026rsquo;ll want a pop filter on your mic to remove the sound of \u0026lsquo;Puh\u0026rsquo;, \u0026lsquo;Buh\u0026rsquo;, \u0026lsquo;Kuh\u0026rsquo;, - the sounds that blow air out. You\u0026rsquo;ll want a De-Esser to chill out the \u0026lsquo;S\u0026rsquo; sounds. Don\u0026rsquo;t over use the De-Esser or you\u0026rsquo;ll end sound like you have a Lisp. You\u0026rsquo;ll want a compressor to chill out peaks and bring up quiet parts. Don\u0026rsquo;t rely on the compressor to prevent all peaks or handle you being further from the mic. Use a limiter if you have to. EQ. EQ. EQ. The biggest difference you can make to your sound (and to make a bad mic sound good) is to EQ. Don\u0026rsquo;t over do it with the EQ. De-Noise. Nobody wants to hear your AC in the background. Sidechain. When you talk, everything else should get quieter. Dampen reflections in the room. You absolutely should not cover everything in acoustic foam. Okay, so, what to actually do for each? First, grab the ReaPlugs VST plugin pack from https://www.reaper.fm/reaplugs/\n1 \u0026amp; 2: Buy a decent mic when you can. Research the differences, particularly Cardioid vs Dynamic. 3: Give a shit about your audio. 4: Be excited and talk like you\u0026rsquo;re a radio talk show host. 5: Buy a mic arm. Cheap ones are like $15. 6: Buy a pop filter - though a decent mic probably comes with one. 7 \u0026amp; 8: Use any De-Essing plugin you want. These can either run live or be applied in post. See How To Remove Sibilants From Your Live Streams (YouTube, Atomic Overdrive). You can use ReaXComp if you think you know what you\u0026rsquo;re doing. 9 \u0026amp; 10: Compression - Use literally any compressor. Ratio of 3 to 4, threshold around -20dB, 5-ish ms attack, release around 80ms. Apply any gain needed before the compressor. Use ReaComp, not OBS\u0026rsquo;s, as OBS\u0026rsquo;s is a PITA to see if it\u0026rsquo;s working. 11 \u0026amp; 12: EQ- See Reaper Equalizer Obs Studio For Better Voice Quality (YouTube, PlentAZach). Use ReaEQ. 13: De-Noise - If you\u0026rsquo;ve used Discord, you know what the de-noising does, and that it\u0026rsquo;s basically magic. In OBS there should be a built-in Noise Suppression Audio Filter. Google how to set that up. Note, that if you don\u0026rsquo;t have a newer Nvidia GPU that can offload this it might be sort of intense on your CPU. 14: Sidechain - See Keep your Stream Sound BALANCED with OBS Audio Ducking (YouTube, EposVox) 15: Reflections - See 3 Steps to SOUND like a PRO on Stream! (YouTube, EposVox) - but generally, just put a lot of weird shaped shit everywhere in the room. Clutter is good in this case. This is pretty much everything you should need to know for streaming or recording vocals.\nRecording # Streaming # If you\u0026rsquo;re following along with the rest of OpGuides and have joined me in using Arch Linux and you happen to be using an AMD GPU, you\u0026rsquo;ll need to tweak some settings in OBS\nSettings→Output→Streaming→set \u0026lsquo;Encoder\u0026rsquo; to \u0026lsquo;FFMPEG VAAPI\u0026rsquo;, then to make that work and not just throw errors, you\u0026rsquo;ll need the libva and libva-mesa-driver. You\u0026rsquo;ll probably want Settings→Output→Recording set to \u0026lsquo;Standard\u0026rsquo;, the encoder to be \u0026lsquo;use Stream Encoder\u0026rsquo; and keep the format as mkv.\nThese settings aren\u0026rsquo;t necessarily the best for quality, but they should prevent eating your CPU from being overloaded\nVisualization Software/Tools # Name \u0026amp; Link Description Screenshot/Demo music_visualizer (GitHub) Shader viewer / music visualizer for Windows and Linux Too many variations to easily show, look at the GitHub repo. Soundshader (GitHub) Uses fancy \u0026lsquo;AutoCorrelation\u0026rsquo; - info on the GitHub page https://soundshader.github.io Metagroove (Itch.io) Signalizer VST Listed above in Free VSTs, but it\u0026rsquo;s so good I\u0026rsquo;m listing it here again. An amazing VST Oscilliscope, Vectorscope, and general analysis tool, looks very good too. Has full screen modes. Note that most of the fancy music animations you see on YouTube are probably made in Adobe After Effects, with the exception of some that are done in programs like TouchDesigner or other node-based programming environments. You can read more about these in Design Chapter 6 - Generative Tools\nSome people also use hardware such as the Sleepy Circuits \u0026lsquo;Hypno\u0026rsquo; or Critter \u0026amp; Guitari \u0026lsquo;Eyesy\u0026rsquo; - though both of these platforms are really just running a Raspberry Pi (a lil\u0026rsquo; computer) under the hood.\nOn very rare occasion you may also see some outright analog video synthesis, but this is generally very, very expensive. Just search YouTube for \u0026lsquo;Analog Video Synthesizer\u0026rsquo;.\nI also recommend making your visuals in weirder ways. Here are some videos with visuals I really like:\nMax Cooper - Aleph 2 (Official Video by Martin Krzywinski) Other people talking about their setups # EposVox is a great YouTube channel for learning about streaming stuff\n"},{"id":289,"href":"/phil/voting/","title":"Voting","section":"PHIL","content":" Elections \u0026amp; Voting # I\u0026rsquo;m a \u0026lsquo;murican, so this will be US centric, that said, the arguments here could likely be applied universally Issue 1: FPTP Voting Sucks # lower standards of removal, ranked, transparency Budget voting\nIssue 2: Voters are really, really stupid # voting based on if they like the person, how he/she looks, single issue voting\nIssue 3: Two is the unfriendliest number # Issue 4: Gerrymandering, Fraud, and Astroturfing # [TODO] Comment on Citizen\u0026rsquo;s United\nIssue 5: Turnout # Issue 6: Disenfranchisement # Statehood # In 1959, fourteen years after the end of World War Ⅱ, both Alaska and Hawaii become states. Today, Hawaii has a population of 1.4 million and Alaska under a million. Puerto Rico has more people living there than Hawaii and Alaska combined. Washington D.C. has a higher population than Wyoming (~700k in DC to ~600k in WY ). Yet, these people don\u0026rsquo;t get representation in Congress.\nWhen the soldiers we worship as minor gods were fighting World War Ⅱ, they did so thinking of a 48-star flag. Now, as that generation is nearly buried we\u0026rsquo;ve convinced ourselves that 50 is some God-given number, ingrained into our country\u0026rsquo;s identity. It\u0026rsquo;s not.\nWhen I see our 50-stared flag, underneath the fabric and the dye, I see a country that has brutally conquered and slaughtered native people to claim the land for those stars. But I also see a country that has a past hardly different from any other at the time, a country that has and will continue to make mistakes, and a country where the core ideal of here people - even if it has been diluted, corrupted, and twisted - is one of Freedom. The USA is not a good country. Hell, we kind of suck. We have the largest prison population in the world, our education system forces teens into lifelong debt, our life expectancy is shit- probably in part because our healthcare is shit, and we waste enough money on the military to make your head spin. But that\u0026rsquo;s below the surface.\nRight on the surface of the flag, I see those 50 stars as representing our failure to hold to the concept of democracy: That every person should have a vote.\nWe need to add a few stars.\nThere is a good argument that Puerto Rico should be given independence, but I\u0026rsquo;m not sure if that would actually be great for the people there now either. And sure, you can make the argument that this would just be a quick grab for left-wing votes, but two things to consider here:\nAre you saying that people should be disenfranchised because they always have been? Both Trump and Baby Bush lost the popular vote, only getting in because of the electoral college, which massively favors small, republican states, to the point where a voter in Wyoming is worth almost 3 times more than a vote in California. If you like this system, is it because it\u0026rsquo;s actually just, or because it gets Republicans elected? Felony # Online Voting # Having just gone through the 2020 election, with what seem to be mass unfounded allegations of voter fraud, do you think electronic voting, potentially over the internet, should have been used?\nNo.\nWhat\u0026rsquo;s the failure mode for a hacked election? You can\u0026rsquo;t just roll back a political career advancement.\nThe threat model for elections is incompatible with the BYOB mental model of consumer electronics (which is what people imply when they talk about electronic voting).\nPaper ballots. You need an audit trail that technology cannot tamper with.\nSoatok Dreamseeker Interview Fake News \u0026amp; Willful Ignorance # "},{"id":290,"href":"/interviews/wolfgun/","title":"Wolfgun","section":"INTERVIEWS","content":" An Interview With Wolfgun # 2/17/2023\nPlay Wolfgun is a space obsessed master of synthesizers with 50 albums out on Bandcamp. He primarily makes his music in Renoise, a Digital Audio Workstation (DAW) which combines an old-school tracker workflow - think the equivalent of combining spreadsheets and music software with the sequence of notes and effects entered vertically, like the example on the left - with modern production capabilities.\nHis music, through his distinctive sound design and smooth vocal delivery, evokes feelings of flying though space and being overwhelmed by its beauty.\nSome of his work directly delves deep into story telling, such as his incredible CHRONICLES FROM OTHER WORLDS album.\nMore than a musician, he has delved into video production, photography, digital art, and has made an action arcade game with some serious style that\u0026rsquo;s out on Steam:\nThank you for taking the time for this interview Wolfgun. Your work has explored many ideas, ranging from high-energy synth filled riffs to thought provoking story telling. But that\u0026rsquo;s what you\u0026rsquo;ve made, not who you are. So, how would you describe yourself? Thank you for reaching out to me to begin with. I would say that my work is an inseparable extension of me and who I am. If you study my work, then you will already know a lot about me. If you\u0026rsquo;re asking who I am outside of my work and what I do, then I\u0026rsquo;d say I am a pretty average person. I enjoy getting to know people, I play games, I don\u0026rsquo;t like talking on the phone about problems with my bank account. I dream, I wake, I work, I eat. Perhaps a mundane answer?\nAs mentioned above, you make your music in Renoise. Why do you use Renoise and it\u0026rsquo;s tracker workflow instead of a more traditional DAW? Trackers are what I started with way back when I was a teenager, and I feel that the way they organize information is easier for me to parse. Adding information, expanding the area for information, structuring, editing, and viewing existing data in Renoise is all very immediate and direct. I think with time, any tool can become immediate and direct, but trackers are what work for me.\nGiven that your music is so synthesizer heavy and the abundance of fantastic sounding virtual synthesizers - many of which are free - what do you think having physical synthesizers brings to the table? Well, for about seven years now I\u0026rsquo;ve been collecting hardware synthesizers and I\u0026rsquo;d say they dramatically changed the way I design sound, as well as my workflow. In a purely digital arrangement you can simply copy and paste a VST synthesizer and suddenly you have two. You can\u0026rsquo;t copy and paste synths in reality, unfortunately, so recording them is necessary. Integrating recorded files into my workflow was extremely difficult at first, because I was used to making changes on the fly to every element of a song.\nThis seemed like a bad thing for a while that caused me to stumble, but the challenge was good for me. I began recording a lot of passages live, and I focused more on my ability to play, as well as completely changed the way I design sound. It altered significantly how I approach the production, and the structure, of music.\nYou\u0026rsquo;ve shown a few pictures before of your Eurorack setup,\nWhat are your goals in your eurorack setup? Crisp leads? Crazy sound design?\nMy eurorack synth, which I call Vega, is a box that I began building with the explicit desire to create complicated noise. The modules in it I chose to gear it toward generating unusual sound, specifically non-musical tones. I consider it to be a tone-generating machine more than a synthesizer, however it is flexible.\nNearly all of the sounds in \u0026ldquo;She Dreams\u0026rdquo; from the Projections OST were created on Vega, and played in realtime. Without much effort you can get sounds out of it that sound like radio static from strange places, screaming drones, and ghostly sounding hums that evolve in nuanced ways. There are a few things I want to change about it, but overall, Vega is a box for tuning in to bizarre vibrations.\nYour vocal delivery and processing really stands out for its space-defying, ethereal sound. How do you do it? If you\u0026rsquo;re asking technically, I use a combination of methods to achieve my vocal sound. Up close micing with a nice condenser and careful editing give me super clean files to start with. On the software side, I have used Melodyne for over ten years now to edit vocals in a variety of ways - Sometimes subtle, sometimes harsh, always with surgical precision.\nYou really have to strain over the small things with vocals to make them perfect. Even today, I am improving the ways that I handle my vocal processing, and mastering music in general.\nIf you\u0026rsquo;re asking creatively, then, it must be said that I simply have a particular inclination toward a specific kind of vocal sound. I know how I want to sound when singing, I know how I want specific words pronounced. I only use words that I consider to be beautiful in my music, and I only synchronize those words with melodies that appropriately support the emphasis on the syllables. All of those things and much more must be considered when arranging words with time.\nWhat inspired you to make your game PROJECTIONS? A friend of mine told me that making a game solo would be too difficult for me to manage.\nSo I made one.\nThat really is how it started. The idea began in a simple way, and became way more complicated over time, because I can\u0026rsquo;t do anything simply. The size and scope of PROJECTIONS grew to the point that I thought I would not even finish it. But I am extremely happy with how it turned out. I have many complicated opinions about what should and shouldn\u0026rsquo;t be done in games to make them better, and I look forward to exploring that in future projects.\nWhat did you find most rewarding when working on the game? Creating the visual effects for attacks. Often, entities (things you fight in the game) were originated simply based on what their attack might be, and how beautiful it might look and feel for it to attack you in such a way. I\u0026rsquo;d call myself \u0026lsquo;obsessed\u0026rsquo; with explosions and the clockwork of impacts, so player attacks, entity attacks, and the visuals which accompany them were a literal goldmine of joyful creativity for me to play with.\nI considered from the very start that PROJECTIONS would have an emphasis on details with its visual effects. Everything had to be glorified with intricate and rapidly evolving detail-work - Each line, each burst of light, every motion would be supported by beautiful and completely unnecessary details. It had to be overwhelming.\nThis mentality is something that has always existed in my music, but being able to express and explore it visually was new and exciting. This way of thinking also transitioned back into my music production (and every other kind of media I play with) and has improved my art in a very general way.\nMost of your stories feature the warping of time and space. What about that topic draws you in so much? It\u0026rsquo;s broad of me to say it like this, but, I like the idea that there is something wrong, all the time, and we just don\u0026rsquo;t know it. I sort of feel that way in day-to-day life. There\u0026rsquo;s something wrong. A strange feeling that hides in the shadow of other, more normal, more comfortable things.\nRegarding \u0026rsquo;time\u0026rsquo;, I feel very particularly that time is not as straightforward as it seems to be. I like the idea of cycles - Repeating moments, or sensing the same thing again. My music does this on purpose. In many of my songs, the lyrics from the start are also the lyrics in the middle and the lyrics at the end, just with a few words changed to shift the tone. It\u0026rsquo;s the same, but different. Melodies appear and re-appear, specific notes that appear at specific times across my entire discography, become symbols that carry the weight of everything before them, and give context to what you are hearing, as well as gain new meaning each time.\nAfter more than ten years of writing music, I feel that I have developed a pretty clear vocabulary of symbols in my work that speak to this idea. As for \u0026lsquo;space\u0026rsquo;, I do not think there is a difference between time and space, so the same thing applies.\nWhat inspires the stories you\u0026rsquo;ve written for your story-based songs and your game? My dreams, for the most part.\nI engage in oneiric writing a lot of the time. This goes for my stories, my lyrics, my melodies, art, poetry - Basically anything. I have kept a dream diary for over a decade. I study my own dreams, and from them I hear many things about myself. I encourage everyone I know, and often people I don\u0026rsquo;t know, to keep dream diaries. Dream recollection is a skill which can be trained. If you can remember even a small part of a dream, write it down. The act of doing so will help to solidify it, and you may recall more about it.\nThis process of partial reconstruction leading to more complete reconstruction is what matters, because it trains you to both fill in the blanks and to better understand how that works when recalling future dreams.\nHaving released as many albums as you have, most in roughly the same genre, do you ever feel limited by meeting expectitions of fans for your music to fit that style? Always. But I do not let that stop me from writing what comes to me. It has always been that I write what I feel, and in whatever medium feels correct for it. There is something special about drum and bass music that keeps me coming back to it. I\u0026rsquo;m always chasing that energy. But there are many kinds of music which are describable in genre terms, and also those which are not describable in any terms, that I wish to make, and am actively pursuing. If people only come to me for a specific genre or sound, then to them I say: Begone.\nWhich of your past albums did you most enjoy making? It may be surprising, but the album which I had the most fun making was absolutely RUNNING. I have a lot of fun making many kinds of music, and there is always some level of fun when making things no matter what it is or how it sounds, but RUNNING stands out to me as a particularly special gem that was too beautiful and too pure. It is a specific kind of music that has no \u0026lsquo;genre\u0026rsquo; that I wish to make, which I think of as many different things, but the words \u0026lsquo;chaotic\u0026rsquo; and \u0026lsquo;playful\u0026rsquo; come to mind. It\u0026rsquo;s childish, irreverant, even \u0026lsquo;bad\u0026rsquo; at times. I love it and I miss it when I am not listening to it. I wish to drown in that energy.\nHow has being a part of the furry fandom influenced you and your art? For a long while I wasn\u0026rsquo;t sure how to \u0026lsquo;be\u0026rsquo; furry. I have very specific feelings about identity, and it is definitely out of the scope of this question, but it is enough to say that: The wolf \u0026lsquo;persona\u0026rsquo; was exactly that - a persona, which I adopted at a time in my life when I felt vulnerable and needed strength to go on, but I couldn\u0026rsquo;t find it within myself. So I made a \u0026lsquo;mask\u0026rsquo;, which was Wolfgun, and that persona was full of imagined strength.\nIt was everything I wanted to be, but wasn\u0026rsquo;t. When I had to do things I wasn\u0026rsquo;t prepared to do myself, or didn\u0026rsquo;t have the strength to do myself, I would wear \u0026lsquo;Wolfgun\u0026rsquo; instead. From this imaginary thing, I drew strength. Over the last couple years, a lot of things have happened, and my association with \u0026lsquo;Wolfgun\u0026rsquo; is no longer that of \u0026lsquo;Wolfgun\u0026rsquo; being a thing I need to wear - that is to say, \u0026lsquo;Wolfgun\u0026rsquo; is a part of me, but I don\u0026rsquo;t wear it for strength. I actually consider myself a Big Cat these days.\nTo be extremely specific about it, I feel like I have always been some kind of big cat, and ‘Wolfgun’ is just a thing I wore until I understood that. But I feel much more comfortable as a cat. I\u0026rsquo;ve even been working on a cat-based fursona. I feel like it fits me, instead of me simply wearing it to make up for what I lack. With regard to me and my art, the aspect of my identity which can be called “Furry” helped me to more clearly define myself, understand myself, and in general, feel more like myself. In my art, this means expressing my emotions as raw and real as I can. Of course, I do that in reality, every day, as well.\nHow do you feel about AI tools being used for digital art? What about for music? This question leads us to complications that are impossible to resolve.\nFirst, I believe they\u0026rsquo;re an unavoidable technology at this point. Any tool is only as good as what it is used for. Are we speaking legally? Ethically? I don\u0026rsquo;t agree with an AI being trained on billions of scraped images from visual artists, painters, and photographers, to create a service that will ultimately be used for profit by a specific company. The same goes for music. But if we\u0026rsquo;re speaking about the value of art, I recall when Spotify actively sanctioned the use of a neural network generating thousands of hours of music to be placed onto their service to fill up people\u0026rsquo;s playlists. I shrugged. The music which I am talking about is music that is made to fill up space. If we consider \u0026ldquo;intent\u0026rdquo; when talking about art, the lines are drawn so much more clearly. \u0026ldquo;Music made to fill up space\u0026rdquo; specifically is already a thing that happens in every genre of music, and indeed, it is a thing which happens in every medium of artistic creation. But more directly, when did it become so important to fill up that space? We have to consider why a space would need to be filled. This question can be extended to AI generated visual art. For what reason would a space need to be filled with AI Generated Art? AI Generated Music? AI Generated Words? The answer should be obvious, and it is nothing new. Neural Networks and AI-Generated media are just the latest tool which can be used to accomplish such a thing, but I don\u0026rsquo;t think it is a threat to the value of art, and it is not a threat to me. I create art because I am compelled by the experience of living to understand and express myself to the best of my abilities. Music is the key to the universe, and the language with which time is written. No neural network can comprehend that, and so cannot be adequately expressed through it.\nMany artists make what they make as a form of monetary income. I do not think that neural networks, as tools, can usurp that kind of artistic creation. The wonderful act of making things is too complex to begin to describe. The way that an idea might hit an artist, how their emotions mix with it, how their years of experience factor into it, and how their comprehension of the thing, as well as the translation of the idea from a Concept to a Completed Piece, are all just a few pieces of part of the equation of making art, of any kind. A neural network made to generate art has no personality, no part of itself which can reflect ideas more or less strongly, and importantly, lacks any transformative aspect to its method of creation. It is true that people mimic in order to learn, and I agree that neural networks do mimic people, with convenient precision. However, I would argue that there is no part of that neural network which represents its \u0026ldquo;Self\u0026rdquo; with which to mix the ideas that it is exposed to. More than that, a neural network which has been trained on billions of images is undoubtedly going to represent an \u0026lsquo;average\u0026rsquo; of art with each of its generations. Humans lack the ability to memorize and learn from literally billions of images. We have to fill in the blanks with ourselves, and that is what artists do. We learn from mimicking, and where the mimicry ends, we fill in that space with ourselves. Humans do not average images, or music, or words - We learn some, and we fill in the shadows with the light of our being. That light is constantly changing, too - As we age, gain more experience, form opinions which grow and change, learn new skills, and take in new information - We change. That constant evolution plays into what we create, as artists, no matter the medium. The value of such a thing absolutely can not be understated.\nSecondly, AI Generated Art moves art into the realm of being a product. To an artist, the product is not the goal. I will say it simply. Creating music is to me as shitting is to a wild animal. When an animal is hungry, it eats. Do they eat in order to shit? No. The goal is to feed their hunger and sustain their body. The animal\u0026rsquo;s shit is a by-product of the process of being alive. In the same way, art which I create is a by-product. It is not the goal, but rather a natural part of being an artist. Any thing which turns art into an end product - whether it is musical, visual, literary, or any other type of art - is putting the emphasis on the shit, instead of the process. That\u0026rsquo;s fine if that is the goal. But the goal of creation is not the product. It\u0026rsquo;s the process, and how it enriches our lives, and others, as a result.\nFinally, we must not undervalue artists by equating them to \u0026lsquo;black boxes\u0026rsquo;. Neural Networks are black boxes made to do something. They are tools. Artists are not tools. It bears being said that artists are not machines trained to do one very specific thing. Artists are undervalued and underappreciated globally, universally, everywhere, no matter their age, what industry they work in, whether or not they are independent, and regardless of what type of media they create. Commission artists you like. They are worth it.\nIs there any skill that you spent too much time developing that you wish you hadn\u0026rsquo;t? No. Learning, and excelling at what you learn, is always good no matter the context. You find that as you go through life, one skill leans into another, to varying degrees. It is worth it to learn things and become better, always, because that is one of life\u0026rsquo;s most noble goals.\nWhat\u0026rsquo;s the most important skill that you\u0026rsquo;ve taught yourself? The ability to be self-aware and self-critical.\nWith regard to art, the skill to recognize new information and absorb it into my creative process. Sometimes when creating, things don\u0026rsquo;t \u0026lsquo;work out\u0026rsquo; the way that you imagine. In almost all of my experience, this is based on a deficiency of information and awareness - Not being \u0026lsquo;aware\u0026rsquo; of a thing means you can\u0026rsquo;t manipulate it. Constantly being critical of myself means never being certain that what I am doing is correct. By questioning constantly, I am in a constant state of learning, and that means very frequently becoming aware of new things I hadn\u0026rsquo;t considered before. There is a lot that could be said about this further, but that would extend beyond the scope of this question I think.\nAny books, movies, TV shows, etc. that you\u0026rsquo;d recommend? Books:\nThe Quadrivium Movies:\nCloud Atlas (2012) Beyond The Black Rainbow (2010) Solaris (1972) The Color of Pomegranates (1969) TV Shows:\nStar Trek: TNG Star Trek: DS9 What\u0026rsquo;s the biggest \u0026lsquo;Oh Shit\u0026rsquo; moment you\u0026rsquo;ve ever had, be it one you caught in time or not? Nearly being struck by lightning.\nI used to stand outside and film storms to try and catch lightning bolts on camera. One day during a storm I stepped outside of my house to film the front as it approached. I was holding my phone, recording ahead of me, and saw a flash of blue light, along with a very loud static click. I assumed that the flash of light and the click was just some kind of static discharge, and about a second later heard an extremely loud thunderclap.\nI later learned after examining the video and sharing among friends that the blue flash and click was a \u0026ldquo;lightning streamer\u0026rdquo;, which are basically the stored static electricity searching for a place to discharge. That streamer could have lead that bolt of lightning to strike directly in front of me, and I\u0026rsquo;d definitely have died.\nI don\u0026rsquo;t go out in storms anymore.\nWho are your biggest inspirations? What creators do you think are way to underrated and deserve a shout out? I don\u0026rsquo;t put people up on pedestals. For context, I collect and absorb many things that I like. I strictly avoid collecting or absorbing too much from a single individual or outlet, in general. I don\u0026rsquo;t really mingle with other creators, and I don\u0026rsquo;t like to call myself a musician, an artist, a creator, etc.\nNature, and exploring my own emotions and especially my dreams, lead to my inspiration always.\nWhat\u0026rsquo;s the best advice you\u0026rsquo;ve ever received? Worst? The best advice I ever received was from my precious grandmother, who taught me how to love, and how to express myself without regret. The amount of bad advice I have received from people totals to such an amount that I would spend hours complaining about it here if given the opportunity.\nNo one has ever told me this, but I will share it with you for free. Love comes from a place that is infinite, and you cannot run out of it. We measure forms differently from ideals. The form of love can be measured. But love is an ideal, and is infinite. For example, if I hug a person, that hug has a beginning and an end - It can be measured, in this way. But the thing which made me hug - Love - did not reduce in quantity or intensity. Why is this? Ideals are infinite, and forms are finite. The love you have inside of you is boundless, if you let it be. You are boundless, if you let yourself be.\nWhat advice do you have for anyone interested in making works similar to yours? Chase whatever it is that moves you, and chase the reason it moves you. Do not create simply for the sake of creating. Know why you want to create. Do not build a ship - First, love the ocean. The ship will build itself.\nAs for practical advice, do your research. Use free tools. Educate yourself. Absorb as much as you can. Find artists whos works you like and imitate them. Imitate my work, if you want. Humans learn best by mimicking, so mimic. The skills you learn by going through the motions will transform inside of you, along with your life experience, and all of your desires, and when filtered through you will become something new. You are a transformative engine. Make the best of it.\nHow do you stay motivated to keep doing cool things? A healthy fear of dying. I do not want to die without making the things I want to make and saying the things I want to say. Every day I find a new thing I want to say, so, it is a never-ending race. I never stop running. Very often I am tired. But I have to keep going, because the alternative is dying, and I don\u0026rsquo;t want to die yet.\nWhat hobby do you want to get into but haven\u0026rsquo;t had a chance to dive into yet? Architecture. I am strongly motivated toward understanding, and excelling at, architectural design.\nAnimated stars effect from https://github.com/H0rn0chse/NightSky "}]