<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Engineering on Opinionated Guides</title>
    <link>https://opguides.info/engineering/</link>
    <description>Recent content in Engineering on Opinionated Guides</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://opguides.info/engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://opguides.info/engineering/intro/community/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/intro/community/</guid>
      <description>Art by Talon Creations. Characters from Left to Right: Soatok, Cadey, Loial, Vega, Cendyne, Mimir, Vordex ‚Ö† - Community # When you think engineer, what traits come to mind?&#xA;If you&amp;rsquo;re anything like most people, you probably thought &amp;ldquo;smart&amp;rdquo; and &amp;ldquo;antisocial&amp;rdquo;.&#xA;While I can&amp;rsquo;t speak to how truthful that stereotype may be, I can tell you for sure that in engineering, not knowing how to make friends, ask for help, and talk with others will make you all but useless.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/a3-bom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/a3-bom/</guid>
      <description>Appendix C - BOM # As the guide isn&amp;rsquo;t anywhere near a usable state yet, this page should be ignored for the most part. OpGuides is free. Unfortunately all the tools and programs you&amp;rsquo;ll need to follow along aren&amp;rsquo;t necessarily. While you probably could do everything in this guide without getting the things in this Bill OF Materials (BOM) it will massively help to have it.&#xA;I&amp;rsquo;ll do my best to keep the cost as low as possible though.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/circuits1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/circuits/circuits1/</guid>
      <description>Chapter 23 - e-e-e-e-e-e-e-e-e-e-e- Electrons work for you # Further Reading # [TODO]&#xA;https://learn.sparkfun.com/tutorials/voltage-current-resistance-and-ohms-law/voltage&#xA;https://en.wikipedia.org/wiki/Transmission_line</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/circuits2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/circuits/circuits2/</guid>
      <description>Chapter 24 - Circuits &amp;amp; Semiconductors # When I was a kid I thought about circuits as being alive, like Cells at Work!, only little electrons going around busily keeping the heart of my toy working instead of anthropomorphic red blood cells working in the human body.&#xA;Now, as an adult - and a computer and electrical engineer at that - I still find this thought endearing. Though I&amp;rsquo;ve now come to see the physics and art of electronics to be even more beautiful when their true nature is really understood.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/digitallogic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/circuits/digitallogic/</guid>
      <description>Chapter 25 - Digital Logic # Digital logic is what it sounds like- it&amp;rsquo;s doing logical operations on digital data - 1&amp;rsquo;s and 0&amp;rsquo;s; True and False. Chain some of (er, a lot of) these logical operations together and you can do anything you want! Want to make your own CPU? Done. Want to make dedicated circuitry to do what your code does but hundreds of times faster? This is the way to do it.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/embedded/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/circuits/embedded/</guid>
      <description>Chapter 26 - Embedded Systems # By Make It With Me If you&amp;rsquo;re reading this page, it&amp;rsquo;s expected that you&amp;rsquo;re either pretty comfortable with C and programming on a normal computer already or that you&amp;rsquo;ve at least read though both the programming intro chapter starting with&#xA;&amp;ldquo;Lets Write Some Code&amp;rdquo; and the &amp;ldquo;Low Level Programming&amp;rdquo; page What is an Embedded System? # [TODO] need source These little devices are Pocket Operators made by Teenage Engineering, they&amp;rsquo;re relatively inexpensive synths that can be chained together, and I think they&amp;rsquo;re a great example of what an embedded system is, but for the sake of clarity, here&amp;rsquo;s how Wikipedia defines it: An embedded system is a computer system‚Äîa combination of a computer processor, computer memory, and input/output peripheral devices‚Äîthat has a dedicated function within a larger mechanical or electronic system.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/intro/1-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/circuits/intro/1-intro/</guid>
      <description>Chapter 23 - e-e-e-e-e-e-e-e-e-e-e- Electrons work for you # Normally, I would start a new section with some inspiring paragraph about all the cool things you can do with the topic - but I don&amp;rsquo;t even know where to start on this page.&#xA;I mean, sure, you&amp;rsquo;re literally reading this page from a magic glowing rectangle powered by electricity but, like, who cares? You don&amp;rsquo;t need to know how to work with electricity to use a computer.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/intro/2-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/circuits/intro/2-tools/</guid>
      <description>The Tools of the Trade # Okay so we know we have voltage, current, and power. Additionally, you&amp;rsquo;ve probably heard about terms like resistance, impedance, capacitance, and maybe inductance before. What the heck do these mean? Well, to each into a more tangible context, lets look at the tools used to measure each.&#xA;Building, fixing, and analyzing circuitry requires the use of a some tools and appliances, so let&amp;rsquo;s look at the basics of working with electricity by looking at what purpose the tools serve.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/intro/3-lcr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/circuits/intro/3-lcr/</guid>
      <description>OHM&amp;rsquo;s law, Nodal &amp;amp; Mesh Analysis, Superposition, Thevanins # ‚Öè ‚üõ Œ© # [TODO]&#xA;Resistors # [TODO]&#xA;potentiometer read from Arduino full range (center tap or max resistor)&#xA;LCR Meter # Capacitors # [TODO]&#xA;https://chaos.social/@gsuberland/113084315488845513&#xA;Kemet Capacitor Simulator&#xA;True, Reactive, Apparent &amp;amp; Deformed Power&#xA;Why electrolytic capacitors are actually kinda shitty üí©&#xA;ùêñ Ideal Capacitors aren&amp;rsquo;t real&#xA;Cap Types: Electrolytic &amp;amp; Ceramic - Collin‚Äôs Lab Notes&#xA;Capacitor Types P2: Tantalum &amp;amp; Film - Collin‚Äôs Lab Notes</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/intro/4-sim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/circuits/intro/4-sim/</guid>
      <description>Software Simulation # [TODO]&#xA;Circuit Simulator&#xA;Simulide&#xA;VCV Rack?</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/intro/todo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/circuits/intro/todo/</guid>
      <description>? - Making Something # As I&amp;rsquo;m writing these, it&amp;rsquo;s occurring to me I&amp;rsquo;m really leaving out the practical. If somebody really wants to lean how to do electronics stuff, even at the hobbiest level, they need to be able to&#xA;Know how to pick parts Know how and where to order parts How to actually assemble things (a bit of mechanical know-how) Feel comfortable making things that do things Beginner projects then are a bit of a problem.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/parts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/circuits/parts/</guid>
      <description>24¬Ω - Parts # When thinking about electronics, it&amp;rsquo;s easy to focus on the bits that electricity actually flows though. This chapter is for everything else&#xA;Part Codes # Okay, sort of still electrically relevant, but as your peruse your options for parts you&amp;rsquo;ll see some patterns in how things are named, such as diodes starting with a 1N prefix. If you want to know more about that, these links are decent:</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/pcb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/circuits/pcb/</guid>
      <description>Chapter 27 - Let&amp;rsquo;s make our own PCB # Printed Circuit Borads look like something reserved for only big business, but that is very much so not the case. It&amp;rsquo;s suprisingly cheap to get smaller boards made, espically if you&amp;rsquo;re okay with waiting a week or two on international shipping. But, let me back up- what even is a PCB?&#xA;Well, when anyone first starts with circuits, they go for the ever popular breadboard:</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/deeper/comparch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/deeper/comparch/</guid>
      <description>Chapter 37 - Let&amp;rsquo;s make our own CPU # How To Make A CPU - A Simple Picture Based Explanation (RobertElder)&#xA;This chapter will be split into three parts:Part 1, understanding the interval workings of a CPU. This is effectively just a computer architecture class, and will be by far the largest section.Part 2, making that CPU on an FPGA.Part 3, making that CPU do something. [TODO] http://www.lighterra.com/papers/modernmicroprocessors/&#xA;[TODO] A Density Metric for Semiconductor Technology - past nm for sizing</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/deeper/compileassemble/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/deeper/compileassemble/</guid>
      <description>Chapter 34 - Compilers and Assemblers # https://lee.earth/til/compiling-c-code-a-step-by-step-guide/&#xA;[TODO] Better Firmware with LLVM/Clang&#xA;[TODO] Zig cc: a Powerful Drop-In Replacement for GCC/Clang&#xA;Common Flags and When to Use them # These flags are not universal, instead they&amp;rsquo;re from GCC. GCC and Clang are the big two compilers you&amp;rsquo;ll see a lot and these flags should be mostly the same between the two. Of course, there are many, many other compilers, but I&amp;rsquo;m going to start with the common stuff</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/deeper/fpga1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/deeper/fpga1/</guid>
      <description>Chapter 36 - Let&amp;rsquo;s try out programmable logic # Before we get started, please be sure you&amp;rsquo;ve read Chapter 24 - Digital Logic Simulation of an Intel 4004 in TICS (The Integrated Circuit Simulator) a (abandoned?) WIP by Oni, Download the interpreter here, the repo has plenty of examples.&#xA;Some similar pixel art simulation tools are wired-logic, reso, wireworld,&#xA;[TODO]&#xA;Finite State Machines, VHDL, Verilog, FPGA &amp;amp; CPLD internals</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/deeper/nonsilicon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/deeper/nonsilicon/</guid>
      <description>37¬Ω - Non-Silicon Computing # Most computers today use integrated circuits which use silicon as a semiconductor. This, historically, was not the only option. In the past, there were some chips made with gallium arsenide (such as those in the Cray-3) though it shouldn&amp;rsquo;t be confused with gallium nitride (GaN) which are getting common use not for logic, but for power electronics. Of course, it&amp;rsquo;s not just Gallium. Germanium is also a semiconductor which used to be used for transistors and diodes, and there has been modern research into using a silicon‚Äìgermanium alloy.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/deeper/reverse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/deeper/reverse/</guid>
      <description>Chapter 35 - Reverse Engineering # Software # Anyone know of good resources for learning binary reversing? Not particular tools necessarily, but like theory and how to think @XMPPwocky on Twitter An Opinionated Guide on How To Reverse Engineer Software is decent.&#xA;for me personally:&#xA;know some assembly, and in particular make sure you know the calling conventions for your platform.&#xA;when starting out, do it on binaries you can actually run in a debugger and see what&amp;rsquo;s actually happening at runtime.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/intro/howtolearn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/intro/howtolearn/</guid>
      <description># EMBRACE FAILURE‚ÄàKEEP MAKING ‚Ö° - Learn how to learn # Nobody learns (effectively) by being shown what to do. You can watch hundreds of hours of people playing guitar, even explaining how they do it, but you won&amp;rsquo;t be able to randomly pick one up and play if you never have before.&#xA;Furthermore, as much as you can learn from direct reading and instruction, it has its place and limits.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/arch/</guid>
      <description>Chapter 2 - Installing Arch Linux # Some Background # ‚¨§‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ‚óØ&#xA;Unlike Windows or Mac which are primarily differentiated by versions (Windows XP, Vista, 7, 10‚Ä¶), Linux has two important things to look out for:&#xA;The distribution name (Arch, Ubuntu, Mint, Debian, etc.) Kernel version number (5.18 last time this page was updated) So, what do each of these mean?&#xA;Well, Linux is actually just the name of the underlying &amp;lsquo;core&amp;rsquo; of the system, known as the kernel, as such, there are literally thousands of Linux variations or &amp;lsquo;distributions&amp;rsquo;.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/firstgoal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/firstgoal/</guid>
      <description>Chapter 1 - The first goal # Art by @monoxromatik Every journey needs a place to start, and while many may like to start slow, I think a head first approach is best. So that&amp;rsquo;s exactly what we&amp;rsquo;re gonna do. The very first thing we&amp;rsquo;re going to do is install a new Operating System (OS)According to Wikipedia, &amp;ldquo;An operating system (OS) is system software that manages computer hardware and software resources and provides common services for computer programs.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/git/</guid>
      <description>Chapter 5¬Ω - Git. # Git is a distributed version control system that tracks changes in any set of computer files, usually used for coordinating work among programmers collaboratively developing source code during software development. - Wikipedia So it&amp;rsquo;s a way of versioning my files? Why not just click save-as and give it a new name? You could. It&amp;rsquo;s just that git can do a lot more! Namely, it&amp;rsquo;s really good at:</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/</guid>
      <description>Chapter 3 - Into The Hardware # One of the nifty things about Linux is you don&amp;rsquo;t need to install extra software to check out the deeper parts of your hardware. While on Windows you might need a tool like CPU-Z to look at information about the CPU on Linux you can do it out of the box. Even better, Linux makes changing values and tweaking performance easier, too.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/architectures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/architectures/</guid>
      <description>Chapter 3¬Ω - Architectures # Instruction Set Architectures # Today, there are two main computer architectures you&amp;rsquo;ll use x86_64 and ARM. You&amp;rsquo;ve probably heard this in passing, but you may not know what they are. These are Instruction Set Architectures (ISA), and they define the list of instructions your computer can understand and the basics about how those instructions are laid out.&#xA;Let&amp;rsquo;s say we have a fictional computer, really old, that&amp;rsquo;s only 8-bit (most modern systems are 32 or 64bit) this would mean we get eight 1&amp;rsquo;s and 0&amp;rsquo;s to define our instruction.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/biggerpicture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/biggerpicture/</guid>
      <description>10 - The Bigger Picture # Something that&amp;rsquo;s most people get wrong about computers is thinking that the majority of what makes a computer go faster at something is being able to do math faster. After all, if you can add, divide, multiply, subtract, etc. numbers faster, that&amp;rsquo;s everything a computer does, right? So making math twice as fast means everything is twice as fast? No. Very much so no.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/buying/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/buying/</guid>
      <description>11 - How to Know What to Buy # So you want to build a computer? Great! Now you&amp;rsquo;re probably wondering what to buy.&#xA;The very first things you should ask yourself are:&#xA;What will this system be used for? What&amp;rsquo;s my budget? Are used parts okay? That first question will dramatically narrow down your options, whether you realize it or not. If this system needs to have Microsoft Office (Word, Excel, etc.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/cooling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/cooling/</guid>
      <description>8 - Cooling # Computers, who&amp;rsquo;d&amp;rsquo;ve guessed, use power. Shocker, right? Well, using power means making heat, and we need to get that away from the components as fast as we can - if they stay hot they&amp;rsquo;ll throttle down to a lower speed, and it degrades their quality over time. Not good.&#xA;So, what are our options?&#xA;Air Cooling # 3-pin and 4-pin fans # Air flow VS Static Pressure # Fan size # Noise # Smaller ‚Üí Louder.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/cpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/cpu/</guid>
      <description>1 - The CPU # Note, there&amp;rsquo;s more the a CPU on some of these boards. On the big one, only the square thing in the middle is the CPU, on the pi-0 (the board with the HDMI and USB Ports) the CPU is under the metal heatsink - and in truth the CPU is actually an SOC (System On a Chip) - more on that in a bit. Finally, on the blue board, the CPU is only the black chip in the middle, though in this case it is again the definition is blurred, as in truth this is a microcontroller.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/gpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/gpu/</guid>
      <description>4 - Graphics &amp;amp; Acceleration # Photo by Thomas Foster, depicting an Nvidia RTX 3070 Hi Gamers!&#xA;This page will obviously appeal to you, those that drive the sales of these chonky, expensive cards; however, it&amp;rsquo;s important to note that this page is about all graphics &amp;amp; acceleration- from the iGPU in low power systems to the compute cards used for AI research and wasteful crypto mining. Still, this more in depth knowledge will probably be helpful in helping you extract more FPS from your GPU.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/legacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/legacy/</guid>
      <description># 12 - Legacy Hardware? # There&amp;rsquo;s some old hardware almost everyone is familiar with: Floppy disks and big ol&amp;rsquo; CRT monitors became a big part of what defined a computer, and became recognizable enough that the shape of a floppy disk is still the standard save icon today. But still, why care?&#xA;In history classes, the line ‚ÄúThose who don&amp;rsquo;t know history are destined to repeat it.&amp;quot; but I think there&amp;rsquo;s a bigger reason here: those who don&amp;rsquo;t understand the legacy hardware have no idea what the fuck is going on.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/motherboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/motherboard/</guid>
      <description>3 - The Motherboard # This is an older motherboard, but still new enough to have modern parts. Let&amp;rsquo;s start by looking at the most obvious physical features and move to smaller things from there.&#xA;The most obvious thing to point out is the size of the motherboard. This is a mATX motherboard, which is considered the normal size for most systems. Most gaming or DIY computers will use full size ATX motherboards, which look very similar but are a bit longer vertically, allowing for more expansion slots - those horizontal black bars - among other features.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/network/</guid>
      <description>6 - Network Interfaces # Pictured here are three Network Interface Cards (NICs). The three on the left are for Wi-Fi (though some of this form factor may include Bluetooth as well) while the one on the right has an Ethernet port for wired access. Most computer&amp;rsquo;s will not have a separate card for the wired interface, though, as most motherboard&amp;rsquo;s have a wired network interface built in.&#xA;NICs also include the wireless chipset used for connecting to a cell tower and really any radio communication device in general.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/peripherals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/peripherals/</guid>
      <description>9 - Peripherals # USB # The below two videos do a really good job of covering USB, but there&amp;rsquo;s one thing I want to add: Some cables lie! They don&amp;rsquo;t have data pins at all, and instead are only carry power. This can be a massive pain when you have a box of cables and need to know which ones are &amp;ldquo;real&amp;rdquo; cables.&#xA;While there are testers available on Amazon, almost all of them are USB2.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/power/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/power/</guid>
      <description>7 - Power Supply # The Power Supply Unit or PSU does what you think. It takes power from the wall and turns it into power for the computer. This isn&amp;rsquo;t the chapter on voltage and current, so I&amp;rsquo;ll spare some of the details, but effectively you want a power supply that can deliver plenty of power and that has clean power. A given power supply usually has a rating like &amp;lsquo;500w&amp;rsquo; for 500 watts, but this is usually a bad indicator, as they could be referring to multiple things- you see a desktop power supply usually outputs multiple voltages (-12, +12, +5, +3.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/ram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/ram/</guid>
      <description>2 - RAM # Note, that some RAM sticks, especially the full size ones, have metal heat spreaders on top of them. In gaming computer especially it&amp;rsquo;s common for these to have RGB lights as well. This is RAM or Random Access Memory. The above two sticks are the normal-sized used in desktop PCs, this form factor is called a DIMM (Dual In-Line Memory Module) while the bottom two are from laptops and are called SO-DIMMS, the placement of the notch is an indicator of the generation of RAM, with nearly all modern ram being a consecutive generation of the DDR standard.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/storage/</guid>
      <description>5 - Storage # Pictured here are 3 hard drives, 2 of which are &amp;lsquo;full size&amp;rsquo; at 3.5&amp;quot; and the other a &amp;rsquo;laptop drive&amp;rsquo; at 2.5&amp;quot;, the right most hard drive has been opened up, which has certainly ruined it as dust has gotten in. Below the smaller Hard drive is an NVMe SSD on a carrier card. Under the CD is a micro SD card and a flash drive.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/weird/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/hardware/weird/</guid>
      <description> Weird Hardware # PCIe Ramdisk UAD DSP accelerator </description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/howwework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/howwework/</guid>
      <description>Chapter 5 - Working on how we work # The Terminal | # In the world of programming, embedded development, and electrical debugging you will inevitably need to understand how to use a terminal/command line at some point. While the text only interface can look intimidating, it has some clear advantages. Namely it&amp;rsquo;s significantly faster to use the cli or &amp;lsquo;command line interface&amp;rsquo; version of many tools. Because of the nature of this guide you will be using the terminal frequently, so for convince sake a large amount of information on using it effectively has been moved to Appendix A, I highly recommend you read though it after you finish this page.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/linuxdirtree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/linuxdirtree/</guid>
      <description>Chapter 4 - Getting Rooted In Linux # We&amp;rsquo;ve been using file in /proc and /dev throughout this, but we never really looked to see what else is in there. Let&amp;rsquo;s do that.&#xA;go ahead and open up a terminal and run&#xA;1 2 3 4 5 ‚ï≠‚îÄvega@lyrae ~ ‚ï∞‚îÄ‚û§ cd /dev ‚ï≠‚îÄvega@lyrae /dev ‚ï∞‚îÄ‚û§ ls [Very, Very Long Output here] Alright, I know what you&amp;rsquo;re thinking.&#xA;What. The. Actual.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/linuxshell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/linuxshell/</guid>
      <description>Appendix 1 - Using the Linux Shell # ./missing-semester - The Shell&#xA;./missing-semester - Shell Tools and Scripting&#xA;./missing-semester - Data Wrangling&#xA;Linux Productivity Tools Presentation PDF (Ketan M.)&#xA;What The Shell? # Okay, first question you probably have after I&amp;rsquo;ve been using them interchangebly &amp;lsquo;What is a Shell and is it different from a terminal?&amp;rsquo;&#xA;Yes, they&amp;rsquo;re different, but before I talk about the shell it&amp;rsquo;s easier to talk about the Terminal.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/otheross/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/otheross/</guid>
      <description>A3 - Other Operating Systems # BSD macOS Serenity Redox React TempleOS Haiku https://awesomekling.github.io/pledge-and-unveil-in-SerenityOS/</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/linux/windows/</guid>
      <description>Appendix 2 - Ugh. Windows. # Windows? In a Linux Chapter?&#xA;Okay, so, I hate Windows for many, many reasons. Beyond the Candy Crush being bundled and privacy concerns, it&amp;rsquo;s generally just a pain in the ass- and as a Linux user, that&amp;rsquo;s saying something. That said, you&amp;rsquo;ll probably need to do some stuff with it from time to time regardless. So, in this page I want to do three things:</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/making/3dprint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/making/3dprint/</guid>
      <description>Chapter 42 - 3D printing, CNC, and making things # 31.1 - Basic making # Wood working # Safety # Cool projects # Lichtenberg Figure Table (Imgur)&#xA;Epoxy Inlay and Rustic Compass Butcher Block Countertops (Imgur) (YouTube)&#xA;Wood Tables Embedded with Photoluminescent Resin (Mike Warren)&#xA;CAD Up Some Shoes But Don&amp;rsquo;t Start From Scratch (Hackaday, DaveMakesStuff) + 3D Printed Shoes Make Bigfoot tracks (Hackaday, Stephan Henrich)&#xA;3D Printing Diffraction Gratings (iridescent/rainbow surfaces)</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/making/hamradio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/making/hamradio/</guid>
      <description>Chapter 43 - Ham Radio # &amp;lsquo;137Mhz&amp;rsquo; by u/CashewHut LORA&#xA;2.4Ghz patch antenna&#xA;electronically tunable filters&#xA;National Radio Quiet Zone (Wikipedia)&#xA;https://newhams.info/2017/02/17/rf-connector-types/&#xA;question of the day:&#xA;Analog TV is shut down in the US, right? so all the over-the-air TV is digital. And existing analog OTA frequencies are getting repurposed to other uses... so what am I seeing on UHF channel 60? it&amp;#39;s got way more structure than the noise everywhere else.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/making/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/making/history/</guid>
      <description>Chapter 44 - History # BBS and Tildie Sites # tilde.town: A social network over SSH&#xA;Tilde.club&#xA;Other Tilde Services?&#xA;https://en.wikipedia.org/wiki/The_Mother_of_All_Demos&#xA;Adam Savage&amp;rsquo;s Computer History Collection! (YouTube)&#xA;Preserving data # https://media.ccc.de/v/31c3_-_6373_-_en_-_saal_6_-_201412291600_-_the_only_thing_we_know_about_cyberspace_is_that_its_640x480_-_olia_lialina#t=3641&#xA;Preserving hardware # https://en.wikipedia.org/wiki/Delay_line_memory&#xA;http://www.vcfed.org/forum/forum.php&#xA;https://skilldrick.github.io/easy6502/</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/making/mechanical/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/making/mechanical/</guid>
      <description>45 - Mechanical Bits # Through all the Engineering pages I&amp;rsquo;ve focused on electrical and programming solutions, because those are what I know, but they are not always the right answer. For example, in this Reddit post the author asks &amp;ldquo;What kind of motor can I use for this? I need a lightweight pole to go from 0 to 90 degrees [as fast as possible]?&amp;rdquo; and the answer really stuck out to me</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/algebra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/algebra/</guid>
      <description>1 - Algebra # This section is a tad bit misnamed, as instead of covering just Algebra I&amp;rsquo;ll be covering most things you&amp;rsquo;d learn in a high school Algebra class along side it, plus probably a bit extra. Number Systems # To get started, let&amp;rsquo;s look at &amp;lsquo;Number Systems&amp;rsquo;. Essentially, there are a variety of &amp;rsquo;types&amp;rsquo; of numbers, rather than get all philosophical let&amp;rsquo;s just dive in and I think you&amp;rsquo;ll get the gist.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/calc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/calc/</guid>
      <description>4 - Calculus # Introduction To Calculus With Derivatives (adit.io)&#xA;Calculus Made Easy by Silvanus P. Thompson&#xA;[TODO] limits before video&#xA;Below is a 12 video series that totals about 3.25 hours. [The Exponential Function is a Miracle (Mark Dominus)](</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/diffeq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/diffeq/</guid>
      <description> 5 - Differential Equations # Below is a 5 video series that totals about 1.5 hours. </description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/geometry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/geometry/</guid>
      <description>3 - Geometry and Trigonometry # Geometry # Notation # ‚à•, ‚ä•,&#xA;Trigonometry # Learning Trig playlist on YouTube by &amp;lsquo;The Organic Chemistry Tutor&amp;rsquo;&#xA;Notation # 3¬Ω - Topology # But, this is supposed to be about engineering, so why do we need it?&#xA;[TODO] topology optimization and generative design&#xA;3¬æ - Non-Euclidian Spaces # Fractals # https://www.fractal.garden</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/linalg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/linalg/</guid>
      <description>6 - Matrix Theory / Linear Algebra # Below is a 15 video series that totals a bit under 3 hours. Interactive Linear Algebra, text book that actually uses the web Linear Algebra Done Wrong - Sergei Treil @ Brown University&#xA;Matrices, Diagrammatically&#xA;Linear Algebra - Jim Hefferson&#xA;Linear Algebra and Applications: An Inquiry-Based Approach</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/logic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/logic/</guid>
      <description> 2 - Discrete Math &amp;amp; Logic # http://discrete.openmathbooks.org/dmoi3/&#xA;Math For Programmers (PDF) Notation # https://en.wikipedia.org/wiki/List_of_mathematic_operators&#xA;Logic # Many Valued Logic # Fuzzy Logic # </description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/math/</guid>
      <description>Chapter 6 - Math # This section of OpGuides is divided into subsections for easier reading! Just click the little arrow next to the heading to see the full list of chapters&#xA;As with all of OpGuides, please skip around as necessary. I suspect the start of this math chapter will be stuff many readers already know, especially those currently in college.&#xA;Math 6.1 Algebra 6.2 Logic 6.3 Geometry &amp; Trig 6.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/newmath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/newmath/</guid>
      <description>10 - It&amp;rsquo;s NEW math! # Math, as I&amp;rsquo;ve tried to convey though these chapters, is more about problem-solving than actual mechanical operations. Part of solving really hard problems is having even weirder intuitions and tools.&#xA;/+ Hilbert curves (and the IP map)&#xA;/+ https://www.youtube.com/watch?v=a-767WnbaCQ&#xA;/+ Markov Chains&#xA;/+ EGG, https://egraphs-good.github.io &amp;amp; DAGs&#xA;/+ Annealing + related: https://en.wikipedia.org/wiki/Simulated_annealing&#xA;/+ Marching squares&#xA;/+ Slime mold&#xA;/+ Chaos/attractors&#xA;/+ https://en.wikipedia.org/wiki/Tornado_code / Raptor Codes</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/numanalysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/numanalysis/</guid>
      <description>7 - Numerical Analysis # Bisection Method&#xA;Newton&amp;rsquo;s Method&#xA;Secant Method&#xA;Lagrange Polynomial&#xA;Divided Differences&#xA;Linear Interpolation, Bilinear Interpolation, Bicubic Interpolation, Spatial Interpolation&#xA;Cubic Spline&#xA;Numerical Differentiation&#xA;Trapezoidal Rule&#xA;Simpson&amp;rsquo;s Rule&#xA;Romberg Integration&#xA;Monte Carlo Method - Algorithm Archive&#xA;Condition Number&#xA;Least Squares&#xA;The Bernstein Basis (Mutual Information, YouTube)</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/probability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/probability/</guid>
      <description>9 - Probability/Stats # Seeing Theory: A visual Introduction to probability and statistics Why, where are these used, etc.&#xA;bring up music things, part failure rates, tolerances, etc.&#xA;Basics # For the following, I&amp;rsquo;ll be using a die roll example, where the events are the total of two die. The Sample Space of this is&#xA;\(S = \{2,3,4,5,6,7,8,9,10,11,12\}\) Note, that 1 isn&amp;rsquo;t possible as the lowest is both die being &amp;lsquo;1&amp;rsquo;.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/settheory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/settheory/</guid>
      <description>8 - Set Theory # The, uh, study of sets. It&amp;rsquo;s not as boring as it sounds, I swear. Set theory is pretty boring. Yes, it brings about ideas of infinity, Sets of numbers (integers, complex numbers, etc.) but frankly, unless you&amp;rsquo;re really into math&amp;rsquo;s nerdy bits and trying to understand the nature of mathematics and all that jazz, there&amp;rsquo;s really only a few bits you need to understand:</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/units/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/math/units/</guid>
      <description>Chapter 6¬Ω - Units # Units are a really big deal. A single missed unit conversion in The Mars Climate Orbiter made the mission a failure which cost $327 million in 1998.&#xA;Or it could just mean you&amp;rsquo;re overpaying on your phone bill, since it seems nobody at Verizon knows the difference between .002¬¢ and .002$.&#xA;I could dig around and find more funny examples, but on a serious note, you&amp;rsquo;ll end up dealing with units a lot in pretty much engineering discipline.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/networking/cloud/</guid>
      <description>Chapter 39¬Ω - &amp;ldquo;The Cloud&amp;rdquo; # Some people will tell you the cloud is the future, that someday everybody will rent computational power from a handful of services like AWS.&#xA;These people are nuts.&#xA;The cloud is just someone eles&amp;rsquo;s computer. Unless your business is going through a period of extreme growth, it makes no sense to use a cloud provider like AWS or Azure. It does make plenty of sense to buy a VPS (Virtual Private Server) for hosting a website or game server or a personal website like this one, but at scale?</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/networking/databases/</guid>
      <description>Chapter 40 - Databases # [TODO] Start with comparison to spreadsheet, explaining &amp;lsquo;NoSQL&amp;rsquo; Vs &amp;lsquo;SQL&amp;rsquo; and that this is Relational vs Non-Relational&#xA;[TODO] explain CRUD&#xA;CRUD # Create, Read, Update, Delete&#xA;SQL # This is Opinionated Guides, so let me be clear, I really, really hate SQL. I don&amp;rsquo;t like OOP in general, and SQL is sorta like object orientation taken further. Add onto this a mostly shit syntax, like, JOINs are objectively weird to read, write, and understand.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/howyougothere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/networking/howyougothere/</guid>
      <description>Chapter 37.1 - How you got here # So that we have some context through this chapter, lets look at what happens when you visit https://opguides.info (assuming you have a normal network)&#xA;You&amp;rsquo;ve already connected to your home network. Let&amp;rsquo;s make some assumptions about your setup:&#xA;This is over twisted pair wire (Ethernet), just to keep things simple for now. (Not using Wi-Fi)&#xA;Let&amp;rsquo;s also assume IPv4, since IPv6 still isn&amp;rsquo;t used everywhere.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/networking/networking/</guid>
      <description>Chapter 38 - Networking # Quick links&#xA;Blip - Check latency Speedtest.net - Speed test myexternalip.com - See your external IP portchecker.co - Check if a port is open crt.sh - Certificate search The Basics # To get started, let&amp;rsquo;s just get some basic terminology down and take a look at the bigger picture:&#xA;Nodes # These are all the points in the network. There are terminal nodes and intermediate nodes.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/osi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/networking/osi/</guid>
      <description>Chapter 37.2 - The OSI Model # The OSI model of networking is the model of networking most classes will cover. It is slightly different from the one used by the internet, which is the TCP/IP model, but it&amp;rsquo;s a bit more regularly used when talking about networking, so it&amp;rsquo;s the one I&amp;rsquo;ll cover here. Note, the big difference is really just that In the TCP/IP model, the Physical and Data Link Layers are viewed as a unified &amp;lsquo;Network Acces Layer&amp;rsquo;, the Network Layer is called the Internet Layer, The Transport Layer stays the same, and the and The Session, Presentation, and Application layer are all part of a larger Application Layer.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/privacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/networking/privacy/</guid>
      <description>Chapter 41¬Ω - Your Guide to Privacy # &#34; Arguing that you don&amp;rsquo;t care about the right to privacy because you have nothing to hide is no different from saying you don&amp;rsquo;t care about free speech because you have nothing to say. &#34; - Edward Snowden, in his Reddit AMA Privacy online is a joke. No matter what you do, you&amp;rsquo;re still going to be tracked so much that advertisers and the big tech companies (Facebook, Google, Microsoft, etc.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/networking/security/</guid>
      <description>Chapter 41 - Security &amp;amp; Exploitation # I&amp;rsquo;m going to assume at least some prior knowledge here, if you want a quick intro, I recommend going through ./missing-semester-Security so that we can all be on the same page. Often when we think about Exploitation, better known as hacking, we conjure images of a more-punk-than-cyber cyberpunk person clicking away wildly on a keyboard as code flies by, like the 1995 movie, Hackers, and to some extent this isn&amp;rsquo;t wrong, as one look around the floor at DefCon, will show you.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/servers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/networking/servers/</guid>
      <description>Chapter 39 - Servers! # First of all, let&amp;rsquo;s demystify the servers, they are not something to be afraid of &amp;hellip; they are just normal computers that execute processes, the main difference is that these computers do not have a direct interface, that is: there is no need for them to have peripherals (most of the time) since they only SERVE resources for other needs.&#xA;A good example of a server is this one, in which you are reading this, the only function of the server where this content is hosted is to provide it, nothing more and nothing less.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/networking/tools/</guid>
      <description>Chapter 37.3 - Networking Tools # Etherape # Wireshark # https://github.com/Ignitetechnologies/Mindmap/tree/main/Wireshark&#xA;https://wiki.wireshark.org/CaptureFilters&#xA;Enable Packet Diagram View&#xA;Nmap # Scapy / Kamene # Kamene&#xA;(G)NS # HTTPie # HTTPie (GitHub) - human-friendly CLI HTTP client for the API era&#xA;Tunnels &amp;amp; VPN # bore (GitHub) - a simple CLI tool for making tunnels to localhost&#xA;Further Reading # What happens when&amp;hellip; [GitHub] - An attempt to answer the age old interview question &amp;ldquo;What happens when you type google.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/prereq/chem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/prereq/chem/</guid>
      <description>Chapter 8 - Chemistry # Super handy periodic table with visualization, atomic mass, melting/boiling points, specific heat, isotopes, etc. (ptable)&#xA;This chapter is more or less on hold while I prioritize adding the content I&amp;rsquo;m more familiar with, if you&amp;rsquo;d like, feel free to submit a PR to flesh this section out. Unfortunately, my chemistry education was pretty &amp;lsquo;meh&amp;rsquo;, and I never actually made it to Organic Chem. I have CrashCourse&amp;rsquo;s Chemistry and Organic Chemistry videos on YouTube on my &amp;lsquo;To Watch&amp;rsquo; list, though.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/prereq/othersubjects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/prereq/othersubjects/</guid>
      <description>Chapter 9 - &amp;lsquo;The Rest&amp;rsquo; # Music # Music? In a chapter on Engineering? Well, yeah. Hear me out, music is a combination of math and signals.&#xA;1 2 3 4 5 EUCLID(m, k): if k = 0: return m else: return EUCLID(k,m mod k) The Euclidean Algorithm Generates Traditional Musical Rhythms (Godfried Toussaint) (PDF) As another example, the Euclidean Algorithm can be used to distribute drum hits to algorithmically make drum beats</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/prereq/physics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/prereq/physics/</guid>
      <description>Chapter 7 - Physics # Art by awesome_o.possum (Instagram) Character owned by Vega. This is still a dumping ground for things I want to write about later, nothing of substance is here yet, sorry about that [TODO] speed vs Velocity vs Acceleration, classical vs relative&#xA;Radiocarbon dating (Wikipedia)&#xA;Cosmic Microwave Background (Wikipedia)&#xA;Natural nuclear fission reactor (Wikipedia)&#xA;How Kodak Exposed The Atomic Bomb (YouTube, Veritasium)&#xA;Seeing the invisible: Event displays in particle physics</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/algorithms/</guid>
      <description>Chapter 15 - Discrete Math, Algorithms, Data Structures, and Not Sucking at Programming ‚Ñ¢* # Brute Force Algorithms # Backtracking # [TODO] Directed Acyclic Graphs&#xA;[TODO] Finite State Machines&#xA;[TODO] e-graphs? https://egraphs-good.github.io&#xA;[TODO] http://courses.csail.mit.edu/6.851/&#xA;[TODO] &amp;lsquo;Tree Traversal&amp;rsquo; on Algorithm Archive&#xA;Divide and Conquer # Master Theorem # Decrease and Conquer # Branch and Bound # Kernelization # Caching # *With some complexity analysis too.&#xA;[TODO]&#xA;https://www.mattkeeter.com/blog/2021-03-01-happen/&#xA;[TODO] I also have discrete math in the chapter 11, math&amp;hellip; not sure what do about this&amp;hellip;</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/bestpractices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/bestpractices/</guid>
      <description>Chapter 11 - Best Practices # Manifesto # Everything should be a tool. A tool transforms data without adding to its source limitations. It&amp;rsquo;s a function: returns an output for a given input. A great tool is ambient. It should disappear and flow through your actions. You should never need it because it&amp;rsquo;s always at your hands. You should never ignore it because it&amp;rsquo;s never in your way. Tools should be adaptable, changeable and personalisable.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/codecont/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/codecont/</guid>
      <description>THIS PAGE IS BEING REMOVED # Part 3, more advanced high level # Modify the original python program to support a pretty CLI input in a pretty way to make entries and visualize the data collected, parallelize some things, finally add a config file using YAML&#xA;Part 4, getting our toes wet with embedded systems # Finally, let&amp;rsquo;s go back and add a com port to the C code and send data to an Arduino (can be simulated) and a TFT to display the currently active task and time elapsed.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/codeintro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/codeintro/</guid>
      <description>Chapter 10 - Let&amp;rsquo;s write some Code # Hello! If you&amp;rsquo;re here, you should know you&amp;rsquo;re on a deprecated page. All work has now been refocused on getting the new programming intro (Chapter 10 in the menu bar) to being much, much better than this page ever was. Starting Minimal # Code is mostly math # Here&amp;rsquo;s the thing: Code is mostly math. If you&amp;rsquo;re anything like me, you probably just went ugggggghhhhhhh.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/commands/</guid>
      <description>Commands # [TODO]</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/conclusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/conclusion/</guid>
      <description>Conclusion # [TODO]</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/conditionals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/conditionals/</guid>
      <description>Conditionals # [TODO]</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/generation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/generation/</guid>
      <description>Code Generation # As I said earlier, there is no way that you can write a proper compiler on your own, due to the amount of work involved.&#xA;But new languages are invented by individual people all the time. How is this possible? The answer is, they use a backend framework or library for this part.&#xA;This is the part where the Intermediate Representation (IR) comes it. It is determined by the library being used, which means the language itself can be abstracted away.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/intermezzo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/intermezzo/</guid>
      <description>Intermezzo # At this point, we have something that is ugly looking, but seems like a real compiler! After all, it does the four stages as promised:&#xA;Lexing: the splitting of whitespace and division of tokens Parsing: the creation of the syntax tree based on ordering of operations Translation: a no-op, because the syntax tree is good enough Code Generation: Python &amp;ldquo;machine code&amp;rdquo; as valid infix math, or a JIT library running routines But still, you can&amp;rsquo;t really call this a langauge.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/intro/</guid>
      <description>Chapter 22 - Custom Languages # Some people like playing around with new programming languages, or concepts in Programming Language Theory (PLT). In order to do this outside of pure mathematics, anyone who does will have to learn how to write a compiler for their new language.&#xA;Unfortunately, compilers are some of the most complex pieces of software out there, along with operating system kernels. Especially when talking about a common compiler for well-established language, there is no way a single guide on the internet can teach you how to write one.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/lexing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/lexing/</guid>
      <description>Lexical analysis # The transformation of source code text into a series of tokens is the first task. Much like words in a sentence, each token has a specific meaning that will be used by later phases. It is this meaning that is being captured, while the exact formatting or other details of the text itself are stripped away.&#xA;In our calculator, lexing (as it is called for short) is just one operation: line.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/parsing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/parsing/</guid>
      <description>Syntax analysis # Our syntax analysis phase, or &amp;ldquo;parsing&amp;rdquo;, is basically a no-op in the current version. This is possible because, thanks to our stack having a &amp;ldquo;guard zero&amp;rdquo; at the bottom, there is really no such thing as a program with only valid tokens that is invalid syntax.&#xA;This makes it a very rare language indeed.&#xA;Since we are doing math in a specific order of operations, it would be easy to make this into a tree.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/prelude/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/prelude/</guid>
      <description>Prelude: A Reverse Polish Notation Calculator # In order to get a footing, we&amp;rsquo;ll start with an example: a calculator that uses postfix operator notation, sometimes called &amp;ldquo;reverse polish notation.&amp;rdquo;&#xA;In this calculator, all arguments are placed onto a stack. Whenever an operator occurs, it pops values off the stack at that point, performs the operation, and pushes the answer back on.&#xA;All operations are binary, so they take two operands from the stack and replace it with one result.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/subroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/subroutines/</guid>
      <description>Subroutines # [TODO]</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/translation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/translation/</guid>
      <description>Syntax-Directed Translation # This stage is where we get an opportunity to modify and restructure the tree from a syntax point of view, into a semantic point of view.&#xA;To avoid &amp;ldquo;How to Draw an Owl Step 2: Finish the Owl&amp;rdquo;, we will continue with the interpteter theme for the moment. Instead of figuring out all the analyses required, let&amp;rsquo;s ask: what intermediate representation can be interpreted by Python?</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/compilers/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/compilers/variables/</guid>
      <description>Variables # [TODO]</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/data/</guid>
      <description>Chapter 15¬Ω - Data, Encodings, Compression, etc. # When you write code, you&amp;rsquo;ll inevitably be working with input and output of some sort - even if it&amp;rsquo;s just text. This is always more complicated than it seems. For example, text processing is easy, right?&#xA;üö´, üÖòüÑ£&amp;rsquo;s üá≥ot.&#xA;Even text encoding is a massive pain, unless you can ensure you only need to (and do) process basic ASCII characters, that is.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/ethics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/ethics/</guid>
      <description>Chapter 11¬Ω - Ethics &amp;amp; Copyright # Programming is awesome. If you get into creative coding, you&amp;rsquo;ll be able to use it to make art. You&amp;rsquo;ll likely use it to automate tasks you find boring. If you&amp;rsquo;re like me, you might use it to make your own website or start to make products you intend to sell. That&amp;rsquo;s great. But there are a few things you need to consider as what you make becomes more professional.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/fixxingissuses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/fixxingissuses/</guid>
      <description>Chapter 13 - Fixing Issues &amp;amp; Debugging # Alright, so your code/electronics/computer/life was working fine just a second ago, and now it&amp;rsquo;s just not working at all. Take a deep breath, and relax. Let&amp;rsquo;s work though this.&#xA;ü¶Ü Grab a rubber duck # This won&amp;rsquo;t always be applicable, but assuming it&amp;rsquo;s a system- code, or electronics, or a math problem, something that can be analyzed - explain it. Out loud.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/funcprog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/funcprog/</guid>
      <description>Chapter 20 - (((())(()((()(())))))) # What is Functional Programming? # Most of the programming languages in this section up until now have been imperative programming languages. Programs are a series of instructions: do this, then do that, then do the other thing.&#xA;Functional programming languages are another type of language. Like math, they simply define sets, relationships, and then have a process for doing things based on &amp;ldquo;answering questions&amp;rdquo; or &amp;ldquo;getting to a result&amp;rdquo;.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/game/</guid>
      <description>Chapter 21 - Game Programming &amp;amp; Design # https://www.gameuidatabase.com/index.php&#xA;https://www.riotgames.com/en/urf-academy/curriculum-guide&#xA;COMP4300 - Game Programming (David Churchill, YouTube)&#xA;Engines &amp;amp; Frameworks # Both 2d and 3d # Godot&#xA;Luxe&#xA;Heaps&#xA;fine. I&amp;rsquo;ll mention Unity and Unreal, but, like, I hate that the two make up such a huge chunk of the market&#xA;Unreal Engine&#xA;Unity&#xA;2d # LEd engine - &amp;ldquo;LEd is a modern and open-source 2D level editor, specifically designed for indie devs&amp;rdquo;</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/gitcicd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/gitcicd/</guid>
      <description>16 - Git, Testing, CI, and CD # Testing # @jnesselr replying to @alicegoldfuss (Nov 13, 2018) +----------------------------------------------------+ |Me: *does major refactor* | |Tests: ‚úì | |Me: I don&amp;#39;t believe you | +----------------------------------------------------+ [Suspended User] +----------------------------------------------------+ |Me: *deliberately breaks something, just to be sure*| |Tests: ‚úì | |Me: oh no | +----------------------------------------------------+ @boo_radley +----------------------------------------------------+ |Me: *changes nothing* | |Tests: ‚úó | |Me: oh no | +----------------------------------------------------+ [Suspended User] +----------------------------------------------------+ |Me: *runs tests again* | |Tests: ‚úî | |Me: oh no no no | +----------------------------------------------------+ src: https://twitter.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/guiprog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/guiprog/</guid>
      <description>Chapter 18 - Graphical Programming # [TODO] Graphics Programming on badd10de.dev&#xA;Let&amp;rsquo;s start in a way that&amp;rsquo;s incredibly simple, and abstract away all the hard stuff at first by using a tool kit called &amp;lsquo;Processing&amp;rsquo;, which is available under that name from the community repo in arch. The default IDE that comes with it is awful to work in though, so go ahead and open up VSCode and grab the Processing Language add on, then in VSCode open up a new workspace folder and make a file called processing.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/prog0intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/prog0intro/</guid>
      <description>Chapter 10.0 - Let&amp;rsquo;s Write Some Code # Knowing how to program will give you deep control over the most advanced tool mankind has ever made: The computer. More over, because we use computers as extensions of our own minds (and as a collective, with the Internet) it will literally expand your ability to process information as you&amp;rsquo;re no longer limited to the inputs and computation systems that other programmers have built for you.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/prog10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/prog10/</guid>
      <description>Chapter 10.10 - The rest of the Owl # Okay, so, we&amp;rsquo;ve gone over types and functions and operations and all of that jazz, but there are a few little pieces that have been left out, so, let&amp;rsquo;s do some of them rapid fire&#xA;Multiple files # In any language, once your code gets big enough, working in one really long file is going to become a clusterfuck.&#xA;Python # In python, this is stupidly easy.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/prog1math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/prog1math/</guid>
      <description>Chapter 10.1 - It&amp;rsquo;s math? # Let&amp;rsquo;s talk math and look at some real code.&#xA;I think a lot of people over estimate how hard it is to handle even the more complex math. As an example, let&amp;rsquo;s estimate œÄ. (You should never actually do this in code - just use a library which will provide a pre-computed value of pi anywhere you need it!) To do this, we need a formula.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/prog2turtle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/prog2turtle/</guid>
      <description>Chapter 10.2 - Turtles All The Way Down # Low Level and High Level Programming # There are two types of programming, high level and low level.&#xA;High level programmers make things where the hardware doesn&amp;rsquo;t matter. The code they write runs everywhere, and the users directly see it and interact with it.&#xA;Low level developers write code that runs directly on the hardware. The software inside the controller on your mouse to the driver on your computer for responding to that input, that&amp;rsquo;s all low level.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/prog3tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/prog3tools/</guid>
      <description>Chapter 10.3 - Getting Tools # As mentioned before, you&amp;rsquo;ll be learning both Python and C. This means we need to get the tools necessary for working with each. If you&amp;rsquo;re following along with OpGuides as a whole and have Linux setup, this will be easy. If you&amp;rsquo;re on Windows it&amp;rsquo;s not hard but there are some annoying steps we&amp;rsquo;ll need to jump through.&#xA;Getting Code To Run # Arch Linux Run pacman -Syu gcc python, then you&amp;rsquo;ll want to grab visual-studio-code-bin from the AUR.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/prog4comments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/prog4comments/</guid>
      <description>10.4 - Getting to know our tools # Okay, we now have the ability to run and debug code but we still need set up and go over a few features in your text editor (VSCode) to make things easier. Plus, now&amp;rsquo;s a good time to introduce comments and indentation and why they matter in code.&#xA;This may seem a bit out of order, but at this stage there&amp;rsquo;s problems with prioritizing how much to learn about the tool versus the craft.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/prog5two/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/prog5two/</guid>
      <description>Chapter 10.5 - Leaning Two Languages At Once # Back in the Into The Hardware section we looked at some of the inner workings of the CPU, and briefly looked into how the CPU only understands machine code, 1&amp;rsquo;s and 0&amp;rsquo;s that make up individual instructions. Now, there&amp;rsquo;s absolutely no reason to ever think at that low of a level, the lowest you should ever care to look at, as mentioned there, is assembly.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/prog6types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/prog6types/</guid>
      <description>Chapter 10.6 - What&amp;rsquo;s a Type? &amp;amp; Going Down Rabbit Holes # Alright, I&amp;rsquo;ll cut to the chase. When programming, you&amp;rsquo;ll need to deal with types. On the last page, there was a mix of types, int, uint8_t, float, and char all make appearances. While the exact names of each type and what they&amp;rsquo;re capable of may vary a bit from language to language and platform to platform understanding the basics here will help you out a lot, so, let&amp;rsquo;s start with the C language and look at ints</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/prog7logic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/prog7logic/</guid>
      <description>Chapter 10.7 - Ôº¨ÔºØÔºßÔº©Ôº£ &amp;amp; Functions # For this page, If you see that lines are ending with a semicolon, ;, then that code is C. If they don&amp;rsquo;t, it&amp;rsquo;s Python. Would you like to speak to an Operator? # The very first thing to understand before we can get to more intersting things is the list of operations available to us.&#xA;This includes the operations your used to - addition, subtraction, etc.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/prog8oo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/prog8oo/</guid>
      <description>10.8 - Data Structures, Object Orientation, &amp;amp; Encodings # Why not just structs? # C is a very low level language and only lets you make structs. Structs are fine, but they have some annoying properties, particularly in separating data from how you interact with it, making it difficult to make complex abstractions where you can be sure that data that should only be internal to a structure isn&amp;rsquo;t exposed, or that the data can&amp;rsquo;t be changed in an invalid way.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/prog9stdlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/prog9stdlib/</guid>
      <description>Chapter 10.9 - The Standard Library # Yunno&amp;rsquo; how you&amp;rsquo;ve been using print() and printf() all over the place? Well, those are functions, but where are they from?!&#xA;Well, for C, in printf()&amp;rsquo;s case it&amp;rsquo;s pretty obvious - you can&amp;rsquo;t use it unless you have #include &amp;lt;stdio.h&amp;gt; at the top of the file, so, clearly your computer has that file, and the associated .c file, somewhere. And frankly? That&amp;rsquo;s good enough for the moment.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/progendreal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/intro/progendreal/</guid>
      <description>10.11 - &amp;ldquo;Real&amp;rdquo; Programs # So, you now mostly know all the fundamental building blocks used to write basically everything out there.&#xA;But&amp;hellip; not really?&#xA;The thing is, almost any program of moderate complexity is going to rely on libraries to provide extra, (hopefully) well tested, performant, hard to write functionality. Plus, most programs don&amp;rsquo;t exist in a vacuum: you may need to hook into a database, send packets over the internet, check for malicious user input, write to files, encrypt data, use an API to interact with a game engine, or even write in a different language and call one language&amp;rsquo;s code from another.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/languages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/languages/</guid>
      <description>Appendix 3 - Programming Languages # 1 2 3 for (ü•ö = 0; ü•ö &amp;lt; üêî; ü•ö++){ hatch(ü•ö); } Why hello,&#xA;If you&amp;rsquo;ve found this page, it&amp;rsquo;s likely your curiosity is getting the better of you and you&amp;rsquo;re killing time gawking at the weird syntax and features of a variety of languages. I know I have been guilty of doing so.&#xA;This page is meant to give you a taste, not a full list.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/lifeofcode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/lifeofcode/</guid>
      <description>Chapter 12 - Life Of Code # Building # The C Build Process # I&amp;rsquo;m going to jump right in here, so things are going to be a bit brutal to understand for a bit. I&amp;rsquo;ll break things down, but I need to give the high-level view first! As we saw way back Hardware‚ÜíCPU , your computer doesn&amp;rsquo;t understand instructions like printf(), so ultimately the code you write has to get turned into something your computer understands.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/lowlvl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/lowlvl/</guid>
      <description>Chapter 14 - Low Level Programming # Ashlyn Black&amp;rsquo;s C Cheat Sheet&#xA;&amp;lsquo;C Programming&amp;rsquo; on badd10de.dev&#xA;Why C? # This chapter of OpGuides will be mostly C, but, why? Well, there&amp;rsquo;s only really a few options for learning low level programming that make sense to start with. C, C++, Rust are the &amp;lsquo;big three&amp;rsquo; that come to mind. C is what is most popular&amp;hellip;because it&amp;rsquo;s old and everything already uses it.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/optimization/</guid>
      <description>Chapter 17 - Optimization # If you&amp;rsquo;re here, you&amp;rsquo;re probably able to at least write some code. Is it perfect code? Probably not - but what code is.&#xA;Good code should be:&#xA;Malleable - You should be able to change it if requirements change. Simple - It should be easy to read Portable - It should be able to run almost everywhere Performant - It should go fast Unfortunately, those things are a bit at odds with each other.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/shaders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/programming/shaders/</guid>
      <description>Chapter 19 - Shaders # The Book Of Shaders GLSL 2D Tutorials by Vug Here for VRChat Stuff? Cool! VR chat is a really neat platform to work with and it&amp;rsquo;s really fun to be able to hold or walk around your art. Unfortunately, there&amp;rsquo;s some added complexity that comes with handling VR, Unity, and even just 3D stuff outright that, all together, takes a hot minute to build up to.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/aiml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/signals/aiml/</guid>
      <description>Chapter 33 - Fine, I&amp;rsquo;ll talk about AI # This chapter is very much a work in progress, and is really more of just a list of topics, despite how much content there appears to be. I&amp;rsquo;d really like to have code examples under each concept as well, as otherwise it&amp;rsquo;s like reading a fucking math textbook from hell.In the meantime, please see https://sebastianraschka.com/blog/2021/dl-course.html#l01-introduction-to-deep-learning for a good intro to Deep Learning [TODO] https://www.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/commsys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/signals/commsys/</guid>
      <description>29 - Communication Systems # This chapter is currently just a stub. I&amp;rsquo;m currently taking a comm systems class at Uni and will be putting the results of my notes as well as external resources into here at some point. What is a communication system? # For the purposes of this page, we&amp;rsquo;re talking about systems that transmit signals over a medium- so that might be your voice over the air, a radio signal though the vacuum of space, or ultrasonic waves under the water as sonar.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/compvision/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/signals/compvision/</guid>
      <description>Chapter 32 - Computer Vision # This page is still pretty empty, in the meantime, check out The Ancient Secrets of Computer Vision by Joseph Redmon and Ali Farhadi&#xA;As an aside, Joseph Redmon is an absolute genius, and the main brain behind You Only Look Once: Unified, Real-Time Object Detection which sort of revolutionized the computer vision with AI space, yet, his resume looks like this&#xA;This is to say the man is an absolute badass and I could not be more confident in my recommendation of his course</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/controlsys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/signals/controlsys/</guid>
      <description>31 - Control Systems # What are control systems? Well, the easiest way to answer that is to list the things control systems typically do:&#xA;What Can Control Systems do? # Amplify an input: # ex: Pluck a tiny string on a guitar, get an earth shaking output from the speaker Reduce the complexity of user input or change its location # ex: Floor button on an elevator- you don&amp;rsquo;t need to input a height off the ground for what floor you want to be on, nor do you need to enter values to compensate for how quickly it should get to its max speed or how fast it should slow down.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/dsp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/signals/dsp/</guid>
      <description>30 - Digital Signal Processing # Spectral Audio Signal Processing by JULIUS O. SMITH III at the Center for Computer Research in Music and Acoustics (CCRMA) Sampling &amp;amp; Quantization # Lorem sed risus ultricies tristique. Vestibulum sed arcu non odio euismod lacinia at. Felis bibendum ut tristique et egestas quis ipsum suspendisse ultrices. Accumsan tortor posuere ac ut consequat semper viverra nam libero. Adipiscing elit ut aliquam purus sit amet luctus venenatis lectus.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/sigandsys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/signals/sigandsys/</guid>
      <description>28 - Signals &amp;amp; Systems # When I took ECEN 304 Signals &amp;amp; Systems ‚Ö† with the fantastic Dr. Sayood at UNL I remember how in awe I was at how he concisely he managed to describe the core idea of this class. While I can not hope to convey the same level of brilliance or inspiration, I do hope that my poor attempt at mimicking his introduction to the course may be of value:</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/wrappingup/cheat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/wrappingup/cheat/</guid>
      <description>Appendix 3 - Cheat Sheets and quick info # Electrical Part Tables # [TODO]&#xA;package types&#xA;reading specs&#xA;datasheets&#xA;Nice Libraries &amp;amp; Resources # Please don&amp;rsquo;t use Electron&amp;hellip; # Ultralight - &amp;ldquo;Next-generation HTML renderer for apps and games&amp;rdquo;&#xA;Muon - &amp;ldquo;GPU based Electron on a diet&amp;rdquo;&#xA;Multi-Lang # NotCurses (It&amp;rsquo;s not Ncurses) - &amp;ldquo;blingful character graphics/TUI library. definitely not curses.&amp;rdquo;&#xA;SimSIMD - &amp;ldquo;Vector Similarity Functions 3x-200x Faster than SciPy and NumPy ‚Äî for Python, JavaScript, and C 11, supporting f64, f32, f16, i8, and binary vectors using SIMD for both x86 AVX2 &amp;amp; AVX-512 and Arm NEON &amp;amp; SVE&amp;rdquo;</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/wrappingup/job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/wrappingup/job/</guid>
      <description>Appendix 5 - Getting a Job in Engineering # &#34;Recently, I was asked if I was going to fire an employee who made a mistake that cost the company $600,000. No, I replied, I just spent $600,000 training him. Why would I want somebody to hire his experience?&#34; - Thomas John Watson Sr., IBM&#xA;[TODO] literally this entire page is TODO. I&amp;rsquo;m just making it as a place to dump links for now.</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/wrappingup/latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/wrappingup/latex/</guid>
      <description>Appendix 6 - \(\LaTeX\) &amp;amp; Markdown # Like the kink? # \(\LaTeX\) , pronounced Lay-Tech, is a document writing and formatting &amp;rsquo;language&amp;rsquo; that acts pretty different from MS Word. It&amp;rsquo;s primarily used for writing fancy math equations, academic, journal, or conference papers, as such, you might have to use it at some point to conform to one standard or another (like IEEE).&#xA;As an example of what \(\LaTeX\) formatting looks like, check this equation out:</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/wrappingup/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/wrappingup/resources/</guid>
      <description>Appendix 4 - Other Great Resources # Conventions # https://www.emfcamp.org&#xA;https://media.ccc.de/&#xA;News Sites # Serializer.io (Aggregate of Hacker News, Ars, Reddit, Macrumors, and Lobste.rs )&#xA;Hacker News&#xA;Hackaday&#xA;Slashdot&#xA;Snopzu&#xA;https://n-o-d-e.news/&#xA;Forums # https://lobste.rs/&#xA;https://stackoverflow.com/&#xA;http://textfiles.com/&#xA;https://glitch.com/&#xA;Learning Linux # https://linuxjourney.com&#xA;Youtube # ElectroBoom&#xA;CNLohr&#xA;N-O-D-E&#xA;LiveOverflow&#xA;Tom Scott&#xA;bigclive&#xA;AdoredTV&#xA;3Blue1Brown&#xA;Bryan Lunduke&#xA;Level1Techs&#xA;Crash Course: Computer Science, from PBS&#xA;Podcasts # https://theamphour.com/&#xA;Hacker Public Radio&#xA;GitHub info pages # Hacker Laws</description>
    </item>
    <item>
      <title></title>
      <link>https://opguides.info/engineering/wrappingup/wrappingup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/wrappingup/wrappingup/</guid>
      <description>Chapter 46 - Where To Go From Here? # Hey, so, you made it. I can&amp;rsquo;t give you a degree. But, I&amp;rsquo;m proud of you. Even if you skipped a chapter or two, you still put in work to improve yourself and learn something. That&amp;rsquo;s cool.&#xA;But, maybe you&amp;rsquo;re thinking &amp;ldquo;Okay, but now what?&amp;rdquo;&#xA;Integrating other interests # There&amp;rsquo;s a lot more to life than computers and code and electronics and making and hacking.</description>
    </item>
    <item>
      <title>Engineering</title>
      <link>https://opguides.info/engineering/engineering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://opguides.info/engineering/engineering/</guid>
      <description>Hey There! My name is Vega, and I&amp;rsquo;m glad you&amp;rsquo;re here! I know there are plenty of tutorials and ways to learn online, be it on YouTube, SkillShare, or online classes provided for free by various universities. The difference here is I&amp;rsquo;ve tried to cut out the boring parts, make things a bit more entertaining than a textbook, and drenched the content in my own personal opinion that has been built up by my experiences.</description>
    </item>
  </channel>
</rss>
