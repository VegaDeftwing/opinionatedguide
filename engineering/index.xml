<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Engineering on Opinionated Guides</title>
    <link>https://opguides.info/engineering/</link>
    <description>Recent content in Engineering on Opinionated Guides</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://opguides.info/engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://opguides.info/engineering/intro/community/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/intro/community/</guid>
      <description>Ⅰ - Community # When you think engineer, what traits come to mind? If you&amp;rsquo;re anything like most people, you probably thought &amp;ldquo;smart&amp;rdquo; and &amp;ldquo;antisocial&amp;rdquo;. While I can&amp;rsquo;t speak to how truthful that stereotype may be, I can tell you for sure that in engineering, not knowing how to make friends, ask for help, and talk with others will make you all but useless.
The only way to be successful in this journey is to make friends along the way.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/a3-bom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/a3-bom/</guid>
      <description>Appendix C - BOM # As the guide isn&amp;rsquo;t anywhere near a usable state yet, this page should be ignored for the most part. OpGuides is free. Unfortunately all the tools and programs you&amp;rsquo;ll need to follow along aren&amp;rsquo;t necessarily. While you probably could do everything in this guide without getting the things in this Bill OF Materials (BOM) it will massively help to have it.
I&amp;rsquo;ll do my best to keep the cost as low as possible though.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/circuits1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/circuits/circuits1/</guid>
      <description>Chapter 22 - Intro to Angry Pixies # A simple guide to electronic components (YouTube)
The Tools of the Trade # Building, fixing, and analyzing circuitry requires the use of a some tools and appliances, so let&amp;rsquo;s look at the basics of working with electricity by looking at what purpose the tools serve. While there are many more than those listed here, these are the most important ones and should be all you need for most applications.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/circuits2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/circuits/circuits2/</guid>
      <description>Chapter 23 - Circuits &amp;amp; Semiconductors # When I was a kid I thought about circuits as being alive, like Cells at Work!, only little electrons going around busily keeping the heart of my toy working instead of anthropomorphic red blood cells working in the human body.
Now, as an adult - and a computer and electrical engineer at that - I still find this thought endearing. Though I&amp;rsquo;ve now come to see the physics and art of electronics to be even more beautiful when their true nature is really understood.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/digitallogic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/circuits/digitallogic/</guid>
      <description>Chapter 24 - Digital Logic # Digital logic is what it sounds like- it&amp;rsquo;s doing logical operations on digital data - 1&amp;rsquo;s and 0&amp;rsquo;s; True and False. Chain some of (er, a lot of) these logical operations together and you can do anything you want! Want to make your own CPU? Done. Want to make dedicated circuitry to do what your code does but hundreds of times faster? This is the way to do it.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/embedded/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/circuits/embedded/</guid>
      <description>Chapter 25 - Embedded Systems # By Make It With Me What is an Embedded System? # [TODO] need source These little devices are Pocket Operators made by Teenage Engineering, they&amp;rsquo;re relatively inexpensive synths that can be chained together, and I think they&amp;rsquo;re a great example of what an embedded system is, but for the sake of clarity, here&amp;rsquo;s how Wikipedia defines it:
An embedded system is a computer system—a combination of a computer processor, computer memory, and input/output peripheral devices—that has a dedicated function within a larger mechanical or electronic system.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/parts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/circuits/parts/</guid>
      <description>23½ - Parts # When thinking about electronics, it&amp;rsquo;s easy to focus on the bits that electricity actually flows though. This chapter is for everything else
Knobs, Key-Caps # Enclosures # Adhesives # Adapters # + PCB footprint adapters, like SOP to DIP</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits/pcb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/circuits/pcb/</guid>
      <description>Chapter 26 - Let&amp;rsquo;s make our own PCB # Printed Circuit Borads look like something reserved for only big business, but that is very much so not the case. It&amp;rsquo;s suprisingly cheap to get smaller boards made, espically if you&amp;rsquo;re okay with waiting a week or two on international shipping. But, let me back up- what even is a PCB?
Well, when anyone first starts with circuits, they go for the ever popular breadboard:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/deeper/comparch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/deeper/comparch/</guid>
      <description>Chapter 36 - Let&amp;rsquo;s make our own CPU # How To Make A CPU - A Simple Picture Based Explanation (RobertElder)
This chapter will be split into three parts:Part 1, understanding the interval workings of a CPU. This is effectively just a computer architecture class, and will be by far the largest section.Part 2, making that CPU on an FPGA.Part 3, making that CPU do something. [TODO] http://www.lighterra.com/papers/modernmicroprocessors/
[TODO] A Density Metric for Semiconductor Technology - past nm for sizing</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/deeper/compileassemble/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/deeper/compileassemble/</guid>
      <description>Chapter 33 - Compilers and Assemblers # https://lee.earth/til/compiling-c-code-a-step-by-step-guide/
[TODO] Better Firmware with LLVM/Clang
[TODO] Zig cc: a Powerful Drop-In Replacement for GCC/Clang
Common Flags and When to Use them # These flags are not universal, instead they&amp;rsquo;re from GCC. GCC and Clang are the big two compilers you&amp;rsquo;ll see a lot and these flags should be mostly the same between the two. Of course, there are many, many other compilers, but I&amp;rsquo;m going to start with the common stuff</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/deeper/fpga1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/deeper/fpga1/</guid>
      <description>Chapter 35 - Let&amp;rsquo;s try out programmable logic # Before we get started, please be sure you&amp;rsquo;ve read Chapter 24 - Digital Logic Simulation of an Intel 4004 in TICS (The Integrated Circuit Simulator) a (abandoned?) WIP by Oni, Download the interpreter here, the repo has plenty of examples.
Some similar pixel art simulation tools are wired-logic, reso, wireworld,
[TODO]
Finite State Machines, VHDL, Verilog, FPGA &amp;amp; CPLD internals</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/deeper/reverse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/deeper/reverse/</guid>
      <description>Chapter 34 - Reverse Engineering # Software # Anyone know of good resources for learning binary reversing? Not particular tools necessarily, but like theory and how to think @XMPPwocky on Twitter An Opinionated Guide on How To Reverse Engineer Software is decent.
for me personally:
know some assembly, and in particular make sure you know the calling conventions for your platform.
when starting out, do it on binaries you can actually run in a debugger and see what&amp;rsquo;s actually happening at runtime.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/intro/howtolearn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/intro/howtolearn/</guid>
      <description>Ⅱ - Learn how to learn # I&amp;rsquo;m going to keep this short and sweet: Nobody learns (effectively) by being shown what to do. You can watch hundreds of hours of people playing guitar, even explaining how they do it, but you won&amp;rsquo;t be able to randomly pick one up and play if you never have before. Furthermore, as much as you can learn from direct reading and instruction, it has its place and limits.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/arch/</guid>
      <description>Chapter 2 - Installing Arch Linux # I am working on a new install guide located at
archnew , though it is still a work in progress. The new guide is based on the offical install guide, among other pages from the wiki, and adds running commentry and advice in an attempt to help new users while still sticking to some of the Arch ethos. Some Background # Unlike Windows or Mac which are primarily differentiated by versions (Windows XP, Vista, 7, 10&amp;hellip;), Linux has two important things to look out for:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/archnew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/archnew/</guid>
      <description>Chapter 2 - Installing Arch Linux # Some Background # ⬤◯◯◯◯◯◯◯◯◯
Unlike Windows or Mac which are primarily differentiated by versions (Windows XP, Vista, 7, 10&amp;hellip;), Linux has two important things to look out for:
The distribution name (Arch, Ubuntu, Mint, Debian, etc.) Kernel version number (5.18 last time this page was updated) So, what do each of these mean?
Well, Linux is actually just the name of the underlying &amp;lsquo;core&amp;rsquo; of the system, known as the kernel, as such, there are literally thousands of Linux variations or &amp;lsquo;distributions&amp;rsquo;.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/firstgoal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/firstgoal/</guid>
      <description>Chapter 1 - The first goal # Art by @monoxromatik Every journey needs a place to start, and while many may like to start slow, I think a head first approach is best. So that&amp;rsquo;s exactly what we&amp;rsquo;re gonna do. The very first thing we&amp;rsquo;re going to do is install a new Operating System (OS)(1) on your computer. This is a pretty involved process. It will require you to Repartition(2) your drive, change settings in your BIOS or UEFI(3), and install a new Bootloader(4).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/git/</guid>
      <description>Chapter 5½ - Git. # &amp;hellip; Despite the chapter name, git isn&amp;rsquo;t just a Linux thing - it&amp;rsquo;s actually more of a programming thing, but you&amp;rsquo;ll still probably want to use it for storing your configuration files for Linux, and it&amp;rsquo;s worth learning before you really get into programming, which is why it&amp;rsquo;s here. So, uh, what&amp;rsquo;s git?
The ELI5 of it is that it&amp;rsquo;s a Version Control System, which really just means it can give you the equivalent of save states on your files, like in a video game- and just like a video game, you can save (or go back to a previous save) and have two different branches where you make a different decision in each.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/</guid>
      <description>Chapter 3 - Into The Hardware # One of the nifty things about Linux is you don&amp;rsquo;t need to install extra software to check out the deeper parts of your hardware. While on Windows you might need a tool like CPU-Z to look at information about the CPU on Linux you can do it out of the box. Even better, Linux makes changing values and tweaking performance easier, too.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/architectures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/architectures/</guid>
      <description>Chapter 3½ - Architectures # Instruction Set Architectures # Today, there are two main computer architectures you&amp;rsquo;ll use x86_64 and ARM. You&amp;rsquo;ve probably heard this in passing, but you may not know what they are. These are Instruction Set Architectures (ISA), and they define the list of instructions your computer can understand and the basics about how those instructions are laid out.
Let&amp;rsquo;s say we have a fictional computer, really old, that&amp;rsquo;s only 8-bit (most modern systems are 32 or 64bit) this would mean we get eight 1&amp;rsquo;s and 0&amp;rsquo;s to define our instruction.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/biggerpicture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/biggerpicture/</guid>
      <description>The Bigger Picture # Something that&amp;rsquo;s most people get wrong about computers is thinking that the majority of what makes a computer go faster at something is being able to do math faster. After all, if you can add, divide, multiply, subtract, etc. numbers faster, that&amp;rsquo;s everything a computer does, right? So making math twice as fast means everything is twice as fast? No. Very much so no.
It turns out, the vast majority of what your computer does is not math and logic, but just moving data around.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/buying/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/buying/</guid>
      <description>10 - How to Know What to Buy # I&amp;rsquo;ve tried writing this like 5 times, trying to work around the fucked up GPU market, I just can&amp;rsquo;t even show the process of finding parts when things are this messed up. I can&amp;rsquo;t recommend a pre-built system either, since DELL is awful, but so is everyone else. Fuck this. Unless you literally don&amp;rsquo;t have a computer, just don&amp;rsquo;t buy anything for a while.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/cooling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/cooling/</guid>
      <description>8 - Cooling # Computers, who&amp;rsquo;d&amp;rsquo;ve guessed, use power. Shocker, right? Well, using power means making heat, and we need to get that away from the components as fast as we can - if they stay hot they&amp;rsquo;ll throttle down to a lower speed, and it degrades their quality over time. Not good.
So, what are our options?
Air Cooling # 3-pin and 4-pin fans # Air flow VS Static Pressure # Fan size # Noise # Smaller → Louder.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/cpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/cpu/</guid>
      <description>1 - The CPU # Note, there&amp;rsquo;s more the a CPU on some of these boards. On the big one, only the square thing in the middle is the CPU, on the pi-0 (the board with the HDMI and USB Ports) the CPU is under the metal heatsink - and in truth the CPU is actually an SOC (System On a Chip) - more on that in a bit. Finally, on the blue board, the CPU is only the black chip in the middle, though in this case it is again the definition is blurred, as in truth this is a microcontroller.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/gpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/gpu/</guid>
      <description>4 - Graphics &amp;amp; Acceleration # Photo by Thomas Foster, depicting an Nvidia RTX 3070 Hi Gamers!
This page will obviously appeal to you, those that drive the sales of these chonky, expensive cards; however, it&amp;rsquo;s important to note that this page is about all graphics &amp;amp; acceleration- from the iGPU in low power systems to the compute cards used for AI research and wasteful crypto mining. Still, this more in depth knowledge will probably be helpful in helping you extract more FPS from your GPU.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/legacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/legacy/</guid>
      <description># Legacy Hardware? # There&amp;rsquo;s some old hardware almost everyone is familiar with: Floppy disks and big ol&amp;rsquo; CRT monitors became a big part of what defined a computer, and became recognizable enough that the shape of a floppy disk is still the standard save icon today. But still, why care?
In history classes, the line “Those who don&amp;rsquo;t know history are destined to repeat it.&amp;quot; but I think there&amp;rsquo;s a bigger reason here: those who don&amp;rsquo;t understand the legacy hardware have no idea what the fuck is going on.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/motherboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/motherboard/</guid>
      <description>3 - The Motherboard # This is an older motherboard, but still new enough to have modern parts. Let&amp;rsquo;s start by looking at the the most obvious physical features and move to smaller things from there.
The most obvious thing to point out is the size of the motherboard. This is a mATX motherboard, which is considered the normal size for most systems. Most gaming or DIY computers will use full size ATX motherboards, which look very similar but are a bit longer vertically, allowing for more expansion slots - those horizontal black bars - among other features.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/network/</guid>
      <description>6 - Network Interfaces # Pictured here are three Network Interface Cards (NICs). The three on the left are for Wi-Fi (though some of this form factor may include Bluetooth as well) while the one on the right has an Ethernet port for wired access. Most computer&amp;rsquo;s will not have a separate card for the wired interface, though, as most motherboard&amp;rsquo;s have a wired network interface built in.
NICs also include the wireless chipset used for connecting to a cell tower and really any radio communication device in general.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/peripherals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/peripherals/</guid>
      <description>9 - Peripherals # USB # BUT WAIT! THERE&amp;rsquo;S MORE! USB 4.0 is a thing now, butttt it&amp;rsquo;s actually based on Thunderbolt 3 and is only on USB-C. But what is Thunderbolt, then? Let&amp;rsquo;s move on
&amp;hellip; but for the really nerdy that want more, see USB3: why it&amp;rsquo;s a bit harder than USB2, How Does A USB Keyboard Work? (Ben Eater, YouTube), and How does USB device discovery work?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/power/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/power/</guid>
      <description>7 - Power Supply # The Power Supply Unit or PSU does what you think. It takes power from the wall and turns it into power for the computer. This isn&amp;rsquo;t the chapter on voltage and current, so I&amp;rsquo;ll spare some of the details, but effectively you want a power supply that can deliver plenty of power and that has clean power. A given power supply usually has a rating like &amp;lsquo;500w&amp;rsquo; for 500 watts, but this is usually a bad indicator, as they could be referring to multiple things- you see a desktop power supply usually outputs multiple voltages (-12, +12, +5, +3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/ram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/ram/</guid>
      <description>2 - RAM # Note, that some RAM sticks, especially the full size ones, have metal heat spreaders on top of them. In gaming computer especially it&amp;rsquo;s common for these to have RGB lights as well. This is RAM or Random Access Memory. The above two sticks are the normal-sized used in desktop PCs, this form factor is called a DIMM (Dual In-Line Memory Module) while the bottom two are from laptops and are called SO-DIMMS, the placement of the notch is an indicator of the generation of RAM, with nearly all modern ram being a consecutive generation of the DDR standard.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/hardware/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/hardware/storage/</guid>
      <description>5 - Storage # Pictured here are 3 hard drives, 2 of which are &amp;lsquo;full size&amp;rsquo; at 3.5&amp;quot; and the other a &amp;rsquo;laptop drive&amp;rsquo; at 2.5&amp;quot;, the right most hard drive has been opened up, which has certainly ruined it as dust has gotten in. Below the smaller Hard drive is an NVMe SSD on a carrier card. Under the CD is a micro SD card and a flash drive.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/howwework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/howwework/</guid>
      <description>Chapter 5 - Working on how we work # The Terminal # In the world of programming, embedded development, and electrical debugging you will inevitably need to understand how to use a terminal/command line at some point. While the text only interface can look intimidating, it has some clear advantages. Namely it&amp;rsquo;s significantly faster to use the cli or &amp;lsquo;command line interface&amp;rsquo; version of many tools. Because of the nature of this guide you will be using the terminal frequently, so for convince sake information on using it effectively has been moved to Appendix A, I highly recommend you read though it after you finish this page.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/linuxdirtree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/linuxdirtree/</guid>
      <description>Chapter 4 - Getting Rooted In Linux # We&amp;rsquo;ve been using file in /proc and /dev throughout this, but we never really looked to see what else is in there. Let&amp;rsquo;s do that.
go ahead and open up a terminal and run
1 2 3 4 5 ╭─vega@lyrae ~ ╰─➤ cd /dev ╭─vega@lyrae /dev ╰─➤ ls [Very, Very Long Output here] Alright, I know what you&amp;rsquo;re thinking.
What. The. Actual.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/linuxshell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/linuxshell/</guid>
      <description>Appendix 1 - Using the Linux Shell # ./missing-semester - The Shell
./missing-semester - Shell Tools and Scripting
./missing-semester - Data Wrangling
Linux Productivity Tools Presentation PDF (Ketan M.)
What The Shell? # Okay, first question you probably have after I&amp;rsquo;ve been using them interchangebly &amp;lsquo;What is a Shell and is it different from a terminal?&amp;rsquo;
Yes, they&amp;rsquo;re different, but before I talk about the shell it&amp;rsquo;s easier to talk about the Terminal.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/otheross/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/otheross/</guid>
      <description>A3 - Other Operating Systems # BSD macOS Serenity Redox React TempleOS Haiku https://awesomekling.github.io/pledge-and-unveil-in-SerenityOS/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linux/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linux/windows/</guid>
      <description>Appendix 2 - Ugh. Windows. # Windows? In a Linux Chapter?
Okay, so, I hate Windows for many, many reasons. Beyond the Candy Crush being bundled and privacy concerns, it&amp;rsquo;s generally just a pain in the ass- and as a Linux user, that&amp;rsquo;s saying something. That said, you&amp;rsquo;ll probably need to do some stuff with it from time to time regardless. So, in this page I want to do three things:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/making/3dprint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/making/3dprint/</guid>
      <description>Chapter 41 - 3D printing, CNC, and making things # 31.1 - Basic making # Wood working # Safety # Cool projects # Lichtenberg Figure Table (Imgur)
Epoxy Inlay and Rustic Compass Butcher Block Countertops (Imgur) (YouTube)
Wood Tables Embedded with Photoluminescent Resin (Mike Warren)
CAD Up Some Shoes But Don&amp;rsquo;t Start From Scratch (Hackaday, DaveMakesStuff) + 3D Printed Shoes Make Bigfoot tracks (Hackaday, Stephan Henrich)
3D Printing Diffraction Gratings (iridescent/rainbow surfaces)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/making/hamradio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/making/hamradio/</guid>
      <description>Chapter 42 - Ham Radio # TODO: https://github.com/jopohl/urh
&amp;lsquo;137Mhz&amp;rsquo; by u/CashewHut LORA
2.4Ghz patch antenna
electronically tunable filters
National Radio Quiet Zone (Wikipedia)
https://newhams.info/2017/02/17/rf-connector-types/
question of the day:
Analog TV is shut down in the US, right? so all the over-the-air TV is digital. And existing analog OTA frequencies are getting repurposed to other uses... so what am I seeing on UHF channel 60? it&amp;#39;s got way more structure than the noise everywhere else.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/making/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/making/history/</guid>
      <description>Chapter 43 - History # BBS and Tildie Sites # tilde.town: A social network over SSH
Tilde.club
Other Tilde Services?
https://en.wikipedia.org/wiki/The_Mother_of_All_Demos
Adam Savage&amp;rsquo;s Computer History Collection! (YouTube)
Preserving data # https://media.ccc.de/v/31c3_-_6373_-_en_-_saal_6_-_201412291600_-_the_only_thing_we_know_about_cyberspace_is_that_its_640x480_-_olia_lialina#t=3641
Preserving hardware # https://en.wikipedia.org/wiki/Delay_line_memory
http://www.vcfed.org/forum/forum.php
https://skilldrick.github.io/easy6502/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/making/mechanical/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/making/mechanical/</guid>
      <description>Mechanical Bits # Through all the Engineering pages I&amp;rsquo;ve focused on electrical and programming solutions, because those are what I know, but they are not always the right answer. For example, in this Reddit post the author asks &amp;ldquo;What kind of motor can I use for this? I need a lightweight pole to go from 0 to 90 degrees [as fast as possible]?&amp;rdquo; and the answer really stuck out to me</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/algebra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/algebra/</guid>
      <description>1 - Algebra # This section is a tad bit misnamed, as instead of covering just Algebra I&amp;rsquo;ll be covering most things you&amp;rsquo;d learn in a high school Algebra class along side it, plus probably a bit extra. Number Systems # To get started, let&amp;rsquo;s look at &amp;lsquo;Number Systems&amp;rsquo;. Essentially, there are a variety of &amp;rsquo;types&amp;rsquo; of numbers, rather than get all philosophical let&amp;rsquo;s just dive in and I think you&amp;rsquo;ll get the gist.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/calc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/calc/</guid>
      <description>4 - Calculus # Introduction To Calculus With Derivatives (adit.io)
Calculus Made Easy by Silvanus P. Thompson
[TODO] limits before video
Below is a 12 video series that totals about 3.25 hours. [The Exponential Function is a Miracle (Mark Dominus)](</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/diffeq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/diffeq/</guid>
      <description> 5 - Differential Equations # Below is a 5 video series that totals about 1.5 hours. </description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/geometry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/geometry/</guid>
      <description> 3 - Geometry and Trigonometry # Geometry # Notation # ∥, ⊥,
Trigonometry # Learning Trig playlist on YouTube by &amp;lsquo;The Organic Chemistry Tutor&amp;rsquo;
Notation # 3½ - Topology # But, this is supposed to be about engineering, so why do we need it?
[TODO] topology optimization and generative design
3¾ - Non-Euclidian Spaces # Fractals # </description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/linalg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/linalg/</guid>
      <description>6 - Matrix Theory / Linear Algebra # Below is a 15 video series that totals a bit under 3 hours. Interactive Linear Algebra, text book that actually uses the web Linear Algebra Done Wrong - Sergei Treil @ Brown University
Matrices, Diagrammatically
Linear Algebra - Jim Hefferson
Linear Algebra and Applications: An Inquiry-Based Approach</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/logic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/logic/</guid>
      <description> 2 - Discrete Math &amp;amp; Logic # http://discrete.openmathbooks.org/dmoi3/
Math For Programmers (PDF) Notation # https://en.wikipedia.org/wiki/List_of_mathematic_operators
Logic # Many Valued Logic # Fuzzy Logic # </description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/math/</guid>
      <description>Chapter 6 - Math # This section of OpGuides is divided into subsections for easier reading! Just click the little arrow next to the heading to see the full list of chapters
As with all of OpGuides, please skip around as necessary. I suspect the start of this math chapter will be stuff many readers already know, especially those currently in college.
Math 6.1 Algebra 6.2 Logic 6.3 Geometry &amp; Trig 6.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/newmath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/newmath/</guid>
      <description>It&amp;rsquo;s NEW math! # Math, as I&amp;rsquo;ve tried to convey though these chapters, is more about problem-solving than actual mechanical operations. Part of solving really hard problems is having even weirder intuitions and tools.
/+ Hilbert curves (and the IP map)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/numanalysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/numanalysis/</guid>
      <description>7 - Numerical Analysis # Bisection Method
Newton&amp;rsquo;s Method
Secant Method
Lagrange Polynomial
Divided Differences
Linear Interpolation, Bilinear Interpolation, Bicubic Interpolation, Spatial Interpolation
Cubic Spline
Numerical Differentiation
Trapezoidal Rule
Simpson&amp;rsquo;s Rule
Romberg Integration
Monte Carlo Method - Algorithm Archive
Condition Number
Least Squares
The Bernstein Basis (Mutual Information, YouTube)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/probability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/probability/</guid>
      <description>10 - Probability/Stats # Seeing Theory: A visual Introduction to probability and statistics Why, where are these used, etc.
bring up music things, part failure rates, tolerances, etc.
Basics # For the following, I&amp;rsquo;ll be using a die roll example, where the events are the total of two die. The Sample Space of this is
\(S = \{2,3,4,5,6,7,8,9,10,11,12\}\) Note, that 1 isn&amp;rsquo;t possible as the lowest is both die being &amp;lsquo;1&amp;rsquo;.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/settheory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/settheory/</guid>
      <description>9 - Set Theory # The, uh, study of sets. It&amp;rsquo;s not as boring as it sounds, I swear. Set theory is pretty boring. Yes, it brings about ideas of infinity, Sets of numbers (integers, complex numbers, etc.) but frankly, unless you&amp;rsquo;re really into math&amp;rsquo;s nerdy bits and trying to understand the nature of mathematics and all that jazz, there&amp;rsquo;s really only a few bits you need to understand:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/units/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/units/</guid>
      <description>Chapter 6½ - Units # By 42CrMo4 and Christoph Päper English units of Length, CC BY-SA 4.0 Scaling, Logarithms and Scientific Notation # Before we get into units, we need to get into scale. That is, the idea of how big or how small something is, usually relative to something else.
In elementary school, you were taught to write the powers of 10 like this:
1 10 100 1000 That is good for regular numbers, but it works against us when we are dealing with numbers that are similar, and all of them are either very large or very small.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/networking/cloud/</guid>
      <description>Chapter 38½ - &amp;ldquo;The Cloud&amp;rdquo; # Some people will tell you the cloud is the future, that someday everybody will rent computational power from a handful of services like AWS.
These people are nuts.
The cloud is just someone eles&amp;rsquo;s computer. Unless your business is going through a period of extreme growth, it makes no sense to use a cloud provider like AWS or Azure. It does make plenty of sense to buy a VPS (Virtual Private Server) for hosting a website or game server or a personal website like this one, but at scale?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/networking/databases/</guid>
      <description>Chapter 39 - Databases # [TODO] Start with comparison to spreadsheet, explaining &amp;lsquo;NoSQL&amp;rsquo; Vs &amp;lsquo;SQL&amp;rsquo; and that this is Relational vs Non-Relational
[TODO] explain CRUD
CRUD # Create, Read, Update, Delete
SQL # This is Opinionated Guides, so let me be clear, I really, really hate SQL. I don&amp;rsquo;t like OOP in general, and SQL is sorta like object orientation taken further. Add onto this a mostly shit syntax, like, JOINs are objectively weird to read, write, and understand.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/networking/networking/</guid>
      <description>Chapter 37 - Networking # The Basics # To get started, let&amp;rsquo;s just get some basic terminology down and take a look at the bigger picture:
Nodes # These are all the points in the network. There are terminal nodes and intermediate nodes.
Terminal nodes are things like your phone, laptop, desktop, and other user-facing devices, as well as servers, like would be used for hosting games or websites.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/privacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/networking/privacy/</guid>
      <description>Chapter 40½ - Your Guide to Privacy # &#34; Arguing that you don&amp;rsquo;t care about the right to privacy because you have nothing to hide is no different from saying you don&amp;rsquo;t care about free speech because you have nothing to say. &#34; - Edward Snowden, in his Reddit AMA Privacy online is a joke. No matter what you do, you&amp;rsquo;re still going to be tracked so much that advertisers and the big tech companies (Facebook, Google, Microsoft, etc.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/networking/security/</guid>
      <description>Chapter 40 - Security &amp;amp; Exploitation # I&amp;rsquo;m going to assume at least some prior knowledge here, if you want a quick intro, I recommend going through ./missing-semester-Security so that we can all be on the same page. Often when we think about Exploitation, better known as hacking, we conjure images of a more-punk-than-cyber cyberpunk person clicking away wildly on a keyboard as code flies by, like the 1995 movie, Hackers, and to some extent this isn&amp;rsquo;t wrong, as one look around the floor at DefCon, will show you.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/servers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/networking/servers/</guid>
      <description>Chapter 38 - Servers! # First of all, let&amp;rsquo;s demystify the servers, they are not something to be afraid of &amp;hellip; they are just normal computers that execute processes, the main difference is that these computers do not have a direct interface, that is: there is no need for them to have peripherals (most of the time) since they only SERVE resources for other needs.
A good example of a server is this one, in which you are reading this, the only function of the server where this content is hosted is to provide it, nothing more and nothing less.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/prereq/chem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/prereq/chem/</guid>
      <description>Chapter 8 - Chemistry # Super handy periodic table with visualization, atomic mass, melting/boiling points, specific heat, isotopes, etc. (ptable)
This chapter is more or less on hold while I prioritize adding the content I&amp;rsquo;m more familiar with, if you&amp;rsquo;d like, feel free to submit a PR to flesh this section out. Unfortunately, my chemistry education was pretty &amp;lsquo;meh&amp;rsquo;, and I never actually made it to Organic Chem. I have CrashCourse&amp;rsquo;s Chemistry and Organic Chemistry videos on YouTube on my &amp;lsquo;To Watch&amp;rsquo; list, though.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/prereq/othersubjects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/prereq/othersubjects/</guid>
      <description>Chapter 9 - &amp;lsquo;The Rest&amp;rsquo; # English # I&amp;rsquo;m monolingual. I got just enough Spanish in high school to graduate and never looked back. Unfortunately, for those that don&amp;rsquo;t speak English as a first language, the internet has developed in such a way that English is basically the go-to language online.
Okay, so, some context is necessary here. Historically, England sorta gave the whole &amp;ldquo;World Domination&amp;rdquo; thing a shot as colonialism and in the process spread English to, well, everywhere?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/prereq/physics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/prereq/physics/</guid>
      <description>Chapter 7 - Physics # This is still a dumping ground for things I want to write about later, nothing of substance is here yet, sorry about that ╮(─▽─)╭ [TODO] speed vs Velocity vs Acceleration, classical vs relative
Radiocarbon dating (Wikipedia)
Cosmic Microwave Background (Wikipedia)
Natural nuclear fission reactor (Wikipedia)
How Kodak Exposed The Atomic Bomb (YouTube, Veritasium)
Seeing the invisible: Event displays in particle physics
Building a Vortex Tube (This Old Tony, YouTube)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/algorithms/</guid>
      <description>Chapter 14 - Discrete Math, Algorithms, Data Structures, and Not Sucking at Programming ™* # Brute Force Algorithms # Backtracking # [TODO] Directed Acyclic Graphs
[TODO] Finite State Machines
[TODO] e-graphs? https://egraphs-good.github.io
[TODO] http://courses.csail.mit.edu/6.851/
[TODO] &amp;lsquo;Tree Traversal&amp;rsquo; on Algorithm Archive
Divide and Conquer # Master Theorem # Decrease and Conquer # Branch and Bound # Kernelization # Caching # *With some complexity analysis too.
[TODO]
https://www.mattkeeter.com/blog/2021-03-01-happen/
[TODO] I also have discrete math in the chapter 11, math&amp;hellip; not sure what do about this&amp;hellip;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/bigprog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/bigprog/</guid>
      <description>Chapter 15 - Writing a larger program # From https://wiki.xxiivv.com/site/development.html
Prototype before polishing. Get it working before optimizing it. Separate policy from mechanism, separate interfaces from engines. Write simple modular parts connected by clean interfaces. Design programs to be connected to other programs. Write programs to write programs when you can. Design for the future, because it will be here sooner than you think. In interface design, always do the least surprising thing.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/codecont/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/codecont/</guid>
      <description>Chapter 12 - Finishing up the project # Manifesto # Everything should be a tool. A tool transforms data without adding to its source limitations. It&amp;rsquo;s a function: returns an output for a given input. A great tool is ambient. It should disappear and flow through your actions. You should never need it because it&amp;rsquo;s always at your hands. You should never ignore it because it&amp;rsquo;s never in your way.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/codeintro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/codeintro/</guid>
      <description>Chapter 10 - Let&amp;rsquo;s write some Code # Hello! If you&amp;rsquo;re here, you should know you&amp;rsquo;re on a deprecated page. All work has now been refocused on getting the new programming intro (Chapter 10 in the menu bar) to being much, much better than this page ever was. Starting Minimal # Code is mostly math # Here&amp;rsquo;s the thing: Code is mostly math. If you&amp;rsquo;re anything like me, you probably just went ugggggghhhhhhh.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/consequences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/consequences/</guid>
      <description>Chapter 10½ - Consequences # Programming is awesome. If you get into creative coding, you&amp;rsquo;ll be able to use it to make art. You&amp;rsquo;ll likely use it to automate tasks you find boring. If you&amp;rsquo;re like me, you might use it to make your own website or start to make products you intend to sell. That&amp;rsquo;s great. But there are a few things you need to consider as what you make becomes more professional.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/data/</guid>
      <description>Chapter 13½ - Data, Encodings, Compression, etc. # When you write code, you&amp;rsquo;ll inevitably be working with input and output of some sort - even if it&amp;rsquo;s just text. This is always more complicated than it seems. For example, text processing is easy, right?
🚫, 🅘🆃 🄸🄣&amp;rsquo;s 🇳ot.
Even text encoding is a massive pain, unless you can ensure you only need to (and do) process basic ASCII characters, that is.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/debugbuildtest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/debugbuildtest/</guid>
      <description>Chapter 16 - Debugging, Building and Testing # Building # The C Build Process # I&amp;rsquo;m going to jump right in here, so things are going to be a bit brutal to understand for a bit. I&amp;rsquo;ll break things down, but I need to give the high-level view first! As we saw way back Hardware→CPU , your computer doesn&amp;rsquo;t understand instructions like printf(), so ultimately the code you write has to get turned into something your computer understands.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/fixxingissuses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/fixxingissuses/</guid>
      <description>Chapter 12½ - It Was Working Just A Second Ago&amp;hellip; # Alright, so your code/electronics/computer/life was working fine just a second ago, and now it&amp;rsquo;s just not working at all. Take a deep breath, and relax. Let&amp;rsquo;s work though this.
🦆 Grab a rubber duck # This won&amp;rsquo;t always be applicable, but assuming it&amp;rsquo;s a system- code, or electronics, or a math problem, something that can be analyzed - explain it.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/fosscopyright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/fosscopyright/</guid>
      <description>Chapter 11½ - Open Source, Licenses, and Copyright # Open source enables a development method for software that harnesses the power of distributed peer review and transparency of process. The promise of open source is higher quality, better reliability, greater flexibility, lower cost, and an end to predatory vendor lock-in.
&amp;ndash; The Open Source Initiative Mission Statement
Disclaimer # I am not a lawyer, and neither are any of my contributors to this section.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/funcprog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/funcprog/</guid>
      <description>Chapter 21 - (((())(()((()(())))))) # What is Functional Programming? # Most of the programming languages in this section up until now have been imperative programming languages. Programs are a series of instructions: do this, then do that, then do the other thing.
Functional programming languages are another type of language. Like math, they simply define sets, relationships, and then have a process for doing things based on &amp;ldquo;answering questions&amp;rdquo; or &amp;ldquo;getting to a result&amp;rdquo;.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/game/</guid>
      <description>Chapter 20 - Game Programming &amp;amp; Design # https://www.gameuidatabase.com/index.php
https://www.riotgames.com/en/urf-academy/curriculum-guide
COMP4300 - Game Programming (David Churchill, YouTube)
Engines &amp;amp; Frameworks # Both 2d and 3d # Godot
Luxe
Heaps
fine. I&amp;rsquo;ll mention Unity and Unreal, but, like, I hate that the two make up such a huge chunk of the market
Unreal Engine
Unity
2d # LEd engine - &amp;ldquo;LEd is a modern and open-source 2D level editor, specifically designed for indie devs&amp;rdquo;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/guiprog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/guiprog/</guid>
      <description>Chapter 18 - Graphical Programming # [TODO] Graphics Programming on badd10de.dev
Let&amp;rsquo;s start in a way that&amp;rsquo;s incredibly simple, and abstract away all the hard stuff at first by using a tool kit called &amp;lsquo;Processing&amp;rsquo;, which is available under that name from the community repo in arch. The default IDE that comes with it is awful to work in though, so go ahead and open up VSCode and grab the Processing Language add on, then in VSCode open up a new workspace folder and make a file called processing.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/progintro0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/intro/progintro0/</guid>
      <description>Chapter 10.0 - Let&amp;rsquo;s Write Some Code # Knowing how to program will give you deep control over the most advanced tool mankind has ever made: The computer. More over, because we use computers as extensions of our own minds (and as a collective, with the Internet) it will literally expand your ability to process information as you&amp;rsquo;re no longer limited to the inputs and computation systems that other programmers have built for you.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/progintro1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/intro/progintro1/</guid>
      <description>Chapter 10.1 - It&amp;rsquo;s math? # Let&amp;rsquo;s talk math and look at some real code.
I think a lot of people over estimate how hard it is to handle even the more complex math. As an example, let&amp;rsquo;s estimate π. (You should never actually do this in code - just use a library which will provide a pre-computed value of pi anywhere you need it!) To do this, we need a formula.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/progintro2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/intro/progintro2/</guid>
      <description>Chapter 10.2 - Turtles All The Way Down # Low Level and High Level Programming # There are two types of programming, high level and low level.
High level programmers make things where the hardware doesn&amp;rsquo;t matter. The code they write runs everywhere, and the users directly see it and interact with it.
Low level developers write code that runs directly on the hardware. The software inside the controller on your mouse to the driver on your computer for responding to that input, that&amp;rsquo;s all low level.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/progintro3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/intro/progintro3/</guid>
      <description>Chapter 10.3 - Getting Tools # As mentioned above, you&amp;rsquo;ll be learning both Python and C. This means we need to get the tools necessary for working with each. If you&amp;rsquo;re following along with OpGuides as a whole and have Linux setup, this will be easy. If you&amp;rsquo;re on Windows it&amp;rsquo;s not hard but there are some annoying steps we&amp;rsquo;ll need to jump through.
Getting Code To Run # Arch Linux Run pacman -Syu gcc python, then you&amp;rsquo;ll want to grab visual-studio-code-bin from the AUR.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/progintro4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/intro/progintro4/</guid>
      <description>Chapter 10.4 - Leaning Two Languages At Once # Back in the Into The Hardware section we looked at some of the inner workings of the CPU, and briefly looked into how the CPU only understands machine code, 1&amp;rsquo;s and 0&amp;rsquo;s that make up individual instructions. Now, there&amp;rsquo;s absolutely no reason to ever think at that low of a level, the lowest you should ever care to look at, as mentioned there, is assembly.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/progintro5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/intro/progintro5/</guid>
      <description>Chapter 10.5 - What&amp;rsquo;s a Type? &amp;amp; Going Down Rabbit Holes # Alright, I&amp;rsquo;ll cut to the chase. When programming, you often need to deal with types. On the last page, there was a mix of types, int, uint8_t, float, and char all make appearances. While the exact names of each type and what they&amp;rsquo;re capable of may vary a bit from language to language and platform to platform understanding the basics here will help you out a lot, so, let&amp;rsquo;s start with the C language and look at ints</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/progintro6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/intro/progintro6/</guid>
      <description>Chapter 10.6 - ＬＯＧＩＣ &amp;amp; Functions # For this page, If you see that lines are ending with a semicolon, ;, then that code is C. If they don&amp;rsquo;t, it&amp;rsquo;s Python. Would you like to speak to an Operator? # The very first thing to understand before we can get to more intersting things is the list of operations available to us.
This includes the operations your used to - addition, subtraction, etc.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/progintro7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/intro/progintro7/</guid>
      <description>10.7 - Data Structures &amp;amp; Object Orientation # Why not just structs? # C is a very low level language and only lets you make structs. Structs are fine, but they have some annoying properties, particularly in separating data from how you interact with it, making it difficult to make complex abstractions where you can be sure that data that should only be internal to a structure isn&amp;rsquo;t exposed, or that the data can&amp;rsquo;t be changed in an invalid way.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/progintro8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/intro/progintro8/</guid>
      <description>Chapter 10.8 - The Standard Library # Yunno&amp;rsquo; how you&amp;rsquo;ve been using print() and printf() all over the place? Well, those are functions, but where are they from?!
Well, for C, in printf()&amp;rsquo;s case it&amp;rsquo;s pretty obvious - you can&amp;rsquo;t use it unless you have #include &amp;lt;stdio.h&amp;gt; at the top of the file, so, clearly your computer has that file, and the associated .c file, somewhere. And frankly? That&amp;rsquo;s good enough for the moment.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/intro/progintro9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/intro/progintro9/</guid>
      <description>10.9 - &amp;ldquo;Real&amp;rdquo; Programs # So, you now mostly know all the fundamental building blocks used to write basically everything out there.
But&amp;hellip; not really?
The thing is, almost any program of moderate complexity is going to rely on libraries to provide extra, (hopefully) well tested, performant, hard to write functionality. Plus, most programs don&amp;rsquo;t exist in a vacuum: you may need to hook into a database, send packets over the internet, check for malicious user input, write to files, encrypt data, use an API to interact with a game engine, or even write in a different language and call one language&amp;rsquo;s code from another.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/languages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/languages/</guid>
      <description>Chapter 13 - Programming Languages # for (🥚 = 1; 🥚 &amp;lt; 🐔; 🥚++){ //whatever } Hello nerds,
Before you get on my case, I know this isn&amp;rsquo;t a complete list, so it&amp;rsquo;s possible your favorite language isn&amp;rsquo;t on it. Hell, a complete list can&amp;rsquo;t even really exist. Still, there are a lot of cool languages I didn&amp;rsquo;t put here, so if you&amp;rsquo;re looking for some weird but not incredibly weird languages see Awesome Programming Languages (GitHub), though note even it doesn&amp;rsquo;t include the obvious - like C and Java.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/lowlvl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/lowlvl/</guid>
      <description>Chapter 11 - Low Level Programming # Ashlyn Black&amp;rsquo;s C Cheat Sheet
&amp;lsquo;C Programming&amp;rsquo; on badd10de.dev
Why C? # This chapter of OpGuides will be mostly C, but, why? Well, there&amp;rsquo;s only really a few options for learning low level programming that make sense to start with. C, C++, Rust are the &amp;lsquo;big three&amp;rsquo; that come to mind for me. C is awesome. Its spec is small, it&amp;rsquo;s been kept minimal, and it&amp;rsquo;s got a ton of tools to help you learn.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/multithread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/multithread/</guid>
      <description>Chapter 17 - We&amp;rsquo;ve got cores, let&amp;rsquo;s use em&#39; # [TDOO] Motivations from Moore&amp;rsquo;s law, Blocking I/O,
[TODO] start with process forking via syscall - show it
https://lemire.me/blog/2020/01/30/cost-of-a-thread-in-c-under-linux/
C++ coroutines
not really threading, but process children
SIMD, https://nullprogram.com/blog/2021/12/04/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/shaders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/shaders/</guid>
      <description>Chapter 19.0 - Shaders # The Book Of Shaders GLSL 2D Tutorials by Vug Here for VRChat Stuff? Cool! VR chat is a really neat platform to work with and it&amp;rsquo;s really fun to be able to hold or walk around your art. Unfortunately, there&amp;rsquo;s some added complexity that comes with handling VR, Unity, and even just 3D stuff outright that, all together, takes a hot minute to build up to.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/programming/style/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/programming/style/</guid>
      <description>Chapter 15½ - Programming Style &amp;amp; Patterns # Good programmers don&amp;rsquo;t just write code that works, they write code that is readable, easy to debug, and well tested. One way to get a leg up on this is to look at tips for programming patterns and styles that make your code better.
For example, take this nugget of advice:
Smash back if the intermediate variables don&amp;rsquo;t represent a meaningful value.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/aiml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/signals/aiml/</guid>
      <description>Chapter 32 - Fine, I&amp;rsquo;ll talk about AI # This chapter is very much a work in progress, and is really more of just a list of topics, despite how much content there appears to be. I&amp;rsquo;d really like to have code examples under each concept as well, as otherwise it&amp;rsquo;s like reading a fucking math textbook from hell.In the meantime, please see https://sebastianraschka.com/blog/2021/dl-course.html#l01-introduction-to-deep-learning for a good intro to Deep Learning [TODO] https://www.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/commsys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/signals/commsys/</guid>
      <description>28 - Communication Systems # This chapter is currently just a stub. I&amp;rsquo;m currently taking a comm systems class at Uni and will be putting the results of my notes as well as external resources into here at some point. What is a communication system? # For the purposes of this page, we&amp;rsquo;re talking about systems that transmit signals over a medium- so that might be your voice over the air, a radio signal though the vacuum of space, or ultrasonic waves under the water as sonar.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/compvision/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/signals/compvision/</guid>
      <description>Chapter 31 - Computer Vision # This page is still pretty empty, in the meantime, check out The Ancient Secrets of Computer Vision by Joseph Redmon and Ali Farhadi
As an aside, Joseph Redmon is an absolute genius, and the main brain behind You Only Look Once: Unified, Real-Time Object Detection which sort of revolutionized the computer vision with AI space, yet, his resume looks like this
This is to say the man is an absolute badass and I could not be more confident in my recommendation of his course</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/controlsys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/signals/controlsys/</guid>
      <description>30 - Control Systems # What are control systems? Well, the easiest way to answer that is to list the things control systems typically do:
What Can Control Systems do? # Amplify an input: # ex: Pluck a tiny string on a guitar, get an earth shaking output from the speaker Reduce the complexity of user input or change its location # ex: Floor button on an elevator- you don&amp;rsquo;t need to input a height off the ground for what floor you want to be on, nor do you need to enter values to compensate for how quickly it should get to its max speed or how fast it should slow down.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/dsp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/signals/dsp/</guid>
      <description>29 - Digital Signal Processing # Spectral Audio Signal Processing by JULIUS O. SMITH III at the Center for Computer Research in Music and Acoustics (CCRMA) The Scientist and Engineer&amp;rsquo;s Guide to Digital Signal Processing By Steven W. Smith, Ph.D.
Awesome MusicDSP (Github)
Tom Erbe, Design the Erbe Verb (YouTube)
https://zserge.com/posts/etude-in-c/ &amp;amp; https://zserge.com/posts/beep/
Diospyros - Search-based compiler for high-performance DSP programming
Think DSP - DSP in Python, Free book</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/signals/sigandsys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/signals/sigandsys/</guid>
      <description>27 - Signals &amp;amp; Systems # When I took ECEN 304 Signals &amp;amp; Systems Ⅰ with the fantastic Dr. Sayood at UNL I remember how in awe I was at how he concisely he managed to describe the core idea of this class. While I can not hope to convey the same level of brilliance or inspiration, I do hope that my poor attempt at mimicking his introduction to the course may be of value:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/wrappingup/cheat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/wrappingup/cheat/</guid>
      <description>Appendix 2 - Cheat Sheets and quick info # Electrical Part Tables # [TODO]
package types
reading specs
datasheets
Nice Libraries &amp;amp; Resources # Multi-Language # Ultralight - &amp;ldquo;Next-generation HTML renderer for apps and games&amp;rdquo;
Bit like Electron, but less shit. Supports C, C++, C#, Rust, Java, and Go
C # Awesome-C - &amp;ldquo;A curated list of awesome C frameworks, libraries, resources and other shiny things. Inspired by all the other awesome-&amp;hellip; projects out there.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/wrappingup/job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/wrappingup/job/</guid>
      <description>Appendix 4 - Getting a Job in Engineering # &#34;Recently, I was asked if I was going to fire an employee who made a mistake that cost the company $600,000. No, I replied, I just spent $600,000 training him. Why would I want somebody to hire his experience?&#34; - Thomas John Watson Sr., IBM
[TODO] literally this entire page is TODO. I&amp;rsquo;m just making it as a place to dump links for now.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/wrappingup/latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/wrappingup/latex/</guid>
      <description>Appendix 5 - \(\LaTeX\) &amp;amp; Markdown # Like the kink? # \(\LaTeX\) , pronounced Lay-Tech, is a document writing and formatting &amp;rsquo;language&amp;rsquo; that acts pretty different from MS Word. It&amp;rsquo;s primarily used for writing fancy math equations, academic, journal, or conference papers, as such, you might have to use it at some point to conform to one standard or another (like IEEE).
As an example of what \(\LaTeX\) formatting looks like, check this equation out:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/wrappingup/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/wrappingup/resources/</guid>
      <description>Appendix 3 - Other Great Resources # Conventions # https://www.emfcamp.org
https://media.ccc.de/
News Sites # Serializer.io (Aggregate of Hacker News, Ars, Reddit, Macrumors, and Lobste.rs )
Hacker News
Hackaday
Slashdot
Snopzu
https://n-o-d-e.news/
Forums # https://lobste.rs/
https://stackoverflow.com/
http://textfiles.com/
https://glitch.com/
Learning Linux # https://linuxjourney.com
Youtube # ElectroBoom
CNLohr
N-O-D-E
LiveOverflow
Tom Scott
bigclive
AdoredTV
3Blue1Brown
Bryan Lunduke
Level1Techs
Crash Course: Computer Science, from PBS
Podcasts # https://theamphour.com/
Hacker Public Radio
GitHub info pages # Hacker Laws</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/wrappingup/wrappingup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/wrappingup/wrappingup/</guid>
      <description>Chapter 44 - Where To Go From Here? # Hey, so, you made it. I can&amp;rsquo;t give you a degree. But, I&amp;rsquo;m proud of you. Even if you skipped a chapter or two, you still put in work to improve yourself and learn something. That&amp;rsquo;s cool.
But, maybe you&amp;rsquo;re thinking &amp;ldquo;Okay, but now what?&amp;rdquo;
Integrating other interests # There&amp;rsquo;s a lot more to life than computers and code and electronics and making and hacking.</description>
    </item>
    
    <item>
      <title>Engineering</title>
      <link>https://opguides.info/engineering/engineering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/engineering/</guid>
      <description>Hey There! My name is Vega, and I&amp;rsquo;m glad you&amp;rsquo;re here! I know there are plenty of tutorials and ways to learn online, be it on YouTube, SkillShare, or online classes provided for free by various universities. The difference here is I&amp;rsquo;ve tried to cut out the boring parts, make things a bit more entertaining than a textbook, and drenched the content in my own personal opinion that has been built up by my experiences.</description>
    </item>
    
  </channel>
</rss>
