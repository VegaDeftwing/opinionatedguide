<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Engineering on Opinionated Guides</title>
    <link>https://opguides.info/engineering/</link>
    <description>Recent content in Engineering on Opinionated Guides</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://opguides.info/engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://opguides.info/engineering/community/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/community/</guid>
      <description>Ⅰ - Community #  The only way to be successful in this journey is to make friends along the way. Some of this gets really, really difficult. You will get stuck. Having friends to help makes it possible. Find group chats on telegram, join IRC channels, get on some forums, and ask questions on Reddit. Working with people is a lot more fun and you&amp;rsquo;ll learn so much more.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/24-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/24-/</guid>
      <description>Chapter 24 - #  This chapter has been merged with another, leaving the space open for now, I&amp;rsquo;ll put something else here&amp;hellip;
Maybe reverse engineering? This would seem a bit out of place though. I might need to do some rearranging of chapters 26-34 anyway https://github.com/mytechnotalent/Reverse-Engineering
If you&#39;re reading this, you have javascript off.
 document.querySelector(&#34;body  main  div  article  div  p&#34;).innerText = &#34;If you can read this you have JavaScript on&#34;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/3dprint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/3dprint/</guid>
      <description>Chapter 34 - 3D printing, CNC, and making things #  34.1 - Basic making #  Wood working #  Safety #  Cool projects #  Lichtenberg Figure Table (imgur)
Epoxy Inlay and Rustic Compass Butcher Block Countertops (imgur) (YouTube)
Wood Tables Embedded with Photoluminescent Resin (Mike Warren)
Metal Working #  Safety #  34.2 - CNC, 3D, Lasers, &amp;amp; Plotting #  Plotting #  Lasters #  3D Printing #  From personal experiance, I can tell you the really cheap, like sub $200 printers, are mostly shit.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/a3-bom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/a3-bom/</guid>
      <description>Appendix C - BOM #  As the guide isn&amp;rsquo;t anywhere near a usable state yet, this page should be ignored for the most part. OpGuides is free. Unfortunately all the tools and programs you&amp;rsquo;ll need to follow along aren&amp;rsquo;t necessarily. While you probably could do everything in this guide without getting the things in this Bill OF Materials (BOM) it will massively help to have it.
I&amp;rsquo;ll do my best to keep the cost as low as possible though.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/aiml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/aiml/</guid>
      <description>Chapter 21 - Fine, I&amp;rsquo;ll talk about AI #  This chapter is very much a work in progress, and is really more of just a list of topics despite how much content there appears to be. I&amp;rsquo;d really like to have code examples under each concept as well, as otherwise it&amp;rsquo;s like reading a fucking math textbook from hell. [TODO] https://www.asimovinstitute.org/author/fjodorvanveen/
Machine Learning? #  You&amp;rsquo;ve used it today. ML is used for search engines, social media feed order (the almighty Algorithm), and predictive text systems.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/algorithms/</guid>
      <description>Chapter 14 - Discrete Math, Algorithms, Data Structures, and Not Sucking at Programming ™* #  [TODO] Directed Acyclic Graphs
[TODO] Finite State Machines
[TODO] e-graphs? https://egraphs-good.github.io
[TODO] http://courses.csail.mit.edu/6.851/
*With some complexity analysis too.
[TODO]
https://www.mattkeeter.com/blog/2021-03-01-happen/
[TODO] I also have discreete math in the chapter 11, math&amp;hellip; not sure what do do about this&amp;hellip;
Truth tables, binary, logical equlivencies, propositional logic,
Sets, functions, relations, recurrence, induction, combonation, graphs, isomorphsm,
Sets are a well-defined collection of distinct objects.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/arch/</guid>
      <description>Chapter 2 - Let&amp;rsquo;s do it then, Installing Arch Linux #  Some Background #  Unlike Windows or Mac which are primarily differentiated by versions (Windows XP, Vista, 7, 10&amp;hellip;), Linux has two important things to look out for: The distribution and the kernel version number. Linux is actually just the name of the underlying &amp;lsquo;core&amp;rsquo; of the system, known as the kernel, as such, there are literally thousands of Linux variations.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/bigprog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/bigprog/</guid>
      <description>Chapter 15 - Writing a larger program #  From https://wiki.xxiivv.com/site/development.html
  Prototype before polishing. Get it working before optimizing it. Separate policy from mechanism, separate interfaces from engines. Write simple modular parts connected by clean interfaces. Design programs to be connected to other programs. Write programs to write programs when you can. Design for the future, because it will be here sooner than you think. In interface design, always do the least surprising thing.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/cheat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/cheat/</guid>
      <description>Appendix 2 - Cheat Sheets and quick info #  Electrical Part Tables #  [TODO]
  package types
  reading specs
  datasheets
     Markdown Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  # heading1 ## heading2 ### heading3 --- on it&amp;#39;s own line will give you a diveder line * for a bulleted list * alternatively, - works too - ~~The world is flat.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/chem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/chem/</guid>
      <description>Chapter 8 - Chemistry #  This chapter is more or less on hold while I prioritize adding the content I&amp;rsquo;m more familiar with, if you&amp;rsquo;d like, feel free to submit a PR to flesh this section out. Unfortunately my chemistry education was pretty &amp;lsquo;meh&amp;rsquo;, and I never actually made it to Organic Chem. I have CrashCourse&amp;rsquo;s Chemistry and Organic Chemistry videos on YouTube on my &amp;lsquo;To Watch&amp;rsquo; list though. Obviously I don&amp;rsquo;t know if they&amp;rsquo;re any good, but maybe they&amp;rsquo;d be a decent place to start.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/circuits1/</guid>
      <description>Chapter 22 - Intro to Angry Pixies #  A simple guide to electronic components (YouTube)
The Tools of the Trade #  Building, fixing, and analyzing circuitry requires the use of a few tools and appliances. While there are many more than those listed here, these are the most important ones and should be all you need for most even very advanced applications.
The Multimeter #   note, the above video uses U=IR instead of V=IR like &amp;lsquo;normal&amp;rsquo;.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/circuits2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/circuits2/</guid>
      <description>Chapter 23 - Circuits &amp;amp; Semiconductors #  When I was a kid I thought about circuits as being alive, like Cells at Work!, only little electrons going around busily keeping the heart of my toy working instead of anthropomorphic red blood cells working in the human body.
Now, as an adult - and a computer and electrical engineer at that - I still find this thought endearing. Though I&amp;rsquo;ve now come to see the physics and art of electronics to be even more beautiful when their true nature is really understood.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/cloud/</guid>
      <description>Chapter 31½ - &amp;ldquo;The Cloud&amp;rdquo; #  GCP Outpaces Azure, AWS in the 2021 Cloud Report (Cockroarch Labs)
Dropbox saved almost $75 million over two years by building its own tech infrastructure (GeekWire)
Comparison of Vendors #  [TODO] Add Google Cloud to list, mention they&amp;rsquo;re all sorta evil.
 Note, I&amp;rsquo;m not going to directly compare pricing between these services because that&amp;rsquo;s both rather variable and because the cost is often in terms of resource usage, which can be calculated in so many different way that the only real way to compare is to actually run something.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/codecont/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/codecont/</guid>
      <description>Chapter 12 - Finishing up the project #   Manifesto #   Everything should be a tool. A tool transforms data without adding to its source limitations. It&amp;rsquo;s a function: returns an output for a given input. A great tool is ambient. It should disappear and flow through your actions. You should never need it because it&amp;rsquo;s always at your hands. You should never ignore it because it&amp;rsquo;s never in your way.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/codeintro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/codeintro/</guid>
      <description>Chapter 10 - Let&amp;rsquo;s write some Code #  Starting Minimal #  Code is mostly math #  Heres the thing: Code is mostly math. If you&amp;rsquo;re anything like me, you probably just went ugggggghhhhhhh.
And I get it. But it&amp;rsquo;s not that bad for two reasons:
 The math isn&amp;rsquo;t like what you&amp;rsquo;re used to. The math is actually doing something. You&amp;rsquo;re not just getting a number to solve a problem, you&amp;rsquo;re making a tool that can solve many problems or watching the math cause something to happen on screen.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/comparch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/comparch/</guid>
      <description>Chapter 29 - Let&amp;rsquo;s make our own CPU #  This Chapter will be split into three parts:Part 1, understanding the interval workings of a CPU. This is effectively just a computer architecture class, and will be by far the largest section.Part 2, making that CPU on an FPGA.Part 3, making that CPU do something. [TODO] http://www.lighterra.com/papers/modernmicroprocessors/
Part 1: Computer Architecture #  Motivation: #   Any sufficiently advanced technology is indistinguishable from magic.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/compileassemble/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/compileassemble/</guid>
      <description>Chapter 27 - Compilers and Assemblers #  https://lee.earth/til/compiling-c-code-a-step-by-step-guide/
[TODO] Better Firmware with LLVM/Clang
Common Flags and When to Use them #   These flags are not universal, instead they&amp;rsquo;re from GCC. GCC and Clang are the big two compilers you&amp;rsquo;ll see a lot and these flags should be mostly the same between the two. Of course, there are many, many other compilers, but I&amp;rsquo;m going to start with the common stuff</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/consequences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/consequences/</guid>
      <description>Chapter 10½ - Consequences #  Programming is awesome. If you get into creative coding you&amp;rsquo;ll be able to use it to make art. You&amp;rsquo;ll likely use it to automate tasks you find boring. If you&amp;rsquo;re like me, you might use it to make your own website or start to make products you intend to sell. That&amp;rsquo;s great. But there are a few things you need to consider as what you make becomes more professional.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/databases/</guid>
      <description>Chapter 32 - Databases #  [TODO] Start with comparison to spread sheet, explaining &amp;lsquo;NoSQL&amp;rsquo; Vs &amp;lsquo;SQL&amp;rsquo; and that this is Relational vs Non-Relational
[TODO] explain CRUD
CRUD #  Create, Read, Update, Delete
SQL #  This is Opinionated Guides, so let me be clear, I really, really hate SQL. I don&amp;rsquo;t like OOP in general, and SQL is sorta like object orientation taken further. Add onto this a mostly shit syntax, like, JOINs are objectively weird to read, write, and understand.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/debugbuildtest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/debugbuildtest/</guid>
      <description>Chapter 16 - Debugging, Automated Building and Testing #  Automated Building #  Debugging #  ./missing-semester - Debugging and Profiling
Software Debugging #  [TODO]
GDB with Gef, interpreted languages, embedded systems, non-code issues (boot problems, glitchy behavior), hardware failures, valgrind, various trace programs, print debugging extended
Debuggers #  GDB Frontend
GDB + GEF
The State of Linux Debuggers (Jamie Brandon&amp;rsquo;s Blog) ← This is a decent rant about why most debuggers sort of suck.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/digitallogic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/digitallogic/</guid>
      <description>Chapter 24 - Digital Logic #     Binary (0b) Hex (0x) Decimal     0000 0 0   0001 1 1   0010 2 2   0011 3 3   0100 4 4   0101 5 5   0110 6 6   0111 6 7   1000 8 8   1001 9 9   1010 A 10   1011 B 11   1100 C 12   1101 D 13   1110 E 14   1111 F 15      lineart by https://merveilles.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/embedded/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/embedded/</guid>
      <description>Chapter 25 - Embedded Systems #  [TODO]
What is an Embedded System? #  [TODO] need source PWM, SPI, I2C, What&amp;rsquo;s going on?! #  Driving a PAL TV over RF thanks to PWM harmonics (Hackaday)
Playing around - Hello World and blink #  Making an Embedded System project - 1 - Humidity Sensor #  Making an Embedded System project - 2 - MIDI Controller (with piezzo) #  Making an Embedded System project - 3 - Stepper Motor Music #  adapted from floppy drives, but less expensive</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/engineering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/engineering/</guid>
      <description>Hey there, #  My name is Vega. I know there are plenty of tutorials and ways to learn online be it on YouTube, SkillShare, or online classes provided for free by various universities. The difference here is there is no content you&amp;rsquo;ll never use, no babysitting, and lots of bias as a result of personal experience. My views of things like what programming languages are bad or what hardware you should buy to learn on will be expressed directly and bluntly.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/firstgoal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/firstgoal/</guid>
      <description>Chapter 1 - The first goal #  Every journey needs a place to start, and while many may like to start slow I think a head first approach is best. So that&amp;rsquo;s exactly what we&amp;rsquo;re gonna do. The very first thing we&amp;rsquo;re going to do is install a new Operating System (OS) on your computer. This is a pretty involved process. It will require you to Repartition your drive, change settings in your BIOS or UEFI, and install a new Bootloader.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/fixxingissuses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/fixxingissuses/</guid>
      <description>Chapter 12½ - It Was Working Just A Second Ago&amp;hellip; #  Alright, so your code/electronics/computer/life was working fine just a second ago, and now it&amp;rsquo;s just not working at all. Take a deep breath, and relax. Let&amp;rsquo;s work though this.
Grab a rubber duck #  This won&amp;rsquo;t always be applicable, but assuming it&amp;rsquo;s a system- code, or electronics, or a math problem, something that can be analyzed - explain it.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/fosscopyright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/fosscopyright/</guid>
      <description>Chapter 11½ - Open Source, Licenses, and Copyright #  [TODO]
actually contribute on github, make an issue, submit a pull request, make a custom repo,
https://github.com/Marak/faker.js/issues/1046
How to break the Internet: Cory Doctorow at TEDxOxbridge (YouTube)
No, &amp;ldquo;Open Source&amp;rdquo; does not mean &amp;ldquo;Includes Free Support&amp;rdquo; + The update to that post.
Chapter 11¾ - Things That Really Need to Exist #  Better than DuckDuckGo [Drew Devault&amp;rsquo;s Blog]</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/fpga1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/fpga1/</guid>
      <description>Chapter 28 - Let&amp;rsquo;s try out programmable logic #  Before we get started, please be sure you&amp;rsquo;ve read Chapter 24 - Digital Logic  Simulation of an Intel 4004 in TICS (The Integrated Circuit Simulator) a (abandoned?) WIP by Oni, Download the interpreter here, the repo has pleanty of examples.
Something a bit less cool but similar is https://github.com/martinkirsche/wired-logic
 [TODO]
Finite State Machines, VHDL, Verilog, FPGA &amp;amp; CPLD internals</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/funcprog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/funcprog/</guid>
      <description>Chapter 20 - (((())(()((()(())))))) #  [TODO]
Functional Programming, and other paradigms : lisp, haskell, luna-lang.org, ronin</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/game/</guid>
      <description>Chapter 19 - Game Design #  https://www.gameuidatabase.com/index.php
https://www.riotgames.com/en/urf-academy/curriculum-guide
Engines &amp;amp; Frameworks #  Both 2d and 3d #  Godot
Luxe
fine. I&amp;rsquo;ll mention Unity and Unreal, but, like, I hate that the two make up such a huge chunk of the market
Unreal Engine
Unity
2d #  LEd engine - &amp;ldquo;LEd is a modern and open-source 2D level editor, specifically designed for indie devs&amp;rdquo;
OGMO Editor - &amp;ldquo;OGMO Editor is a free, open source 2D level editor built by indie game developers for indie game developers.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/git/</guid>
      <description>Chapter 5½ - Git. #  ./missing-semester - Version Control  The above link does a better job of covering the vast majority of what I&amp;rsquo;d say than I could hope to put here. Just check it out. Bit, an alternative git cli (Github)
learngitbranching.js.org (more than just branching)
μGit- DIY Git in python
[TODO] Show how to setup SSH keys for Git
SSH keys article on the (Arch Wiki)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/guiprog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/guiprog/</guid>
      <description>Chapter 18 - Graphical Programming #  Let&amp;rsquo;s start in a way that&amp;rsquo;s incredibly simple, and abstract away all the hard stuff at first by using a tool kit called &amp;lsquo;Processing&amp;rsquo;, which is available under that name from the community repo in arch. The default IDE that comes with it is awful to work in though, so go ahead and open up VSCode and grab the Processing Language add on, then in VSCode open up a new workspace folder and make a file called processing.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/hamradio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/hamradio/</guid>
      <description>Chapter 35 - Ham Radio #  TODO: https://github.com/jopohl/urh
&amp;lsquo;137Mhz&amp;rsquo; by u/CashewHut LORA
2.4Ghz patch antenna
electronically tunable filters
National Radio Quiet Zone (Wikipedia)
https://newhams.info/2017/02/17/rf-connector-types/
question of the day:
Analog TV is shut down in the US, right? so all the over-the-air TV is digital. And existing analog OTA frequencies are getting repurposed to other uses... so what am I seeing on UHF channel 60? it&amp;#39;s got way more structure than the noise everywhere else.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/hardware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/hardware/</guid>
      <description>Chapter 3 - Into The Hardware #  One of the nifty things about Linux is you don&amp;rsquo;t need to install extra software to check out the deeper parts of your hardware. While on windows you might need a tool like CPU-Z to look at information about the CPU on Linux you can do it out of the box. Let&amp;rsquo;s get started on that then!
The CPU #  These are CPUS or Central Processing Units.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/history/</guid>
      <description>Chapter 36 - History #  BBS and Tildie Sites #  tilde.town: A social network over SSH
Tilde.club
Other Tilde Services?
 https://en.wikipedia.org/wiki/The_Mother_of_All_Demos
Adam Savage&amp;rsquo;s Computer History Collection! (Youtube)
Preserving data #  https://media.ccc.de/v/31c3_-_6373_-_en_-_saal_6_-_201412291600_-_the_only_thing_we_know_about_cyberspace_is_that_its_640x480_-_olia_lialina#t=3641
Preserving hardware #  https://en.wikipedia.org/wiki/Delay_line_memory
http://www.vcfed.org/forum/forum.php
https://skilldrick.github.io/easy6502/</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/howtolearn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/howtolearn/</guid>
      <description>Ⅱ - Learn how to learn #  I&amp;rsquo;m going to keep this short and sweet: Nobody learns (effectively) by being shown what to do. You can watch hundreds of hours of people playing guitar, even explaining how they do it, but you wont be able to randomly pick one up and play if you never have before. Furthermore, as much as you can learn from direct reading and instruction, it has it&amp;rsquo;s place and limits.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/howwework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/howwework/</guid>
      <description>Chapter 5 - Let&amp;rsquo;s work on how we work #  The Terminal #  In the world of programming, embedded development, and electrical debugging you will inevitably need to understand how to use a terminal/command line at some point. While the text only interface can look intimidating, it has some clear advantages. Namely it&amp;rsquo;s significantly faster to use the cli or &amp;lsquo;command line interface&amp;rsquo; version of many tools. Because of the nature of this guide you will be using the terminal frequently, so for convince sake information on using it effectively has been moved to Appendix A, I highly recommend you read though it after you finish this page.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/job/</guid>
      <description>Appendix 4 - Getting a Job in Engineering #  [TODO] literally this entire page is TODO. I&amp;rsquo;m just making it as a place to dump links for now. Eventually I&amp;rsquo;d like to talk about why most interview processes suck, the high no-response rate, certifications vs degree, how to write a résumé, cover letter, start up culture, non-compete clauses, fake glassdoor listings, Linked in BS, all the things.
THIS WILL NOT BE A PLACE TO LINK TO SPECIFIC JOBS.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/languages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/languages/</guid>
      <description>Chapter 13 - Programming Languages #  for (🥚 = 1; 🥚 &amp;lt; 🐔; 🥚++){ //whatever } [TODO] talk about to why there are so many, pros &amp;amp; cons per domain, etc
https://esoteric.codes
Why OO Sucks (Joe Armstrong)
0-based vs. 1-based indexing (Hisham Hm)
Low Level #  C, C++, C#, ???? #  [TODO] - a lot, talk about the varieties and differences of C and C++ and C# and why thery&amp;rsquo;re good and bad, etc.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/latex/</guid>
      <description>Appendix 5 -   \(\LaTeX\)  &amp;amp; Markdown #  Like the kink? #   \(\LaTeX\)  , pronounced Lay-Tech, is a document writing and formatting &amp;lsquo;language&amp;rsquo; that acts pretty different from MS Word. It&amp;rsquo;s primarily used for writing fancy math equations, academic, journal, or conference papers, as such, you might have to use it at some point to conform to one standard or another (like IEEE).
As an example of what  \(\LaTeX\)  formatting looks like, check this equation out:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linuxdirtree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linuxdirtree/</guid>
      <description>Chapter 4 - Back to the Root of Things #  We&amp;rsquo;ve been using file in /proc and /dev throughout this, but we never really looked to see what else is in there. Let&amp;rsquo;s do that.
go ahead and open up a terminal and run
1 2 3 4 5  ╭─vega@lyrae ~ ╰─➤ cd /dev ╭─vega@lyrae /dev ╰─➤ ls [Very, Very Long Output here]   Alright, I know what you&amp;rsquo;re thinking.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/linuxshell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/linuxshell/</guid>
      <description>Appendix 1 - Using the Linux Shell #  ./missing-semester - The Shell
./missing-semester - Shell Tools and Scripting
./missing-semester - Data Wrangling
What The Shell? #  Okay, first question you probably have after I&amp;rsquo;ve been using them interchangebly &amp;lsquo;What is a Shell and is it different from a terminal?&amp;rsquo;
Yes, they&amp;rsquo;re different, but before I talk about the shell it&amp;rsquo;s easier to talk about the Terminal.
The Terminal is a piece of hardware, or, rather was a piece of hardware.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/lowlvl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/lowlvl/</guid>
      <description>Chapter 11 - Low Level Programming #   Ashlyn Black&amp;rsquo;s C Cheat Sheet
Why C? #  This chapter of OpGuides will be mostly C, but, why? Well, there&amp;rsquo;s only really a few options for learning low level programming that make sense to start with. C, C++, Rust are the &amp;lsquo;big three&amp;rsquo; that come to mind for me. C is awesome. It&amp;rsquo;s spec is small, it&amp;rsquo;s been kept minimal, and it&amp;rsquo;s got a ton of tools to help you learn.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/math/</guid>
      <description>Chapter 6 - Math #   The next few chapters are, regrettably, necessary for developing your knack. Math, Physics, and Chemistry and fundamental to all engineering fields and while something about each of the three subjects finds a way to make the 16 year old highschooler in us release a long, exasperated groan. I think this is mostly due to each of these things being taught in a way that takes the fun and interesting parts out and replaces them with trying to learn skills that have largely been outdated by the advent of calculators, computers, and the internet.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/multithread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/multithread/</guid>
      <description>Chapter 17 - We&amp;rsquo;ve got cores, let&amp;rsquo;s use em&#39; #  [TODO]
https://lemire.me/blog/2020/01/30/cost-of-a-thread-in-c-under-linux/
C++ coroutines
not really threading, but process children</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/networking/</guid>
      <description>Chapter 30 - Networking #  [TODO] Add follow along making a network stack
[TODO] https://iximiuz.com/en/posts/computer-networking-101/
Basics #  Nodes
These are all the points in the network. There are terminal nodes and intermediate nodes.
Terminal nodes are things like your phone, laptop, desktop, and other user-facing devices, as well as servers, like would be used for hosting games or websites.
Intermediate nodes, are things that are internal to the network: Things like modems, hubs, switches, routers, etc.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/othersubjects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/othersubjects/</guid>
      <description>Chapter 9 - &amp;lsquo;The Rest&amp;rsquo; #  English #  [TODO] Because the majority of the Internet and most publications are in English
https://www.marginchronicles.com/site/style/index.html
[TODO] conlang critic, Tomscott videos
Finance #  [TODO] because making and engineering are expensive, and you probably want to make money, and spend less money.
Music #  [TODO] Because music is really mathy and can help with thinking about signals
Health #  [TODO] Mental &amp;amp; Physical, because nerds typically suck at this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/pcb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/pcb/</guid>
      <description>Chapter 26 - Let&amp;rsquo;s make our own PCB #  [TODO]
First things first, we&amp;rsquo;re going to be using Kicad, so you&amp;rsquo;ll want to go grab that from the repos. While that&amp;rsquo;s downloading and installing give this a watch to get the basics down:
                                       image/svg+xml     1) Create a project File  New Project  New Project    cheatsheet  2) Eeschema : draw the schematic  Add components : A   Move item1 : M  +   Copy item : C  +   Copy selection :  + Shift      Delete item : Del  +   Delete selection : Shift    Ctrl   + +   Rotate item : R  +   Mirror item : Y  + X  /   Add wires : W   Edit properties : E   Add power symbols : P   Add no-connect : Q   Add text : T   Add labels : L   List of shortcuts : ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/physics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/physics/</guid>
      <description>Chapter 7 - Physics #  This is still a dumping ground for things I want to write about later, nothing of substance is here yet, sorry about that ╮(─▽─)╭ [TODO] speed vs Velocity vs Acceleration, clasicall vs realative
Radiocarbon dating (Wikipedia)
Cosmic Microwave Background (Wikipedia)
Natural nuclear fission reactor (Wikipedia)
How Kodak Exposed The Atomic Bomb (YouTube, Veritasium)
Seeing the invisible: Event displays in particle physics
Building a Vortex Tube (This Old Tony, YouTube)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/privacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/privacy/</guid>
      <description>Chapter 33½ - Your Guide to Privacy #  &#34;Arguing that you don&#39;t care about the right to privacy because you have nothing to hide is no different than saying you don&#39;t care about free speech because you have nothing to say.&#34;
- Edward Snowden, in his Reddit AMA  Privacy online is a joke. No matter what you do, you&amp;rsquo;re still going to be tracked so much that advertisers and the big tech companies (Facebook, Google, Microsoft, etc.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/resources/</guid>
      <description>Appendix 3 - Other Great Resources #  Conventions #  https://www.emfcamp.org
https://media.ccc.de/
    News Sites #  Serializer.io (Aggregate of Hacker News, Ars, Reddit, Macrumors, and Lobste.rs )
Hacker News
Hackaday
Slashdot
 Snopzu
https://n-o-d-e.news/
   Forums #  https://lobste.rs/
https://stackoverflow.com/
   http://textfiles.com/
https://glitch.com/
 Learning Linux #  https://linuxjourney.com
 Youtube #  ElectroBoom
CNLohr
N-O-D-E
LiveOverflow
Tom Scott
 bigclive</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/security/</guid>
      <description>Chapter 33 - Security &amp;amp; Exploitation #  I&amp;rsquo;m going to assume at least some prior knowledge here, if you want a quick intro, I recommend going through ./missing-semester-Security so that we can all be on the same page.  Often when we think about Exploitation, better known as hacking, we conjure images of a more-punk-than-cyber cyberpunk person clicking away wildly on a keyboard as code flies by, like the 1995 movie, Hackers, and to some extent this isn&amp;rsquo;t wrong, as one look around the floor at DefCon, will show you.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/servers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/servers/</guid>
      <description>Chapter 31 - Servers! #  First of all, let&amp;rsquo;s demystify the servers, they are not something to be afraid of &amp;hellip; they are just normal computers that execute processes, the main difference is that these computers do not have a direct interface, that is: there is no need for them to have peripherals (most of the time) since they only SERVE resources for other needs.
A good example of a server is this one, in which you are reading this, the only function of the server where this content is hosted is to provide it, nothing more and nothing less.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/units/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/units/</guid>
      <description>Chapter 6½ - Units #   [TODO] - weird units coming up: moles, ferads, light years, pascals, radians+, electron mass, big/small metric units, flops, decades, etc.
Should probably have a metric table too (nano = 10^-9 etc.)
  By 42CrMo4 and Christoph Päper English units of Length, CC BY-SA 4.0   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://opguides.info/engineering/wrappingup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opguides.info/engineering/wrappingup/</guid>
      <description>Chapter 37 - Where To Go Frome Here? #  Hey, so, you made it. I can&amp;rsquo;t give you a degree. But, I&amp;rsquo;m proud of you. Even if you skipped a chapter or two, you still put in work to improve yourself and learn something. That&amp;rsquo;s cool.
But, maybe you thinking &amp;ldquo;Okay, but now what?&amp;quot;
Integrating other interests #  There&amp;rsquo;s a lot more to life than computers and code and electronics and making and hacking.</description>
    </item>
    
  </channel>
</rss>
